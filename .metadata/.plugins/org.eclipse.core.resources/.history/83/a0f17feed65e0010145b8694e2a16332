/*
 * mpu6050_lib.h
 *
 *  Created on: Jul 11, 2025
 *      Author: Robert Chu
 */

#ifndef INC_MPU6050_LIB_H_

#include "stm32f1xx_hal.h" //I2C_HandleTypeDef
#include <stdint.h> //uint16_t

//for I2C
#define MPU6050_ADDR_LSL1	0xD0


//typedefs
typedef float float32_t; //arm_math.h also defines float32_t as this

typedef struct
{ //struct to extract and organize sensor readings. Interestingly enough, having the struct seems to make code
//faster because these variables are in contiguous blocks of memory.

	//buffers to extract data from sensor with i2c interface
	uint8_t accel_x_buf[2]; //extracting data without FIFO to compare results with FIFO
	uint8_t accel_y_buf[2];
	uint8_t accel_z_buf[2];
	uint8_t gyro_x_buf[2];
	uint8_t gyro_y_buf[2];
	uint8_t gyro_z_buf[2];

	//raw data from mpu6050 sensor, every 4096 counts is 1g when using +/- 8g mode (which we are using for this project in particular).
	int16_t accel_x;
	int16_t accel_y;
	int16_t accel_z;
	int16_t gyro_x;
	int16_t gyro_y;
	int16_t gyro_z;

	//processed data calculated from raw values, not as accurate as the kalman_angle from kalman filter
	float32_t yaw; //euler angles in degrees
	float32_t pitch;
	float32_t roll;

	float32_t wx; //angular velocities
	float32_t wy;
	float32_t wz;
} mpu6050_sensor_data;


//function prototypes
HAL_StatusTypeDef i2c_Write_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t MemAddress, uint8_t *pData, uint16_t len); // <-- Add this line here
HAL_StatusTypeDef i2c_Read_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t *pData, uint16_t len);

//functions that communicate to the physical sensor using i2c interface
void mpu6050_init(I2C_HandleTypeDef *hi2c);
void mpu6050_get_raw_measurements(I2C_HandleTypeDef *hi2c, mpu6050_sensor_data *sensor_data);

//functions that modify sensor_data instances
void sensor_data_init(mpu6050_sensor_data *sensor_data); //sets yaw, pitch, roll to 0, 0, 0

//private variables
extern uint8_t i2c_RX_done = 0;
extern uint8_t i2c_TX_done = 0;
extern uint8_t data_ready = 0; //accelerometer data ready interrupt

extern uint8_t receive_buffer[20]; //received message buffer, randomly used


#define INC_MPU6050_LIB_H_

#endif /* INC_MPU6050_LIB_H_ */

