
freeRTOS_led_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000436c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800447c  0800447c  0000547c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004518  08004518  00006060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004518  08004518  00006060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004518  08004518  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004518  08004518  00005518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800451c  0800451c  0000551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004520  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b98  20000060  08004580  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bf8  08004580  00006bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c3b  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd3  00000000  00000000  00018cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001b998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d54  00000000  00000000  0001cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b03  00000000  00000000  0001d83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121a4  00000000  00000000  0002033f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009200f  00000000  00000000  000324e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c44f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b18  00000000  00000000  000c4538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000c9050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004464 	.word	0x08004464

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004464 	.word	0x08004464

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 f9e2 	bl	800051c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f824 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f85e 	bl	800021c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000160:	f001 fb52 	bl	8001808 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LEDC13 */
  LEDC13Handle = osThreadNew(StartLEDC13, NULL, &LEDC13_attributes);
 8000164:	4a09      	ldr	r2, [pc, #36]	@ (800018c <main+0x3c>)
 8000166:	2100      	movs	r1, #0
 8000168:	4809      	ldr	r0, [pc, #36]	@ (8000190 <main+0x40>)
 800016a:	f001 fb95 	bl	8001898 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a08      	ldr	r2, [pc, #32]	@ (8000194 <main+0x44>)
 8000172:	6013      	str	r3, [r2, #0]

  /* creation of LEDC14 */
  LEDC14Handle = osThreadNew(StartLEDC14, NULL, &LEDC14_attributes);
 8000174:	4a08      	ldr	r2, [pc, #32]	@ (8000198 <main+0x48>)
 8000176:	2100      	movs	r1, #0
 8000178:	4808      	ldr	r0, [pc, #32]	@ (800019c <main+0x4c>)
 800017a:	f001 fb8d 	bl	8001898 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a07      	ldr	r2, [pc, #28]	@ (80001a0 <main+0x50>)
 8000182:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000184:	f001 fb62 	bl	800184c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000188:	bf00      	nop
 800018a:	e7fd      	b.n	8000188 <main+0x38>
 800018c:	080044a4 	.word	0x080044a4
 8000190:	0800029d 	.word	0x0800029d
 8000194:	2000007c 	.word	0x2000007c
 8000198:	080044c8 	.word	0x080044c8
 800019c:	080002bd 	.word	0x080002bd
 80001a0:	20000080 	.word	0x20000080

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b090      	sub	sp, #64	@ 0x40
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0318 	add.w	r3, r7, #24
 80001ae:	2228      	movs	r2, #40	@ 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f004 f868 	bl	8004288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	2200      	movs	r2, #0
 80001bc:	601a      	str	r2, [r3, #0]
 80001be:	605a      	str	r2, [r3, #4]
 80001c0:	609a      	str	r2, [r3, #8]
 80001c2:	60da      	str	r2, [r3, #12]
 80001c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001c6:	2302      	movs	r3, #2
 80001c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ca:	2301      	movs	r3, #1
 80001cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ce:	2310      	movs	r3, #16
 80001d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001d2:	2300      	movs	r3, #0
 80001d4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 fc66 	bl	8000aac <HAL_RCC_OscConfig>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001e6:	f000 f88d 	bl	8000304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ea:	230f      	movs	r3, #15
 80001ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f000 fed4 	bl	8000fb0 <HAL_RCC_ClockConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800020e:	f000 f879 	bl	8000304 <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3740      	adds	r7, #64	@ 0x40
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000222:	f107 0308 	add.w	r3, r7, #8
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000230:	4b18      	ldr	r3, [pc, #96]	@ (8000294 <MX_GPIO_Init+0x78>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a17      	ldr	r2, [pc, #92]	@ (8000294 <MX_GPIO_Init+0x78>)
 8000236:	f043 0310 	orr.w	r3, r3, #16
 800023a:	6193      	str	r3, [r2, #24]
 800023c:	4b15      	ldr	r3, [pc, #84]	@ (8000294 <MX_GPIO_Init+0x78>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	f003 0310 	and.w	r3, r3, #16
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000248:	4b12      	ldr	r3, [pc, #72]	@ (8000294 <MX_GPIO_Init+0x78>)
 800024a:	699b      	ldr	r3, [r3, #24]
 800024c:	4a11      	ldr	r2, [pc, #68]	@ (8000294 <MX_GPIO_Init+0x78>)
 800024e:	f043 0304 	orr.w	r3, r3, #4
 8000252:	6193      	str	r3, [r2, #24]
 8000254:	4b0f      	ldr	r3, [pc, #60]	@ (8000294 <MX_GPIO_Init+0x78>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	f003 0304 	and.w	r3, r3, #4
 800025c:	603b      	str	r3, [r7, #0]
 800025e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000266:	480c      	ldr	r0, [pc, #48]	@ (8000298 <MX_GPIO_Init+0x7c>)
 8000268:	f000 fbee 	bl	8000a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800026c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000270:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000272:	2301      	movs	r3, #1
 8000274:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000276:	2300      	movs	r3, #0
 8000278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027a:	2302      	movs	r3, #2
 800027c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800027e:	f107 0308 	add.w	r3, r7, #8
 8000282:	4619      	mov	r1, r3
 8000284:	4804      	ldr	r0, [pc, #16]	@ (8000298 <MX_GPIO_Init+0x7c>)
 8000286:	f000 fa5b 	bl	8000740 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800028a:	bf00      	nop
 800028c:	3718      	adds	r7, #24
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000
 8000298:	40011000 	.word	0x40011000

0800029c <StartLEDC13>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLEDC13 */
void StartLEDC13(void *argument)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002a8:	4803      	ldr	r0, [pc, #12]	@ (80002b8 <StartLEDC13+0x1c>)
 80002aa:	f000 fbe5 	bl	8000a78 <HAL_GPIO_TogglePin>
		osDelay(200);
 80002ae:	20c8      	movs	r0, #200	@ 0xc8
 80002b0:	f001 fb84 	bl	80019bc <osDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002b4:	bf00      	nop
 80002b6:	e7f5      	b.n	80002a4 <StartLEDC13+0x8>
 80002b8:	40011000 	.word	0x40011000

080002bc <StartLEDC14>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLEDC14 */
void StartLEDC14(void *argument)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDC14 */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 80002c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002c8:	4804      	ldr	r0, [pc, #16]	@ (80002dc <StartLEDC14+0x20>)
 80002ca:	f000 fbd5 	bl	8000a78 <HAL_GPIO_TogglePin>
		osDelay(400);
 80002ce:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80002d2:	f001 fb73 	bl	80019bc <osDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 80002d6:	bf00      	nop
 80002d8:	e7f4      	b.n	80002c4 <StartLEDC14+0x8>
 80002da:	bf00      	nop
 80002dc:	40011000 	.word	0x40011000

080002e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a04      	ldr	r2, [pc, #16]	@ (8000300 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d101      	bne.n	80002f6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80002f2:	f000 f929 	bl	8000548 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002f6:	bf00      	nop
 80002f8:	3708      	adds	r7, #8
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	40000800 	.word	0x40000800

08000304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000308:	b672      	cpsid	i
}
 800030a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800030c:	bf00      	nop
 800030e:	e7fd      	b.n	800030c <Error_Handler+0x8>

08000310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000316:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <HAL_MspInit+0x68>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	4a17      	ldr	r2, [pc, #92]	@ (8000378 <HAL_MspInit+0x68>)
 800031c:	f043 0301 	orr.w	r3, r3, #1
 8000320:	6193      	str	r3, [r2, #24]
 8000322:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <HAL_MspInit+0x68>)
 8000324:	699b      	ldr	r3, [r3, #24]
 8000326:	f003 0301 	and.w	r3, r3, #1
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800032e:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <HAL_MspInit+0x68>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	4a11      	ldr	r2, [pc, #68]	@ (8000378 <HAL_MspInit+0x68>)
 8000334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000338:	61d3      	str	r3, [r2, #28]
 800033a:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <HAL_MspInit+0x68>)
 800033c:	69db      	ldr	r3, [r3, #28]
 800033e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000346:	2200      	movs	r2, #0
 8000348:	210f      	movs	r1, #15
 800034a:	f06f 0001 	mvn.w	r0, #1
 800034e:	f000 f9cc 	bl	80006ea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000352:	4b0a      	ldr	r3, [pc, #40]	@ (800037c <HAL_MspInit+0x6c>)
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	4a04      	ldr	r2, [pc, #16]	@ (800037c <HAL_MspInit+0x6c>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800036e:	bf00      	nop
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40010000 	.word	0x40010000

08000380 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08e      	sub	sp, #56	@ 0x38
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000388:	2300      	movs	r3, #0
 800038a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800038c:	2300      	movs	r3, #0
 800038e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000390:	2300      	movs	r3, #0
 8000392:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000396:	4b34      	ldr	r3, [pc, #208]	@ (8000468 <HAL_InitTick+0xe8>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	4a33      	ldr	r2, [pc, #204]	@ (8000468 <HAL_InitTick+0xe8>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	61d3      	str	r3, [r2, #28]
 80003a2:	4b31      	ldr	r3, [pc, #196]	@ (8000468 <HAL_InitTick+0xe8>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	f003 0304 	and.w	r3, r3, #4
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003ae:	f107 0210 	add.w	r2, r7, #16
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	4611      	mov	r1, r2
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 ff55 	bl	8001268 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80003be:	6a3b      	ldr	r3, [r7, #32]
 80003c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80003c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d103      	bne.n	80003d0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80003c8:	f000 ff3a 	bl	8001240 <HAL_RCC_GetPCLK1Freq>
 80003cc:	6378      	str	r0, [r7, #52]	@ 0x34
 80003ce:	e004      	b.n	80003da <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80003d0:	f000 ff36 	bl	8001240 <HAL_RCC_GetPCLK1Freq>
 80003d4:	4603      	mov	r3, r0
 80003d6:	005b      	lsls	r3, r3, #1
 80003d8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80003da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80003dc:	4a23      	ldr	r2, [pc, #140]	@ (800046c <HAL_InitTick+0xec>)
 80003de:	fba2 2303 	umull	r2, r3, r2, r3
 80003e2:	0c9b      	lsrs	r3, r3, #18
 80003e4:	3b01      	subs	r3, #1
 80003e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80003e8:	4b21      	ldr	r3, [pc, #132]	@ (8000470 <HAL_InitTick+0xf0>)
 80003ea:	4a22      	ldr	r2, [pc, #136]	@ (8000474 <HAL_InitTick+0xf4>)
 80003ec:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80003ee:	4b20      	ldr	r3, [pc, #128]	@ (8000470 <HAL_InitTick+0xf0>)
 80003f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80003f4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80003f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000470 <HAL_InitTick+0xf0>)
 80003f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003fa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80003fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000470 <HAL_InitTick+0xf0>)
 80003fe:	2200      	movs	r2, #0
 8000400:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000402:	4b1b      	ldr	r3, [pc, #108]	@ (8000470 <HAL_InitTick+0xf0>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000408:	4b19      	ldr	r3, [pc, #100]	@ (8000470 <HAL_InitTick+0xf0>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800040e:	4818      	ldr	r0, [pc, #96]	@ (8000470 <HAL_InitTick+0xf0>)
 8000410:	f000 ff78 	bl	8001304 <HAL_TIM_Base_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800041a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800041e:	2b00      	cmp	r3, #0
 8000420:	d11b      	bne.n	800045a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000422:	4813      	ldr	r0, [pc, #76]	@ (8000470 <HAL_InitTick+0xf0>)
 8000424:	f000 ffc6 	bl	80013b4 <HAL_TIM_Base_Start_IT>
 8000428:	4603      	mov	r3, r0
 800042a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800042e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000432:	2b00      	cmp	r3, #0
 8000434:	d111      	bne.n	800045a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000436:	201e      	movs	r0, #30
 8000438:	f000 f973 	bl	8000722 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2b0f      	cmp	r3, #15
 8000440:	d808      	bhi.n	8000454 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000442:	2200      	movs	r2, #0
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	201e      	movs	r0, #30
 8000448:	f000 f94f 	bl	80006ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800044c:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <HAL_InitTick+0xf8>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6013      	str	r3, [r2, #0]
 8000452:	e002      	b.n	800045a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000454:	2301      	movs	r3, #1
 8000456:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800045a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800045e:	4618      	mov	r0, r3
 8000460:	3738      	adds	r7, #56	@ 0x38
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000
 800046c:	431bde83 	.word	0x431bde83
 8000470:	20000084 	.word	0x20000084
 8000474:	40000800 	.word	0x40000800
 8000478:	20000004 	.word	0x20000004

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <NMI_Handler+0x4>

08000484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <HardFault_Handler+0x4>

0800048c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <MemManage_Handler+0x4>

08000494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <BusFault_Handler+0x4>

0800049c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <UsageFault_Handler+0x4>

080004a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bc80      	pop	{r7}
 80004ae:	4770      	bx	lr

080004b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80004b4:	4802      	ldr	r0, [pc, #8]	@ (80004c0 <TIM4_IRQHandler+0x10>)
 80004b6:	f000 ffcf 	bl	8001458 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	20000084 	.word	0x20000084

080004c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004d0:	f7ff fff8 	bl	80004c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d4:	480b      	ldr	r0, [pc, #44]	@ (8000504 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004d6:	490c      	ldr	r1, [pc, #48]	@ (8000508 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004d8:	4a0c      	ldr	r2, [pc, #48]	@ (800050c <LoopFillZerobss+0x16>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004dc:	e002      	b.n	80004e4 <LoopCopyDataInit>

080004de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e2:	3304      	adds	r3, #4

080004e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e8:	d3f9      	bcc.n	80004de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ea:	4a09      	ldr	r2, [pc, #36]	@ (8000510 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004ec:	4c09      	ldr	r4, [pc, #36]	@ (8000514 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f0:	e001      	b.n	80004f6 <LoopFillZerobss>

080004f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f4:	3204      	adds	r2, #4

080004f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f8:	d3fb      	bcc.n	80004f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004fa:	f003 ff2b 	bl	8004354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fe:	f7ff fe27 	bl	8000150 <main>
  bx lr
 8000502:	4770      	bx	lr
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000508:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800050c:	08004520 	.word	0x08004520
  ldr r2, =_sbss
 8000510:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000514:	20001bf8 	.word	0x20001bf8

08000518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC1_2_IRQHandler>
	...

0800051c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <HAL_Init+0x28>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	@ (8000544 <HAL_Init+0x28>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f8d1 	bl	80006d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	200f      	movs	r0, #15
 8000534:	f7ff ff24 	bl	8000380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f7ff feea 	bl	8000310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40022000 	.word	0x40022000

08000548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <HAL_IncTick+0x1c>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	4b05      	ldr	r3, [pc, #20]	@ (8000568 <HAL_IncTick+0x20>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4413      	add	r3, r2
 8000558:	4a03      	ldr	r2, [pc, #12]	@ (8000568 <HAL_IncTick+0x20>)
 800055a:	6013      	str	r3, [r2, #0]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	20000008 	.word	0x20000008
 8000568:	200000cc 	.word	0x200000cc

0800056c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  return uwTick;
 8000570:	4b02      	ldr	r3, [pc, #8]	@ (800057c <HAL_GetTick+0x10>)
 8000572:	681b      	ldr	r3, [r3, #0]
}
 8000574:	4618      	mov	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	200000cc 	.word	0x200000cc

08000580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f003 0307 	and.w	r3, r3, #7
 800058e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000590:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800059c:	4013      	ands	r3, r2
 800059e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005b2:	4a04      	ldr	r2, [pc, #16]	@ (80005c4 <__NVIC_SetPriorityGrouping+0x44>)
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	60d3      	str	r3, [r2, #12]
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005cc:	4b04      	ldr	r3, [pc, #16]	@ (80005e0 <__NVIC_GetPriorityGrouping+0x18>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	f003 0307 	and.w	r3, r3, #7
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	e000ed00 	.word	0xe000ed00

080005e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	db0b      	blt.n	800060e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f003 021f 	and.w	r2, r3, #31
 80005fc:	4906      	ldr	r1, [pc, #24]	@ (8000618 <__NVIC_EnableIRQ+0x34>)
 80005fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000602:	095b      	lsrs	r3, r3, #5
 8000604:	2001      	movs	r0, #1
 8000606:	fa00 f202 	lsl.w	r2, r0, r2
 800060a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	e000e100 	.word	0xe000e100

0800061c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	6039      	str	r1, [r7, #0]
 8000626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062c:	2b00      	cmp	r3, #0
 800062e:	db0a      	blt.n	8000646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	b2da      	uxtb	r2, r3
 8000634:	490c      	ldr	r1, [pc, #48]	@ (8000668 <__NVIC_SetPriority+0x4c>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	0112      	lsls	r2, r2, #4
 800063c:	b2d2      	uxtb	r2, r2
 800063e:	440b      	add	r3, r1
 8000640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000644:	e00a      	b.n	800065c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4908      	ldr	r1, [pc, #32]	@ (800066c <__NVIC_SetPriority+0x50>)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	3b04      	subs	r3, #4
 8000654:	0112      	lsls	r2, r2, #4
 8000656:	b2d2      	uxtb	r2, r2
 8000658:	440b      	add	r3, r1
 800065a:	761a      	strb	r2, [r3, #24]
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e100 	.word	0xe000e100
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000670:	b480      	push	{r7}
 8000672:	b089      	sub	sp, #36	@ 0x24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	f1c3 0307 	rsb	r3, r3, #7
 800068a:	2b04      	cmp	r3, #4
 800068c:	bf28      	it	cs
 800068e:	2304      	movcs	r3, #4
 8000690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	3304      	adds	r3, #4
 8000696:	2b06      	cmp	r3, #6
 8000698:	d902      	bls.n	80006a0 <NVIC_EncodePriority+0x30>
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	3b03      	subs	r3, #3
 800069e:	e000      	b.n	80006a2 <NVIC_EncodePriority+0x32>
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	f04f 32ff 	mov.w	r2, #4294967295
 80006a8:	69bb      	ldr	r3, [r7, #24]
 80006aa:	fa02 f303 	lsl.w	r3, r2, r3
 80006ae:	43da      	mvns	r2, r3
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	401a      	ands	r2, r3
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b8:	f04f 31ff 	mov.w	r1, #4294967295
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	43d9      	mvns	r1, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c8:	4313      	orrs	r3, r2
         );
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3724      	adds	r7, #36	@ 0x24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff ff4f 	bl	8000580 <__NVIC_SetPriorityGrouping>
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b086      	sub	sp, #24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	4603      	mov	r3, r0
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
 80006f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006fc:	f7ff ff64 	bl	80005c8 <__NVIC_GetPriorityGrouping>
 8000700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	68b9      	ldr	r1, [r7, #8]
 8000706:	6978      	ldr	r0, [r7, #20]
 8000708:	f7ff ffb2 	bl	8000670 <NVIC_EncodePriority>
 800070c:	4602      	mov	r2, r0
 800070e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000712:	4611      	mov	r1, r2
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff81 	bl	800061c <__NVIC_SetPriority>
}
 800071a:	bf00      	nop
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	4603      	mov	r3, r0
 800072a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800072c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff ff57 	bl	80005e4 <__NVIC_EnableIRQ>
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000740:	b480      	push	{r7}
 8000742:	b08b      	sub	sp, #44	@ 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800074e:	2300      	movs	r3, #0
 8000750:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000752:	e169      	b.n	8000a28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000754:	2201      	movs	r2, #1
 8000756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000758:	fa02 f303 	lsl.w	r3, r2, r3
 800075c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	69fa      	ldr	r2, [r7, #28]
 8000764:	4013      	ands	r3, r2
 8000766:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000768:	69ba      	ldr	r2, [r7, #24]
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	429a      	cmp	r2, r3
 800076e:	f040 8158 	bne.w	8000a22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	4a9a      	ldr	r2, [pc, #616]	@ (80009e0 <HAL_GPIO_Init+0x2a0>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d05e      	beq.n	800083a <HAL_GPIO_Init+0xfa>
 800077c:	4a98      	ldr	r2, [pc, #608]	@ (80009e0 <HAL_GPIO_Init+0x2a0>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d875      	bhi.n	800086e <HAL_GPIO_Init+0x12e>
 8000782:	4a98      	ldr	r2, [pc, #608]	@ (80009e4 <HAL_GPIO_Init+0x2a4>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d058      	beq.n	800083a <HAL_GPIO_Init+0xfa>
 8000788:	4a96      	ldr	r2, [pc, #600]	@ (80009e4 <HAL_GPIO_Init+0x2a4>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d86f      	bhi.n	800086e <HAL_GPIO_Init+0x12e>
 800078e:	4a96      	ldr	r2, [pc, #600]	@ (80009e8 <HAL_GPIO_Init+0x2a8>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d052      	beq.n	800083a <HAL_GPIO_Init+0xfa>
 8000794:	4a94      	ldr	r2, [pc, #592]	@ (80009e8 <HAL_GPIO_Init+0x2a8>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d869      	bhi.n	800086e <HAL_GPIO_Init+0x12e>
 800079a:	4a94      	ldr	r2, [pc, #592]	@ (80009ec <HAL_GPIO_Init+0x2ac>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d04c      	beq.n	800083a <HAL_GPIO_Init+0xfa>
 80007a0:	4a92      	ldr	r2, [pc, #584]	@ (80009ec <HAL_GPIO_Init+0x2ac>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d863      	bhi.n	800086e <HAL_GPIO_Init+0x12e>
 80007a6:	4a92      	ldr	r2, [pc, #584]	@ (80009f0 <HAL_GPIO_Init+0x2b0>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d046      	beq.n	800083a <HAL_GPIO_Init+0xfa>
 80007ac:	4a90      	ldr	r2, [pc, #576]	@ (80009f0 <HAL_GPIO_Init+0x2b0>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d85d      	bhi.n	800086e <HAL_GPIO_Init+0x12e>
 80007b2:	2b12      	cmp	r3, #18
 80007b4:	d82a      	bhi.n	800080c <HAL_GPIO_Init+0xcc>
 80007b6:	2b12      	cmp	r3, #18
 80007b8:	d859      	bhi.n	800086e <HAL_GPIO_Init+0x12e>
 80007ba:	a201      	add	r2, pc, #4	@ (adr r2, 80007c0 <HAL_GPIO_Init+0x80>)
 80007bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c0:	0800083b 	.word	0x0800083b
 80007c4:	08000815 	.word	0x08000815
 80007c8:	08000827 	.word	0x08000827
 80007cc:	08000869 	.word	0x08000869
 80007d0:	0800086f 	.word	0x0800086f
 80007d4:	0800086f 	.word	0x0800086f
 80007d8:	0800086f 	.word	0x0800086f
 80007dc:	0800086f 	.word	0x0800086f
 80007e0:	0800086f 	.word	0x0800086f
 80007e4:	0800086f 	.word	0x0800086f
 80007e8:	0800086f 	.word	0x0800086f
 80007ec:	0800086f 	.word	0x0800086f
 80007f0:	0800086f 	.word	0x0800086f
 80007f4:	0800086f 	.word	0x0800086f
 80007f8:	0800086f 	.word	0x0800086f
 80007fc:	0800086f 	.word	0x0800086f
 8000800:	0800086f 	.word	0x0800086f
 8000804:	0800081d 	.word	0x0800081d
 8000808:	08000831 	.word	0x08000831
 800080c:	4a79      	ldr	r2, [pc, #484]	@ (80009f4 <HAL_GPIO_Init+0x2b4>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d013      	beq.n	800083a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000812:	e02c      	b.n	800086e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	623b      	str	r3, [r7, #32]
          break;
 800081a:	e029      	b.n	8000870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	3304      	adds	r3, #4
 8000822:	623b      	str	r3, [r7, #32]
          break;
 8000824:	e024      	b.n	8000870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	3308      	adds	r3, #8
 800082c:	623b      	str	r3, [r7, #32]
          break;
 800082e:	e01f      	b.n	8000870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	330c      	adds	r3, #12
 8000836:	623b      	str	r3, [r7, #32]
          break;
 8000838:	e01a      	b.n	8000870 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d102      	bne.n	8000848 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000842:	2304      	movs	r3, #4
 8000844:	623b      	str	r3, [r7, #32]
          break;
 8000846:	e013      	b.n	8000870 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d105      	bne.n	800085c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000850:	2308      	movs	r3, #8
 8000852:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	69fa      	ldr	r2, [r7, #28]
 8000858:	611a      	str	r2, [r3, #16]
          break;
 800085a:	e009      	b.n	8000870 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800085c:	2308      	movs	r3, #8
 800085e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	69fa      	ldr	r2, [r7, #28]
 8000864:	615a      	str	r2, [r3, #20]
          break;
 8000866:	e003      	b.n	8000870 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
          break;
 800086c:	e000      	b.n	8000870 <HAL_GPIO_Init+0x130>
          break;
 800086e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	2bff      	cmp	r3, #255	@ 0xff
 8000874:	d801      	bhi.n	800087a <HAL_GPIO_Init+0x13a>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	e001      	b.n	800087e <HAL_GPIO_Init+0x13e>
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3304      	adds	r3, #4
 800087e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	2bff      	cmp	r3, #255	@ 0xff
 8000884:	d802      	bhi.n	800088c <HAL_GPIO_Init+0x14c>
 8000886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	e002      	b.n	8000892 <HAL_GPIO_Init+0x152>
 800088c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800088e:	3b08      	subs	r3, #8
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	210f      	movs	r1, #15
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	fa01 f303 	lsl.w	r3, r1, r3
 80008a0:	43db      	mvns	r3, r3
 80008a2:	401a      	ands	r2, r3
 80008a4:	6a39      	ldr	r1, [r7, #32]
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ac:	431a      	orrs	r2, r3
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	f000 80b1 	beq.w	8000a22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008c0:	4b4d      	ldr	r3, [pc, #308]	@ (80009f8 <HAL_GPIO_Init+0x2b8>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a4c      	ldr	r2, [pc, #304]	@ (80009f8 <HAL_GPIO_Init+0x2b8>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b4a      	ldr	r3, [pc, #296]	@ (80009f8 <HAL_GPIO_Init+0x2b8>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
 80008d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008d8:	4a48      	ldr	r2, [pc, #288]	@ (80009fc <HAL_GPIO_Init+0x2bc>)
 80008da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008dc:	089b      	lsrs	r3, r3, #2
 80008de:	3302      	adds	r3, #2
 80008e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e8:	f003 0303 	and.w	r3, r3, #3
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	220f      	movs	r2, #15
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	4013      	ands	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a40      	ldr	r2, [pc, #256]	@ (8000a00 <HAL_GPIO_Init+0x2c0>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d013      	beq.n	800092c <HAL_GPIO_Init+0x1ec>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	4a3f      	ldr	r2, [pc, #252]	@ (8000a04 <HAL_GPIO_Init+0x2c4>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d00d      	beq.n	8000928 <HAL_GPIO_Init+0x1e8>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a3e      	ldr	r2, [pc, #248]	@ (8000a08 <HAL_GPIO_Init+0x2c8>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d007      	beq.n	8000924 <HAL_GPIO_Init+0x1e4>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a3d      	ldr	r2, [pc, #244]	@ (8000a0c <HAL_GPIO_Init+0x2cc>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d101      	bne.n	8000920 <HAL_GPIO_Init+0x1e0>
 800091c:	2303      	movs	r3, #3
 800091e:	e006      	b.n	800092e <HAL_GPIO_Init+0x1ee>
 8000920:	2304      	movs	r3, #4
 8000922:	e004      	b.n	800092e <HAL_GPIO_Init+0x1ee>
 8000924:	2302      	movs	r3, #2
 8000926:	e002      	b.n	800092e <HAL_GPIO_Init+0x1ee>
 8000928:	2301      	movs	r3, #1
 800092a:	e000      	b.n	800092e <HAL_GPIO_Init+0x1ee>
 800092c:	2300      	movs	r3, #0
 800092e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000930:	f002 0203 	and.w	r2, r2, #3
 8000934:	0092      	lsls	r2, r2, #2
 8000936:	4093      	lsls	r3, r2
 8000938:	68fa      	ldr	r2, [r7, #12]
 800093a:	4313      	orrs	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800093e:	492f      	ldr	r1, [pc, #188]	@ (80009fc <HAL_GPIO_Init+0x2bc>)
 8000940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000942:	089b      	lsrs	r3, r3, #2
 8000944:	3302      	adds	r3, #2
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000954:	2b00      	cmp	r3, #0
 8000956:	d006      	beq.n	8000966 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000958:	4b2d      	ldr	r3, [pc, #180]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	492c      	ldr	r1, [pc, #176]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	4313      	orrs	r3, r2
 8000962:	608b      	str	r3, [r1, #8]
 8000964:	e006      	b.n	8000974 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000966:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 8000968:	689a      	ldr	r2, [r3, #8]
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	43db      	mvns	r3, r3
 800096e:	4928      	ldr	r1, [pc, #160]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 8000970:	4013      	ands	r3, r2
 8000972:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800097c:	2b00      	cmp	r3, #0
 800097e:	d006      	beq.n	800098e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000980:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	4922      	ldr	r1, [pc, #136]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	4313      	orrs	r3, r2
 800098a:	60cb      	str	r3, [r1, #12]
 800098c:	e006      	b.n	800099c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800098e:	4b20      	ldr	r3, [pc, #128]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 8000990:	68da      	ldr	r2, [r3, #12]
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	43db      	mvns	r3, r3
 8000996:	491e      	ldr	r1, [pc, #120]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 8000998:	4013      	ands	r3, r2
 800099a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d006      	beq.n	80009b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009a8:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	4918      	ldr	r1, [pc, #96]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	604b      	str	r3, [r1, #4]
 80009b4:	e006      	b.n	80009c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009b6:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	43db      	mvns	r3, r3
 80009be:	4914      	ldr	r1, [pc, #80]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 80009c0:	4013      	ands	r3, r2
 80009c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d021      	beq.n	8000a14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	490e      	ldr	r1, [pc, #56]	@ (8000a10 <HAL_GPIO_Init+0x2d0>)
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	600b      	str	r3, [r1, #0]
 80009dc:	e021      	b.n	8000a22 <HAL_GPIO_Init+0x2e2>
 80009de:	bf00      	nop
 80009e0:	10320000 	.word	0x10320000
 80009e4:	10310000 	.word	0x10310000
 80009e8:	10220000 	.word	0x10220000
 80009ec:	10210000 	.word	0x10210000
 80009f0:	10120000 	.word	0x10120000
 80009f4:	10110000 	.word	0x10110000
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010000 	.word	0x40010000
 8000a00:	40010800 	.word	0x40010800
 8000a04:	40010c00 	.word	0x40010c00
 8000a08:	40011000 	.word	0x40011000
 8000a0c:	40011400 	.word	0x40011400
 8000a10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a14:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <HAL_GPIO_Init+0x304>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	4909      	ldr	r1, [pc, #36]	@ (8000a44 <HAL_GPIO_Init+0x304>)
 8000a1e:	4013      	ands	r3, r2
 8000a20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	3301      	adds	r3, #1
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f47f ae8e 	bne.w	8000754 <HAL_GPIO_Init+0x14>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	372c      	adds	r7, #44	@ 0x2c
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	40010400 	.word	0x40010400

08000a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	807b      	strh	r3, [r7, #2]
 8000a54:	4613      	mov	r3, r2
 8000a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a58:	787b      	ldrb	r3, [r7, #1]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a5e:	887a      	ldrh	r2, [r7, #2]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a64:	e003      	b.n	8000a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a66:	887b      	ldrh	r3, [r7, #2]
 8000a68:	041a      	lsls	r2, r3, #16
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	611a      	str	r2, [r3, #16]
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr

08000a78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a8a:	887a      	ldrh	r2, [r7, #2]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	041a      	lsls	r2, r3, #16
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	43d9      	mvns	r1, r3
 8000a96:	887b      	ldrh	r3, [r7, #2]
 8000a98:	400b      	ands	r3, r1
 8000a9a:	431a      	orrs	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	611a      	str	r2, [r3, #16]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
	...

08000aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d101      	bne.n	8000abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	e272      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	f000 8087 	beq.w	8000bda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000acc:	4b92      	ldr	r3, [pc, #584]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f003 030c 	and.w	r3, r3, #12
 8000ad4:	2b04      	cmp	r3, #4
 8000ad6:	d00c      	beq.n	8000af2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ad8:	4b8f      	ldr	r3, [pc, #572]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 030c 	and.w	r3, r3, #12
 8000ae0:	2b08      	cmp	r3, #8
 8000ae2:	d112      	bne.n	8000b0a <HAL_RCC_OscConfig+0x5e>
 8000ae4:	4b8c      	ldr	r3, [pc, #560]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000af0:	d10b      	bne.n	8000b0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af2:	4b89      	ldr	r3, [pc, #548]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d06c      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x12c>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d168      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e24c      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b12:	d106      	bne.n	8000b22 <HAL_RCC_OscConfig+0x76>
 8000b14:	4b80      	ldr	r3, [pc, #512]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a7f      	ldr	r2, [pc, #508]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	e02e      	b.n	8000b80 <HAL_RCC_OscConfig+0xd4>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10c      	bne.n	8000b44 <HAL_RCC_OscConfig+0x98>
 8000b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a7a      	ldr	r2, [pc, #488]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b34:	6013      	str	r3, [r2, #0]
 8000b36:	4b78      	ldr	r3, [pc, #480]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a77      	ldr	r2, [pc, #476]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	e01d      	b.n	8000b80 <HAL_RCC_OscConfig+0xd4>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000b4c:	d10c      	bne.n	8000b68 <HAL_RCC_OscConfig+0xbc>
 8000b4e:	4b72      	ldr	r3, [pc, #456]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a71      	ldr	r2, [pc, #452]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b58:	6013      	str	r3, [r2, #0]
 8000b5a:	4b6f      	ldr	r3, [pc, #444]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a6e      	ldr	r2, [pc, #440]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b64:	6013      	str	r3, [r2, #0]
 8000b66:	e00b      	b.n	8000b80 <HAL_RCC_OscConfig+0xd4>
 8000b68:	4b6b      	ldr	r3, [pc, #428]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a6a      	ldr	r2, [pc, #424]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b68      	ldr	r3, [pc, #416]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a67      	ldr	r2, [pc, #412]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d013      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b88:	f7ff fcf0 	bl	800056c <HAL_GetTick>
 8000b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b8e:	e008      	b.n	8000ba2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b90:	f7ff fcec 	bl	800056c <HAL_GetTick>
 8000b94:	4602      	mov	r2, r0
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	2b64      	cmp	r3, #100	@ 0x64
 8000b9c:	d901      	bls.n	8000ba2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	e200      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0f0      	beq.n	8000b90 <HAL_RCC_OscConfig+0xe4>
 8000bae:	e014      	b.n	8000bda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fcdc 	bl	800056c <HAL_GetTick>
 8000bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bb6:	e008      	b.n	8000bca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bb8:	f7ff fcd8 	bl	800056c <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b64      	cmp	r3, #100	@ 0x64
 8000bc4:	d901      	bls.n	8000bca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e1ec      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bca:	4b53      	ldr	r3, [pc, #332]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f0      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x10c>
 8000bd6:	e000      	b.n	8000bda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d063      	beq.n	8000cae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000be6:	4b4c      	ldr	r3, [pc, #304]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 030c 	and.w	r3, r3, #12
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00b      	beq.n	8000c0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bf2:	4b49      	ldr	r3, [pc, #292]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f003 030c 	and.w	r3, r3, #12
 8000bfa:	2b08      	cmp	r3, #8
 8000bfc:	d11c      	bne.n	8000c38 <HAL_RCC_OscConfig+0x18c>
 8000bfe:	4b46      	ldr	r3, [pc, #280]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d116      	bne.n	8000c38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c0a:	4b43      	ldr	r3, [pc, #268]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d005      	beq.n	8000c22 <HAL_RCC_OscConfig+0x176>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d001      	beq.n	8000c22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e1c0      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c22:	4b3d      	ldr	r3, [pc, #244]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	4939      	ldr	r1, [pc, #228]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	4313      	orrs	r3, r2
 8000c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c36:	e03a      	b.n	8000cae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d020      	beq.n	8000c82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c40:	4b36      	ldr	r3, [pc, #216]	@ (8000d1c <HAL_RCC_OscConfig+0x270>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c46:	f7ff fc91 	bl	800056c <HAL_GetTick>
 8000c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4c:	e008      	b.n	8000c60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c4e:	f7ff fc8d 	bl	800056c <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d901      	bls.n	8000c60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e1a1      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c60:	4b2d      	ldr	r3, [pc, #180]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0302 	and.w	r3, r3, #2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0f0      	beq.n	8000c4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	695b      	ldr	r3, [r3, #20]
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	4927      	ldr	r1, [pc, #156]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	600b      	str	r3, [r1, #0]
 8000c80:	e015      	b.n	8000cae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c82:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <HAL_RCC_OscConfig+0x270>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c88:	f7ff fc70 	bl	800056c <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c90:	f7ff fc6c 	bl	800056c <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e180      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f0      	bne.n	8000c90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d03a      	beq.n	8000d30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d019      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cc2:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <HAL_RCC_OscConfig+0x274>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cc8:	f7ff fc50 	bl	800056c <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fc4c 	bl	800056c <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e160      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f0      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f000 faea 	bl	80012c8 <RCC_Delay>
 8000cf4:	e01c      	b.n	8000d30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <HAL_RCC_OscConfig+0x274>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cfc:	f7ff fc36 	bl	800056c <HAL_GetTick>
 8000d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d02:	e00f      	b.n	8000d24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d04:	f7ff fc32 	bl	800056c <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d908      	bls.n	8000d24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e146      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	42420000 	.word	0x42420000
 8000d20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d24:	4b92      	ldr	r3, [pc, #584]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1e9      	bne.n	8000d04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	f000 80a6 	beq.w	8000e8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d42:	4b8b      	ldr	r3, [pc, #556]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10d      	bne.n	8000d6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b88      	ldr	r3, [pc, #544]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a87      	ldr	r2, [pc, #540]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d58:	61d3      	str	r3, [r2, #28]
 8000d5a:	4b85      	ldr	r3, [pc, #532]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d66:	2301      	movs	r3, #1
 8000d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d6a:	4b82      	ldr	r3, [pc, #520]	@ (8000f74 <HAL_RCC_OscConfig+0x4c8>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d118      	bne.n	8000da8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d76:	4b7f      	ldr	r3, [pc, #508]	@ (8000f74 <HAL_RCC_OscConfig+0x4c8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a7e      	ldr	r2, [pc, #504]	@ (8000f74 <HAL_RCC_OscConfig+0x4c8>)
 8000d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d82:	f7ff fbf3 	bl	800056c <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d8a:	f7ff fbef 	bl	800056c <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b64      	cmp	r3, #100	@ 0x64
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e103      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9c:	4b75      	ldr	r3, [pc, #468]	@ (8000f74 <HAL_RCC_OscConfig+0x4c8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d0f0      	beq.n	8000d8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d106      	bne.n	8000dbe <HAL_RCC_OscConfig+0x312>
 8000db0:	4b6f      	ldr	r3, [pc, #444]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	4a6e      	ldr	r2, [pc, #440]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6213      	str	r3, [r2, #32]
 8000dbc:	e02d      	b.n	8000e1a <HAL_RCC_OscConfig+0x36e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10c      	bne.n	8000de0 <HAL_RCC_OscConfig+0x334>
 8000dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	4a69      	ldr	r2, [pc, #420]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dcc:	f023 0301 	bic.w	r3, r3, #1
 8000dd0:	6213      	str	r3, [r2, #32]
 8000dd2:	4b67      	ldr	r3, [pc, #412]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	4a66      	ldr	r2, [pc, #408]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dd8:	f023 0304 	bic.w	r3, r3, #4
 8000ddc:	6213      	str	r3, [r2, #32]
 8000dde:	e01c      	b.n	8000e1a <HAL_RCC_OscConfig+0x36e>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d10c      	bne.n	8000e02 <HAL_RCC_OscConfig+0x356>
 8000de8:	4b61      	ldr	r3, [pc, #388]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	4a60      	ldr	r2, [pc, #384]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6213      	str	r3, [r2, #32]
 8000df4:	4b5e      	ldr	r3, [pc, #376]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	4a5d      	ldr	r2, [pc, #372]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6213      	str	r3, [r2, #32]
 8000e00:	e00b      	b.n	8000e1a <HAL_RCC_OscConfig+0x36e>
 8000e02:	4b5b      	ldr	r3, [pc, #364]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	6a1b      	ldr	r3, [r3, #32]
 8000e06:	4a5a      	ldr	r2, [pc, #360]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e08:	f023 0301 	bic.w	r3, r3, #1
 8000e0c:	6213      	str	r3, [r2, #32]
 8000e0e:	4b58      	ldr	r3, [pc, #352]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	6a1b      	ldr	r3, [r3, #32]
 8000e12:	4a57      	ldr	r2, [pc, #348]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e14:	f023 0304 	bic.w	r3, r3, #4
 8000e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d015      	beq.n	8000e4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e22:	f7ff fba3 	bl	800056c <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e28:	e00a      	b.n	8000e40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e2a:	f7ff fb9f 	bl	800056c <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e0b1      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e40:	4b4b      	ldr	r3, [pc, #300]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	6a1b      	ldr	r3, [r3, #32]
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0ee      	beq.n	8000e2a <HAL_RCC_OscConfig+0x37e>
 8000e4c:	e014      	b.n	8000e78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fb8d 	bl	800056c <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e54:	e00a      	b.n	8000e6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e56:	f7ff fb89 	bl	800056c <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e09b      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e6c:	4b40      	ldr	r3, [pc, #256]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1ee      	bne.n	8000e56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d105      	bne.n	8000e8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e7e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a3b      	ldr	r2, [pc, #236]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8087 	beq.w	8000fa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e94:	4b36      	ldr	r3, [pc, #216]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 030c 	and.w	r3, r3, #12
 8000e9c:	2b08      	cmp	r3, #8
 8000e9e:	d061      	beq.n	8000f64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d146      	bne.n	8000f36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ea8:	4b33      	ldr	r3, [pc, #204]	@ (8000f78 <HAL_RCC_OscConfig+0x4cc>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eae:	f7ff fb5d 	bl	800056c <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eb6:	f7ff fb59 	bl	800056c <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e06d      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec8:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f0      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a1b      	ldr	r3, [r3, #32]
 8000ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000edc:	d108      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ede:	4b24      	ldr	r3, [pc, #144]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	4921      	ldr	r1, [pc, #132]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	4313      	orrs	r3, r2
 8000eee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a19      	ldr	r1, [r3, #32]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f00:	430b      	orrs	r3, r1
 8000f02:	491b      	ldr	r1, [pc, #108]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f08:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <HAL_RCC_OscConfig+0x4cc>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fb2d 	bl	800056c <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f14:	e008      	b.n	8000f28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f16:	f7ff fb29 	bl	800056c <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d901      	bls.n	8000f28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f24:	2303      	movs	r3, #3
 8000f26:	e03d      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d0f0      	beq.n	8000f16 <HAL_RCC_OscConfig+0x46a>
 8000f34:	e035      	b.n	8000fa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <HAL_RCC_OscConfig+0x4cc>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fb16 	bl	800056c <HAL_GetTick>
 8000f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f42:	e008      	b.n	8000f56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f44:	f7ff fb12 	bl	800056c <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d901      	bls.n	8000f56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e026      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f0      	bne.n	8000f44 <HAL_RCC_OscConfig+0x498>
 8000f62:	e01e      	b.n	8000fa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69db      	ldr	r3, [r3, #28]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d107      	bne.n	8000f7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e019      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40007000 	.word	0x40007000
 8000f78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <HAL_RCC_OscConfig+0x500>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d106      	bne.n	8000f9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d001      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3718      	adds	r7, #24
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0d0      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fc4:	4b6a      	ldr	r3, [pc, #424]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d910      	bls.n	8000ff4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd2:	4b67      	ldr	r3, [pc, #412]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 0207 	bic.w	r2, r3, #7
 8000fda:	4965      	ldr	r1, [pc, #404]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fe2:	4b63      	ldr	r3, [pc, #396]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d001      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e0b8      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d020      	beq.n	8001042 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800100c:	4b59      	ldr	r3, [pc, #356]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a58      	ldr	r2, [pc, #352]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001012:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001016:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	2b00      	cmp	r3, #0
 8001022:	d005      	beq.n	8001030 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001024:	4b53      	ldr	r3, [pc, #332]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4a52      	ldr	r2, [pc, #328]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800102a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800102e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001030:	4b50      	ldr	r3, [pc, #320]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	494d      	ldr	r1, [pc, #308]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800103e:	4313      	orrs	r3, r2
 8001040:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d040      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d107      	bne.n	8001066 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001056:	4b47      	ldr	r3, [pc, #284]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d115      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e07f      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d107      	bne.n	800107e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800106e:	4b41      	ldr	r3, [pc, #260]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d109      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e073      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107e:	4b3d      	ldr	r3, [pc, #244]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e06b      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800108e:	4b39      	ldr	r3, [pc, #228]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f023 0203 	bic.w	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4936      	ldr	r1, [pc, #216]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800109c:	4313      	orrs	r3, r2
 800109e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010a0:	f7ff fa64 	bl	800056c <HAL_GetTick>
 80010a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010a6:	e00a      	b.n	80010be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a8:	f7ff fa60 	bl	800056c <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e053      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010be:	4b2d      	ldr	r3, [pc, #180]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 020c 	and.w	r2, r3, #12
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d1eb      	bne.n	80010a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d210      	bcs.n	8001100 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010de:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f023 0207 	bic.w	r2, r3, #7
 80010e6:	4922      	ldr	r1, [pc, #136]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e032      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	2b00      	cmp	r3, #0
 800110a:	d008      	beq.n	800111e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800110c:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4916      	ldr	r1, [pc, #88]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	4313      	orrs	r3, r2
 800111c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d009      	beq.n	800113e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800112a:	4b12      	ldr	r3, [pc, #72]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	490e      	ldr	r1, [pc, #56]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	4313      	orrs	r3, r2
 800113c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800113e:	f000 f821 	bl	8001184 <HAL_RCC_GetSysClockFreq>
 8001142:	4602      	mov	r2, r0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	490a      	ldr	r1, [pc, #40]	@ (8001178 <HAL_RCC_ClockConfig+0x1c8>)
 8001150:	5ccb      	ldrb	r3, [r1, r3]
 8001152:	fa22 f303 	lsr.w	r3, r2, r3
 8001156:	4a09      	ldr	r2, [pc, #36]	@ (800117c <HAL_RCC_ClockConfig+0x1cc>)
 8001158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <HAL_RCC_ClockConfig+0x1d0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f90e 	bl	8000380 <HAL_InitTick>

  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40022000 	.word	0x40022000
 8001174:	40021000 	.word	0x40021000
 8001178:	080044ec 	.word	0x080044ec
 800117c:	20000000 	.word	0x20000000
 8001180:	20000004 	.word	0x20000004

08001184 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x94>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d002      	beq.n	80011b4 <HAL_RCC_GetSysClockFreq+0x30>
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d003      	beq.n	80011ba <HAL_RCC_GetSysClockFreq+0x36>
 80011b2:	e027      	b.n	8001204 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011b4:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_RCC_GetSysClockFreq+0x98>)
 80011b6:	613b      	str	r3, [r7, #16]
      break;
 80011b8:	e027      	b.n	800120a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	0c9b      	lsrs	r3, r3, #18
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	4a17      	ldr	r2, [pc, #92]	@ (8001220 <HAL_RCC_GetSysClockFreq+0x9c>)
 80011c4:	5cd3      	ldrb	r3, [r2, r3]
 80011c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d010      	beq.n	80011f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_RCC_GetSysClockFreq+0x94>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	0c5b      	lsrs	r3, r3, #17
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	4a11      	ldr	r2, [pc, #68]	@ (8001224 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011de:	5cd3      	ldrb	r3, [r2, r3]
 80011e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <HAL_RCC_GetSysClockFreq+0x98>)
 80011e6:	fb03 f202 	mul.w	r2, r3, r2
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e004      	b.n	80011fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001228 <HAL_RCC_GetSysClockFreq+0xa4>)
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	613b      	str	r3, [r7, #16]
      break;
 8001202:	e002      	b.n	800120a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <HAL_RCC_GetSysClockFreq+0x98>)
 8001206:	613b      	str	r3, [r7, #16]
      break;
 8001208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800120a:	693b      	ldr	r3, [r7, #16]
}
 800120c:	4618      	mov	r0, r3
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000
 800121c:	007a1200 	.word	0x007a1200
 8001220:	08004504 	.word	0x08004504
 8001224:	08004514 	.word	0x08004514
 8001228:	003d0900 	.word	0x003d0900

0800122c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001230:	4b02      	ldr	r3, [pc, #8]	@ (800123c <HAL_RCC_GetHCLKFreq+0x10>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	20000000 	.word	0x20000000

08001240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001244:	f7ff fff2 	bl	800122c <HAL_RCC_GetHCLKFreq>
 8001248:	4602      	mov	r2, r0
 800124a:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	f003 0307 	and.w	r3, r3, #7
 8001254:	4903      	ldr	r1, [pc, #12]	@ (8001264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001256:	5ccb      	ldrb	r3, [r1, r3]
 8001258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	080044fc 	.word	0x080044fc

08001268 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	220f      	movs	r2, #15
 8001276:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <HAL_RCC_GetClockConfig+0x58>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0203 	and.w	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001284:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <HAL_RCC_GetClockConfig+0x58>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001290:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <HAL_RCC_GetClockConfig+0x58>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800129c:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <HAL_RCC_GetClockConfig+0x58>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	08db      	lsrs	r3, r3, #3
 80012a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_RCC_GetClockConfig+0x5c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0207 	and.w	r2, r3, #7
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40022000 	.word	0x40022000

080012c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012d0:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <RCC_Delay+0x34>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <RCC_Delay+0x38>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	0a5b      	lsrs	r3, r3, #9
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012e4:	bf00      	nop
  }
  while (Delay --);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1e5a      	subs	r2, r3, #1
 80012ea:	60fa      	str	r2, [r7, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f9      	bne.n	80012e4 <RCC_Delay+0x1c>
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	20000000 	.word	0x20000000
 8001300:	10624dd3 	.word	0x10624dd3

08001304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e041      	b.n	800139a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 f839 	bl	80013a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2202      	movs	r2, #2
 8001334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3304      	adds	r3, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4610      	mov	r0, r2
 8001344:	f000 f99c 	bl	8001680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2201      	movs	r2, #1
 8001364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2201      	movs	r2, #1
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d001      	beq.n	80013cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e03a      	b.n	8001442 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0201 	orr.w	r2, r2, #1
 80013e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a18      	ldr	r2, [pc, #96]	@ (800144c <HAL_TIM_Base_Start_IT+0x98>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00e      	beq.n	800140c <HAL_TIM_Base_Start_IT+0x58>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013f6:	d009      	beq.n	800140c <HAL_TIM_Base_Start_IT+0x58>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a14      	ldr	r2, [pc, #80]	@ (8001450 <HAL_TIM_Base_Start_IT+0x9c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d004      	beq.n	800140c <HAL_TIM_Base_Start_IT+0x58>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a13      	ldr	r2, [pc, #76]	@ (8001454 <HAL_TIM_Base_Start_IT+0xa0>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d111      	bne.n	8001430 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b06      	cmp	r3, #6
 800141c:	d010      	beq.n	8001440 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0201 	orr.w	r2, r2, #1
 800142c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800142e:	e007      	b.n	8001440 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0201 	orr.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40012c00 	.word	0x40012c00
 8001450:	40000400 	.word	0x40000400
 8001454:	40000800 	.word	0x40000800

08001458 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d020      	beq.n	80014bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d01b      	beq.n	80014bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f06f 0202 	mvn.w	r2, #2
 800148c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2201      	movs	r2, #1
 8001492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f8d1 	bl	800164a <HAL_TIM_IC_CaptureCallback>
 80014a8:	e005      	b.n	80014b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f8c4 	bl	8001638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f8d3 	bl	800165c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f003 0304 	and.w	r3, r3, #4
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d020      	beq.n	8001508 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d01b      	beq.n	8001508 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f06f 0204 	mvn.w	r2, #4
 80014d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2202      	movs	r2, #2
 80014de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f8ab 	bl	800164a <HAL_TIM_IC_CaptureCallback>
 80014f4:	e005      	b.n	8001502 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f89e 	bl	8001638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f8ad 	bl	800165c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d020      	beq.n	8001554 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	2b00      	cmp	r3, #0
 800151a:	d01b      	beq.n	8001554 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f06f 0208 	mvn.w	r2, #8
 8001524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2204      	movs	r2, #4
 800152a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f885 	bl	800164a <HAL_TIM_IC_CaptureCallback>
 8001540:	e005      	b.n	800154e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f878 	bl	8001638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f887 	bl	800165c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	2b00      	cmp	r3, #0
 800155c:	d020      	beq.n	80015a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01b      	beq.n	80015a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f06f 0210 	mvn.w	r2, #16
 8001570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2208      	movs	r2, #8
 8001576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f85f 	bl	800164a <HAL_TIM_IC_CaptureCallback>
 800158c:	e005      	b.n	800159a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f852 	bl	8001638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f861 	bl	800165c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00c      	beq.n	80015c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d007      	beq.n	80015c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f06f 0201 	mvn.w	r2, #1
 80015bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7fe fe8e 	bl	80002e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00c      	beq.n	80015e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d007      	beq.n	80015e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80015e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f8c3 	bl	800176e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00c      	beq.n	800160c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d007      	beq.n	800160c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f831 	bl	800166e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	f003 0320 	and.w	r3, r3, #32
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00c      	beq.n	8001630 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f06f 0220 	mvn.w	r2, #32
 8001628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f896 	bl	800175c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr

0800166e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a2f      	ldr	r2, [pc, #188]	@ (8001750 <TIM_Base_SetConfig+0xd0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00b      	beq.n	80016b0 <TIM_Base_SetConfig+0x30>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800169e:	d007      	beq.n	80016b0 <TIM_Base_SetConfig+0x30>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001754 <TIM_Base_SetConfig+0xd4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d003      	beq.n	80016b0 <TIM_Base_SetConfig+0x30>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001758 <TIM_Base_SetConfig+0xd8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d108      	bne.n	80016c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a22      	ldr	r2, [pc, #136]	@ (8001750 <TIM_Base_SetConfig+0xd0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00b      	beq.n	80016e2 <TIM_Base_SetConfig+0x62>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016d0:	d007      	beq.n	80016e2 <TIM_Base_SetConfig+0x62>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001754 <TIM_Base_SetConfig+0xd4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d003      	beq.n	80016e2 <TIM_Base_SetConfig+0x62>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001758 <TIM_Base_SetConfig+0xd8>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d108      	bne.n	80016f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	4313      	orrs	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a0d      	ldr	r2, [pc, #52]	@ (8001750 <TIM_Base_SetConfig+0xd0>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d103      	bne.n	8001728 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f023 0201 	bic.w	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	611a      	str	r2, [r3, #16]
  }
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	40012c00 	.word	0x40012c00
 8001754:	40000400 	.word	0x40000400
 8001758:	40000800 	.word	0x40000800

0800175c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <__NVIC_SetPriority>:
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	@ (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80017d8:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <SysTick_Handler+0x1c>)
 80017da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80017dc:	f001 fd38 	bl	8003250 <xTaskGetSchedulerState>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d001      	beq.n	80017ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80017e6:	f002 fadf 	bl	8003da8 <xPortSysTickHandler>
  }
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	e000e010 	.word	0xe000e010

080017f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80017f8:	2100      	movs	r1, #0
 80017fa:	f06f 0004 	mvn.w	r0, #4
 80017fe:	f7ff ffbf 	bl	8001780 <__NVIC_SetPriority>
#endif
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800180e:	f3ef 8305 	mrs	r3, IPSR
 8001812:	603b      	str	r3, [r7, #0]
  return(result);
 8001814:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800181a:	f06f 0305 	mvn.w	r3, #5
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	e00c      	b.n	800183c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001822:	4b09      	ldr	r3, [pc, #36]	@ (8001848 <osKernelInitialize+0x40>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d105      	bne.n	8001836 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800182a:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <osKernelInitialize+0x40>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	e002      	b.n	800183c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	200000d0 	.word	0x200000d0

0800184c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001852:	f3ef 8305 	mrs	r3, IPSR
 8001856:	603b      	str	r3, [r7, #0]
  return(result);
 8001858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <osKernelStart+0x1a>
    stat = osErrorISR;
 800185e:	f06f 0305 	mvn.w	r3, #5
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	e010      	b.n	8001888 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001866:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <osKernelStart+0x48>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d109      	bne.n	8001882 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800186e:	f7ff ffc1 	bl	80017f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001872:	4b08      	ldr	r3, [pc, #32]	@ (8001894 <osKernelStart+0x48>)
 8001874:	2202      	movs	r2, #2
 8001876:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001878:	f001 f88a 	bl	8002990 <vTaskStartScheduler>
      stat = osOK;
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	e002      	b.n	8001888 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001888:	687b      	ldr	r3, [r7, #4]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200000d0 	.word	0x200000d0

08001898 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b08e      	sub	sp, #56	@ 0x38
 800189c:	af04      	add	r7, sp, #16
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018a8:	f3ef 8305 	mrs	r3, IPSR
 80018ac:	617b      	str	r3, [r7, #20]
  return(result);
 80018ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d17e      	bne.n	80019b2 <osThreadNew+0x11a>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d07b      	beq.n	80019b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80018ba:	2380      	movs	r3, #128	@ 0x80
 80018bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80018be:	2318      	movs	r3, #24
 80018c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d045      	beq.n	800195e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <osThreadNew+0x48>
        name = attr->name;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <osThreadNew+0x6e>
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b38      	cmp	r3, #56	@ 0x38
 80018f8:	d805      	bhi.n	8001906 <osThreadNew+0x6e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <osThreadNew+0x72>
        return (NULL);
 8001906:	2300      	movs	r3, #0
 8001908:	e054      	b.n	80019b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00e      	beq.n	8001940 <osThreadNew+0xa8>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	2ba7      	cmp	r3, #167	@ 0xa7
 8001928:	d90a      	bls.n	8001940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d002      	beq.n	8001940 <osThreadNew+0xa8>
        mem = 1;
 800193a:	2301      	movs	r3, #1
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	e010      	b.n	8001962 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10c      	bne.n	8001962 <osThreadNew+0xca>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d108      	bne.n	8001962 <osThreadNew+0xca>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d104      	bne.n	8001962 <osThreadNew+0xca>
          mem = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	e001      	b.n	8001962 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d110      	bne.n	800198a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001970:	9202      	str	r2, [sp, #8]
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	6a3a      	ldr	r2, [r7, #32]
 800197c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 fe12 	bl	80025a8 <xTaskCreateStatic>
 8001984:	4603      	mov	r3, r0
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	e013      	b.n	80019b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d110      	bne.n	80019b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	b29a      	uxth	r2, r3
 8001994:	f107 0310 	add.w	r3, r7, #16
 8001998:	9301      	str	r3, [sp, #4]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fe60 	bl	8002668 <xTaskCreate>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d001      	beq.n	80019b2 <osThreadNew+0x11a>
            hTask = NULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80019b2:	693b      	ldr	r3, [r7, #16]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3728      	adds	r7, #40	@ 0x28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019c4:	f3ef 8305 	mrs	r3, IPSR
 80019c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80019ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <osDelay+0x1c>
    stat = osErrorISR;
 80019d0:	f06f 0305 	mvn.w	r3, #5
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	e007      	b.n	80019e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 ff9e 	bl	8002924 <vTaskDelay>
    }
  }

  return (stat);
 80019e8:	68fb      	ldr	r3, [r7, #12]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a06      	ldr	r2, [pc, #24]	@ (8001a1c <vApplicationGetIdleTaskMemory+0x28>)
 8001a04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4a05      	ldr	r2, [pc, #20]	@ (8001a20 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2280      	movs	r2, #128	@ 0x80
 8001a10:	601a      	str	r2, [r3, #0]
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	200000d4 	.word	0x200000d4
 8001a20:	2000017c 	.word	0x2000017c

08001a24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <vApplicationGetTimerTaskMemory+0x2c>)
 8001a34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	4a06      	ldr	r2, [pc, #24]	@ (8001a54 <vApplicationGetTimerTaskMemory+0x30>)
 8001a3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a42:	601a      	str	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	2000037c 	.word	0x2000037c
 8001a54:	20000424 	.word	0x20000424

08001a58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f103 0208 	add.w	r2, r3, #8
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f103 0208 	add.w	r2, r3, #8
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f103 0208 	add.w	r2, r3, #8
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b085      	sub	sp, #20
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	601a      	str	r2, [r3, #0]
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0a:	d103      	bne.n	8001b14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	e00c      	b.n	8001b2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3308      	adds	r3, #8
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	e002      	b.n	8001b22 <vListInsert+0x2e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d2f6      	bcs.n	8001b1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	1c5a      	adds	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	601a      	str	r2, [r3, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6892      	ldr	r2, [r2, #8]
 8001b7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6852      	ldr	r2, [r2, #4]
 8001b84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d103      	bne.n	8001b98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	1e5a      	subs	r2, r3, #1
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
	...

08001bb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10b      	bne.n	8001be4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bd0:	f383 8811 	msr	BASEPRI, r3
 8001bd4:	f3bf 8f6f 	isb	sy
 8001bd8:	f3bf 8f4f 	dsb	sy
 8001bdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001be4:	f002 f862 	bl	8003cac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf0:	68f9      	ldr	r1, [r7, #12]
 8001bf2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001bf4:	fb01 f303 	mul.w	r3, r1, r3
 8001bf8:	441a      	add	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c14:	3b01      	subs	r3, #1
 8001c16:	68f9      	ldr	r1, [r7, #12]
 8001c18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001c1a:	fb01 f303 	mul.w	r3, r1, r3
 8001c1e:	441a      	add	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	22ff      	movs	r2, #255	@ 0xff
 8001c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	22ff      	movs	r2, #255	@ 0xff
 8001c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d114      	bne.n	8001c64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d01a      	beq.n	8001c78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3310      	adds	r3, #16
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 f93c 	bl	8002ec4 <xTaskRemoveFromEventList>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d012      	beq.n	8001c78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001c52:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <xQueueGenericReset+0xd0>)
 8001c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	f3bf 8f4f 	dsb	sy
 8001c5e:	f3bf 8f6f 	isb	sy
 8001c62:	e009      	b.n	8001c78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3310      	adds	r3, #16
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fef5 	bl	8001a58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3324      	adds	r3, #36	@ 0x24
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fef0 	bl	8001a58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001c78:	f002 f848 	bl	8003d0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001c7c:	2301      	movs	r3, #1
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000ed04 	.word	0xe000ed04

08001c8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08e      	sub	sp, #56	@ 0x38
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10b      	bne.n	8001cb8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ca4:	f383 8811 	msr	BASEPRI, r3
 8001ca8:	f3bf 8f6f 	isb	sy
 8001cac:	f3bf 8f4f 	dsb	sy
 8001cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001cb2:	bf00      	nop
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10b      	bne.n	8001cd6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cc2:	f383 8811 	msr	BASEPRI, r3
 8001cc6:	f3bf 8f6f 	isb	sy
 8001cca:	f3bf 8f4f 	dsb	sy
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	e7fd      	b.n	8001cd2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <xQueueGenericCreateStatic+0x56>
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <xQueueGenericCreateStatic+0x5a>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <xQueueGenericCreateStatic+0x5c>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d10b      	bne.n	8001d04 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cf0:	f383 8811 	msr	BASEPRI, r3
 8001cf4:	f3bf 8f6f 	isb	sy
 8001cf8:	f3bf 8f4f 	dsb	sy
 8001cfc:	623b      	str	r3, [r7, #32]
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <xQueueGenericCreateStatic+0x84>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <xQueueGenericCreateStatic+0x88>
 8001d10:	2301      	movs	r3, #1
 8001d12:	e000      	b.n	8001d16 <xQueueGenericCreateStatic+0x8a>
 8001d14:	2300      	movs	r3, #0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10b      	bne.n	8001d32 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	61fb      	str	r3, [r7, #28]
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	e7fd      	b.n	8001d2e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001d32:	2350      	movs	r3, #80	@ 0x50
 8001d34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b50      	cmp	r3, #80	@ 0x50
 8001d3a:	d00b      	beq.n	8001d54 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d40:	f383 8811 	msr	BASEPRI, r3
 8001d44:	f3bf 8f6f 	isb	sy
 8001d48:	f3bf 8f4f 	dsb	sy
 8001d4c:	61bb      	str	r3, [r7, #24]
}
 8001d4e:	bf00      	nop
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001d54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00d      	beq.n	8001d7c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d68:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	4613      	mov	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 f805 	bl	8001d86 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3730      	adds	r7, #48	@ 0x30
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
 8001d92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e002      	b.n	8001da8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001db4:	2101      	movs	r1, #1
 8001db6:	69b8      	ldr	r0, [r7, #24]
 8001db8:	f7ff fefe 	bl	8001bb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08e      	sub	sp, #56	@ 0x38
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10b      	bne.n	8001e00 <xQueueGenericSend+0x34>
	__asm volatile
 8001de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dec:	f383 8811 	msr	BASEPRI, r3
 8001df0:	f3bf 8f6f 	isb	sy
 8001df4:	f3bf 8f4f 	dsb	sy
 8001df8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d103      	bne.n	8001e0e <xQueueGenericSend+0x42>
 8001e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <xQueueGenericSend+0x46>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <xQueueGenericSend+0x48>
 8001e12:	2300      	movs	r3, #0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10b      	bne.n	8001e30 <xQueueGenericSend+0x64>
	__asm volatile
 8001e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e1c:	f383 8811 	msr	BASEPRI, r3
 8001e20:	f3bf 8f6f 	isb	sy
 8001e24:	f3bf 8f4f 	dsb	sy
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d103      	bne.n	8001e3e <xQueueGenericSend+0x72>
 8001e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <xQueueGenericSend+0x76>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <xQueueGenericSend+0x78>
 8001e42:	2300      	movs	r3, #0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10b      	bne.n	8001e60 <xQueueGenericSend+0x94>
	__asm volatile
 8001e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e4c:	f383 8811 	msr	BASEPRI, r3
 8001e50:	f3bf 8f6f 	isb	sy
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	623b      	str	r3, [r7, #32]
}
 8001e5a:	bf00      	nop
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e60:	f001 f9f6 	bl	8003250 <xTaskGetSchedulerState>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <xQueueGenericSend+0xa4>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <xQueueGenericSend+0xa8>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <xQueueGenericSend+0xaa>
 8001e74:	2300      	movs	r3, #0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10b      	bne.n	8001e92 <xQueueGenericSend+0xc6>
	__asm volatile
 8001e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e7e:	f383 8811 	msr	BASEPRI, r3
 8001e82:	f3bf 8f6f 	isb	sy
 8001e86:	f3bf 8f4f 	dsb	sy
 8001e8a:	61fb      	str	r3, [r7, #28]
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	e7fd      	b.n	8001e8e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001e92:	f001 ff0b 	bl	8003cac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d302      	bcc.n	8001ea8 <xQueueGenericSend+0xdc>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d129      	bne.n	8001efc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	68b9      	ldr	r1, [r7, #8]
 8001eac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001eae:	f000 fa0f 	bl	80022d0 <prvCopyDataToQueue>
 8001eb2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d010      	beq.n	8001ede <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ebe:	3324      	adds	r3, #36	@ 0x24
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f000 ffff 	bl	8002ec4 <xTaskRemoveFromEventList>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d013      	beq.n	8001ef4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8001fcc <xQueueGenericSend+0x200>)
 8001ece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	f3bf 8f6f 	isb	sy
 8001edc:	e00a      	b.n	8001ef4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001ee4:	4b39      	ldr	r3, [pc, #228]	@ (8001fcc <xQueueGenericSend+0x200>)
 8001ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f3bf 8f4f 	dsb	sy
 8001ef0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001ef4:	f001 ff0a 	bl	8003d0c <vPortExitCritical>
				return pdPASS;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e063      	b.n	8001fc4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d103      	bne.n	8001f0a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f02:	f001 ff03 	bl	8003d0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	e05c      	b.n	8001fc4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d106      	bne.n	8001f1e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4618      	mov	r0, r3
 8001f16:	f001 f839 	bl	8002f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f1e:	f001 fef5 	bl	8003d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f22:	f000 fda5 	bl	8002a70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f26:	f001 fec1 	bl	8003cac <vPortEnterCritical>
 8001f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f30:	b25b      	sxtb	r3, r3
 8001f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f36:	d103      	bne.n	8001f40 <xQueueGenericSend+0x174>
 8001f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f46:	b25b      	sxtb	r3, r3
 8001f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4c:	d103      	bne.n	8001f56 <xQueueGenericSend+0x18a>
 8001f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001f56:	f001 fed9 	bl	8003d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f5a:	1d3a      	adds	r2, r7, #4
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f001 f828 	bl	8002fb8 <xTaskCheckForTimeOut>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d124      	bne.n	8001fb8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f70:	f000 faa6 	bl	80024c0 <prvIsQueueFull>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d018      	beq.n	8001fac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7c:	3310      	adds	r3, #16
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4611      	mov	r1, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 ff4c 	bl	8002e20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001f88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001f8a:	f000 fa31 	bl	80023f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001f8e:	f000 fd7d 	bl	8002a8c <xTaskResumeAll>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f47f af7c 	bne.w	8001e92 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <xQueueGenericSend+0x200>)
 8001f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	f3bf 8f4f 	dsb	sy
 8001fa6:	f3bf 8f6f 	isb	sy
 8001faa:	e772      	b.n	8001e92 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001fac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fae:	f000 fa1f 	bl	80023f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001fb2:	f000 fd6b 	bl	8002a8c <xTaskResumeAll>
 8001fb6:	e76c      	b.n	8001e92 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001fb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001fba:	f000 fa19 	bl	80023f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001fbe:	f000 fd65 	bl	8002a8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001fc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3738      	adds	r7, #56	@ 0x38
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	e000ed04 	.word	0xe000ed04

08001fd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b090      	sub	sp, #64	@ 0x40
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10b      	bne.n	8002000 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fec:	f383 8811 	msr	BASEPRI, r3
 8001ff0:	f3bf 8f6f 	isb	sy
 8001ff4:	f3bf 8f4f 	dsb	sy
 8001ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001ffa:	bf00      	nop
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d103      	bne.n	800200e <xQueueGenericSendFromISR+0x3e>
 8002006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <xQueueGenericSendFromISR+0x42>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <xQueueGenericSendFromISR+0x44>
 8002012:	2300      	movs	r3, #0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10b      	bne.n	8002030 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800201c:	f383 8811 	msr	BASEPRI, r3
 8002020:	f3bf 8f6f 	isb	sy
 8002024:	f3bf 8f4f 	dsb	sy
 8002028:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800202a:	bf00      	nop
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b02      	cmp	r3, #2
 8002034:	d103      	bne.n	800203e <xQueueGenericSendFromISR+0x6e>
 8002036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <xQueueGenericSendFromISR+0x72>
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <xQueueGenericSendFromISR+0x74>
 8002042:	2300      	movs	r3, #0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800204c:	f383 8811 	msr	BASEPRI, r3
 8002050:	f3bf 8f6f 	isb	sy
 8002054:	f3bf 8f4f 	dsb	sy
 8002058:	623b      	str	r3, [r7, #32]
}
 800205a:	bf00      	nop
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002060:	f001 fee6 	bl	8003e30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002064:	f3ef 8211 	mrs	r2, BASEPRI
 8002068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800206c:	f383 8811 	msr	BASEPRI, r3
 8002070:	f3bf 8f6f 	isb	sy
 8002074:	f3bf 8f4f 	dsb	sy
 8002078:	61fa      	str	r2, [r7, #28]
 800207a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800207c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800207e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002088:	429a      	cmp	r2, r3
 800208a:	d302      	bcc.n	8002092 <xQueueGenericSendFromISR+0xc2>
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d12f      	bne.n	80020f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002094:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002098:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800209c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800209e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	68b9      	ldr	r1, [r7, #8]
 80020a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80020a8:	f000 f912 	bl	80022d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80020ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d112      	bne.n	80020dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d016      	beq.n	80020ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c0:	3324      	adds	r3, #36	@ 0x24
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 fefe 	bl	8002ec4 <xTaskRemoveFromEventList>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00e      	beq.n	80020ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00b      	beq.n	80020ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	e007      	b.n	80020ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80020dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020e0:	3301      	adds	r3, #1
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	b25a      	sxtb	r2, r3
 80020e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80020ec:	2301      	movs	r3, #1
 80020ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80020f0:	e001      	b.n	80020f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002100:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002104:	4618      	mov	r0, r3
 8002106:	3740      	adds	r7, #64	@ 0x40
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08c      	sub	sp, #48	@ 0x30
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002118:	2300      	movs	r3, #0
 800211a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10b      	bne.n	800213e <xQueueReceive+0x32>
	__asm volatile
 8002126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800212a:	f383 8811 	msr	BASEPRI, r3
 800212e:	f3bf 8f6f 	isb	sy
 8002132:	f3bf 8f4f 	dsb	sy
 8002136:	623b      	str	r3, [r7, #32]
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	e7fd      	b.n	800213a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d103      	bne.n	800214c <xQueueReceive+0x40>
 8002144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <xQueueReceive+0x44>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <xQueueReceive+0x46>
 8002150:	2300      	movs	r3, #0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10b      	bne.n	800216e <xQueueReceive+0x62>
	__asm volatile
 8002156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800215a:	f383 8811 	msr	BASEPRI, r3
 800215e:	f3bf 8f6f 	isb	sy
 8002162:	f3bf 8f4f 	dsb	sy
 8002166:	61fb      	str	r3, [r7, #28]
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	e7fd      	b.n	800216a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800216e:	f001 f86f 	bl	8003250 <xTaskGetSchedulerState>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <xQueueReceive+0x72>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <xQueueReceive+0x76>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <xQueueReceive+0x78>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10b      	bne.n	80021a0 <xQueueReceive+0x94>
	__asm volatile
 8002188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	61bb      	str	r3, [r7, #24]
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021a0:	f001 fd84 	bl	8003cac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01f      	beq.n	80021f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021b4:	f000 f8f6 	bl	80023a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	1e5a      	subs	r2, r3, #1
 80021bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00f      	beq.n	80021e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ca:	3310      	adds	r3, #16
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 fe79 	bl	8002ec4 <xTaskRemoveFromEventList>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d007      	beq.n	80021e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80021d8:	4b3c      	ldr	r3, [pc, #240]	@ (80022cc <xQueueReceive+0x1c0>)
 80021da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80021e8:	f001 fd90 	bl	8003d0c <vPortExitCritical>
				return pdPASS;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e069      	b.n	80022c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d103      	bne.n	80021fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80021f6:	f001 fd89 	bl	8003d0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e062      	b.n	80022c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002200:	2b00      	cmp	r3, #0
 8002202:	d106      	bne.n	8002212 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	4618      	mov	r0, r3
 800220a:	f000 febf 	bl	8002f8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800220e:	2301      	movs	r3, #1
 8002210:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002212:	f001 fd7b 	bl	8003d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002216:	f000 fc2b 	bl	8002a70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800221a:	f001 fd47 	bl	8003cac <vPortEnterCritical>
 800221e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002220:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002224:	b25b      	sxtb	r3, r3
 8002226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222a:	d103      	bne.n	8002234 <xQueueReceive+0x128>
 800222c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002236:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800223a:	b25b      	sxtb	r3, r3
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d103      	bne.n	800224a <xQueueReceive+0x13e>
 8002242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800224a:	f001 fd5f 	bl	8003d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800224e:	1d3a      	adds	r2, r7, #4
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f000 feae 	bl	8002fb8 <xTaskCheckForTimeOut>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d123      	bne.n	80022aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002264:	f000 f916 	bl	8002494 <prvIsQueueEmpty>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d017      	beq.n	800229e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800226e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002270:	3324      	adds	r3, #36	@ 0x24
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fdd2 	bl	8002e20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800227c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800227e:	f000 f8b7 	bl	80023f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002282:	f000 fc03 	bl	8002a8c <xTaskResumeAll>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d189      	bne.n	80021a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800228c:	4b0f      	ldr	r3, [pc, #60]	@ (80022cc <xQueueReceive+0x1c0>)
 800228e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	f3bf 8f6f 	isb	sy
 800229c:	e780      	b.n	80021a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800229e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022a0:	f000 f8a6 	bl	80023f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022a4:	f000 fbf2 	bl	8002a8c <xTaskResumeAll>
 80022a8:	e77a      	b.n	80021a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80022aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022ac:	f000 f8a0 	bl	80023f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022b0:	f000 fbec 	bl	8002a8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022b6:	f000 f8ed 	bl	8002494 <prvIsQueueEmpty>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f43f af6f 	beq.w	80021a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80022c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3730      	adds	r7, #48	@ 0x30
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	e000ed04 	.word	0xe000ed04

080022d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10d      	bne.n	800230a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d14d      	bne.n	8002392 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 ffc6 	bl	800328c <xTaskPriorityDisinherit>
 8002300:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	e043      	b.n	8002392 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d119      	bne.n	8002344 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6858      	ldr	r0, [r3, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	461a      	mov	r2, r3
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	f002 f840 	bl	80043a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	441a      	add	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	429a      	cmp	r2, r3
 8002338:	d32b      	bcc.n	8002392 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	e026      	b.n	8002392 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	68d8      	ldr	r0, [r3, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	461a      	mov	r2, r3
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	f002 f826 	bl	80043a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	425b      	negs	r3, r3
 800235e:	441a      	add	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d207      	bcs.n	8002380 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002378:	425b      	negs	r3, r3
 800237a:	441a      	add	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d105      	bne.n	8002392 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	3b01      	subs	r3, #1
 8002390:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800239a:	697b      	ldr	r3, [r7, #20]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d018      	beq.n	80023e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	441a      	add	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d303      	bcc.n	80023d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68d9      	ldr	r1, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	461a      	mov	r2, r3
 80023e2:	6838      	ldr	r0, [r7, #0]
 80023e4:	f001 ffdc 	bl	80043a0 <memcpy>
	}
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80023f8:	f001 fc58 	bl	8003cac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002402:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002404:	e011      	b.n	800242a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	2b00      	cmp	r3, #0
 800240c:	d012      	beq.n	8002434 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3324      	adds	r3, #36	@ 0x24
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fd56 	bl	8002ec4 <xTaskRemoveFromEventList>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800241e:	f000 fe2f 	bl	8003080 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	3b01      	subs	r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800242a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242e:	2b00      	cmp	r3, #0
 8002430:	dce9      	bgt.n	8002406 <prvUnlockQueue+0x16>
 8002432:	e000      	b.n	8002436 <prvUnlockQueue+0x46>
					break;
 8002434:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	22ff      	movs	r2, #255	@ 0xff
 800243a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800243e:	f001 fc65 	bl	8003d0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002442:	f001 fc33 	bl	8003cac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800244c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800244e:	e011      	b.n	8002474 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d012      	beq.n	800247e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3310      	adds	r3, #16
 800245c:	4618      	mov	r0, r3
 800245e:	f000 fd31 	bl	8002ec4 <xTaskRemoveFromEventList>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002468:	f000 fe0a 	bl	8003080 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800246c:	7bbb      	ldrb	r3, [r7, #14]
 800246e:	3b01      	subs	r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002474:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002478:	2b00      	cmp	r3, #0
 800247a:	dce9      	bgt.n	8002450 <prvUnlockQueue+0x60>
 800247c:	e000      	b.n	8002480 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800247e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	22ff      	movs	r2, #255	@ 0xff
 8002484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002488:	f001 fc40 	bl	8003d0c <vPortExitCritical>
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800249c:	f001 fc06 	bl	8003cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80024a8:	2301      	movs	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e001      	b.n	80024b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024b2:	f001 fc2b 	bl	8003d0c <vPortExitCritical>

	return xReturn;
 80024b6:	68fb      	ldr	r3, [r7, #12]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80024c8:	f001 fbf0 	bl	8003cac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d102      	bne.n	80024de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80024d8:	2301      	movs	r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e001      	b.n	80024e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80024e2:	f001 fc13 	bl	8003d0c <vPortExitCritical>

	return xReturn;
 80024e6:	68fb      	ldr	r3, [r7, #12]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	e014      	b.n	800252a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002500:	4a0e      	ldr	r2, [pc, #56]	@ (800253c <vQueueAddToRegistry+0x4c>)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10b      	bne.n	8002524 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800250c:	490b      	ldr	r1, [pc, #44]	@ (800253c <vQueueAddToRegistry+0x4c>)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002516:	4a09      	ldr	r2, [pc, #36]	@ (800253c <vQueueAddToRegistry+0x4c>)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002522:	e006      	b.n	8002532 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3301      	adds	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b07      	cmp	r3, #7
 800252e:	d9e7      	bls.n	8002500 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	20000824 	.word	0x20000824

08002540 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002550:	f001 fbac 	bl	8003cac <vPortEnterCritical>
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800255a:	b25b      	sxtb	r3, r3
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d103      	bne.n	800256a <vQueueWaitForMessageRestricted+0x2a>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002570:	b25b      	sxtb	r3, r3
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002576:	d103      	bne.n	8002580 <vQueueWaitForMessageRestricted+0x40>
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002580:	f001 fbc4 	bl	8003d0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002588:	2b00      	cmp	r3, #0
 800258a:	d106      	bne.n	800259a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3324      	adds	r3, #36	@ 0x24
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fc69 	bl	8002e6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800259a:	6978      	ldr	r0, [r7, #20]
 800259c:	f7ff ff28 	bl	80023f0 <prvUnlockQueue>
	}
 80025a0:	bf00      	nop
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08e      	sub	sp, #56	@ 0x38
 80025ac:	af04      	add	r7, sp, #16
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80025b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10b      	bne.n	80025d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80025bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025c0:	f383 8811 	msr	BASEPRI, r3
 80025c4:	f3bf 8f6f 	isb	sy
 80025c8:	f3bf 8f4f 	dsb	sy
 80025cc:	623b      	str	r3, [r7, #32]
}
 80025ce:	bf00      	nop
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80025d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10b      	bne.n	80025f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80025da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	61fb      	str	r3, [r7, #28]
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	e7fd      	b.n	80025ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80025f2:	23a8      	movs	r3, #168	@ 0xa8
 80025f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2ba8      	cmp	r3, #168	@ 0xa8
 80025fa:	d00b      	beq.n	8002614 <xTaskCreateStatic+0x6c>
	__asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	61bb      	str	r3, [r7, #24]
}
 800260e:	bf00      	nop
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002614:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01e      	beq.n	800265a <xTaskCreateStatic+0xb2>
 800261c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800261e:	2b00      	cmp	r3, #0
 8002620:	d01b      	beq.n	800265a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800262a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	2202      	movs	r2, #2
 8002630:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002634:	2300      	movs	r3, #0
 8002636:	9303      	str	r3, [sp, #12]
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	9302      	str	r3, [sp, #8]
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68b9      	ldr	r1, [r7, #8]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f851 	bl	80026f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002652:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002654:	f000 f8f6 	bl	8002844 <prvAddNewTaskToReadyList>
 8002658:	e001      	b.n	800265e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800265e:	697b      	ldr	r3, [r7, #20]
	}
 8002660:	4618      	mov	r0, r3
 8002662:	3728      	adds	r7, #40	@ 0x28
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	@ 0x30
 800266c:	af04      	add	r7, sp, #16
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	4613      	mov	r3, r2
 8002676:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4618      	mov	r0, r3
 800267e:	f001 fc17 	bl	8003eb0 <pvPortMalloc>
 8002682:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00e      	beq.n	80026a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800268a:	20a8      	movs	r0, #168	@ 0xa8
 800268c:	f001 fc10 	bl	8003eb0 <pvPortMalloc>
 8002690:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	631a      	str	r2, [r3, #48]	@ 0x30
 800269e:	e005      	b.n	80026ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80026a0:	6978      	ldr	r0, [r7, #20]
 80026a2:	f001 fcd3 	bl	800404c <vPortFree>
 80026a6:	e001      	b.n	80026ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d017      	beq.n	80026e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026ba:	88fa      	ldrh	r2, [r7, #6]
 80026bc:	2300      	movs	r3, #0
 80026be:	9303      	str	r3, [sp, #12]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	9302      	str	r3, [sp, #8]
 80026c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f80f 	bl	80026f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80026d6:	69f8      	ldr	r0, [r7, #28]
 80026d8:	f000 f8b4 	bl	8002844 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80026dc:	2301      	movs	r3, #1
 80026de:	61bb      	str	r3, [r7, #24]
 80026e0:	e002      	b.n	80026e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80026e8:	69bb      	ldr	r3, [r7, #24]
	}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3720      	adds	r7, #32
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002704:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	461a      	mov	r2, r3
 800270c:	21a5      	movs	r1, #165	@ 0xa5
 800270e:	f001 fdbb 	bl	8004288 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800271c:	3b01      	subs	r3, #1
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	f023 0307 	bic.w	r3, r3, #7
 800272a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800273a:	f383 8811 	msr	BASEPRI, r3
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	617b      	str	r3, [r7, #20]
}
 8002748:	bf00      	nop
 800274a:	bf00      	nop
 800274c:	e7fd      	b.n	800274a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01f      	beq.n	8002794 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	e012      	b.n	8002780 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	4413      	add	r3, r2
 8002760:	7819      	ldrb	r1, [r3, #0]
 8002762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	4413      	add	r3, r2
 8002768:	3334      	adds	r3, #52	@ 0x34
 800276a:	460a      	mov	r2, r1
 800276c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	4413      	add	r3, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d006      	beq.n	8002788 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3301      	adds	r3, #1
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2b0f      	cmp	r3, #15
 8002784:	d9e9      	bls.n	800275a <prvInitialiseNewTask+0x66>
 8002786:	e000      	b.n	800278a <prvInitialiseNewTask+0x96>
			{
				break;
 8002788:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800278a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002792:	e003      	b.n	800279c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800279c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279e:	2b37      	cmp	r3, #55	@ 0x37
 80027a0:	d901      	bls.n	80027a6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80027a2:	2337      	movs	r3, #55	@ 0x37
 80027a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80027a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80027ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027b0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80027b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b4:	2200      	movs	r2, #0
 80027b6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ba:	3304      	adds	r3, #4
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff f96a 	bl	8001a96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c4:	3318      	adds	r3, #24
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff f965 	bl	8001a96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80027d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80027e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e4:	2200      	movs	r2, #0
 80027e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80027f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f4:	3354      	adds	r3, #84	@ 0x54
 80027f6:	224c      	movs	r2, #76	@ 0x4c
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 fd44 	bl	8004288 <memset>
 8002800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002802:	4a0d      	ldr	r2, [pc, #52]	@ (8002838 <prvInitialiseNewTask+0x144>)
 8002804:	659a      	str	r2, [r3, #88]	@ 0x58
 8002806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002808:	4a0c      	ldr	r2, [pc, #48]	@ (800283c <prvInitialiseNewTask+0x148>)
 800280a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800280c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800280e:	4a0c      	ldr	r2, [pc, #48]	@ (8002840 <prvInitialiseNewTask+0x14c>)
 8002810:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	68f9      	ldr	r1, [r7, #12]
 8002816:	69b8      	ldr	r0, [r7, #24]
 8002818:	f001 f954 	bl	8003ac4 <pxPortInitialiseStack>
 800281c:	4602      	mov	r2, r0
 800281e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002820:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800282c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800282e:	bf00      	nop
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20001ab8 	.word	0x20001ab8
 800283c:	20001b20 	.word	0x20001b20
 8002840:	20001b88 	.word	0x20001b88

08002844 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800284c:	f001 fa2e 	bl	8003cac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002850:	4b2d      	ldr	r3, [pc, #180]	@ (8002908 <prvAddNewTaskToReadyList+0xc4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	4a2c      	ldr	r2, [pc, #176]	@ (8002908 <prvAddNewTaskToReadyList+0xc4>)
 8002858:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800285a:	4b2c      	ldr	r3, [pc, #176]	@ (800290c <prvAddNewTaskToReadyList+0xc8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002862:	4a2a      	ldr	r2, [pc, #168]	@ (800290c <prvAddNewTaskToReadyList+0xc8>)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002868:	4b27      	ldr	r3, [pc, #156]	@ (8002908 <prvAddNewTaskToReadyList+0xc4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d110      	bne.n	8002892 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002870:	f000 fc2a 	bl	80030c8 <prvInitialiseTaskLists>
 8002874:	e00d      	b.n	8002892 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002876:	4b26      	ldr	r3, [pc, #152]	@ (8002910 <prvAddNewTaskToReadyList+0xcc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800287e:	4b23      	ldr	r3, [pc, #140]	@ (800290c <prvAddNewTaskToReadyList+0xc8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002888:	429a      	cmp	r2, r3
 800288a:	d802      	bhi.n	8002892 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800288c:	4a1f      	ldr	r2, [pc, #124]	@ (800290c <prvAddNewTaskToReadyList+0xc8>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002892:	4b20      	ldr	r3, [pc, #128]	@ (8002914 <prvAddNewTaskToReadyList+0xd0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	3301      	adds	r3, #1
 8002898:	4a1e      	ldr	r2, [pc, #120]	@ (8002914 <prvAddNewTaskToReadyList+0xd0>)
 800289a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800289c:	4b1d      	ldr	r3, [pc, #116]	@ (8002914 <prvAddNewTaskToReadyList+0xd0>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002918 <prvAddNewTaskToReadyList+0xd4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d903      	bls.n	80028b8 <prvAddNewTaskToReadyList+0x74>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b4:	4a18      	ldr	r2, [pc, #96]	@ (8002918 <prvAddNewTaskToReadyList+0xd4>)
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4a15      	ldr	r2, [pc, #84]	@ (800291c <prvAddNewTaskToReadyList+0xd8>)
 80028c6:	441a      	add	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3304      	adds	r3, #4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f7ff f8ed 	bl	8001aae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80028d4:	f001 fa1a 	bl	8003d0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80028d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002910 <prvAddNewTaskToReadyList+0xcc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00e      	beq.n	80028fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028e0:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <prvAddNewTaskToReadyList+0xc8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d207      	bcs.n	80028fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80028ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <prvAddNewTaskToReadyList+0xdc>)
 80028f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000d38 	.word	0x20000d38
 800290c:	20000864 	.word	0x20000864
 8002910:	20000d44 	.word	0x20000d44
 8002914:	20000d54 	.word	0x20000d54
 8002918:	20000d40 	.word	0x20000d40
 800291c:	20000868 	.word	0x20000868
 8002920:	e000ed04 	.word	0xe000ed04

08002924 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d018      	beq.n	8002968 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002936:	4b14      	ldr	r3, [pc, #80]	@ (8002988 <vTaskDelay+0x64>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <vTaskDelay+0x32>
	__asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	60bb      	str	r3, [r7, #8]
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	e7fd      	b.n	8002952 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002956:	f000 f88b 	bl	8002a70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800295a:	2100      	movs	r1, #0
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fd05 	bl	800336c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002962:	f000 f893 	bl	8002a8c <xTaskResumeAll>
 8002966:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d107      	bne.n	800297e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800296e:	4b07      	ldr	r3, [pc, #28]	@ (800298c <vTaskDelay+0x68>)
 8002970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	f3bf 8f4f 	dsb	sy
 800297a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000d60 	.word	0x20000d60
 800298c:	e000ed04 	.word	0xe000ed04

08002990 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	@ 0x28
 8002994:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800299e:	463a      	mov	r2, r7
 80029a0:	1d39      	adds	r1, r7, #4
 80029a2:	f107 0308 	add.w	r3, r7, #8
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff f824 	bl	80019f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	9202      	str	r2, [sp, #8]
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	2300      	movs	r3, #0
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	2300      	movs	r3, #0
 80029bc:	460a      	mov	r2, r1
 80029be:	4924      	ldr	r1, [pc, #144]	@ (8002a50 <vTaskStartScheduler+0xc0>)
 80029c0:	4824      	ldr	r0, [pc, #144]	@ (8002a54 <vTaskStartScheduler+0xc4>)
 80029c2:	f7ff fdf1 	bl	80025a8 <xTaskCreateStatic>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4a23      	ldr	r2, [pc, #140]	@ (8002a58 <vTaskStartScheduler+0xc8>)
 80029ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80029cc:	4b22      	ldr	r3, [pc, #136]	@ (8002a58 <vTaskStartScheduler+0xc8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80029d4:	2301      	movs	r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	e001      	b.n	80029de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d102      	bne.n	80029ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80029e4:	f000 fd16 	bl	8003414 <xTimerCreateTimerTask>
 80029e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d11b      	bne.n	8002a28 <vTaskStartScheduler+0x98>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	613b      	str	r3, [r7, #16]
}
 8002a02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002a04:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <vTaskStartScheduler+0xcc>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3354      	adds	r3, #84	@ 0x54
 8002a0a:	4a15      	ldr	r2, [pc, #84]	@ (8002a60 <vTaskStartScheduler+0xd0>)
 8002a0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002a0e:	4b15      	ldr	r3, [pc, #84]	@ (8002a64 <vTaskStartScheduler+0xd4>)
 8002a10:	f04f 32ff 	mov.w	r2, #4294967295
 8002a14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002a16:	4b14      	ldr	r3, [pc, #80]	@ (8002a68 <vTaskStartScheduler+0xd8>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a1c:	4b13      	ldr	r3, [pc, #76]	@ (8002a6c <vTaskStartScheduler+0xdc>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002a22:	f001 f8d1 	bl	8003bc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002a26:	e00f      	b.n	8002a48 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2e:	d10b      	bne.n	8002a48 <vTaskStartScheduler+0xb8>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	60fb      	str	r3, [r7, #12]
}
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <vTaskStartScheduler+0xb4>
}
 8002a48:	bf00      	nop
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	0800448c 	.word	0x0800448c
 8002a54:	08003099 	.word	0x08003099
 8002a58:	20000d5c 	.word	0x20000d5c
 8002a5c:	20000864 	.word	0x20000864
 8002a60:	20000010 	.word	0x20000010
 8002a64:	20000d58 	.word	0x20000d58
 8002a68:	20000d44 	.word	0x20000d44
 8002a6c:	20000d3c 	.word	0x20000d3c

08002a70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002a74:	4b04      	ldr	r3, [pc, #16]	@ (8002a88 <vTaskSuspendAll+0x18>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	4a03      	ldr	r2, [pc, #12]	@ (8002a88 <vTaskSuspendAll+0x18>)
 8002a7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000d60 	.word	0x20000d60

08002a8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002a9a:	4b42      	ldr	r3, [pc, #264]	@ (8002ba4 <xTaskResumeAll+0x118>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10b      	bne.n	8002aba <xTaskResumeAll+0x2e>
	__asm volatile
 8002aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	603b      	str	r3, [r7, #0]
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	e7fd      	b.n	8002ab6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002aba:	f001 f8f7 	bl	8003cac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002abe:	4b39      	ldr	r3, [pc, #228]	@ (8002ba4 <xTaskResumeAll+0x118>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	4a37      	ldr	r2, [pc, #220]	@ (8002ba4 <xTaskResumeAll+0x118>)
 8002ac6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ac8:	4b36      	ldr	r3, [pc, #216]	@ (8002ba4 <xTaskResumeAll+0x118>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d162      	bne.n	8002b96 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ad0:	4b35      	ldr	r3, [pc, #212]	@ (8002ba8 <xTaskResumeAll+0x11c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d05e      	beq.n	8002b96 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ad8:	e02f      	b.n	8002b3a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ada:	4b34      	ldr	r3, [pc, #208]	@ (8002bac <xTaskResumeAll+0x120>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3318      	adds	r3, #24
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff f83c 	bl	8001b64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	3304      	adds	r3, #4
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff f837 	bl	8001b64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002afa:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb0 <xTaskResumeAll+0x124>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d903      	bls.n	8002b0a <xTaskResumeAll+0x7e>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b06:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb0 <xTaskResumeAll+0x124>)
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4a27      	ldr	r2, [pc, #156]	@ (8002bb4 <xTaskResumeAll+0x128>)
 8002b18:	441a      	add	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4610      	mov	r0, r2
 8002b22:	f7fe ffc4 	bl	8001aae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b2a:	4b23      	ldr	r3, [pc, #140]	@ (8002bb8 <xTaskResumeAll+0x12c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d302      	bcc.n	8002b3a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002b34:	4b21      	ldr	r3, [pc, #132]	@ (8002bbc <xTaskResumeAll+0x130>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bac <xTaskResumeAll+0x120>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1cb      	bne.n	8002ada <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002b48:	f000 fb62 	bl	8003210 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc0 <xTaskResumeAll+0x134>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d010      	beq.n	8002b7a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002b58:	f000 f844 	bl	8002be4 <xTaskIncrementTick>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002b62:	4b16      	ldr	r3, [pc, #88]	@ (8002bbc <xTaskResumeAll+0x130>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1f1      	bne.n	8002b58 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002b74:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <xTaskResumeAll+0x134>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002b7a:	4b10      	ldr	r3, [pc, #64]	@ (8002bbc <xTaskResumeAll+0x130>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002b82:	2301      	movs	r3, #1
 8002b84:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002b86:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc4 <xTaskResumeAll+0x138>)
 8002b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	f3bf 8f4f 	dsb	sy
 8002b92:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b96:	f001 f8b9 	bl	8003d0c <vPortExitCritical>

	return xAlreadyYielded;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000d60 	.word	0x20000d60
 8002ba8:	20000d38 	.word	0x20000d38
 8002bac:	20000cf8 	.word	0x20000cf8
 8002bb0:	20000d40 	.word	0x20000d40
 8002bb4:	20000868 	.word	0x20000868
 8002bb8:	20000864 	.word	0x20000864
 8002bbc:	20000d4c 	.word	0x20000d4c
 8002bc0:	20000d48 	.word	0x20000d48
 8002bc4:	e000ed04 	.word	0xe000ed04

08002bc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002bce:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <xTaskGetTickCount+0x18>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002bd4:	687b      	ldr	r3, [r7, #4]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	20000d3c 	.word	0x20000d3c

08002be4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bee:	4b4f      	ldr	r3, [pc, #316]	@ (8002d2c <xTaskIncrementTick+0x148>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 8090 	bne.w	8002d18 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8002d30 <xTaskIncrementTick+0x14c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002c00:	4a4b      	ldr	r2, [pc, #300]	@ (8002d30 <xTaskIncrementTick+0x14c>)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d121      	bne.n	8002c50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002c0c:	4b49      	ldr	r3, [pc, #292]	@ (8002d34 <xTaskIncrementTick+0x150>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	603b      	str	r3, [r7, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	e7fd      	b.n	8002c2a <xTaskIncrementTick+0x46>
 8002c2e:	4b41      	ldr	r3, [pc, #260]	@ (8002d34 <xTaskIncrementTick+0x150>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	4b40      	ldr	r3, [pc, #256]	@ (8002d38 <xTaskIncrementTick+0x154>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a3e      	ldr	r2, [pc, #248]	@ (8002d34 <xTaskIncrementTick+0x150>)
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4a3e      	ldr	r2, [pc, #248]	@ (8002d38 <xTaskIncrementTick+0x154>)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b3e      	ldr	r3, [pc, #248]	@ (8002d3c <xTaskIncrementTick+0x158>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	3301      	adds	r3, #1
 8002c48:	4a3c      	ldr	r2, [pc, #240]	@ (8002d3c <xTaskIncrementTick+0x158>)
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	f000 fae0 	bl	8003210 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002c50:	4b3b      	ldr	r3, [pc, #236]	@ (8002d40 <xTaskIncrementTick+0x15c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d349      	bcc.n	8002cee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c5a:	4b36      	ldr	r3, [pc, #216]	@ (8002d34 <xTaskIncrementTick+0x150>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d104      	bne.n	8002c6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c64:	4b36      	ldr	r3, [pc, #216]	@ (8002d40 <xTaskIncrementTick+0x15c>)
 8002c66:	f04f 32ff 	mov.w	r2, #4294967295
 8002c6a:	601a      	str	r2, [r3, #0]
					break;
 8002c6c:	e03f      	b.n	8002cee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c6e:	4b31      	ldr	r3, [pc, #196]	@ (8002d34 <xTaskIncrementTick+0x150>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d203      	bcs.n	8002c8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002c86:	4a2e      	ldr	r2, [pc, #184]	@ (8002d40 <xTaskIncrementTick+0x15c>)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c8c:	e02f      	b.n	8002cee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	3304      	adds	r3, #4
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe ff66 	bl	8001b64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	3318      	adds	r3, #24
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe ff5d 	bl	8001b64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cae:	4b25      	ldr	r3, [pc, #148]	@ (8002d44 <xTaskIncrementTick+0x160>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d903      	bls.n	8002cbe <xTaskIncrementTick+0xda>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cba:	4a22      	ldr	r2, [pc, #136]	@ (8002d44 <xTaskIncrementTick+0x160>)
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4a1f      	ldr	r2, [pc, #124]	@ (8002d48 <xTaskIncrementTick+0x164>)
 8002ccc:	441a      	add	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	f7fe feea 	bl	8001aae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cde:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <xTaskIncrementTick+0x168>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d3b8      	bcc.n	8002c5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cec:	e7b5      	b.n	8002c5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002cee:	4b17      	ldr	r3, [pc, #92]	@ (8002d4c <xTaskIncrementTick+0x168>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf4:	4914      	ldr	r1, [pc, #80]	@ (8002d48 <xTaskIncrementTick+0x164>)
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d901      	bls.n	8002d0a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002d06:	2301      	movs	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002d0a:	4b11      	ldr	r3, [pc, #68]	@ (8002d50 <xTaskIncrementTick+0x16c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d007      	beq.n	8002d22 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e004      	b.n	8002d22 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002d18:	4b0e      	ldr	r3, [pc, #56]	@ (8002d54 <xTaskIncrementTick+0x170>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8002d54 <xTaskIncrementTick+0x170>)
 8002d20:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002d22:	697b      	ldr	r3, [r7, #20]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000d60 	.word	0x20000d60
 8002d30:	20000d3c 	.word	0x20000d3c
 8002d34:	20000cf0 	.word	0x20000cf0
 8002d38:	20000cf4 	.word	0x20000cf4
 8002d3c:	20000d50 	.word	0x20000d50
 8002d40:	20000d58 	.word	0x20000d58
 8002d44:	20000d40 	.word	0x20000d40
 8002d48:	20000868 	.word	0x20000868
 8002d4c:	20000864 	.word	0x20000864
 8002d50:	20000d4c 	.word	0x20000d4c
 8002d54:	20000d48 	.word	0x20000d48

08002d58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e08 <vTaskSwitchContext+0xb0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002d66:	4b29      	ldr	r3, [pc, #164]	@ (8002e0c <vTaskSwitchContext+0xb4>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002d6c:	e047      	b.n	8002dfe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8002d6e:	4b27      	ldr	r3, [pc, #156]	@ (8002e0c <vTaskSwitchContext+0xb4>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d74:	4b26      	ldr	r3, [pc, #152]	@ (8002e10 <vTaskSwitchContext+0xb8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	e011      	b.n	8002da0 <vTaskSwitchContext+0x48>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10b      	bne.n	8002d9a <vTaskSwitchContext+0x42>
	__asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	607b      	str	r3, [r7, #4]
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	e7fd      	b.n	8002d96 <vTaskSwitchContext+0x3e>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	491c      	ldr	r1, [pc, #112]	@ (8002e14 <vTaskSwitchContext+0xbc>)
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0e3      	beq.n	8002d7c <vTaskSwitchContext+0x24>
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4a15      	ldr	r2, [pc, #84]	@ (8002e14 <vTaskSwitchContext+0xbc>)
 8002dc0:	4413      	add	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d104      	bne.n	8002de4 <vTaskSwitchContext+0x8c>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	4a0b      	ldr	r2, [pc, #44]	@ (8002e18 <vTaskSwitchContext+0xc0>)
 8002dec:	6013      	str	r3, [r2, #0]
 8002dee:	4a08      	ldr	r2, [pc, #32]	@ (8002e10 <vTaskSwitchContext+0xb8>)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002df4:	4b08      	ldr	r3, [pc, #32]	@ (8002e18 <vTaskSwitchContext+0xc0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3354      	adds	r3, #84	@ 0x54
 8002dfa:	4a08      	ldr	r2, [pc, #32]	@ (8002e1c <vTaskSwitchContext+0xc4>)
 8002dfc:	6013      	str	r3, [r2, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	20000d60 	.word	0x20000d60
 8002e0c:	20000d4c 	.word	0x20000d4c
 8002e10:	20000d40 	.word	0x20000d40
 8002e14:	20000868 	.word	0x20000868
 8002e18:	20000864 	.word	0x20000864
 8002e1c:	20000010 	.word	0x20000010

08002e20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10b      	bne.n	8002e48 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	60fb      	str	r3, [r7, #12]
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e48:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <vTaskPlaceOnEventList+0x48>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3318      	adds	r3, #24
 8002e4e:	4619      	mov	r1, r3
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7fe fe4f 	bl	8001af4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e56:	2101      	movs	r1, #1
 8002e58:	6838      	ldr	r0, [r7, #0]
 8002e5a:	f000 fa87 	bl	800336c <prvAddCurrentTaskToDelayedList>
}
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000864 	.word	0x20000864

08002e6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	617b      	str	r3, [r7, #20]
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	e7fd      	b.n	8002e92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <vTaskPlaceOnEventListRestricted+0x54>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3318      	adds	r3, #24
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7fe fe05 	bl	8001aae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002eae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	68b8      	ldr	r0, [r7, #8]
 8002eb4:	f000 fa5a 	bl	800336c <prvAddCurrentTaskToDelayedList>
	}
 8002eb8:	bf00      	nop
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000864 	.word	0x20000864

08002ec4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8002eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	60fb      	str	r3, [r7, #12]
}
 8002eec:	bf00      	nop
 8002eee:	bf00      	nop
 8002ef0:	e7fd      	b.n	8002eee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	3318      	adds	r3, #24
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe fe34 	bl	8001b64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002efc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f74 <xTaskRemoveFromEventList+0xb0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d11d      	bne.n	8002f40 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe fe2b 	bl	8001b64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f12:	4b19      	ldr	r3, [pc, #100]	@ (8002f78 <xTaskRemoveFromEventList+0xb4>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d903      	bls.n	8002f22 <xTaskRemoveFromEventList+0x5e>
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1e:	4a16      	ldr	r2, [pc, #88]	@ (8002f78 <xTaskRemoveFromEventList+0xb4>)
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4a13      	ldr	r2, [pc, #76]	@ (8002f7c <xTaskRemoveFromEventList+0xb8>)
 8002f30:	441a      	add	r2, r3
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	3304      	adds	r3, #4
 8002f36:	4619      	mov	r1, r3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	f7fe fdb8 	bl	8001aae <vListInsertEnd>
 8002f3e:	e005      	b.n	8002f4c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	3318      	adds	r3, #24
 8002f44:	4619      	mov	r1, r3
 8002f46:	480e      	ldr	r0, [pc, #56]	@ (8002f80 <xTaskRemoveFromEventList+0xbc>)
 8002f48:	f7fe fdb1 	bl	8001aae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f50:	4b0c      	ldr	r3, [pc, #48]	@ (8002f84 <xTaskRemoveFromEventList+0xc0>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d905      	bls.n	8002f66 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <xTaskRemoveFromEventList+0xc4>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e001      	b.n	8002f6a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002f6a:	697b      	ldr	r3, [r7, #20]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000d60 	.word	0x20000d60
 8002f78:	20000d40 	.word	0x20000d40
 8002f7c:	20000868 	.word	0x20000868
 8002f80:	20000cf8 	.word	0x20000cf8
 8002f84:	20000864 	.word	0x20000864
 8002f88:	20000d4c 	.word	0x20000d4c

08002f8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <vTaskInternalSetTimeOutState+0x24>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <vTaskInternalSetTimeOutState+0x28>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	605a      	str	r2, [r3, #4]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000d50 	.word	0x20000d50
 8002fb4:	20000d3c 	.word	0x20000d3c

08002fb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	613b      	str	r3, [r7, #16]
}
 8002fda:	bf00      	nop
 8002fdc:	bf00      	nop
 8002fde:	e7fd      	b.n	8002fdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10b      	bne.n	8002ffe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	60fb      	str	r3, [r7, #12]
}
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	e7fd      	b.n	8002ffa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8002ffe:	f000 fe55 	bl	8003cac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003002:	4b1d      	ldr	r3, [pc, #116]	@ (8003078 <xTaskCheckForTimeOut+0xc0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301a:	d102      	bne.n	8003022 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800301c:	2300      	movs	r3, #0
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	e023      	b.n	800306a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <xTaskCheckForTimeOut+0xc4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d007      	beq.n	800303e <xTaskCheckForTimeOut+0x86>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	429a      	cmp	r2, r3
 8003036:	d302      	bcc.n	800303e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003038:	2301      	movs	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	e015      	b.n	800306a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	429a      	cmp	r2, r3
 8003046:	d20b      	bcs.n	8003060 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff99 	bl	8002f8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	e004      	b.n	800306a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003066:	2301      	movs	r3, #1
 8003068:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800306a:	f000 fe4f 	bl	8003d0c <vPortExitCritical>

	return xReturn;
 800306e:	69fb      	ldr	r3, [r7, #28]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3720      	adds	r7, #32
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000d3c 	.word	0x20000d3c
 800307c:	20000d50 	.word	0x20000d50

08003080 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003084:	4b03      	ldr	r3, [pc, #12]	@ (8003094 <vTaskMissedYield+0x14>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]
}
 800308a:	bf00      	nop
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000d4c 	.word	0x20000d4c

08003098 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030a0:	f000 f852 	bl	8003148 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030a4:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <prvIdleTask+0x28>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d9f9      	bls.n	80030a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80030ac:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <prvIdleTask+0x2c>)
 80030ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80030bc:	e7f0      	b.n	80030a0 <prvIdleTask+0x8>
 80030be:	bf00      	nop
 80030c0:	20000868 	.word	0x20000868
 80030c4:	e000ed04 	.word	0xe000ed04

080030c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	e00c      	b.n	80030ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4a12      	ldr	r2, [pc, #72]	@ (8003128 <prvInitialiseTaskLists+0x60>)
 80030e0:	4413      	add	r3, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fcb8 	bl	8001a58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	3301      	adds	r3, #1
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b37      	cmp	r3, #55	@ 0x37
 80030f2:	d9ef      	bls.n	80030d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80030f4:	480d      	ldr	r0, [pc, #52]	@ (800312c <prvInitialiseTaskLists+0x64>)
 80030f6:	f7fe fcaf 	bl	8001a58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80030fa:	480d      	ldr	r0, [pc, #52]	@ (8003130 <prvInitialiseTaskLists+0x68>)
 80030fc:	f7fe fcac 	bl	8001a58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003100:	480c      	ldr	r0, [pc, #48]	@ (8003134 <prvInitialiseTaskLists+0x6c>)
 8003102:	f7fe fca9 	bl	8001a58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003106:	480c      	ldr	r0, [pc, #48]	@ (8003138 <prvInitialiseTaskLists+0x70>)
 8003108:	f7fe fca6 	bl	8001a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800310c:	480b      	ldr	r0, [pc, #44]	@ (800313c <prvInitialiseTaskLists+0x74>)
 800310e:	f7fe fca3 	bl	8001a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003112:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <prvInitialiseTaskLists+0x78>)
 8003114:	4a05      	ldr	r2, [pc, #20]	@ (800312c <prvInitialiseTaskLists+0x64>)
 8003116:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003118:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <prvInitialiseTaskLists+0x7c>)
 800311a:	4a05      	ldr	r2, [pc, #20]	@ (8003130 <prvInitialiseTaskLists+0x68>)
 800311c:	601a      	str	r2, [r3, #0]
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000868 	.word	0x20000868
 800312c:	20000cc8 	.word	0x20000cc8
 8003130:	20000cdc 	.word	0x20000cdc
 8003134:	20000cf8 	.word	0x20000cf8
 8003138:	20000d0c 	.word	0x20000d0c
 800313c:	20000d24 	.word	0x20000d24
 8003140:	20000cf0 	.word	0x20000cf0
 8003144:	20000cf4 	.word	0x20000cf4

08003148 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800314e:	e019      	b.n	8003184 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003150:	f000 fdac 	bl	8003cac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003154:	4b10      	ldr	r3, [pc, #64]	@ (8003198 <prvCheckTasksWaitingTermination+0x50>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	4618      	mov	r0, r3
 8003162:	f7fe fcff 	bl	8001b64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003166:	4b0d      	ldr	r3, [pc, #52]	@ (800319c <prvCheckTasksWaitingTermination+0x54>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3b01      	subs	r3, #1
 800316c:	4a0b      	ldr	r2, [pc, #44]	@ (800319c <prvCheckTasksWaitingTermination+0x54>)
 800316e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003170:	4b0b      	ldr	r3, [pc, #44]	@ (80031a0 <prvCheckTasksWaitingTermination+0x58>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3b01      	subs	r3, #1
 8003176:	4a0a      	ldr	r2, [pc, #40]	@ (80031a0 <prvCheckTasksWaitingTermination+0x58>)
 8003178:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800317a:	f000 fdc7 	bl	8003d0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f810 	bl	80031a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003184:	4b06      	ldr	r3, [pc, #24]	@ (80031a0 <prvCheckTasksWaitingTermination+0x58>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1e1      	bne.n	8003150 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000d0c 	.word	0x20000d0c
 800319c:	20000d38 	.word	0x20000d38
 80031a0:	20000d20 	.word	0x20000d20

080031a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3354      	adds	r3, #84	@ 0x54
 80031b0:	4618      	mov	r0, r3
 80031b2:	f001 f871 	bl	8004298 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d108      	bne.n	80031d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 ff41 	bl	800404c <vPortFree>
				vPortFree( pxTCB );
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 ff3e 	bl	800404c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80031d0:	e019      	b.n	8003206 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d103      	bne.n	80031e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 ff35 	bl	800404c <vPortFree>
	}
 80031e2:	e010      	b.n	8003206 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d00b      	beq.n	8003206 <prvDeleteTCB+0x62>
	__asm volatile
 80031ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	60fb      	str	r3, [r7, #12]
}
 8003200:	bf00      	nop
 8003202:	bf00      	nop
 8003204:	e7fd      	b.n	8003202 <prvDeleteTCB+0x5e>
	}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003216:	4b0c      	ldr	r3, [pc, #48]	@ (8003248 <prvResetNextTaskUnblockTime+0x38>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d104      	bne.n	800322a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003220:	4b0a      	ldr	r3, [pc, #40]	@ (800324c <prvResetNextTaskUnblockTime+0x3c>)
 8003222:	f04f 32ff 	mov.w	r2, #4294967295
 8003226:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003228:	e008      	b.n	800323c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800322a:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <prvResetNextTaskUnblockTime+0x38>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a04      	ldr	r2, [pc, #16]	@ (800324c <prvResetNextTaskUnblockTime+0x3c>)
 800323a:	6013      	str	r3, [r2, #0]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000cf0 	.word	0x20000cf0
 800324c:	20000d58 	.word	0x20000d58

08003250 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003256:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <xTaskGetSchedulerState+0x34>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800325e:	2301      	movs	r3, #1
 8003260:	607b      	str	r3, [r7, #4]
 8003262:	e008      	b.n	8003276 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003264:	4b08      	ldr	r3, [pc, #32]	@ (8003288 <xTaskGetSchedulerState+0x38>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800326c:	2302      	movs	r3, #2
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	e001      	b.n	8003276 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003276:	687b      	ldr	r3, [r7, #4]
	}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000d44 	.word	0x20000d44
 8003288:	20000d60 	.word	0x20000d60

0800328c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d058      	beq.n	8003354 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80032a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003360 <xTaskPriorityDisinherit+0xd4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d00b      	beq.n	80032c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80032ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	60fb      	str	r3, [r7, #12]
}
 80032be:	bf00      	nop
 80032c0:	bf00      	nop
 80032c2:	e7fd      	b.n	80032c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10b      	bne.n	80032e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80032cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	60bb      	str	r3, [r7, #8]
}
 80032de:	bf00      	nop
 80032e0:	bf00      	nop
 80032e2:	e7fd      	b.n	80032e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e8:	1e5a      	subs	r2, r3, #1
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d02c      	beq.n	8003354 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d128      	bne.n	8003354 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	3304      	adds	r3, #4
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fc2c 	bl	8001b64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003324:	4b0f      	ldr	r3, [pc, #60]	@ (8003364 <xTaskPriorityDisinherit+0xd8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d903      	bls.n	8003334 <xTaskPriorityDisinherit+0xa8>
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	4a0c      	ldr	r2, [pc, #48]	@ (8003364 <xTaskPriorityDisinherit+0xd8>)
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4a09      	ldr	r2, [pc, #36]	@ (8003368 <xTaskPriorityDisinherit+0xdc>)
 8003342:	441a      	add	r2, r3
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	3304      	adds	r3, #4
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f7fe fbaf 	bl	8001aae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003350:	2301      	movs	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003354:	697b      	ldr	r3, [r7, #20]
	}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000864 	.word	0x20000864
 8003364:	20000d40 	.word	0x20000d40
 8003368:	20000868 	.word	0x20000868

0800336c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003376:	4b21      	ldr	r3, [pc, #132]	@ (80033fc <prvAddCurrentTaskToDelayedList+0x90>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800337c:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <prvAddCurrentTaskToDelayedList+0x94>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3304      	adds	r3, #4
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fbee 	bl	8001b64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d10a      	bne.n	80033a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003396:	4b1a      	ldr	r3, [pc, #104]	@ (8003400 <prvAddCurrentTaskToDelayedList+0x94>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3304      	adds	r3, #4
 800339c:	4619      	mov	r1, r3
 800339e:	4819      	ldr	r0, [pc, #100]	@ (8003404 <prvAddCurrentTaskToDelayedList+0x98>)
 80033a0:	f7fe fb85 	bl	8001aae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033a4:	e026      	b.n	80033f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4413      	add	r3, r2
 80033ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033ae:	4b14      	ldr	r3, [pc, #80]	@ (8003400 <prvAddCurrentTaskToDelayedList+0x94>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d209      	bcs.n	80033d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033be:	4b12      	ldr	r3, [pc, #72]	@ (8003408 <prvAddCurrentTaskToDelayedList+0x9c>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003400 <prvAddCurrentTaskToDelayedList+0x94>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3304      	adds	r3, #4
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f7fe fb92 	bl	8001af4 <vListInsert>
}
 80033d0:	e010      	b.n	80033f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d2:	4b0e      	ldr	r3, [pc, #56]	@ (800340c <prvAddCurrentTaskToDelayedList+0xa0>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <prvAddCurrentTaskToDelayedList+0x94>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3304      	adds	r3, #4
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f7fe fb88 	bl	8001af4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <prvAddCurrentTaskToDelayedList+0xa4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d202      	bcs.n	80033f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80033ee:	4a08      	ldr	r2, [pc, #32]	@ (8003410 <prvAddCurrentTaskToDelayedList+0xa4>)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	6013      	str	r3, [r2, #0]
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20000d3c 	.word	0x20000d3c
 8003400:	20000864 	.word	0x20000864
 8003404:	20000d24 	.word	0x20000d24
 8003408:	20000cf4 	.word	0x20000cf4
 800340c:	20000cf0 	.word	0x20000cf0
 8003410:	20000d58 	.word	0x20000d58

08003414 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	@ 0x28
 8003418:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800341e:	f000 fb11 	bl	8003a44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003422:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <xTimerCreateTimerTask+0x84>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d021      	beq.n	800346e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003432:	1d3a      	adds	r2, r7, #4
 8003434:	f107 0108 	add.w	r1, r7, #8
 8003438:	f107 030c 	add.w	r3, r7, #12
 800343c:	4618      	mov	r0, r3
 800343e:	f7fe faf1 	bl	8001a24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	9202      	str	r2, [sp, #8]
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	2302      	movs	r3, #2
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2300      	movs	r3, #0
 8003452:	460a      	mov	r2, r1
 8003454:	4911      	ldr	r1, [pc, #68]	@ (800349c <xTimerCreateTimerTask+0x88>)
 8003456:	4812      	ldr	r0, [pc, #72]	@ (80034a0 <xTimerCreateTimerTask+0x8c>)
 8003458:	f7ff f8a6 	bl	80025a8 <xTaskCreateStatic>
 800345c:	4603      	mov	r3, r0
 800345e:	4a11      	ldr	r2, [pc, #68]	@ (80034a4 <xTimerCreateTimerTask+0x90>)
 8003460:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003462:	4b10      	ldr	r3, [pc, #64]	@ (80034a4 <xTimerCreateTimerTask+0x90>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800346a:	2301      	movs	r3, #1
 800346c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	613b      	str	r3, [r7, #16]
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	e7fd      	b.n	8003488 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800348c:	697b      	ldr	r3, [r7, #20]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000d94 	.word	0x20000d94
 800349c:	08004494 	.word	0x08004494
 80034a0:	080035e1 	.word	0x080035e1
 80034a4:	20000d98 	.word	0x20000d98

080034a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	@ 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
 80034b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <xTimerGenericCommand+0x30>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	623b      	str	r3, [r7, #32]
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80034d8:	4b19      	ldr	r3, [pc, #100]	@ (8003540 <xTimerGenericCommand+0x98>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02a      	beq.n	8003536 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	dc18      	bgt.n	8003524 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80034f2:	f7ff fead 	bl	8003250 <xTaskGetSchedulerState>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d109      	bne.n	8003510 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034fc:	4b10      	ldr	r3, [pc, #64]	@ (8003540 <xTimerGenericCommand+0x98>)
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	f107 0110 	add.w	r1, r7, #16
 8003504:	2300      	movs	r3, #0
 8003506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003508:	f7fe fc60 	bl	8001dcc <xQueueGenericSend>
 800350c:	6278      	str	r0, [r7, #36]	@ 0x24
 800350e:	e012      	b.n	8003536 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003510:	4b0b      	ldr	r3, [pc, #44]	@ (8003540 <xTimerGenericCommand+0x98>)
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	f107 0110 	add.w	r1, r7, #16
 8003518:	2300      	movs	r3, #0
 800351a:	2200      	movs	r2, #0
 800351c:	f7fe fc56 	bl	8001dcc <xQueueGenericSend>
 8003520:	6278      	str	r0, [r7, #36]	@ 0x24
 8003522:	e008      	b.n	8003536 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <xTimerGenericCommand+0x98>)
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	f107 0110 	add.w	r1, r7, #16
 800352c:	2300      	movs	r3, #0
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	f7fe fd4e 	bl	8001fd0 <xQueueGenericSendFromISR>
 8003534:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003538:	4618      	mov	r0, r3
 800353a:	3728      	adds	r7, #40	@ 0x28
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20000d94 	.word	0x20000d94

08003544 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af02      	add	r7, sp, #8
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800354e:	4b23      	ldr	r3, [pc, #140]	@ (80035dc <prvProcessExpiredTimer+0x98>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	3304      	adds	r3, #4
 800355c:	4618      	mov	r0, r3
 800355e:	f7fe fb01 	bl	8001b64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d023      	beq.n	80035b8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	18d1      	adds	r1, r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	6978      	ldr	r0, [r7, #20]
 800357e:	f000 f8d3 	bl	8003728 <prvInsertTimerInActiveList>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003588:	2300      	movs	r3, #0
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	2100      	movs	r1, #0
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7ff ff88 	bl	80034a8 <xTimerGenericCommand>
 8003598:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d114      	bne.n	80035ca <prvProcessExpiredTimer+0x86>
	__asm volatile
 80035a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	60fb      	str	r3, [r7, #12]
}
 80035b2:	bf00      	nop
 80035b4:	bf00      	nop
 80035b6:	e7fd      	b.n	80035b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	6978      	ldr	r0, [r7, #20]
 80035d0:	4798      	blx	r3
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	20000d8c 	.word	0x20000d8c

080035e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035e8:	f107 0308 	add.w	r3, r7, #8
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 f859 	bl	80036a4 <prvGetNextExpireTime>
 80035f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4619      	mov	r1, r3
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f000 f805 	bl	8003608 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80035fe:	f000 f8d5 	bl	80037ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003602:	bf00      	nop
 8003604:	e7f0      	b.n	80035e8 <prvTimerTask+0x8>
	...

08003608 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003612:	f7ff fa2d 	bl	8002a70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003616:	f107 0308 	add.w	r3, r7, #8
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f864 	bl	80036e8 <prvSampleTimeNow>
 8003620:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d130      	bne.n	800368a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10a      	bne.n	8003644 <prvProcessTimerOrBlockTask+0x3c>
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	429a      	cmp	r2, r3
 8003634:	d806      	bhi.n	8003644 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003636:	f7ff fa29 	bl	8002a8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800363a:	68f9      	ldr	r1, [r7, #12]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff81 	bl	8003544 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003642:	e024      	b.n	800368e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800364a:	4b13      	ldr	r3, [pc, #76]	@ (8003698 <prvProcessTimerOrBlockTask+0x90>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <prvProcessTimerOrBlockTask+0x50>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <prvProcessTimerOrBlockTask+0x52>
 8003658:	2300      	movs	r3, #0
 800365a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800365c:	4b0f      	ldr	r3, [pc, #60]	@ (800369c <prvProcessTimerOrBlockTask+0x94>)
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	4619      	mov	r1, r3
 800366a:	f7fe ff69 	bl	8002540 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800366e:	f7ff fa0d 	bl	8002a8c <xTaskResumeAll>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003678:	4b09      	ldr	r3, [pc, #36]	@ (80036a0 <prvProcessTimerOrBlockTask+0x98>)
 800367a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	f3bf 8f6f 	isb	sy
}
 8003688:	e001      	b.n	800368e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800368a:	f7ff f9ff 	bl	8002a8c <xTaskResumeAll>
}
 800368e:	bf00      	nop
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000d90 	.word	0x20000d90
 800369c:	20000d94 	.word	0x20000d94
 80036a0:	e000ed04 	.word	0xe000ed04

080036a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80036ac:	4b0d      	ldr	r3, [pc, #52]	@ (80036e4 <prvGetNextExpireTime+0x40>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <prvGetNextExpireTime+0x16>
 80036b6:	2201      	movs	r2, #1
 80036b8:	e000      	b.n	80036bc <prvGetNextExpireTime+0x18>
 80036ba:	2200      	movs	r2, #0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036c8:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <prvGetNextExpireTime+0x40>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60fb      	str	r3, [r7, #12]
 80036d2:	e001      	b.n	80036d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80036d8:	68fb      	ldr	r3, [r7, #12]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	20000d8c 	.word	0x20000d8c

080036e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80036f0:	f7ff fa6a 	bl	8002bc8 <xTaskGetTickCount>
 80036f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80036f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <prvSampleTimeNow+0x3c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d205      	bcs.n	800370c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003700:	f000 f93a 	bl	8003978 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	e002      	b.n	8003712 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003712:	4a04      	ldr	r2, [pc, #16]	@ (8003724 <prvSampleTimeNow+0x3c>)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003718:	68fb      	ldr	r3, [r7, #12]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000d9c 	.word	0x20000d9c

08003728 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	429a      	cmp	r2, r3
 800374c:	d812      	bhi.n	8003774 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	1ad2      	subs	r2, r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	429a      	cmp	r2, r3
 800375a:	d302      	bcc.n	8003762 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800375c:	2301      	movs	r3, #1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	e01b      	b.n	800379a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003762:	4b10      	ldr	r3, [pc, #64]	@ (80037a4 <prvInsertTimerInActiveList+0x7c>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	3304      	adds	r3, #4
 800376a:	4619      	mov	r1, r3
 800376c:	4610      	mov	r0, r2
 800376e:	f7fe f9c1 	bl	8001af4 <vListInsert>
 8003772:	e012      	b.n	800379a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d206      	bcs.n	800378a <prvInsertTimerInActiveList+0x62>
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d302      	bcc.n	800378a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003784:	2301      	movs	r3, #1
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	e007      	b.n	800379a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800378a:	4b07      	ldr	r3, [pc, #28]	@ (80037a8 <prvInsertTimerInActiveList+0x80>)
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3304      	adds	r3, #4
 8003792:	4619      	mov	r1, r3
 8003794:	4610      	mov	r0, r2
 8003796:	f7fe f9ad 	bl	8001af4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800379a:	697b      	ldr	r3, [r7, #20]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000d90 	.word	0x20000d90
 80037a8:	20000d8c 	.word	0x20000d8c

080037ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08e      	sub	sp, #56	@ 0x38
 80037b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037b2:	e0ce      	b.n	8003952 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	da19      	bge.n	80037ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	3304      	adds	r3, #4
 80037be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80037c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10b      	bne.n	80037de <prvProcessReceivedCommands+0x32>
	__asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	61fb      	str	r3, [r7, #28]
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80037de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037e4:	6850      	ldr	r0, [r2, #4]
 80037e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037e8:	6892      	ldr	r2, [r2, #8]
 80037ea:	4611      	mov	r1, r2
 80037ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f2c0 80ae 	blt.w	8003952 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80037fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003804:	3304      	adds	r3, #4
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe f9ac 	bl	8001b64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800380c:	463b      	mov	r3, r7
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ff6a 	bl	80036e8 <prvSampleTimeNow>
 8003814:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b09      	cmp	r3, #9
 800381a:	f200 8097 	bhi.w	800394c <prvProcessReceivedCommands+0x1a0>
 800381e:	a201      	add	r2, pc, #4	@ (adr r2, 8003824 <prvProcessReceivedCommands+0x78>)
 8003820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003824:	0800384d 	.word	0x0800384d
 8003828:	0800384d 	.word	0x0800384d
 800382c:	0800384d 	.word	0x0800384d
 8003830:	080038c3 	.word	0x080038c3
 8003834:	080038d7 	.word	0x080038d7
 8003838:	08003923 	.word	0x08003923
 800383c:	0800384d 	.word	0x0800384d
 8003840:	0800384d 	.word	0x0800384d
 8003844:	080038c3 	.word	0x080038c3
 8003848:	080038d7 	.word	0x080038d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800384c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	b2da      	uxtb	r2, r3
 8003858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	18d1      	adds	r1, r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800386a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800386c:	f7ff ff5c 	bl	8003728 <prvInsertTimerInActiveList>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d06c      	beq.n	8003950 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800387c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800387e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d061      	beq.n	8003950 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	441a      	add	r2, r3
 8003894:	2300      	movs	r3, #0
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2300      	movs	r3, #0
 800389a:	2100      	movs	r1, #0
 800389c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800389e:	f7ff fe03 	bl	80034a8 <xTimerGenericCommand>
 80038a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80038a4:	6a3b      	ldr	r3, [r7, #32]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d152      	bne.n	8003950 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	61bb      	str	r3, [r7, #24]
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	e7fd      	b.n	80038be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80038d4:	e03d      	b.n	8003952 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80038d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80038ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10b      	bne.n	800390e <prvProcessReceivedCommands+0x162>
	__asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	617b      	str	r3, [r7, #20]
}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	e7fd      	b.n	800390a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800390e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	18d1      	adds	r1, r2, r3
 8003916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800391c:	f7ff ff04 	bl	8003728 <prvInsertTimerInActiveList>
					break;
 8003920:	e017      	b.n	8003952 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d103      	bne.n	8003938 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003932:	f000 fb8b 	bl	800404c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003936:	e00c      	b.n	8003952 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800393a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	b2da      	uxtb	r2, r3
 8003944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003946:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800394a:	e002      	b.n	8003952 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800394c:	bf00      	nop
 800394e:	e000      	b.n	8003952 <prvProcessReceivedCommands+0x1a6>
					break;
 8003950:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003952:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <prvProcessReceivedCommands+0x1c8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	1d39      	adds	r1, r7, #4
 8003958:	2200      	movs	r2, #0
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fbd6 	bl	800210c <xQueueReceive>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	f47f af26 	bne.w	80037b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	3730      	adds	r7, #48	@ 0x30
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	20000d94 	.word	0x20000d94

08003978 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800397e:	e049      	b.n	8003a14 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003980:	4b2e      	ldr	r3, [pc, #184]	@ (8003a3c <prvSwitchTimerLists+0xc4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800398a:	4b2c      	ldr	r3, [pc, #176]	@ (8003a3c <prvSwitchTimerLists+0xc4>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3304      	adds	r3, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe f8e3 	bl	8001b64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d02f      	beq.n	8003a14 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4413      	add	r3, r2
 80039bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d90e      	bls.n	80039e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039d2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a3c <prvSwitchTimerLists+0xc4>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	3304      	adds	r3, #4
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f7fe f889 	bl	8001af4 <vListInsert>
 80039e2:	e017      	b.n	8003a14 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039e4:	2300      	movs	r3, #0
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	2300      	movs	r3, #0
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	2100      	movs	r1, #0
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff fd5a 	bl	80034a8 <xTimerGenericCommand>
 80039f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80039fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a00:	f383 8811 	msr	BASEPRI, r3
 8003a04:	f3bf 8f6f 	isb	sy
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	603b      	str	r3, [r7, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	bf00      	nop
 8003a12:	e7fd      	b.n	8003a10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a14:	4b09      	ldr	r3, [pc, #36]	@ (8003a3c <prvSwitchTimerLists+0xc4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1b0      	bne.n	8003980 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003a1e:	4b07      	ldr	r3, [pc, #28]	@ (8003a3c <prvSwitchTimerLists+0xc4>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003a24:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <prvSwitchTimerLists+0xc8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a04      	ldr	r2, [pc, #16]	@ (8003a3c <prvSwitchTimerLists+0xc4>)
 8003a2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003a2c:	4a04      	ldr	r2, [pc, #16]	@ (8003a40 <prvSwitchTimerLists+0xc8>)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	6013      	str	r3, [r2, #0]
}
 8003a32:	bf00      	nop
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000d8c 	.word	0x20000d8c
 8003a40:	20000d90 	.word	0x20000d90

08003a44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003a4a:	f000 f92f 	bl	8003cac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003a4e:	4b15      	ldr	r3, [pc, #84]	@ (8003aa4 <prvCheckForValidListAndQueue+0x60>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d120      	bne.n	8003a98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003a56:	4814      	ldr	r0, [pc, #80]	@ (8003aa8 <prvCheckForValidListAndQueue+0x64>)
 8003a58:	f7fd fffe 	bl	8001a58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003a5c:	4813      	ldr	r0, [pc, #76]	@ (8003aac <prvCheckForValidListAndQueue+0x68>)
 8003a5e:	f7fd fffb 	bl	8001a58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003a62:	4b13      	ldr	r3, [pc, #76]	@ (8003ab0 <prvCheckForValidListAndQueue+0x6c>)
 8003a64:	4a10      	ldr	r2, [pc, #64]	@ (8003aa8 <prvCheckForValidListAndQueue+0x64>)
 8003a66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003a68:	4b12      	ldr	r3, [pc, #72]	@ (8003ab4 <prvCheckForValidListAndQueue+0x70>)
 8003a6a:	4a10      	ldr	r2, [pc, #64]	@ (8003aac <prvCheckForValidListAndQueue+0x68>)
 8003a6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	4b11      	ldr	r3, [pc, #68]	@ (8003ab8 <prvCheckForValidListAndQueue+0x74>)
 8003a74:	4a11      	ldr	r2, [pc, #68]	@ (8003abc <prvCheckForValidListAndQueue+0x78>)
 8003a76:	2110      	movs	r1, #16
 8003a78:	200a      	movs	r0, #10
 8003a7a:	f7fe f907 	bl	8001c8c <xQueueGenericCreateStatic>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	4a08      	ldr	r2, [pc, #32]	@ (8003aa4 <prvCheckForValidListAndQueue+0x60>)
 8003a82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003a84:	4b07      	ldr	r3, [pc, #28]	@ (8003aa4 <prvCheckForValidListAndQueue+0x60>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a8c:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <prvCheckForValidListAndQueue+0x60>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	490b      	ldr	r1, [pc, #44]	@ (8003ac0 <prvCheckForValidListAndQueue+0x7c>)
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe fd2c 	bl	80024f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a98:	f000 f938 	bl	8003d0c <vPortExitCritical>
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000d94 	.word	0x20000d94
 8003aa8:	20000d64 	.word	0x20000d64
 8003aac:	20000d78 	.word	0x20000d78
 8003ab0:	20000d8c 	.word	0x20000d8c
 8003ab4:	20000d90 	.word	0x20000d90
 8003ab8:	20000e40 	.word	0x20000e40
 8003abc:	20000da0 	.word	0x20000da0
 8003ac0:	0800449c 	.word	0x0800449c

08003ac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3b04      	subs	r3, #4
 8003ad4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	3b04      	subs	r3, #4
 8003ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f023 0201 	bic.w	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3b04      	subs	r3, #4
 8003af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003af4:	4a08      	ldr	r2, [pc, #32]	@ (8003b18 <pxPortInitialiseStack+0x54>)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3b14      	subs	r3, #20
 8003afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	3b20      	subs	r3, #32
 8003b0a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	08003b1d 	.word	0x08003b1d

08003b1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b26:	4b12      	ldr	r3, [pc, #72]	@ (8003b70 <prvTaskExitError+0x54>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d00b      	beq.n	8003b48 <prvTaskExitError+0x2c>
	__asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	60fb      	str	r3, [r7, #12]
}
 8003b42:	bf00      	nop
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <prvTaskExitError+0x28>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	60bb      	str	r3, [r7, #8]
}
 8003b5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003b5c:	bf00      	nop
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0fc      	beq.n	8003b5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr
 8003b70:	2000000c 	.word	0x2000000c
	...

08003b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003b80:	4b07      	ldr	r3, [pc, #28]	@ (8003ba0 <pxCurrentTCBConst2>)
 8003b82:	6819      	ldr	r1, [r3, #0]
 8003b84:	6808      	ldr	r0, [r1, #0]
 8003b86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b8a:	f380 8809 	msr	PSP, r0
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f04f 0000 	mov.w	r0, #0
 8003b96:	f380 8811 	msr	BASEPRI, r0
 8003b9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003b9e:	4770      	bx	lr

08003ba0 <pxCurrentTCBConst2>:
 8003ba0:	20000864 	.word	0x20000864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop

08003ba8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003ba8:	4806      	ldr	r0, [pc, #24]	@ (8003bc4 <prvPortStartFirstTask+0x1c>)
 8003baa:	6800      	ldr	r0, [r0, #0]
 8003bac:	6800      	ldr	r0, [r0, #0]
 8003bae:	f380 8808 	msr	MSP, r0
 8003bb2:	b662      	cpsie	i
 8003bb4:	b661      	cpsie	f
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	df00      	svc	0
 8003bc0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003bc2:	bf00      	nop
 8003bc4:	e000ed08 	.word	0xe000ed08

08003bc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bce:	4b32      	ldr	r3, [pc, #200]	@ (8003c98 <xPortStartScheduler+0xd0>)
 8003bd0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	22ff      	movs	r2, #255	@ 0xff
 8003bde:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8003c9c <xPortStartScheduler+0xd4>)
 8003bf4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca0 <xPortStartScheduler+0xd8>)
 8003bf8:	2207      	movs	r2, #7
 8003bfa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bfc:	e009      	b.n	8003c12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003bfe:	4b28      	ldr	r3, [pc, #160]	@ (8003ca0 <xPortStartScheduler+0xd8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	4a26      	ldr	r2, [pc, #152]	@ (8003ca0 <xPortStartScheduler+0xd8>)
 8003c06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1a:	2b80      	cmp	r3, #128	@ 0x80
 8003c1c:	d0ef      	beq.n	8003bfe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ca0 <xPortStartScheduler+0xd8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f1c3 0307 	rsb	r3, r3, #7
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d00b      	beq.n	8003c42 <xPortStartScheduler+0x7a>
	__asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	60bb      	str	r3, [r7, #8]
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	e7fd      	b.n	8003c3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c42:	4b17      	ldr	r3, [pc, #92]	@ (8003ca0 <xPortStartScheduler+0xd8>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	4a15      	ldr	r2, [pc, #84]	@ (8003ca0 <xPortStartScheduler+0xd8>)
 8003c4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c4c:	4b14      	ldr	r3, [pc, #80]	@ (8003ca0 <xPortStartScheduler+0xd8>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c54:	4a12      	ldr	r2, [pc, #72]	@ (8003ca0 <xPortStartScheduler+0xd8>)
 8003c56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c60:	4b10      	ldr	r3, [pc, #64]	@ (8003ca4 <xPortStartScheduler+0xdc>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a0f      	ldr	r2, [pc, #60]	@ (8003ca4 <xPortStartScheduler+0xdc>)
 8003c66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <xPortStartScheduler+0xdc>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a0c      	ldr	r2, [pc, #48]	@ (8003ca4 <xPortStartScheduler+0xdc>)
 8003c72:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003c76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003c78:	f000 f8b8 	bl	8003dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca8 <xPortStartScheduler+0xe0>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c82:	f7ff ff91 	bl	8003ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003c86:	f7ff f867 	bl	8002d58 <vTaskSwitchContext>
	prvTaskExitError();
 8003c8a:	f7ff ff47 	bl	8003b1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	e000e400 	.word	0xe000e400
 8003c9c:	20000e90 	.word	0x20000e90
 8003ca0:	20000e94 	.word	0x20000e94
 8003ca4:	e000ed20 	.word	0xe000ed20
 8003ca8:	2000000c 	.word	0x2000000c

08003cac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	607b      	str	r3, [r7, #4]
}
 8003cc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d04 <vPortEnterCritical+0x58>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8003d04 <vPortEnterCritical+0x58>)
 8003cce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d04 <vPortEnterCritical+0x58>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d110      	bne.n	8003cfa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <vPortEnterCritical+0x5c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00b      	beq.n	8003cfa <vPortEnterCritical+0x4e>
	__asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	603b      	str	r3, [r7, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	e7fd      	b.n	8003cf6 <vPortEnterCritical+0x4a>
	}
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr
 8003d04:	2000000c 	.word	0x2000000c
 8003d08:	e000ed04 	.word	0xe000ed04

08003d0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003d12:	4b12      	ldr	r3, [pc, #72]	@ (8003d5c <vPortExitCritical+0x50>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <vPortExitCritical+0x26>
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	607b      	str	r3, [r7, #4]
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	e7fd      	b.n	8003d2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003d32:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <vPortExitCritical+0x50>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	4a08      	ldr	r2, [pc, #32]	@ (8003d5c <vPortExitCritical+0x50>)
 8003d3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003d3c:	4b07      	ldr	r3, [pc, #28]	@ (8003d5c <vPortExitCritical+0x50>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <vPortExitCritical+0x44>
 8003d44:	2300      	movs	r3, #0
 8003d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	f383 8811 	msr	BASEPRI, r3
}
 8003d4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	2000000c 	.word	0x2000000c

08003d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003d60:	f3ef 8009 	mrs	r0, PSP
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	4b0d      	ldr	r3, [pc, #52]	@ (8003da0 <pxCurrentTCBConst>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d70:	6010      	str	r0, [r2, #0]
 8003d72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003d76:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003d7a:	f380 8811 	msr	BASEPRI, r0
 8003d7e:	f7fe ffeb 	bl	8002d58 <vTaskSwitchContext>
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f380 8811 	msr	BASEPRI, r0
 8003d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	6808      	ldr	r0, [r1, #0]
 8003d92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003d96:	f380 8809 	msr	PSP, r0
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	4770      	bx	lr

08003da0 <pxCurrentTCBConst>:
 8003da0:	20000864 	.word	0x20000864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop

08003da8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	607b      	str	r3, [r7, #4]
}
 8003dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003dc2:	f7fe ff0f 	bl	8002be4 <xTaskIncrementTick>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dcc:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <xPortSysTickHandler+0x40>)
 8003dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	f383 8811 	msr	BASEPRI, r3
}
 8003dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	e000ed04 	.word	0xe000ed04

08003dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003df0:	4b0a      	ldr	r3, [pc, #40]	@ (8003e1c <vPortSetupTimerInterrupt+0x30>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003df6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e20 <vPortSetupTimerInterrupt+0x34>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003dfc:	4b09      	ldr	r3, [pc, #36]	@ (8003e24 <vPortSetupTimerInterrupt+0x38>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a09      	ldr	r2, [pc, #36]	@ (8003e28 <vPortSetupTimerInterrupt+0x3c>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	099b      	lsrs	r3, r3, #6
 8003e08:	4a08      	ldr	r2, [pc, #32]	@ (8003e2c <vPortSetupTimerInterrupt+0x40>)
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e0e:	4b03      	ldr	r3, [pc, #12]	@ (8003e1c <vPortSetupTimerInterrupt+0x30>)
 8003e10:	2207      	movs	r2, #7
 8003e12:	601a      	str	r2, [r3, #0]
}
 8003e14:	bf00      	nop
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr
 8003e1c:	e000e010 	.word	0xe000e010
 8003e20:	e000e018 	.word	0xe000e018
 8003e24:	20000000 	.word	0x20000000
 8003e28:	10624dd3 	.word	0x10624dd3
 8003e2c:	e000e014 	.word	0xe000e014

08003e30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e36:	f3ef 8305 	mrs	r3, IPSR
 8003e3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b0f      	cmp	r3, #15
 8003e40:	d915      	bls.n	8003e6e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e42:	4a17      	ldr	r2, [pc, #92]	@ (8003ea0 <vPortValidateInterruptPriority+0x70>)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e4c:	4b15      	ldr	r3, [pc, #84]	@ (8003ea4 <vPortValidateInterruptPriority+0x74>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	7afa      	ldrb	r2, [r7, #11]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d20b      	bcs.n	8003e6e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	607b      	str	r3, [r7, #4]
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	e7fd      	b.n	8003e6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea8 <vPortValidateInterruptPriority+0x78>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003e76:	4b0d      	ldr	r3, [pc, #52]	@ (8003eac <vPortValidateInterruptPriority+0x7c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d90b      	bls.n	8003e96 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	603b      	str	r3, [r7, #0]
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	e7fd      	b.n	8003e92 <vPortValidateInterruptPriority+0x62>
	}
 8003e96:	bf00      	nop
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr
 8003ea0:	e000e3f0 	.word	0xe000e3f0
 8003ea4:	20000e90 	.word	0x20000e90
 8003ea8:	e000ed0c 	.word	0xe000ed0c
 8003eac:	20000e94 	.word	0x20000e94

08003eb0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	@ 0x28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003ebc:	f7fe fdd8 	bl	8002a70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003ec0:	4b5c      	ldr	r3, [pc, #368]	@ (8004034 <pvPortMalloc+0x184>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003ec8:	f000 f924 	bl	8004114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8004038 <pvPortMalloc+0x188>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f040 8095 	bne.w	8004004 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01e      	beq.n	8003f1e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d015      	beq.n	8003f1e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f023 0307 	bic.w	r3, r3, #7
 8003ef8:	3308      	adds	r3, #8
 8003efa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00b      	beq.n	8003f1e <pvPortMalloc+0x6e>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	617b      	str	r3, [r7, #20]
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	e7fd      	b.n	8003f1a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d06f      	beq.n	8004004 <pvPortMalloc+0x154>
 8003f24:	4b45      	ldr	r3, [pc, #276]	@ (800403c <pvPortMalloc+0x18c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d86a      	bhi.n	8004004 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f2e:	4b44      	ldr	r3, [pc, #272]	@ (8004040 <pvPortMalloc+0x190>)
 8003f30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f32:	4b43      	ldr	r3, [pc, #268]	@ (8004040 <pvPortMalloc+0x190>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f38:	e004      	b.n	8003f44 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d903      	bls.n	8003f56 <pvPortMalloc+0xa6>
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f1      	bne.n	8003f3a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003f56:	4b37      	ldr	r3, [pc, #220]	@ (8004034 <pvPortMalloc+0x184>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d051      	beq.n	8004004 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2208      	movs	r2, #8
 8003f66:	4413      	add	r3, r2
 8003f68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	1ad2      	subs	r2, r2, r3
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d920      	bls.n	8003fc4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4413      	add	r3, r2
 8003f88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00b      	beq.n	8003fac <pvPortMalloc+0xfc>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	613b      	str	r3, [r7, #16]
}
 8003fa6:	bf00      	nop
 8003fa8:	bf00      	nop
 8003faa:	e7fd      	b.n	8003fa8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	1ad2      	subs	r2, r2, r3
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003fbe:	69b8      	ldr	r0, [r7, #24]
 8003fc0:	f000 f90a 	bl	80041d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800403c <pvPortMalloc+0x18c>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	4a1b      	ldr	r2, [pc, #108]	@ (800403c <pvPortMalloc+0x18c>)
 8003fd0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800403c <pvPortMalloc+0x18c>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004044 <pvPortMalloc+0x194>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d203      	bcs.n	8003fe6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003fde:	4b17      	ldr	r3, [pc, #92]	@ (800403c <pvPortMalloc+0x18c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a18      	ldr	r2, [pc, #96]	@ (8004044 <pvPortMalloc+0x194>)
 8003fe4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	4b13      	ldr	r3, [pc, #76]	@ (8004038 <pvPortMalloc+0x188>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003ffa:	4b13      	ldr	r3, [pc, #76]	@ (8004048 <pvPortMalloc+0x198>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3301      	adds	r3, #1
 8004000:	4a11      	ldr	r2, [pc, #68]	@ (8004048 <pvPortMalloc+0x198>)
 8004002:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004004:	f7fe fd42 	bl	8002a8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <pvPortMalloc+0x17a>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	60fb      	str	r3, [r7, #12]
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop
 8004028:	e7fd      	b.n	8004026 <pvPortMalloc+0x176>
	return pvReturn;
 800402a:	69fb      	ldr	r3, [r7, #28]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3728      	adds	r7, #40	@ 0x28
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	20001aa0 	.word	0x20001aa0
 8004038:	20001ab4 	.word	0x20001ab4
 800403c:	20001aa4 	.word	0x20001aa4
 8004040:	20001a98 	.word	0x20001a98
 8004044:	20001aa8 	.word	0x20001aa8
 8004048:	20001aac 	.word	0x20001aac

0800404c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d04f      	beq.n	80040fe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800405e:	2308      	movs	r3, #8
 8004060:	425b      	negs	r3, r3
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4413      	add	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	4b25      	ldr	r3, [pc, #148]	@ (8004108 <vPortFree+0xbc>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4013      	ands	r3, r2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <vPortFree+0x46>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	60fb      	str	r3, [r7, #12]
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	e7fd      	b.n	800408e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <vPortFree+0x66>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	60bb      	str	r3, [r7, #8]
}
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	e7fd      	b.n	80040ae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	4b14      	ldr	r3, [pc, #80]	@ (8004108 <vPortFree+0xbc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01e      	beq.n	80040fe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d11a      	bne.n	80040fe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004108 <vPortFree+0xbc>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	43db      	mvns	r3, r3
 80040d2:	401a      	ands	r2, r3
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80040d8:	f7fe fcca 	bl	8002a70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	4b0a      	ldr	r3, [pc, #40]	@ (800410c <vPortFree+0xc0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4413      	add	r3, r2
 80040e6:	4a09      	ldr	r2, [pc, #36]	@ (800410c <vPortFree+0xc0>)
 80040e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80040ea:	6938      	ldr	r0, [r7, #16]
 80040ec:	f000 f874 	bl	80041d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80040f0:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <vPortFree+0xc4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3301      	adds	r3, #1
 80040f6:	4a06      	ldr	r2, [pc, #24]	@ (8004110 <vPortFree+0xc4>)
 80040f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80040fa:	f7fe fcc7 	bl	8002a8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80040fe:	bf00      	nop
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20001ab4 	.word	0x20001ab4
 800410c:	20001aa4 	.word	0x20001aa4
 8004110:	20001ab0 	.word	0x20001ab0

08004114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800411a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800411e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004120:	4b27      	ldr	r3, [pc, #156]	@ (80041c0 <prvHeapInit+0xac>)
 8004122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3307      	adds	r3, #7
 8004132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 0307 	bic.w	r3, r3, #7
 800413a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	4a1f      	ldr	r2, [pc, #124]	@ (80041c0 <prvHeapInit+0xac>)
 8004144:	4413      	add	r3, r2
 8004146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800414c:	4a1d      	ldr	r2, [pc, #116]	@ (80041c4 <prvHeapInit+0xb0>)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004152:	4b1c      	ldr	r3, [pc, #112]	@ (80041c4 <prvHeapInit+0xb0>)
 8004154:	2200      	movs	r2, #0
 8004156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	4413      	add	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004160:	2208      	movs	r2, #8
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0307 	bic.w	r3, r3, #7
 800416e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4a15      	ldr	r2, [pc, #84]	@ (80041c8 <prvHeapInit+0xb4>)
 8004174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004176:	4b14      	ldr	r3, [pc, #80]	@ (80041c8 <prvHeapInit+0xb4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2200      	movs	r2, #0
 800417c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800417e:	4b12      	ldr	r3, [pc, #72]	@ (80041c8 <prvHeapInit+0xb4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	1ad2      	subs	r2, r2, r3
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004194:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <prvHeapInit+0xb4>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	4a0a      	ldr	r2, [pc, #40]	@ (80041cc <prvHeapInit+0xb8>)
 80041a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	4a09      	ldr	r2, [pc, #36]	@ (80041d0 <prvHeapInit+0xbc>)
 80041aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041ac:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <prvHeapInit+0xc0>)
 80041ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80041b2:	601a      	str	r2, [r3, #0]
}
 80041b4:	bf00      	nop
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	20000e98 	.word	0x20000e98
 80041c4:	20001a98 	.word	0x20001a98
 80041c8:	20001aa0 	.word	0x20001aa0
 80041cc:	20001aa8 	.word	0x20001aa8
 80041d0:	20001aa4 	.word	0x20001aa4
 80041d4:	20001ab4 	.word	0x20001ab4

080041d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80041e0:	4b27      	ldr	r3, [pc, #156]	@ (8004280 <prvInsertBlockIntoFreeList+0xa8>)
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e002      	b.n	80041ec <prvInsertBlockIntoFreeList+0x14>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d8f7      	bhi.n	80041e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	4413      	add	r3, r2
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	429a      	cmp	r2, r3
 8004206:	d108      	bne.n	800421a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	441a      	add	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	441a      	add	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d118      	bne.n	8004260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b14      	ldr	r3, [pc, #80]	@ (8004284 <prvInsertBlockIntoFreeList+0xac>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d00d      	beq.n	8004256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	441a      	add	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	e008      	b.n	8004268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004256:	4b0b      	ldr	r3, [pc, #44]	@ (8004284 <prvInsertBlockIntoFreeList+0xac>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e003      	b.n	8004268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	429a      	cmp	r2, r3
 800426e:	d002      	beq.n	8004276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004276:	bf00      	nop
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	20001a98 	.word	0x20001a98
 8004284:	20001aa0 	.word	0x20001aa0

08004288 <memset>:
 8004288:	4603      	mov	r3, r0
 800428a:	4402      	add	r2, r0
 800428c:	4293      	cmp	r3, r2
 800428e:	d100      	bne.n	8004292 <memset+0xa>
 8004290:	4770      	bx	lr
 8004292:	f803 1b01 	strb.w	r1, [r3], #1
 8004296:	e7f9      	b.n	800428c <memset+0x4>

08004298 <_reclaim_reent>:
 8004298:	4b2d      	ldr	r3, [pc, #180]	@ (8004350 <_reclaim_reent+0xb8>)
 800429a:	b570      	push	{r4, r5, r6, lr}
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4604      	mov	r4, r0
 80042a0:	4283      	cmp	r3, r0
 80042a2:	d053      	beq.n	800434c <_reclaim_reent+0xb4>
 80042a4:	69c3      	ldr	r3, [r0, #28]
 80042a6:	b31b      	cbz	r3, 80042f0 <_reclaim_reent+0x58>
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	b163      	cbz	r3, 80042c6 <_reclaim_reent+0x2e>
 80042ac:	2500      	movs	r5, #0
 80042ae:	69e3      	ldr	r3, [r4, #28]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	5959      	ldr	r1, [r3, r5]
 80042b4:	b9b1      	cbnz	r1, 80042e4 <_reclaim_reent+0x4c>
 80042b6:	3504      	adds	r5, #4
 80042b8:	2d80      	cmp	r5, #128	@ 0x80
 80042ba:	d1f8      	bne.n	80042ae <_reclaim_reent+0x16>
 80042bc:	69e3      	ldr	r3, [r4, #28]
 80042be:	4620      	mov	r0, r4
 80042c0:	68d9      	ldr	r1, [r3, #12]
 80042c2:	f000 f87b 	bl	80043bc <_free_r>
 80042c6:	69e3      	ldr	r3, [r4, #28]
 80042c8:	6819      	ldr	r1, [r3, #0]
 80042ca:	b111      	cbz	r1, 80042d2 <_reclaim_reent+0x3a>
 80042cc:	4620      	mov	r0, r4
 80042ce:	f000 f875 	bl	80043bc <_free_r>
 80042d2:	69e3      	ldr	r3, [r4, #28]
 80042d4:	689d      	ldr	r5, [r3, #8]
 80042d6:	b15d      	cbz	r5, 80042f0 <_reclaim_reent+0x58>
 80042d8:	4629      	mov	r1, r5
 80042da:	4620      	mov	r0, r4
 80042dc:	682d      	ldr	r5, [r5, #0]
 80042de:	f000 f86d 	bl	80043bc <_free_r>
 80042e2:	e7f8      	b.n	80042d6 <_reclaim_reent+0x3e>
 80042e4:	680e      	ldr	r6, [r1, #0]
 80042e6:	4620      	mov	r0, r4
 80042e8:	f000 f868 	bl	80043bc <_free_r>
 80042ec:	4631      	mov	r1, r6
 80042ee:	e7e1      	b.n	80042b4 <_reclaim_reent+0x1c>
 80042f0:	6961      	ldr	r1, [r4, #20]
 80042f2:	b111      	cbz	r1, 80042fa <_reclaim_reent+0x62>
 80042f4:	4620      	mov	r0, r4
 80042f6:	f000 f861 	bl	80043bc <_free_r>
 80042fa:	69e1      	ldr	r1, [r4, #28]
 80042fc:	b111      	cbz	r1, 8004304 <_reclaim_reent+0x6c>
 80042fe:	4620      	mov	r0, r4
 8004300:	f000 f85c 	bl	80043bc <_free_r>
 8004304:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004306:	b111      	cbz	r1, 800430e <_reclaim_reent+0x76>
 8004308:	4620      	mov	r0, r4
 800430a:	f000 f857 	bl	80043bc <_free_r>
 800430e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004310:	b111      	cbz	r1, 8004318 <_reclaim_reent+0x80>
 8004312:	4620      	mov	r0, r4
 8004314:	f000 f852 	bl	80043bc <_free_r>
 8004318:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800431a:	b111      	cbz	r1, 8004322 <_reclaim_reent+0x8a>
 800431c:	4620      	mov	r0, r4
 800431e:	f000 f84d 	bl	80043bc <_free_r>
 8004322:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004324:	b111      	cbz	r1, 800432c <_reclaim_reent+0x94>
 8004326:	4620      	mov	r0, r4
 8004328:	f000 f848 	bl	80043bc <_free_r>
 800432c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800432e:	b111      	cbz	r1, 8004336 <_reclaim_reent+0x9e>
 8004330:	4620      	mov	r0, r4
 8004332:	f000 f843 	bl	80043bc <_free_r>
 8004336:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004338:	b111      	cbz	r1, 8004340 <_reclaim_reent+0xa8>
 800433a:	4620      	mov	r0, r4
 800433c:	f000 f83e 	bl	80043bc <_free_r>
 8004340:	6a23      	ldr	r3, [r4, #32]
 8004342:	b11b      	cbz	r3, 800434c <_reclaim_reent+0xb4>
 8004344:	4620      	mov	r0, r4
 8004346:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800434a:	4718      	bx	r3
 800434c:	bd70      	pop	{r4, r5, r6, pc}
 800434e:	bf00      	nop
 8004350:	20000010 	.word	0x20000010

08004354 <__libc_init_array>:
 8004354:	b570      	push	{r4, r5, r6, lr}
 8004356:	2600      	movs	r6, #0
 8004358:	4d0c      	ldr	r5, [pc, #48]	@ (800438c <__libc_init_array+0x38>)
 800435a:	4c0d      	ldr	r4, [pc, #52]	@ (8004390 <__libc_init_array+0x3c>)
 800435c:	1b64      	subs	r4, r4, r5
 800435e:	10a4      	asrs	r4, r4, #2
 8004360:	42a6      	cmp	r6, r4
 8004362:	d109      	bne.n	8004378 <__libc_init_array+0x24>
 8004364:	f000 f87e 	bl	8004464 <_init>
 8004368:	2600      	movs	r6, #0
 800436a:	4d0a      	ldr	r5, [pc, #40]	@ (8004394 <__libc_init_array+0x40>)
 800436c:	4c0a      	ldr	r4, [pc, #40]	@ (8004398 <__libc_init_array+0x44>)
 800436e:	1b64      	subs	r4, r4, r5
 8004370:	10a4      	asrs	r4, r4, #2
 8004372:	42a6      	cmp	r6, r4
 8004374:	d105      	bne.n	8004382 <__libc_init_array+0x2e>
 8004376:	bd70      	pop	{r4, r5, r6, pc}
 8004378:	f855 3b04 	ldr.w	r3, [r5], #4
 800437c:	4798      	blx	r3
 800437e:	3601      	adds	r6, #1
 8004380:	e7ee      	b.n	8004360 <__libc_init_array+0xc>
 8004382:	f855 3b04 	ldr.w	r3, [r5], #4
 8004386:	4798      	blx	r3
 8004388:	3601      	adds	r6, #1
 800438a:	e7f2      	b.n	8004372 <__libc_init_array+0x1e>
 800438c:	08004518 	.word	0x08004518
 8004390:	08004518 	.word	0x08004518
 8004394:	08004518 	.word	0x08004518
 8004398:	0800451c 	.word	0x0800451c

0800439c <__retarget_lock_acquire_recursive>:
 800439c:	4770      	bx	lr

0800439e <__retarget_lock_release_recursive>:
 800439e:	4770      	bx	lr

080043a0 <memcpy>:
 80043a0:	440a      	add	r2, r1
 80043a2:	4291      	cmp	r1, r2
 80043a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80043a8:	d100      	bne.n	80043ac <memcpy+0xc>
 80043aa:	4770      	bx	lr
 80043ac:	b510      	push	{r4, lr}
 80043ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043b2:	4291      	cmp	r1, r2
 80043b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043b8:	d1f9      	bne.n	80043ae <memcpy+0xe>
 80043ba:	bd10      	pop	{r4, pc}

080043bc <_free_r>:
 80043bc:	b538      	push	{r3, r4, r5, lr}
 80043be:	4605      	mov	r5, r0
 80043c0:	2900      	cmp	r1, #0
 80043c2:	d040      	beq.n	8004446 <_free_r+0x8a>
 80043c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c8:	1f0c      	subs	r4, r1, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bfb8      	it	lt
 80043ce:	18e4      	addlt	r4, r4, r3
 80043d0:	f000 f83c 	bl	800444c <__malloc_lock>
 80043d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004448 <_free_r+0x8c>)
 80043d6:	6813      	ldr	r3, [r2, #0]
 80043d8:	b933      	cbnz	r3, 80043e8 <_free_r+0x2c>
 80043da:	6063      	str	r3, [r4, #4]
 80043dc:	6014      	str	r4, [r2, #0]
 80043de:	4628      	mov	r0, r5
 80043e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043e4:	f000 b838 	b.w	8004458 <__malloc_unlock>
 80043e8:	42a3      	cmp	r3, r4
 80043ea:	d908      	bls.n	80043fe <_free_r+0x42>
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	1821      	adds	r1, r4, r0
 80043f0:	428b      	cmp	r3, r1
 80043f2:	bf01      	itttt	eq
 80043f4:	6819      	ldreq	r1, [r3, #0]
 80043f6:	685b      	ldreq	r3, [r3, #4]
 80043f8:	1809      	addeq	r1, r1, r0
 80043fa:	6021      	streq	r1, [r4, #0]
 80043fc:	e7ed      	b.n	80043da <_free_r+0x1e>
 80043fe:	461a      	mov	r2, r3
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	b10b      	cbz	r3, 8004408 <_free_r+0x4c>
 8004404:	42a3      	cmp	r3, r4
 8004406:	d9fa      	bls.n	80043fe <_free_r+0x42>
 8004408:	6811      	ldr	r1, [r2, #0]
 800440a:	1850      	adds	r0, r2, r1
 800440c:	42a0      	cmp	r0, r4
 800440e:	d10b      	bne.n	8004428 <_free_r+0x6c>
 8004410:	6820      	ldr	r0, [r4, #0]
 8004412:	4401      	add	r1, r0
 8004414:	1850      	adds	r0, r2, r1
 8004416:	4283      	cmp	r3, r0
 8004418:	6011      	str	r1, [r2, #0]
 800441a:	d1e0      	bne.n	80043de <_free_r+0x22>
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	4408      	add	r0, r1
 8004422:	6010      	str	r0, [r2, #0]
 8004424:	6053      	str	r3, [r2, #4]
 8004426:	e7da      	b.n	80043de <_free_r+0x22>
 8004428:	d902      	bls.n	8004430 <_free_r+0x74>
 800442a:	230c      	movs	r3, #12
 800442c:	602b      	str	r3, [r5, #0]
 800442e:	e7d6      	b.n	80043de <_free_r+0x22>
 8004430:	6820      	ldr	r0, [r4, #0]
 8004432:	1821      	adds	r1, r4, r0
 8004434:	428b      	cmp	r3, r1
 8004436:	bf01      	itttt	eq
 8004438:	6819      	ldreq	r1, [r3, #0]
 800443a:	685b      	ldreq	r3, [r3, #4]
 800443c:	1809      	addeq	r1, r1, r0
 800443e:	6021      	streq	r1, [r4, #0]
 8004440:	6063      	str	r3, [r4, #4]
 8004442:	6054      	str	r4, [r2, #4]
 8004444:	e7cb      	b.n	80043de <_free_r+0x22>
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	20001bf4 	.word	0x20001bf4

0800444c <__malloc_lock>:
 800444c:	4801      	ldr	r0, [pc, #4]	@ (8004454 <__malloc_lock+0x8>)
 800444e:	f7ff bfa5 	b.w	800439c <__retarget_lock_acquire_recursive>
 8004452:	bf00      	nop
 8004454:	20001bf0 	.word	0x20001bf0

08004458 <__malloc_unlock>:
 8004458:	4801      	ldr	r0, [pc, #4]	@ (8004460 <__malloc_unlock+0x8>)
 800445a:	f7ff bfa0 	b.w	800439e <__retarget_lock_release_recursive>
 800445e:	bf00      	nop
 8004460:	20001bf0 	.word	0x20001bf0

08004464 <_init>:
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004466:	bf00      	nop
 8004468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446a:	bc08      	pop	{r3}
 800446c:	469e      	mov	lr, r3
 800446e:	4770      	bx	lr

08004470 <_fini>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	bf00      	nop
 8004474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004476:	bc08      	pop	{r3}
 8004478:	469e      	mov	lr, r3
 800447a:	4770      	bx	lr
