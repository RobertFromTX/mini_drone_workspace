
drone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1a8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800c2b8  0800c2b8  0000d2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .flash        00000789  0800c468  0800c468  0000d468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000003  0800cbf1  0800cbf1  0000dbf1  2**0
                  ALLOC, READONLY
  5 .ARM          00000000  0800cbf4  0800cbf4  0000e06c  2**0
                  CONTENTS, READONLY
  6 .preinit_array 00000000  0800cbf4  0800cbf4  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800cbf4  0800cbf4  0000dbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800cbf8  0800cbf8  0000dbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000006c  20000000  0800cbfc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001e18  2000006c  0800cc68  0000e06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e84  0800cc68  0000ee84  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019008  00000000  00000000  0000e095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d2  00000000  00000000  0002709d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  0002a970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011af  00000000  00000000  0002c030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ad3  00000000  00000000  0002d1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019014  00000000  00000000  00031cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009994e  00000000  00000000  0004acc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e4614  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b24  00000000  00000000  000e4658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  000eb17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c2a0 	.word	0x0800c2a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	0800c2a0 	.word	0x0800c2a0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001076:	f001 ffcd 	bl	8003014 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800107a:	f000 f92b 	bl	80012d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800107e:	f000 fab1 	bl	80015e4 <MX_GPIO_Init>
	MX_DMA_Init();
 8001082:	f000 fa89 	bl	8001598 <MX_DMA_Init>
	MX_I2C2_Init();
 8001086:	f000 f967 	bl	8001358 <MX_I2C2_Init>
	MX_TIM2_Init();
 800108a:	f000 f995 	bl	80013b8 <MX_TIM2_Init>
	MX_TIM3_Init();
 800108e:	f000 fa0d 	bl	80014ac <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	//timer3 used for measuring duty cycle of incoming PWM signal of throttle, yaw, pitch and roll from receiver.
	if (HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK) //CH1 Throttle
 8001092:	2100      	movs	r1, #0
 8001094:	4876      	ldr	r0, [pc, #472]	@ (8001270 <main+0x200>)
 8001096:	f005 ff67 	bl	8006f68 <HAL_TIM_IC_Start_IT>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <main+0x34>
	{
		Error_Handler();  // Error starting input capture for channel 1
 80010a0:	f000 fdf6 	bl	8001c90 <Error_Handler>
	}
	if (HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2) != HAL_OK) //CH2 Yaw
 80010a4:	2104      	movs	r1, #4
 80010a6:	4872      	ldr	r0, [pc, #456]	@ (8001270 <main+0x200>)
 80010a8:	f005 ff5e 	bl	8006f68 <HAL_TIM_IC_Start_IT>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <main+0x46>
	{
		Error_Handler();  // Error starting input capture for channel 2
 80010b2:	f000 fded 	bl	8001c90 <Error_Handler>
	}
	if (HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3) != HAL_OK) //CH3 Pitch
 80010b6:	2108      	movs	r1, #8
 80010b8:	486d      	ldr	r0, [pc, #436]	@ (8001270 <main+0x200>)
 80010ba:	f005 ff55 	bl	8006f68 <HAL_TIM_IC_Start_IT>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <main+0x58>
	{
		Error_Handler();  // Error starting input capture for channel 3
 80010c4:	f000 fde4 	bl	8001c90 <Error_Handler>
	}
	if (HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4) != HAL_OK) //CH4 Roll
 80010c8:	210c      	movs	r1, #12
 80010ca:	4869      	ldr	r0, [pc, #420]	@ (8001270 <main+0x200>)
 80010cc:	f005 ff4c 	bl	8006f68 <HAL_TIM_IC_Start_IT>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <main+0x6a>
	{
		Error_Handler();  // Error starting input capture for channel 4
 80010d6:	f000 fddb 	bl	8001c90 <Error_Handler>
	}

	//timer2 used to generate pwm signals to send to motor drivers
	/* Start channel 1 */
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 80010da:	2100      	movs	r1, #0
 80010dc:	4865      	ldr	r0, [pc, #404]	@ (8001274 <main+0x204>)
 80010de:	f005 fe51 	bl	8006d84 <HAL_TIM_PWM_Start>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <main+0x7c>
	{
	Error_Handler();
 80010e8:	f000 fdd2 	bl	8001c90 <Error_Handler>
	}
	/* Start channel 2 */
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 80010ec:	2104      	movs	r1, #4
 80010ee:	4861      	ldr	r0, [pc, #388]	@ (8001274 <main+0x204>)
 80010f0:	f005 fe48 	bl	8006d84 <HAL_TIM_PWM_Start>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <main+0x8e>
	{
	Error_Handler();
 80010fa:	f000 fdc9 	bl	8001c90 <Error_Handler>
	}
	/* Start channel 3 */
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK)
 80010fe:	2108      	movs	r1, #8
 8001100:	485c      	ldr	r0, [pc, #368]	@ (8001274 <main+0x204>)
 8001102:	f005 fe3f 	bl	8006d84 <HAL_TIM_PWM_Start>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <main+0xa0>
	{
	Error_Handler();
 800110c:	f000 fdc0 	bl	8001c90 <Error_Handler>
	}
	/* Start channel 4 */
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8001110:	210c      	movs	r1, #12
 8001112:	4858      	ldr	r0, [pc, #352]	@ (8001274 <main+0x204>)
 8001114:	f005 fe36 	bl	8006d84 <HAL_TIM_PWM_Start>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <main+0xb2>
	{
	Error_Handler();
 800111e:	f000 fdb7 	bl	8001c90 <Error_Handler>
	//HAL i2c notes:
	//address of MPU6050 device is 1101000, but we shift it to left because the transmit and receive functions require that. So we are left with 0xD0
	//Argument to right of MPU6050_ADDR_LSL1 is the register address, see the register description in onenote.
	uint8_t reg_addr[1];
	/* We compute the MSB and LSB parts of the memory address */
	reg_addr[0] = (uint8_t) (0x6A);
 8001122:	236a      	movs	r3, #106	@ 0x6a
 8001124:	713b      	strb	r3, [r7, #4]

	//delay for init functions to see if it stops glitch of i2c transmission never completing
	HAL_Delay(1000);
 8001126:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800112a:	f001 ffa5 	bl	8003078 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800112e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001132:	4851      	ldr	r0, [pc, #324]	@ (8001278 <main+0x208>)
 8001134:	f002 fcb2 	bl	8003a9c <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001138:	2064      	movs	r0, #100	@ 0x64
 800113a:	f001 ff9d 	bl	8003078 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800113e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001142:	484d      	ldr	r0, [pc, #308]	@ (8001278 <main+0x208>)
 8001144:	f002 fcaa 	bl	8003a9c <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001148:	2064      	movs	r0, #100	@ 0x64
 800114a:	f001 ff95 	bl	8003078 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800114e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001152:	4849      	ldr	r0, [pc, #292]	@ (8001278 <main+0x208>)
 8001154:	f002 fca2 	bl	8003a9c <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001158:	2064      	movs	r0, #100	@ 0x64
 800115a:	f001 ff8d 	bl	8003078 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800115e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001162:	4845      	ldr	r0, [pc, #276]	@ (8001278 <main+0x208>)
 8001164:	f002 fc9a 	bl	8003a9c <HAL_GPIO_TogglePin>

	//test if transmission works
	HAL_StatusTypeDef returnValue = HAL_I2C_Master_Transmit_DMA(&hi2c2, MPU6050_ADDR_LSL1, reg_addr, 1);
 8001168:	1d3a      	adds	r2, r7, #4
 800116a:	2301      	movs	r3, #1
 800116c:	21d0      	movs	r1, #208	@ 0xd0
 800116e:	4843      	ldr	r0, [pc, #268]	@ (800127c <main+0x20c>)
 8001170:	f002 fe1e 	bl	8003db0 <HAL_I2C_Master_Transmit_DMA>
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
	while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY);
 8001178:	bf00      	nop
 800117a:	4840      	ldr	r0, [pc, #256]	@ (800127c <main+0x20c>)
 800117c:	f003 fd37 	bl	8004bee <HAL_I2C_GetState>
 8001180:	4603      	mov	r3, r0
 8001182:	2b20      	cmp	r3, #32
 8001184:	d1f9      	bne.n	800117a <main+0x10a>
	if (returnValue != HAL_OK)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <main+0x120>
	{
		Error_Handler();
 800118c:	f000 fd80 	bl	8001c90 <Error_Handler>
	}
	if (__HAL_DMA_GET_FLAG(&hdma_i2c1_tx, (0x00000002U)))
 8001190:	4b3b      	ldr	r3, [pc, #236]	@ (8001280 <main+0x210>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <main+0x132>
	{ // Transfer error
		printf("DMA Transfer Error\n");
 800119c:	4839      	ldr	r0, [pc, #228]	@ (8001284 <main+0x214>)
 800119e:	f00a f9c1 	bl	800b524 <puts>
		// Handle error here
	}
	HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80011a2:	4839      	ldr	r0, [pc, #228]	@ (8001288 <main+0x218>)
 80011a4:	f002 f99e 	bl	80034e4 <HAL_DMA_IRQHandler>
	while (!i2c_TX_done);
 80011a8:	bf00      	nop
 80011aa:	4b38      	ldr	r3, [pc, #224]	@ (800128c <main+0x21c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0fb      	beq.n	80011aa <main+0x13a>
	i2c_TX_done = 0;
 80011b2:	4b36      	ldr	r3, [pc, #216]	@ (800128c <main+0x21c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
	// mpu6050_init(&hi2c2); //write to registers in mpu6050 to configure initial settings
	// moved to private variables to see values of attributes in structs in debug mode easier
	//	mpu6050_sensor_data sensor_data_1;
	//	kalman_filter filter1;

	mpu6050_init_dmp(&hi2c2); //initialize mpu6050 to use dmp
 80011b8:	4830      	ldr	r0, [pc, #192]	@ (800127c <main+0x20c>)
 80011ba:	f000 fea3 	bl	8001f04 <mpu6050_init_dmp>

	setDMPEnabled(&hi2c2, true); //enable the dmp
 80011be:	2101      	movs	r1, #1
 80011c0:	482e      	ldr	r0, [pc, #184]	@ (800127c <main+0x20c>)
 80011c2:	f001 f95e 	bl	8002482 <setDMPEnabled>

	packetSize = 42; //FIXME, use this: packetSize = mpu.dmpGetFIFOPacketSize();
 80011c6:	4b32      	ldr	r3, [pc, #200]	@ (8001290 <main+0x220>)
 80011c8:	222a      	movs	r2, #42	@ 0x2a
 80011ca:	801a      	strh	r2, [r3, #0]

	//define starting position
	sensor_data_init(&sensor_data_1); //likely not necessary
 80011cc:	4831      	ldr	r0, [pc, #196]	@ (8001294 <main+0x224>)
 80011ce:	f000 fe83 	bl	8001ed8 <sensor_data_init>

	fifoCount = getFIFOCount(&hi2c2);
 80011d2:	482a      	ldr	r0, [pc, #168]	@ (800127c <main+0x20c>)
 80011d4:	f001 f968 	bl	80024a8 <getFIFOCount>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001298 <main+0x228>)
 80011de:	801a      	strh	r2, [r3, #0]
	fifoCount = getFIFOCount(&hi2c2);
 80011e0:	4826      	ldr	r0, [pc, #152]	@ (800127c <main+0x20c>)
 80011e2:	f001 f961 	bl	80024a8 <getFIFOCount>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <main+0x228>)
 80011ec:	801a      	strh	r2, [r3, #0]
	resetFIFO(&hi2c2);
 80011ee:	4823      	ldr	r0, [pc, #140]	@ (800127c <main+0x20c>)
 80011f0:	f001 f978 	bl	80024e4 <resetFIFO>
	fifoCount = getFIFOCount(&hi2c2);
 80011f4:	4821      	ldr	r0, [pc, #132]	@ (800127c <main+0x20c>)
 80011f6:	f001 f957 	bl	80024a8 <getFIFOCount>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <main+0x228>)
 8001200:	801a      	strh	r2, [r3, #0]
	fifoCount = getFIFOCount(&hi2c2);
 8001202:	481e      	ldr	r0, [pc, #120]	@ (800127c <main+0x20c>)
 8001204:	f001 f950 	bl	80024a8 <getFIFOCount>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <main+0x228>)
 800120e:	801a      	strh	r2, [r3, #0]

	resetFIFO(&hi2c2);
 8001210:	481a      	ldr	r0, [pc, #104]	@ (800127c <main+0x20c>)
 8001212:	f001 f967 	bl	80024e4 <resetFIFO>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001216:	f006 fe3d 	bl	8007e94 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of xMutex */
	xMutexHandle = osMutexNew(&xMutex_attributes);
 800121a:	4820      	ldr	r0, [pc, #128]	@ (800129c <main+0x22c>)
 800121c:	f006 ff2f 	bl	800807e <osMutexNew>
 8001220:	4603      	mov	r3, r0
 8001222:	4a1f      	ldr	r2, [pc, #124]	@ (80012a0 <main+0x230>)
 8001224:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001226:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <main+0x234>)
 8001228:	2100      	movs	r1, #0
 800122a:	481f      	ldr	r0, [pc, #124]	@ (80012a8 <main+0x238>)
 800122c:	f006 fe7a 	bl	8007f24 <osThreadNew>
 8001230:	4603      	mov	r3, r0
 8001232:	4a1e      	ldr	r2, [pc, #120]	@ (80012ac <main+0x23c>)
 8001234:	6013      	str	r3, [r2, #0]

	/* creation of PIDTask */
	PIDTaskHandle = osThreadNew(updatePID, NULL, &PIDTask_attributes);
 8001236:	4a1e      	ldr	r2, [pc, #120]	@ (80012b0 <main+0x240>)
 8001238:	2100      	movs	r1, #0
 800123a:	481e      	ldr	r0, [pc, #120]	@ (80012b4 <main+0x244>)
 800123c:	f006 fe72 	bl	8007f24 <osThreadNew>
 8001240:	4603      	mov	r3, r0
 8001242:	4a1d      	ldr	r2, [pc, #116]	@ (80012b8 <main+0x248>)
 8001244:	6013      	str	r3, [r2, #0]

	/* creation of orientationTask */
	orientationTaskHandle = osThreadNew(getOrientation, NULL, &orientationTask_attributes);
 8001246:	4a1d      	ldr	r2, [pc, #116]	@ (80012bc <main+0x24c>)
 8001248:	2100      	movs	r1, #0
 800124a:	481d      	ldr	r0, [pc, #116]	@ (80012c0 <main+0x250>)
 800124c:	f006 fe6a 	bl	8007f24 <osThreadNew>
 8001250:	4603      	mov	r3, r0
 8001252:	4a1c      	ldr	r2, [pc, #112]	@ (80012c4 <main+0x254>)
 8001254:	6013      	str	r3, [r2, #0]

	/* creation of inputsTask */
	inputsTaskHandle = osThreadNew(getInputs, NULL, &inputsTask_attributes);
 8001256:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <main+0x258>)
 8001258:	2100      	movs	r1, #0
 800125a:	481c      	ldr	r0, [pc, #112]	@ (80012cc <main+0x25c>)
 800125c:	f006 fe62 	bl	8007f24 <osThreadNew>
 8001260:	4603      	mov	r3, r0
 8001262:	4a1b      	ldr	r2, [pc, #108]	@ (80012d0 <main+0x260>)
 8001264:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001266:	f006 fe37 	bl	8007ed8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800126a:	bf00      	nop
 800126c:	e7fd      	b.n	800126a <main+0x1fa>
 800126e:	bf00      	nop
 8001270:	200001ac 	.word	0x200001ac
 8001274:	20000164 	.word	0x20000164
 8001278:	40011000 	.word	0x40011000
 800127c:	20000088 	.word	0x20000088
 8001280:	40020000 	.word	0x40020000
 8001284:	0800c2f0 	.word	0x0800c2f0
 8001288:	200000dc 	.word	0x200000dc
 800128c:	200002e1 	.word	0x200002e1
 8001290:	20000238 	.word	0x20000238
 8001294:	20000208 	.word	0x20000208
 8001298:	2000023a 	.word	0x2000023a
 800129c:	0800c3ac 	.word	0x0800c3ac
 80012a0:	20000204 	.word	0x20000204
 80012a4:	0800c31c 	.word	0x0800c31c
 80012a8:	08001b1d 	.word	0x08001b1d
 80012ac:	200001f4 	.word	0x200001f4
 80012b0:	0800c340 	.word	0x0800c340
 80012b4:	08001b2d 	.word	0x08001b2d
 80012b8:	200001f8 	.word	0x200001f8
 80012bc:	0800c364 	.word	0x0800c364
 80012c0:	08001b3d 	.word	0x08001b3d
 80012c4:	200001fc 	.word	0x200001fc
 80012c8:	0800c388 	.word	0x0800c388
 80012cc:	08001c5d 	.word	0x08001c5d
 80012d0:	20000200 	.word	0x20000200

080012d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b090      	sub	sp, #64	@ 0x40
 80012d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0318 	add.w	r3, r7, #24
 80012de:	2228      	movs	r2, #40	@ 0x28
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f00a fa0e 	bl	800b704 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fe:	2310      	movs	r3, #16
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001302:	2302      	movs	r3, #2
 8001304:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001306:	2300      	movs	r3, #0
 8001308:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800130a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800130e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4618      	mov	r0, r3
 8001316:	f005 f80f 	bl	8006338 <HAL_RCC_OscConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0x50>
	{
		Error_Handler();
 8001320:	f000 fcb6 	bl	8001c90 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001324:	230f      	movs	r3, #15
 8001326:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001328:	2302      	movs	r3, #2
 800132a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001334:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2102      	movs	r1, #2
 800133e:	4618      	mov	r0, r3
 8001340:	f005 fa7c 	bl	800683c <HAL_RCC_ClockConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x7a>
	{
		Error_Handler();
 800134a:	f000 fca1 	bl	8001c90 <Error_Handler>
	}
}
 800134e:	bf00      	nop
 8001350:	3740      	adds	r7, #64	@ 0x40
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800135c:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <MX_I2C2_Init+0x54>)
 800135e:	4a14      	ldr	r2, [pc, #80]	@ (80013b0 <MX_I2C2_Init+0x58>)
 8001360:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001364:	4a13      	ldr	r2, [pc, #76]	@ (80013b4 <MX_I2C2_Init+0x5c>)
 8001366:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <MX_I2C2_Init+0x54>)
 800136a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800136e:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001370:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001378:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800137c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <MX_I2C2_Init+0x54>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001398:	f002 fbb2 	bl	8003b00 <HAL_I2C_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C2_Init+0x4e>
	{
		Error_Handler();
 80013a2:	f000 fc75 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000088 	.word	0x20000088
 80013b0:	40005800 	.word	0x40005800
 80013b4:	00061a80 	.word	0x00061a80

080013b8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]
 80013d6:	615a      	str	r2, [r3, #20]
 80013d8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80013da:	4b33      	ldr	r3, [pc, #204]	@ (80014a8 <MX_TIM2_Init+0xf0>)
 80013dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013e0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 3;
 80013e2:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <MX_TIM2_Init+0xf0>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b2f      	ldr	r3, [pc, #188]	@ (80014a8 <MX_TIM2_Init+0xf0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 80013ee:	4b2e      	ldr	r3, [pc, #184]	@ (80014a8 <MX_TIM2_Init+0xf0>)
 80013f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013f4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f6:	4b2c      	ldr	r3, [pc, #176]	@ (80014a8 <MX_TIM2_Init+0xf0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <MX_TIM2_Init+0xf0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001402:	4829      	ldr	r0, [pc, #164]	@ (80014a8 <MX_TIM2_Init+0xf0>)
 8001404:	f005 fc6e 	bl	8006ce4 <HAL_TIM_PWM_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 800140e:	f000 fc3f 	bl	8001c90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	4619      	mov	r1, r3
 8001420:	4821      	ldr	r0, [pc, #132]	@ (80014a8 <MX_TIM2_Init+0xf0>)
 8001422:	f006 fc83 	bl	8007d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 800142c:	f000 fc30 	bl	8001c90 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001430:	2360      	movs	r3, #96	@ 0x60
 8001432:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2200      	movs	r2, #0
 8001444:	4619      	mov	r1, r3
 8001446:	4818      	ldr	r0, [pc, #96]	@ (80014a8 <MX_TIM2_Init+0xf0>)
 8001448:	f006 f826 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM2_Init+0x9e>
	{
		Error_Handler();
 8001452:	f000 fc1d 	bl	8001c90 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2204      	movs	r2, #4
 800145a:	4619      	mov	r1, r3
 800145c:	4812      	ldr	r0, [pc, #72]	@ (80014a8 <MX_TIM2_Init+0xf0>)
 800145e:	f006 f81b 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001468:	f000 fc12 	bl	8001c90 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	2208      	movs	r2, #8
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <MX_TIM2_Init+0xf0>)
 8001474:	f006 f810 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0xca>
	{
		Error_Handler();
 800147e:	f000 fc07 	bl	8001c90 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	220c      	movs	r2, #12
 8001486:	4619      	mov	r1, r3
 8001488:	4807      	ldr	r0, [pc, #28]	@ (80014a8 <MX_TIM2_Init+0xf0>)
 800148a:	f006 f805 	bl	8007498 <HAL_TIM_PWM_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0xe0>
	{
		Error_Handler();
 8001494:	f000 fbfc 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001498:	4803      	ldr	r0, [pc, #12]	@ (80014a8 <MX_TIM2_Init+0xf0>)
 800149a:	f001 fbe3 	bl	8002c64 <HAL_TIM_MspPostInit>

}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	@ 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000164 	.word	0x20000164

080014ac <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80014c8:	4b31      	ldr	r3, [pc, #196]	@ (8001590 <MX_TIM3_Init+0xe4>)
 80014ca:	4a32      	ldr	r2, [pc, #200]	@ (8001594 <MX_TIM3_Init+0xe8>)
 80014cc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 999;
 80014ce:	4b30      	ldr	r3, [pc, #192]	@ (8001590 <MX_TIM3_Init+0xe4>)
 80014d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014d4:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001590 <MX_TIM3_Init+0xe4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80014dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001590 <MX_TIM3_Init+0xe4>)
 80014de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e2:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <MX_TIM3_Init+0xe4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b29      	ldr	r3, [pc, #164]	@ (8001590 <MX_TIM3_Init+0xe4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80014f0:	4827      	ldr	r0, [pc, #156]	@ (8001590 <MX_TIM3_Init+0xe4>)
 80014f2:	f005 fce9 	bl	8006ec8 <HAL_TIM_IC_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 80014fc:	f000 fbc8 	bl	8001c90 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	4619      	mov	r1, r3
 800150e:	4820      	ldr	r0, [pc, #128]	@ (8001590 <MX_TIM3_Init+0xe4>)
 8001510:	f006 fc0c 	bl	8007d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM3_Init+0x72>
	{
		Error_Handler();
 800151a:	f000 fbb9 	bl	8001c90 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800151e:	2300      	movs	r3, #0
 8001520:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001522:	2301      	movs	r3, #1
 8001524:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800152e:	463b      	mov	r3, r7
 8001530:	2200      	movs	r2, #0
 8001532:	4619      	mov	r1, r3
 8001534:	4816      	ldr	r0, [pc, #88]	@ (8001590 <MX_TIM3_Init+0xe4>)
 8001536:	f005 ff13 	bl	8007360 <HAL_TIM_IC_ConfigChannel>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 8001540:	f000 fba6 	bl	8001c90 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001544:	463b      	mov	r3, r7
 8001546:	2204      	movs	r2, #4
 8001548:	4619      	mov	r1, r3
 800154a:	4811      	ldr	r0, [pc, #68]	@ (8001590 <MX_TIM3_Init+0xe4>)
 800154c:	f005 ff08 	bl	8007360 <HAL_TIM_IC_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM3_Init+0xae>
	{
		Error_Handler();
 8001556:	f000 fb9b 	bl	8001c90 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800155a:	463b      	mov	r3, r7
 800155c:	2208      	movs	r2, #8
 800155e:	4619      	mov	r1, r3
 8001560:	480b      	ldr	r0, [pc, #44]	@ (8001590 <MX_TIM3_Init+0xe4>)
 8001562:	f005 fefd 	bl	8007360 <HAL_TIM_IC_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM3_Init+0xc4>
	{
		Error_Handler();
 800156c:	f000 fb90 	bl	8001c90 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	220c      	movs	r2, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4806      	ldr	r0, [pc, #24]	@ (8001590 <MX_TIM3_Init+0xe4>)
 8001578:	f005 fef2 	bl	8007360 <HAL_TIM_IC_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM3_Init+0xda>
	{
		Error_Handler();
 8001582:	f000 fb85 	bl	8001c90 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200001ac 	.word	0x200001ac
 8001594:	40000400 	.word	0x40000400

08001598 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <MX_DMA_Init+0x48>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	4a0f      	ldr	r2, [pc, #60]	@ (80015e0 <MX_DMA_Init+0x48>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6153      	str	r3, [r2, #20]
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <MX_DMA_Init+0x48>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2105      	movs	r1, #5
 80015ba:	200e      	movs	r0, #14
 80015bc:	f001 fe35 	bl	800322a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80015c0:	200e      	movs	r0, #14
 80015c2:	f001 fe4e 	bl	8003262 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2105      	movs	r1, #5
 80015ca:	200f      	movs	r0, #15
 80015cc:	f001 fe2d 	bl	800322a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015d0:	200f      	movs	r0, #15
 80015d2:	f001 fe46 	bl	8003262 <HAL_NVIC_EnableIRQ>

}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000

080015e4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b088      	sub	sp, #32
 80015e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015f8:	4b28      	ldr	r3, [pc, #160]	@ (800169c <MX_GPIO_Init+0xb8>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a27      	ldr	r2, [pc, #156]	@ (800169c <MX_GPIO_Init+0xb8>)
 80015fe:	f043 0310 	orr.w	r3, r3, #16
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b25      	ldr	r3, [pc, #148]	@ (800169c <MX_GPIO_Init+0xb8>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001610:	4b22      	ldr	r3, [pc, #136]	@ (800169c <MX_GPIO_Init+0xb8>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a21      	ldr	r2, [pc, #132]	@ (800169c <MX_GPIO_Init+0xb8>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <MX_GPIO_Init+0xb8>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <MX_GPIO_Init+0xb8>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a1b      	ldr	r2, [pc, #108]	@ (800169c <MX_GPIO_Init+0xb8>)
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b19      	ldr	r3, [pc, #100]	@ (800169c <MX_GPIO_Init+0xb8>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001646:	4816      	ldr	r0, [pc, #88]	@ (80016a0 <MX_GPIO_Init+0xbc>)
 8001648:	f002 fa10 	bl	8003a6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800164c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001650:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2302      	movs	r3, #2
 800165c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	4619      	mov	r1, r3
 8001664:	480e      	ldr	r0, [pc, #56]	@ (80016a0 <MX_GPIO_Init+0xbc>)
 8001666:	f002 f87d 	bl	8003764 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 800166a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_GPIO_Init+0xc0>)
 8001672:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	4619      	mov	r1, r3
 800167e:	480a      	ldr	r0, [pc, #40]	@ (80016a8 <MX_GPIO_Init+0xc4>)
 8001680:	f002 f870 	bl	8003764 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2105      	movs	r1, #5
 8001688:	2028      	movs	r0, #40	@ 0x28
 800168a:	f001 fdce 	bl	800322a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800168e:	2028      	movs	r0, #40	@ 0x28
 8001690:	f001 fde7 	bl	8003262 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021000 	.word	0x40021000
 80016a0:	40011000 	.word	0x40011000
 80016a4:	10110000 	.word	0x10110000
 80016a8:	40010c00 	.word	0x40010c00

080016ac <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 4 */
//i2c callback functions, remember i2c interface is in mpu6050_lib.c
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	i2c_TX_done = 1; //defined in mpu6050_lib.c
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <HAL_I2C_MasterTxCpltCallback+0x18>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	200002e1 	.word	0x200002e1

080016c8 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	i2c_RX_done = 1; //defined in mpu6050_lib.c
 80016d0:	4b03      	ldr	r3, [pc, #12]	@ (80016e0 <HAL_I2C_MasterRxCpltCallback+0x18>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr
 80016e0:	200002e0 	.word	0x200002e0

080016e4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12)
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016f4:	d102      	bne.n	80016fc <HAL_GPIO_EXTI_Callback+0x18>
	{
		orientation_data_ready = 1; //defined in mpu6050_lib.c, get DMP data as soon as its ready from mpu6050
 80016f6:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <HAL_GPIO_EXTI_Callback+0x24>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
	}

}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	200002e2 	.word	0x200002e2

0800170c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) //PWM duty cycle calculations, called when timer detects rising and falling edges
{ //most code based off of f303k8 TIM_InputCapture example from 1.11.15 firmware package, some is based off of chapter 11.3.5 of mastering stm32 book.
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a8c      	ldr	r2, [pc, #560]	@ (800194c <HAL_TIM_IC_CaptureCallback+0x240>)
 800171a:	4293      	cmp	r3, r2
 800171c:	f040 81e9 	bne.w	8001af2 <HAL_TIM_IC_CaptureCallback+0x3e6>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7f1b      	ldrb	r3, [r3, #28]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d170      	bne.n	800180a <HAL_TIM_IC_CaptureCallback+0xfe>
		{
			if (throttleCaptureIndex == 0)
 8001728:	4b89      	ldr	r3, [pc, #548]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0x244>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d122      	bne.n	8001776 <HAL_TIM_IC_CaptureCallback+0x6a>
			{
				throttleInputCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001730:	2100      	movs	r1, #0
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f005 ff72 	bl	800761c <HAL_TIM_ReadCapturedValue>
 8001738:	4603      	mov	r3, r0
 800173a:	4a86      	ldr	r2, [pc, #536]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x248>)
 800173c:	6013      	str	r3, [r2, #0]
				throttleCaptureIndex = 1;
 800173e:	4b84      	ldr	r3, [pc, #528]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001740:	2201      	movs	r2, #1
 8001742:	801a      	strh	r2, [r3, #0]

				//change polarity so that next time the falling edge is detected
				htim->Instance->CCER &= ~TIM_CCER_CC1E;     // Disable channel
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6a1a      	ldr	r2, [r3, #32]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC1P;      // Toggle polarity
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6a1a      	ldr	r2, [r3, #32]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0202 	orr.w	r2, r2, #2
 8001762:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC1E;      // Re-enable channel
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6a1a      	ldr	r2, [r3, #32]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0201 	orr.w	r2, r2, #1
 8001772:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC4E;      // Re-enable channel
			}
		}
	}

}
 8001774:	e1bd      	b.n	8001af2 <HAL_TIM_IC_CaptureCallback+0x3e6>
			else if (throttleCaptureIndex == 1)
 8001776:	4b76      	ldr	r3, [pc, #472]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	f040 81b9 	bne.w	8001af2 <HAL_TIM_IC_CaptureCallback+0x3e6>
				throttleInputCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001780:	2100      	movs	r1, #0
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f005 ff4a 	bl	800761c <HAL_TIM_ReadCapturedValue>
 8001788:	4603      	mov	r3, r0
 800178a:	4a73      	ldr	r2, [pc, #460]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800178c:	6013      	str	r3, [r2, #0]
				if (throttleInputCaptureValue2 > throttleInputCaptureValue1)
 800178e:	4b72      	ldr	r3, [pc, #456]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4b70      	ldr	r3, [pc, #448]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d907      	bls.n	80017aa <HAL_TIM_IC_CaptureCallback+0x9e>
					throttleDiffCapture = throttleInputCaptureValue2 - throttleInputCaptureValue1;
 800179a:	4b6f      	ldr	r3, [pc, #444]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	4b6d      	ldr	r3, [pc, #436]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x248>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	4a6d      	ldr	r2, [pc, #436]	@ (800195c <HAL_TIM_IC_CaptureCallback+0x250>)
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	e013      	b.n	80017d2 <HAL_TIM_IC_CaptureCallback+0xc6>
				else if (throttleInputCaptureValue2 < throttleInputCaptureValue1)
 80017aa:	4b6b      	ldr	r3, [pc, #428]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b69      	ldr	r3, [pc, #420]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x248>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d20b      	bcs.n	80017ce <HAL_TIM_IC_CaptureCallback+0xc2>
					throttleDiffCapture = (htim->Instance->ARR - throttleInputCaptureValue1) + throttleInputCaptureValue2;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017bc:	4b65      	ldr	r3, [pc, #404]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0x248>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	1ad2      	subs	r2, r2, r3
 80017c2:	4b65      	ldr	r3, [pc, #404]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a64      	ldr	r2, [pc, #400]	@ (800195c <HAL_TIM_IC_CaptureCallback+0x250>)
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	e001      	b.n	80017d2 <HAL_TIM_IC_CaptureCallback+0xc6>
					Error_Handler();
 80017ce:	f000 fa5f 	bl	8001c90 <Error_Handler>
				throttleCaptureIndex = 0;
 80017d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0x244>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC1E;     // Disable channel
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6a1a      	ldr	r2, [r3, #32]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 0201 	bic.w	r2, r2, #1
 80017e6:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER &= ~TIM_CCER_CC1P;      // Toggle polarity
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6a1a      	ldr	r2, [r3, #32]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0202 	bic.w	r2, r2, #2
 80017f6:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC1E;      // Re-enable channel
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	621a      	str	r2, [r3, #32]
}
 8001808:	e173      	b.n	8001af2 <HAL_TIM_IC_CaptureCallback+0x3e6>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7f1b      	ldrb	r3, [r3, #28]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d170      	bne.n	80018f4 <HAL_TIM_IC_CaptureCallback+0x1e8>
			if (yawCaptureIndex == 0)
 8001812:	4b53      	ldr	r3, [pc, #332]	@ (8001960 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d122      	bne.n	8001860 <HAL_TIM_IC_CaptureCallback+0x154>
				yawInputCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800181a:	2104      	movs	r1, #4
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f005 fefd 	bl	800761c <HAL_TIM_ReadCapturedValue>
 8001822:	4603      	mov	r3, r0
 8001824:	4a4f      	ldr	r2, [pc, #316]	@ (8001964 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001826:	6013      	str	r3, [r2, #0]
				yawCaptureIndex = 1;
 8001828:	4b4d      	ldr	r3, [pc, #308]	@ (8001960 <HAL_TIM_IC_CaptureCallback+0x254>)
 800182a:	2201      	movs	r2, #1
 800182c:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC2E;     // Disable channel
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6a1a      	ldr	r2, [r3, #32]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0210 	bic.w	r2, r2, #16
 800183c:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC2P;      // Toggle polarity
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6a1a      	ldr	r2, [r3, #32]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0220 	orr.w	r2, r2, #32
 800184c:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC2E;      // Re-enable channel
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6a1a      	ldr	r2, [r3, #32]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 0210 	orr.w	r2, r2, #16
 800185c:	621a      	str	r2, [r3, #32]
}
 800185e:	e148      	b.n	8001af2 <HAL_TIM_IC_CaptureCallback+0x3e6>
			else if (yawCaptureIndex == 1)
 8001860:	4b3f      	ldr	r3, [pc, #252]	@ (8001960 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	f040 8144 	bne.w	8001af2 <HAL_TIM_IC_CaptureCallback+0x3e6>
				yawInputCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800186a:	2104      	movs	r1, #4
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f005 fed5 	bl	800761c <HAL_TIM_ReadCapturedValue>
 8001872:	4603      	mov	r3, r0
 8001874:	4a3c      	ldr	r2, [pc, #240]	@ (8001968 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001876:	6013      	str	r3, [r2, #0]
				if (yawInputCaptureValue2 > yawInputCaptureValue1)
 8001878:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b39      	ldr	r3, [pc, #228]	@ (8001964 <HAL_TIM_IC_CaptureCallback+0x258>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d907      	bls.n	8001894 <HAL_TIM_IC_CaptureCallback+0x188>
					yawDiffCapture = yawInputCaptureValue2 - yawInputCaptureValue1;
 8001884:	4b38      	ldr	r3, [pc, #224]	@ (8001968 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b36      	ldr	r3, [pc, #216]	@ (8001964 <HAL_TIM_IC_CaptureCallback+0x258>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	4a37      	ldr	r2, [pc, #220]	@ (800196c <HAL_TIM_IC_CaptureCallback+0x260>)
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e013      	b.n	80018bc <HAL_TIM_IC_CaptureCallback+0x1b0>
				else if (yawInputCaptureValue2 < yawInputCaptureValue1)
 8001894:	4b34      	ldr	r3, [pc, #208]	@ (8001968 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b32      	ldr	r3, [pc, #200]	@ (8001964 <HAL_TIM_IC_CaptureCallback+0x258>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d20b      	bcs.n	80018b8 <HAL_TIM_IC_CaptureCallback+0x1ac>
					yawDiffCapture = (htim->Instance->ARR - yawInputCaptureValue1) + yawInputCaptureValue2;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001964 <HAL_TIM_IC_CaptureCallback+0x258>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	1ad2      	subs	r2, r2, r3
 80018ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001968 <HAL_TIM_IC_CaptureCallback+0x25c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a2e      	ldr	r2, [pc, #184]	@ (800196c <HAL_TIM_IC_CaptureCallback+0x260>)
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e001      	b.n	80018bc <HAL_TIM_IC_CaptureCallback+0x1b0>
					Error_Handler();
 80018b8:	f000 f9ea 	bl	8001c90 <Error_Handler>
				yawCaptureIndex = 0;
 80018bc:	4b28      	ldr	r3, [pc, #160]	@ (8001960 <HAL_TIM_IC_CaptureCallback+0x254>)
 80018be:	2200      	movs	r2, #0
 80018c0:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC2E;     // Disable channel
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0210 	bic.w	r2, r2, #16
 80018d0:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER &= ~TIM_CCER_CC2P;      // Toggle polarity
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6a1a      	ldr	r2, [r3, #32]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0220 	bic.w	r2, r2, #32
 80018e0:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC2E;      // Re-enable channel
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6a1a      	ldr	r2, [r3, #32]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0210 	orr.w	r2, r2, #16
 80018f0:	621a      	str	r2, [r3, #32]
}
 80018f2:	e0fe      	b.n	8001af2 <HAL_TIM_IC_CaptureCallback+0x3e6>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7f1b      	ldrb	r3, [r3, #28]
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	f040 8087 	bne.w	8001a0c <HAL_TIM_IC_CaptureCallback+0x300>
			if (pitchCaptureIndex == 0)
 80018fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d138      	bne.n	8001978 <HAL_TIM_IC_CaptureCallback+0x26c>
				pitchInputCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001906:	2108      	movs	r1, #8
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f005 fe87 	bl	800761c <HAL_TIM_ReadCapturedValue>
 800190e:	4603      	mov	r3, r0
 8001910:	4a18      	ldr	r2, [pc, #96]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001912:	6013      	str	r3, [r2, #0]
				pitchCaptureIndex = 1;
 8001914:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001916:	2201      	movs	r2, #1
 8001918:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC3E;     // Disable channel
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6a1a      	ldr	r2, [r3, #32]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001928:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC3P;      // Toggle polarity
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6a1a      	ldr	r2, [r3, #32]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001938:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC3E;      // Re-enable channel
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6a1a      	ldr	r2, [r3, #32]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001948:	621a      	str	r2, [r3, #32]
}
 800194a:	e0d2      	b.n	8001af2 <HAL_TIM_IC_CaptureCallback+0x3e6>
 800194c:	40000400 	.word	0x40000400
 8001950:	200002a8 	.word	0x200002a8
 8001954:	200002b0 	.word	0x200002b0
 8001958:	200002b4 	.word	0x200002b4
 800195c:	200002b8 	.word	0x200002b8
 8001960:	200002aa 	.word	0x200002aa
 8001964:	200002bc 	.word	0x200002bc
 8001968:	200002c0 	.word	0x200002c0
 800196c:	200002c4 	.word	0x200002c4
 8001970:	200002ac 	.word	0x200002ac
 8001974:	200002c8 	.word	0x200002c8
			else if (pitchCaptureIndex == 1)
 8001978:	4b60      	ldr	r3, [pc, #384]	@ (8001afc <HAL_TIM_IC_CaptureCallback+0x3f0>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	f040 80b8 	bne.w	8001af2 <HAL_TIM_IC_CaptureCallback+0x3e6>
				pitchInputCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001982:	2108      	movs	r1, #8
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f005 fe49 	bl	800761c <HAL_TIM_ReadCapturedValue>
 800198a:	4603      	mov	r3, r0
 800198c:	4a5c      	ldr	r2, [pc, #368]	@ (8001b00 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 800198e:	6013      	str	r3, [r2, #0]
				if (pitchInputCaptureValue2 > pitchInputCaptureValue1)
 8001990:	4b5b      	ldr	r3, [pc, #364]	@ (8001b00 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b5b      	ldr	r3, [pc, #364]	@ (8001b04 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	429a      	cmp	r2, r3
 800199a:	d907      	bls.n	80019ac <HAL_TIM_IC_CaptureCallback+0x2a0>
					pitchDiffCapture = pitchInputCaptureValue2 - pitchInputCaptureValue1;
 800199c:	4b58      	ldr	r3, [pc, #352]	@ (8001b00 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b58      	ldr	r3, [pc, #352]	@ (8001b04 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	4a58      	ldr	r2, [pc, #352]	@ (8001b08 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e013      	b.n	80019d4 <HAL_TIM_IC_CaptureCallback+0x2c8>
				else if (pitchInputCaptureValue2 < pitchInputCaptureValue1)
 80019ac:	4b54      	ldr	r3, [pc, #336]	@ (8001b00 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b54      	ldr	r3, [pc, #336]	@ (8001b04 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d20b      	bcs.n	80019d0 <HAL_TIM_IC_CaptureCallback+0x2c4>
					pitchDiffCapture = (htim->Instance->ARR - pitchInputCaptureValue1) + pitchInputCaptureValue2;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019be:	4b51      	ldr	r3, [pc, #324]	@ (8001b04 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	1ad2      	subs	r2, r2, r3
 80019c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001b00 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a4f      	ldr	r2, [pc, #316]	@ (8001b08 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e001      	b.n	80019d4 <HAL_TIM_IC_CaptureCallback+0x2c8>
					Error_Handler();
 80019d0:	f000 f95e 	bl	8001c90 <Error_Handler>
				pitchCaptureIndex = 0;
 80019d4:	4b49      	ldr	r3, [pc, #292]	@ (8001afc <HAL_TIM_IC_CaptureCallback+0x3f0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC3E;     // Disable channel
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6a1a      	ldr	r2, [r3, #32]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80019e8:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER &= ~TIM_CCER_CC3P;      // Toggle polarity
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6a1a      	ldr	r2, [r3, #32]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80019f8:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC3E;      // Re-enable channel
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6a1a      	ldr	r2, [r3, #32]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a08:	621a      	str	r2, [r3, #32]
}
 8001a0a:	e072      	b.n	8001af2 <HAL_TIM_IC_CaptureCallback+0x3e6>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7f1b      	ldrb	r3, [r3, #28]
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d16e      	bne.n	8001af2 <HAL_TIM_IC_CaptureCallback+0x3e6>
			if (rollCaptureIndex == 0)
 8001a14:	4b3d      	ldr	r3, [pc, #244]	@ (8001b0c <HAL_TIM_IC_CaptureCallback+0x400>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d122      	bne.n	8001a62 <HAL_TIM_IC_CaptureCallback+0x356>
				rollInputCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001a1c:	210c      	movs	r1, #12
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f005 fdfc 	bl	800761c <HAL_TIM_ReadCapturedValue>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4a3a      	ldr	r2, [pc, #232]	@ (8001b10 <HAL_TIM_IC_CaptureCallback+0x404>)
 8001a28:	6013      	str	r3, [r2, #0]
				rollCaptureIndex = 1;
 8001a2a:	4b38      	ldr	r3, [pc, #224]	@ (8001b0c <HAL_TIM_IC_CaptureCallback+0x400>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC4E;     // Disable channel
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6a1a      	ldr	r2, [r3, #32]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a3e:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC4P;      // Toggle polarity
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6a1a      	ldr	r2, [r3, #32]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a4e:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC4E;      // Re-enable channel
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6a1a      	ldr	r2, [r3, #32]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a5e:	621a      	str	r2, [r3, #32]
}
 8001a60:	e047      	b.n	8001af2 <HAL_TIM_IC_CaptureCallback+0x3e6>
			else if (rollCaptureIndex == 1)
 8001a62:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <HAL_TIM_IC_CaptureCallback+0x400>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d143      	bne.n	8001af2 <HAL_TIM_IC_CaptureCallback+0x3e6>
				rollInputCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001a6a:	210c      	movs	r1, #12
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f005 fdd5 	bl	800761c <HAL_TIM_ReadCapturedValue>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a27      	ldr	r2, [pc, #156]	@ (8001b14 <HAL_TIM_IC_CaptureCallback+0x408>)
 8001a76:	6013      	str	r3, [r2, #0]
				if (rollInputCaptureValue2 > rollInputCaptureValue1)
 8001a78:	4b26      	ldr	r3, [pc, #152]	@ (8001b14 <HAL_TIM_IC_CaptureCallback+0x408>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_TIM_IC_CaptureCallback+0x404>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d907      	bls.n	8001a94 <HAL_TIM_IC_CaptureCallback+0x388>
					rollDiffCapture = rollInputCaptureValue2 - rollInputCaptureValue1;
 8001a84:	4b23      	ldr	r3, [pc, #140]	@ (8001b14 <HAL_TIM_IC_CaptureCallback+0x408>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <HAL_TIM_IC_CaptureCallback+0x404>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	4a22      	ldr	r2, [pc, #136]	@ (8001b18 <HAL_TIM_IC_CaptureCallback+0x40c>)
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e013      	b.n	8001abc <HAL_TIM_IC_CaptureCallback+0x3b0>
				else if (rollInputCaptureValue2 < rollInputCaptureValue1)
 8001a94:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <HAL_TIM_IC_CaptureCallback+0x408>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b1d      	ldr	r3, [pc, #116]	@ (8001b10 <HAL_TIM_IC_CaptureCallback+0x404>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d20b      	bcs.n	8001ab8 <HAL_TIM_IC_CaptureCallback+0x3ac>
					rollDiffCapture = (htim->Instance->ARR - rollInputCaptureValue1) + rollInputCaptureValue2;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b10 <HAL_TIM_IC_CaptureCallback+0x404>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	1ad2      	subs	r2, r2, r3
 8001aac:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <HAL_TIM_IC_CaptureCallback+0x408>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a19      	ldr	r2, [pc, #100]	@ (8001b18 <HAL_TIM_IC_CaptureCallback+0x40c>)
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e001      	b.n	8001abc <HAL_TIM_IC_CaptureCallback+0x3b0>
					Error_Handler();
 8001ab8:	f000 f8ea 	bl	8001c90 <Error_Handler>
				rollCaptureIndex = 0;
 8001abc:	4b13      	ldr	r3, [pc, #76]	@ (8001b0c <HAL_TIM_IC_CaptureCallback+0x400>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC4E;     // Disable channel
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6a1a      	ldr	r2, [r3, #32]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ad0:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER &= ~TIM_CCER_CC4P;      // Toggle polarity
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a1a      	ldr	r2, [r3, #32]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ae0:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC4E;      // Re-enable channel
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6a1a      	ldr	r2, [r3, #32]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001af0:	621a      	str	r2, [r3, #32]
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200002ac 	.word	0x200002ac
 8001b00:	200002cc 	.word	0x200002cc
 8001b04:	200002c8 	.word	0x200002c8
 8001b08:	200002d0 	.word	0x200002d0
 8001b0c:	200002ae 	.word	0x200002ae
 8001b10:	200002d4 	.word	0x200002d4
 8001b14:	200002d8 	.word	0x200002d8
 8001b18:	200002dc 	.word	0x200002dc

08001b1c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001b24:	2001      	movs	r0, #1
 8001b26:	f006 fa8f 	bl	8008048 <osDelay>
 8001b2a:	e7fb      	b.n	8001b24 <StartDefaultTask+0x8>

08001b2c <updatePID>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_updatePID */
void updatePID(void *argument)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN updatePID */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f006 fa87 	bl	8008048 <osDelay>
 8001b3a:	e7fb      	b.n	8001b34 <updatePID+0x8>

08001b3c <getOrientation>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_getOrientation */
void getOrientation(void *argument)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;)
	{
		//credits: https://github.com/Pluscrafter/i2cdevlib/blob/master/STM32_HAL/Nucleo-144F722ZE/Src/main.cpp

		while (!orientation_data_ready); //wait until external interrupt fires to get data when it is freshly ready
 8001b44:	bf00      	nop
 8001b46:	4b3b      	ldr	r3, [pc, #236]	@ (8001c34 <getOrientation+0xf8>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0fb      	beq.n	8001b46 <getOrientation+0xa>
		if (osMutexAcquire(xMutexHandle, osWaitForever) == osOK) //try to aquire mutex
 8001b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c38 <getOrientation+0xfc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f04f 31ff 	mov.w	r1, #4294967295
 8001b56:	4618      	mov	r0, r3
 8001b58:	f006 fb17 	bl	800818a <osMutexAcquire>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d15c      	bne.n	8001c1c <getOrientation+0xe0>
		{
			fifoCount = getFIFOCount(&hi2c2);
 8001b62:	4836      	ldr	r0, [pc, #216]	@ (8001c3c <getOrientation+0x100>)
 8001b64:	f000 fca0 	bl	80024a8 <getFIFOCount>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <getOrientation+0x104>)
 8001b6e:	801a      	strh	r2, [r3, #0]
			while (fifoCount < packetSize)
 8001b70:	e006      	b.n	8001b80 <getOrientation+0x44>
			{
				//insert here your code
				fifoCount = getFIFOCount(&hi2c2);
 8001b72:	4832      	ldr	r0, [pc, #200]	@ (8001c3c <getOrientation+0x100>)
 8001b74:	f000 fc98 	bl	80024a8 <getFIFOCount>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b30      	ldr	r3, [pc, #192]	@ (8001c40 <getOrientation+0x104>)
 8001b7e:	801a      	strh	r2, [r3, #0]
			while (fifoCount < packetSize)
 8001b80:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <getOrientation+0x104>)
 8001b82:	881a      	ldrh	r2, [r3, #0]
 8001b84:	4b2f      	ldr	r3, [pc, #188]	@ (8001c44 <getOrientation+0x108>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d3f2      	bcc.n	8001b72 <getOrientation+0x36>
			}
			if (fifoCount >= 1024)
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c40 <getOrientation+0x104>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b94:	d303      	bcc.n	8001b9e <getOrientation+0x62>
			{
				resetFIFO(&hi2c2);
 8001b96:	4829      	ldr	r0, [pc, #164]	@ (8001c3c <getOrientation+0x100>)
 8001b98:	f000 fca4 	bl	80024e4 <resetFIFO>
 8001b9c:	e039      	b.n	8001c12 <getOrientation+0xd6>
				//Serial.println(F("FIFO overflow!"));
			}
			else
			{
				if (fifoCount % packetSize != 0)
 8001b9e:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <getOrientation+0x104>)
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	4a28      	ldr	r2, [pc, #160]	@ (8001c44 <getOrientation+0x108>)
 8001ba4:	8812      	ldrh	r2, [r2, #0]
 8001ba6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001baa:	fb01 f202 	mul.w	r2, r1, r2
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d01a      	beq.n	8001bec <getOrientation+0xb0>
				{
					resetFIFO(&hi2c2);
 8001bb6:	4821      	ldr	r0, [pc, #132]	@ (8001c3c <getOrientation+0x100>)
 8001bb8:	f000 fc94 	bl	80024e4 <resetFIFO>
					fifoCount = getFIFOCount(&hi2c2);
 8001bbc:	481f      	ldr	r0, [pc, #124]	@ (8001c3c <getOrientation+0x100>)
 8001bbe:	f000 fc73 	bl	80024a8 <getFIFOCount>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <getOrientation+0x104>)
 8001bc8:	801a      	strh	r2, [r3, #0]
 8001bca:	e022      	b.n	8001c12 <getOrientation+0xd6>
				else
				{
					while (fifoCount >= packetSize)
					{

						getFIFOBytes(&hi2c2, fifoBuffer, packetSize);
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <getOrientation+0x108>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	491c      	ldr	r1, [pc, #112]	@ (8001c48 <getOrientation+0x10c>)
 8001bd6:	4819      	ldr	r0, [pc, #100]	@ (8001c3c <getOrientation+0x100>)
 8001bd8:	f000 fc94 	bl	8002504 <getFIFOBytes>
						fifoCount -= packetSize;
 8001bdc:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <getOrientation+0x104>)
 8001bde:	881a      	ldrh	r2, [r3, #0]
 8001be0:	4b18      	ldr	r3, [pc, #96]	@ (8001c44 <getOrientation+0x108>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <getOrientation+0x104>)
 8001bea:	801a      	strh	r2, [r3, #0]
					while (fifoCount >= packetSize)
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <getOrientation+0x104>)
 8001bee:	881a      	ldrh	r2, [r3, #0]
 8001bf0:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <getOrientation+0x108>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d2e9      	bcs.n	8001bcc <getOrientation+0x90>

					}
					dmpGetQuaternionQuatStruct(&q, fifoBuffer);
 8001bf8:	4913      	ldr	r1, [pc, #76]	@ (8001c48 <getOrientation+0x10c>)
 8001bfa:	4814      	ldr	r0, [pc, #80]	@ (8001c4c <getOrientation+0x110>)
 8001bfc:	f000 fcec 	bl	80025d8 <dmpGetQuaternionQuatStruct>
					dmpGetGravity(&gravity, &q);
 8001c00:	4912      	ldr	r1, [pc, #72]	@ (8001c4c <getOrientation+0x110>)
 8001c02:	4813      	ldr	r0, [pc, #76]	@ (8001c50 <getOrientation+0x114>)
 8001c04:	f000 fd3b 	bl	800267e <dmpGetGravity>
					dmpGetYawPitchRoll(ypr, &q, &gravity);
 8001c08:	4a11      	ldr	r2, [pc, #68]	@ (8001c50 <getOrientation+0x114>)
 8001c0a:	4910      	ldr	r1, [pc, #64]	@ (8001c4c <getOrientation+0x110>)
 8001c0c:	4811      	ldr	r0, [pc, #68]	@ (8001c54 <getOrientation+0x118>)
 8001c0e:	f000 fdbb 	bl	8002788 <dmpGetYawPitchRoll>
				}
			}
			a++;
 8001c12:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <getOrientation+0x11c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a0f      	ldr	r2, [pc, #60]	@ (8001c58 <getOrientation+0x11c>)
 8001c1a:	6013      	str	r3, [r2, #0]

		}
		osMutexRelease(xMutexHandle);
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <getOrientation+0xfc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f006 fafd 	bl	8008220 <osMutexRelease>
		HAL_Delay(20);
 8001c26:	2014      	movs	r0, #20
 8001c28:	f001 fa26 	bl	8003078 <HAL_Delay>
		orientation_data_ready = 0;
 8001c2c:	4b01      	ldr	r3, [pc, #4]	@ (8001c34 <getOrientation+0xf8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
		while (!orientation_data_ready); //wait until external interrupt fires to get data when it is freshly ready
 8001c32:	e787      	b.n	8001b44 <getOrientation+0x8>
 8001c34:	200002e2 	.word	0x200002e2
 8001c38:	20000204 	.word	0x20000204
 8001c3c:	20000088 	.word	0x20000088
 8001c40:	2000023a 	.word	0x2000023a
 8001c44:	20000238 	.word	0x20000238
 8001c48:	20000240 	.word	0x20000240
 8001c4c:	20000280 	.word	0x20000280
 8001c50:	20000290 	.word	0x20000290
 8001c54:	2000029c 	.word	0x2000029c
 8001c58:	2000023c 	.word	0x2000023c

08001c5c <getInputs>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_getInputs */
void getInputs(void *argument)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN getInputs */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f006 f9ef 	bl	8008048 <osDelay>
 8001c6a:	e7fb      	b.n	8001c64 <getInputs+0x8>

08001c6c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8001c7e:	f001 f9df 	bl	8003040 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40000800 	.word	0x40000800

08001c90 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <Error_Handler+0x8>

08001c9c <i2c_Read_Accelerometer>:
#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default
#endif

//pData is buffer to put read contents into, len is bytes to read from mpu6050
HAL_StatusTypeDef i2c_Read_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t *pData, uint16_t len)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	817b      	strh	r3, [r7, #10]
 8001caa:	4613      	mov	r3, r2
 8001cac:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef returnValue;
	uint8_t reg_addr[1];

	/* We compute the MSB and LSB parts of the memory address */
	reg_addr[0] = (uint8_t) (regAddress);
 8001cae:	7a7b      	ldrb	r3, [r7, #9]
 8001cb0:	753b      	strb	r3, [r7, #20]

	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY);
 8001cb2:	bf00      	nop
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f002 ff9a 	bl	8004bee <HAL_I2C_GetState>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	d1f9      	bne.n	8001cb4 <i2c_Read_Accelerometer+0x18>
	/* First we send the memory location address where start reading data */
	returnValue = HAL_I2C_Master_Seq_Transmit_DMA(hi2c, DevAddress, reg_addr, 1, I2C_FIRST_FRAME);
 8001cc0:	f107 0214 	add.w	r2, r7, #20
 8001cc4:	8979      	ldrh	r1, [r7, #10]
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f002 fac1 	bl	8004254 <HAL_I2C_Master_Seq_Transmit_DMA>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	75fb      	strb	r3, [r7, #23]
	//	while (!i2c_TX_done);
	//	i2c_TX_done = 0;
	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY);
 8001cd6:	bf00      	nop
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f002 ff88 	bl	8004bee <HAL_I2C_GetState>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b20      	cmp	r3, #32
 8001ce2:	d1f9      	bne.n	8001cd8 <i2c_Read_Accelerometer+0x3c>
	/* Next we can retrieve the data from EEPROM */
	returnValue = HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, len, I2C_LAST_FRAME);	//get data we requested and place it in pData buffer
 8001ce4:	8c3b      	ldrh	r3, [r7, #32]
 8001ce6:	8979      	ldrh	r1, [r7, #10]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	9200      	str	r2, [sp, #0]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f002 fc0e 	bl	8004510 <HAL_I2C_Master_Seq_Receive_DMA>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	75fb      	strb	r3, [r7, #23]
	while (!i2c_RX_done);
 8001cf8:	bf00      	nop
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <i2c_Read_Accelerometer+0x98>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0fb      	beq.n	8001cfa <i2c_Read_Accelerometer+0x5e>
	i2c_RX_done = 0;
 8001d02:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <i2c_Read_Accelerometer+0x98>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]

	//for some reason after doing the receive function, the I2C2's CR1 (control register 1) goes from 0x401 to 0x201. This then causes issues
	//when trying to do the next transmit. As a result, I'm manually making sure the correct bits are turned on and off.
	//This seems to only be an issue on the STM32F103C8T6
	hi2c->Instance->CR1 &= ~I2C_CR1_STOP;	//make sure stop bit is turned off (bit 9)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d16:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 |= I2C_CR1_ACK;	//turn on acknowledge bit (bit 10)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d26:	601a      	str	r2, [r3, #0]
	return returnValue;
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200002e0 	.word	0x200002e0

08001d38 <i2c_Write_Accelerometer>:

HAL_StatusTypeDef i2c_Write_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t *pData, uint16_t len)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	817b      	strh	r3, [r7, #10]
 8001d46:	4613      	mov	r3, r2
 8001d48:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef returnValue;
	uint8_t *data;

	data = (uint8_t*) malloc(sizeof(uint8_t) * (1 + len));
 8001d4a:	8c3b      	ldrh	r3, [r7, #32]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f009 fa12 	bl	800b178 <malloc>
 8001d54:	4603      	mov	r3, r0
 8001d56:	617b      	str	r3, [r7, #20]
	/*We compute the MSB and LSB parts of the memory address*/
	data[0] = (uint8_t) (regAddress);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	7a7a      	ldrb	r2, [r7, #9]
 8001d5c:	701a      	strb	r2, [r3, #0]

	/*And copy the content of the pData array in the temporary buffer*/
	memcpy(data + 1, pData, len);	//inserts data one slot after the register address
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	8c3a      	ldrh	r2, [r7, #32]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f009 fdb5 	bl	800b8d6 <memcpy>

	/*We are now ready to transfer the buffer over the I2C bus*/
	returnValue = HAL_I2C_Master_Transmit_DMA(hi2c, DevAddress, data, len + 1);
 8001d6c:	8c3b      	ldrh	r3, [r7, #32]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	8979      	ldrh	r1, [r7, #10]
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f002 f81a 	bl	8003db0 <HAL_I2C_Master_Transmit_DMA>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	74fb      	strb	r3, [r7, #19]
	while (!i2c_TX_done);
 8001d80:	bf00      	nop
 8001d82:	4b0d      	ldr	r3, [pc, #52]	@ (8001db8 <i2c_Write_Accelerometer+0x80>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0fb      	beq.n	8001d82 <i2c_Write_Accelerometer+0x4a>
	i2c_TX_done = 0;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <i2c_Write_Accelerometer+0x80>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
	//free(data); //originally freed data here, but causes glitches and wrong data would be sent to dmp
	/*We wait until the Accelerometer effectively stores data*/
	while (HAL_I2C_IsDeviceReady(hi2c, DevAddress, 1, HAL_MAX_DELAY) != HAL_OK);	//peripheral can only accept the transmission once it finishes doing what it does
 8001d90:	bf00      	nop
 8001d92:	8979      	ldrh	r1, [r7, #10]
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295
 8001d98:	2201      	movs	r2, #1
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f002 f92c 	bl	8003ff8 <HAL_I2C_IsDeviceReady>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f5      	bne.n	8001d92 <i2c_Write_Accelerometer+0x5a>

	free(data); // free data at end
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f009 f9ee 	bl	800b188 <free>

	return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200002e1 	.word	0x200002e1

08001dbc <setBit>:
HAL_StatusTypeDef setBit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t bitNum, uint8_t data)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	4608      	mov	r0, r1
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4603      	mov	r3, r0
 8001dcc:	807b      	strh	r3, [r7, #2]
 8001dce:	460b      	mov	r3, r1
 8001dd0:	707b      	strb	r3, [r7, #1]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	703b      	strb	r3, [r7, #0]
	uint8_t buffer;
	i2c_Read_Accelerometer(hi2c, DevAddress, regAddress, &buffer, 1);
 8001dd6:	f107 030e 	add.w	r3, r7, #14
 8001dda:	787a      	ldrb	r2, [r7, #1]
 8001ddc:	8879      	ldrh	r1, [r7, #2]
 8001dde:	2001      	movs	r0, #1
 8001de0:	9000      	str	r0, [sp, #0]
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff5a 	bl	8001c9c <i2c_Read_Accelerometer>
	buffer = (data != 0) ? (buffer | (1 << bitNum)) : (buffer & ~(1 << bitNum));	//bit mask to only change one bit of the register
 8001de8:	7e3b      	ldrb	r3, [r7, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <setBit+0x48>
 8001dee:	783b      	ldrb	r3, [r7, #0]
 8001df0:	2201      	movs	r2, #1
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	b25a      	sxtb	r2, r3
 8001df8:	7bbb      	ldrb	r3, [r7, #14]
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	b25b      	sxtb	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	e00b      	b.n	8001e1c <setBit+0x60>
 8001e04:	783b      	ldrb	r3, [r7, #0]
 8001e06:	2201      	movs	r2, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	b25a      	sxtb	r2, r3
 8001e12:	7bbb      	ldrb	r3, [r7, #14]
 8001e14:	b25b      	sxtb	r3, r3
 8001e16:	4013      	ands	r3, r2
 8001e18:	b25b      	sxtb	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = i2c_Write_Accelerometer(hi2c, DevAddress, regAddress, (uint8_t*) &buffer, 1);	//write the updated register
 8001e1e:	f107 030e 	add.w	r3, r7, #14
 8001e22:	787a      	ldrb	r2, [r7, #1]
 8001e24:	8879      	ldrh	r1, [r7, #2]
 8001e26:	2001      	movs	r0, #1
 8001e28:	9000      	str	r0, [sp, #0]
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ff84 	bl	8001d38 <i2c_Write_Accelerometer>
 8001e30:	4603      	mov	r3, r0
 8001e32:	73fb      	strb	r3, [r7, #15]
	return status;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <setBits>:
HAL_StatusTypeDef setBits(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t bitStart, uint8_t length, uint8_t data)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af02      	add	r7, sp, #8
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	4608      	mov	r0, r1
 8001e48:	4611      	mov	r1, r2
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	460b      	mov	r3, r1
 8001e52:	707b      	strb	r3, [r7, #1]
 8001e54:	4613      	mov	r3, r2
 8001e56:	703b      	strb	r3, [r7, #0]
	// 00011100 mask byte
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value
	uint8_t buffer;
	i2c_Read_Accelerometer(hi2c, DevAddress, regAddress, &buffer, 1);
 8001e58:	f107 030d 	add.w	r3, r7, #13
 8001e5c:	787a      	ldrb	r2, [r7, #1]
 8001e5e:	8879      	ldrh	r1, [r7, #2]
 8001e60:	2001      	movs	r0, #1
 8001e62:	9000      	str	r0, [sp, #0]
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7ff ff19 	bl	8001c9c <i2c_Read_Accelerometer>
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001e6a:	7e3b      	ldrb	r3, [r7, #24]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	1e5a      	subs	r2, r3, #1
 8001e74:	7839      	ldrb	r1, [r7, #0]
 8001e76:	7e3b      	ldrb	r3, [r7, #24]
 8001e78:	1acb      	subs	r3, r1, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	73fb      	strb	r3, [r7, #15]
	data <<= (bitStart - length + 1); // shift data into correct position
 8001e82:	7f3a      	ldrb	r2, [r7, #28]
 8001e84:	7839      	ldrb	r1, [r7, #0]
 8001e86:	7e3b      	ldrb	r3, [r7, #24]
 8001e88:	1acb      	subs	r3, r1, r3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	773b      	strb	r3, [r7, #28]
	data &= mask; // zero all non-important bits in data
 8001e92:	7f3a      	ldrb	r2, [r7, #28]
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	4013      	ands	r3, r2
 8001e98:	773b      	strb	r3, [r7, #28]
	buffer &= ~(mask); // zero all important bits in existing byte
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	b25a      	sxtb	r2, r3
 8001ea2:	7b7b      	ldrb	r3, [r7, #13]
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	b25b      	sxtb	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	737b      	strb	r3, [r7, #13]
	buffer |= data; // combine data with existing byte
 8001eae:	7b7a      	ldrb	r2, [r7, #13]
 8001eb0:	7f3b      	ldrb	r3, [r7, #28]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = i2c_Write_Accelerometer(hi2c, DevAddress, regAddress, (uint8_t*) &buffer, 1);	//write the updated register
 8001eb8:	f107 030d 	add.w	r3, r7, #13
 8001ebc:	787a      	ldrb	r2, [r7, #1]
 8001ebe:	8879      	ldrh	r1, [r7, #2]
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	9000      	str	r0, [sp, #0]
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff37 	bl	8001d38 <i2c_Write_Accelerometer>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	73bb      	strb	r3, [r7, #14]
	return status;
 8001ece:	7bbb      	ldrb	r3, [r7, #14]

}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <sensor_data_init>:
	sensor_data->gyro_y = (sensor_data->gyro_y_buf[0] << 8) | sensor_data->gyro_y_buf[1];
	sensor_data->gyro_z = (sensor_data->gyro_z_buf[0] << 8) | sensor_data->gyro_z_buf[1];
}

void sensor_data_init(mpu6050_sensor_data *sensor_data)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	//initialize values that will be calculated later anyways, probably not necessary to do
	sensor_data->yaw = 0;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
	sensor_data->pitch = 0;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	61da      	str	r2, [r3, #28]
	sensor_data->roll = 0;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
	...

08001f04 <mpu6050_init_dmp>:

//MPU6050 code with DMP, credits: https://github.com/jrowberg/i2cdevlib/blob/master/Arduino/MPU6050/MPU6050_6Axis_MotionApps20.cpp#L272, MPU6050_6Axis_MotionApps20::dmpInitialize()
//code was built for arduino, so I'm porting it to stm32
void mpu6050_init_dmp(I2C_HandleTypeDef *hi2c) //combines mpu.initialize and mpu.dmpInitialize
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	@ 0x28
 8001f08:	af04      	add	r7, sp, #16
 8001f0a:	6078      	str	r0, [r7, #4]
	 * after start-up). This function also sets both the accelerometer and the gyroscope
	 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
	 * the clock source to use the X Gyro for reference, which is slightly better than
	 * the default internal clock source.
	 */
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	2303      	movs	r3, #3
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2302      	movs	r3, #2
 8001f16:	226b      	movs	r2, #107	@ 0x6b
 8001f18:	21d0      	movs	r1, #208	@ 0xd0
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ff8f 	bl	8001e3e <setBits>
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS_250);
 8001f20:	2300      	movs	r3, #0
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	2302      	movs	r3, #2
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2304      	movs	r3, #4
 8001f2a:	221b      	movs	r2, #27
 8001f2c:	21d0      	movs	r1, #208	@ 0xd0
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ff85 	bl	8001e3e <setBits>
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_GYRO_FS_250);
 8001f34:	2300      	movs	r3, #0
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	2302      	movs	r3, #2
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	221c      	movs	r2, #28
 8001f40:	21d0      	movs	r1, #208	@ 0xd0
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ff7b 	bl	8001e3e <setBits>
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, false);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2306      	movs	r3, #6
 8001f4e:	226b      	movs	r2, #107	@ 0x6b
 8001f50:	21d0      	movs	r1, #208	@ 0xd0
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ff32 	bl	8001dbc <setBit>

	//dmpInitialize()
	uint8_t command = 0x00;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	75bb      	strb	r3, [r7, #22]

	//reset the MPU6050
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);	//Device reset bit: When set to 1, this bit resets all internal registers to their default values.  The bit automatically clears to 0 once the reset is done.
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2307      	movs	r3, #7
 8001f62:	226b      	movs	r2, #107	@ 0x6b
 8001f64:	21d0      	movs	r1, #208	@ 0xd0
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ff28 	bl	8001dbc <setBit>
	HAL_Delay(30); //wait a little
 8001f6c:	201e      	movs	r0, #30
 8001f6e:	f001 f883 	bl	8003078 <HAL_Delay>

	//turn off sleep mode to power cycle mpu6050
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, false);
 8001f72:	2300      	movs	r3, #0
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2306      	movs	r3, #6
 8001f78:	226b      	movs	r2, #107	@ 0x6b
 8001f7a:	21d0      	movs	r1, #208	@ 0xd0
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff1d 	bl	8001dbc <setBit>

	// get MPU hardware revision
	setMemoryBank(hi2c, 0x10, true, true); //memory bank 2, prefetch enabled, userbank enabled
 8001f82:	2301      	movs	r3, #1
 8001f84:	2201      	movs	r2, #1
 8001f86:	2110      	movs	r1, #16
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f91d 	bl	80021c8 <setMemoryBank>
	setMemoryStartAddress(hi2c, 0x06);
 8001f8e:	2106      	movs	r1, #6
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f947 	bl	8002224 <setMemoryStartAddress>
	//DEBUG_PRINTLN(F("Checking hardware revision..."));
	//DEBUG_PRINT(F("Revision @ user[16][6] = "));
	//DEBUG_PRINTLN(readMemoryByte());
	uint8_t temp_buf = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	757b      	strb	r3, [r7, #21]
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_R_W, &temp_buf, 1); //read contents in MPU6050_RA_MEM_R_W register
 8001f9a:	f107 0315 	add.w	r3, r7, #21
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	9200      	str	r2, [sp, #0]
 8001fa2:	226f      	movs	r2, #111	@ 0x6f
 8001fa4:	21d0      	movs	r1, #208	@ 0xd0
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fe78 	bl	8001c9c <i2c_Read_Accelerometer>
	//DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
	setMemoryBank(hi2c, 0, false, false); //memory bank 0, prefetch disabled, userbank disabled
 8001fac:	2300      	movs	r3, #0
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f908 	bl	80021c8 <setMemoryBank>

	// check OTP bank valid, want the first bit of temp_OTP_valid to be 1
	uint8_t temp_OTP_valid = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	75fb      	strb	r3, [r7, #23]
	temp_OTP_valid = getOTPBankValid(hi2c);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f943 	bl	8002248 <getOTPBankValid>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	75fb      	strb	r3, [r7, #23]

	// setup weird slave stuff (?)
	//	DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
	command = 0x7F; //the address
 8001fc6:	237f      	movs	r3, #127	@ 0x7f
 8001fc8:	75bb      	strb	r3, [r7, #22]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_I2C_SLV0_ADDR , (uint8_t*) &command, 1);
 8001fca:	f107 0316 	add.w	r3, r7, #22
 8001fce:	2201      	movs	r2, #1
 8001fd0:	9200      	str	r2, [sp, #0]
 8001fd2:	2225      	movs	r2, #37	@ 0x25
 8001fd4:	21d0      	movs	r1, #208	@ 0xd0
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff feae 	bl	8001d38 <i2c_Write_Accelerometer>
	//	DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, false);
 8001fdc:	2300      	movs	r3, #0
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2305      	movs	r3, #5
 8001fe2:	226a      	movs	r2, #106	@ 0x6a
 8001fe4:	21d0      	movs	r1, #208	@ 0xd0
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fee8 	bl	8001dbc <setBit>
	//	DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
	command = 0x68;
 8001fec:	2368      	movs	r3, #104	@ 0x68
 8001fee:	75bb      	strb	r3, [r7, #22]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_I2C_SLV0_ADDR , (uint8_t*) &command, 1);
 8001ff0:	f107 0316 	add.w	r3, r7, #22
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	9200      	str	r2, [sp, #0]
 8001ff8:	2225      	movs	r2, #37	@ 0x25
 8001ffa:	21d0      	movs	r1, #208	@ 0xd0
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fe9b 	bl	8001d38 <i2c_Write_Accelerometer>
	//	DEBUG_PRINTLN(F("Resetting I2C Master control..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8002002:	2301      	movs	r3, #1
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2301      	movs	r3, #1
 8002008:	226a      	movs	r2, #106	@ 0x6a
 800200a:	21d0      	movs	r1, #208	@ 0xd0
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff fed5 	bl	8001dbc <setBit>
	HAL_Delay(20);
 8002012:	2014      	movs	r0, #20
 8002014:	f001 f830 	bl	8003078 <HAL_Delay>
	//	DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_ZGYRO);
 8002018:	2303      	movs	r3, #3
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	2303      	movs	r3, #3
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2302      	movs	r3, #2
 8002022:	226b      	movs	r2, #107	@ 0x6b
 8002024:	21d0      	movs	r1, #208	@ 0xd0
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ff09 	bl	8001e3e <setBits>

	//Setting DMP and FIFO_OFLOW interrupts enabled
	setIntEnabled(hi2c, 1 << MPU6050_INTERRUPT_FIFO_OFLOW_BIT | 1 << MPU6050_INTERRUPT_DMP_INT_BIT); 	// 1<<4 | 1 << 1
 800202c:	2112      	movs	r1, #18
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f91e 	bl	8002270 <setIntEnabled>

	//Setting sample rate to 200Hz, since we are using DLPF, 1KHz/(4+1) = 200Hz
	command = 0x04;	//divide by sample rate divider + 1
 8002034:	2304      	movs	r3, #4
 8002036:	75bb      	strb	r3, [r7, #22]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_SMPLRT_DIV, (uint8_t*) &command, 1);	// adjust sample rate divider
 8002038:	f107 0316 	add.w	r3, r7, #22
 800203c:	2201      	movs	r2, #1
 800203e:	9200      	str	r2, [sp, #0]
 8002040:	2219      	movs	r2, #25
 8002042:	21d0      	movs	r1, #208	@ 0xd0
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff fe77 	bl	8001d38 <i2c_Write_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_SMPLRT_DIV, (uint8_t*) receive_buffer, 1);	//check sample rate divider contents
 800204a:	2301      	movs	r3, #1
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	4b5b      	ldr	r3, [pc, #364]	@ (80021bc <mpu6050_init_dmp+0x2b8>)
 8002050:	2219      	movs	r2, #25
 8002052:	21d0      	movs	r1, #208	@ 0xd0
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff fe21 	bl	8001c9c <i2c_Read_Accelerometer>

	//DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, MPU6050_EXT_SYNC_TEMP_OUT_L);
 800205a:	2301      	movs	r3, #1
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	2303      	movs	r3, #3
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2305      	movs	r3, #5
 8002064:	221a      	movs	r2, #26
 8002066:	21d0      	movs	r1, #208	@ 0xd0
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff fee8 	bl	8001e3e <setBits>

	//Setting DLPF bandwidth to 42Hz
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
 800206e:	2303      	movs	r3, #3
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2303      	movs	r3, #3
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2302      	movs	r3, #2
 8002078:	221a      	movs	r2, #26
 800207a:	21d0      	movs	r1, #208	@ 0xd0
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff fede 	bl	8001e3e <setBits>

	//Setting gyro sensitivity to +/- 2000 deg/sec FIXME set to 1000 deg/sec later
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS_2000);
 8002082:	2303      	movs	r3, #3
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2302      	movs	r3, #2
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2304      	movs	r3, #4
 800208c:	221b      	movs	r2, #27
 800208e:	21d0      	movs	r1, #208	@ 0xd0
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fed4 	bl	8001e3e <setBits>

	// load DMP code into memory banks
	//DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
	//DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
	//DEBUG_PRINTLN(F(" bytes)"));
	if (!writeProgMemoryBlock(hi2c, dmpMemory, MPU6050_DMP_CODE_SIZE, 0, 0, true))
 8002096:	2301      	movs	r3, #1
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	2300      	movs	r3, #0
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	f240 7289 	movw	r2, #1929	@ 0x789
 80020a4:	4946      	ldr	r1, [pc, #280]	@ (80021c0 <mpu6050_init_dmp+0x2bc>)
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f9ce 	bl	8002448 <writeProgMemoryBlock>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f083 0301 	eor.w	r3, r3, #1
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d17c      	bne.n	80021b2 <mpu6050_init_dmp+0x2ae>
		return 1; // Failed
	//DEBUG_PRINTLN(F("Success! DMP code written and verified."));

	// Set the FIFO Rate Divisor int the DMP Firmware Memory
	unsigned char dmpUpdate[] = {0x00, MPU6050_DMP_FIFO_RATE_DIVISOR};
 80020b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020bc:	823b      	strh	r3, [r7, #16]
	writeMemoryBlock(hi2c, dmpUpdate, 0x02, 0x02, 0x16, true, false); // Lets write the dmpUpdate data to the Firmware image, we have 2 bytes to write in bank 0x02 with the Offset 0x16
 80020be:	f107 0110 	add.w	r1, r7, #16
 80020c2:	2300      	movs	r3, #0
 80020c4:	9302      	str	r3, [sp, #8]
 80020c6:	2301      	movs	r3, #1
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	2316      	movs	r3, #22
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2302      	movs	r3, #2
 80020d0:	2202      	movs	r2, #2
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8de 	bl	8002294 <writeMemoryBlock>

	//write start address MSB into register
	uint8_t config = 0x03;
 80020d8:	2303      	movs	r3, #3
 80020da:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_DMP_CFG_1, (uint8_t*) &config, 1); //setDMPConfig1(0x03);
 80020dc:	f107 030f 	add.w	r3, r7, #15
 80020e0:	2201      	movs	r2, #1
 80020e2:	9200      	str	r2, [sp, #0]
 80020e4:	2270      	movs	r2, #112	@ 0x70
 80020e6:	21d0      	movs	r1, #208	@ 0xd0
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fe25 	bl	8001d38 <i2c_Write_Accelerometer>

	//write start address LSB into register
	config = 0x00;
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_DMP_CFG_2, (uint8_t*) &config, 1); //	setDMPConfig2(0x00);
 80020f2:	f107 030f 	add.w	r3, r7, #15
 80020f6:	2201      	movs	r2, #1
 80020f8:	9200      	str	r2, [sp, #0]
 80020fa:	2271      	movs	r2, #113	@ 0x71
 80020fc:	21d0      	movs	r1, #208	@ 0xd0
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fe1a 	bl	8001d38 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, false); //	setOTPBankValid(false);
 8002104:	2300      	movs	r3, #0
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2300      	movs	r3, #0
 800210a:	2200      	movs	r2, #0
 800210c:	21d0      	movs	r1, #208	@ 0xd0
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fe54 	bl	8001dbc <setBit>

	//DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
	uint8_t threshold = 2;
 8002114:	2302      	movs	r3, #2
 8002116:	73bb      	strb	r3, [r7, #14]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MOT_THR, (uint8_t*) &threshold, 1); //setMotionDetectionThreshold(2);
 8002118:	f107 030e 	add.w	r3, r7, #14
 800211c:	2201      	movs	r2, #1
 800211e:	9200      	str	r2, [sp, #0]
 8002120:	221f      	movs	r2, #31
 8002122:	21d0      	movs	r1, #208	@ 0xd0
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff fe07 	bl	8001d38 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
	threshold = 156;
 800212a:	239c      	movs	r3, #156	@ 0x9c
 800212c:	73bb      	strb	r3, [r7, #14]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_ZRMOT_THR, (uint8_t*) &threshold, 1); //	setZeroMotionDetectionThreshold(156);
 800212e:	f107 030e 	add.w	r3, r7, #14
 8002132:	2201      	movs	r2, #1
 8002134:	9200      	str	r2, [sp, #0]
 8002136:	2221      	movs	r2, #33	@ 0x21
 8002138:	21d0      	movs	r1, #208	@ 0xd0
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fdfc 	bl	8001d38 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
	uint8_t duration = 80;
 8002140:	2350      	movs	r3, #80	@ 0x50
 8002142:	737b      	strb	r3, [r7, #13]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MOT_DUR, (uint8_t*) &duration, 1); //	setMotionDetectionDuration(80);
 8002144:	f107 030d 	add.w	r3, r7, #13
 8002148:	2201      	movs	r2, #1
 800214a:	9200      	str	r2, [sp, #0]
 800214c:	2220      	movs	r2, #32
 800214e:	21d0      	movs	r1, #208	@ 0xd0
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fdf1 	bl	8001d38 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
	duration = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	737b      	strb	r3, [r7, #13]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_ZRMOT_DUR, (uint8_t*) &duration, 1); //	setZeroMotionDetectionDuration(0);
 800215a:	f107 030d 	add.w	r3, r7, #13
 800215e:	2201      	movs	r2, #1
 8002160:	9200      	str	r2, [sp, #0]
 8002162:	2222      	movs	r2, #34	@ 0x22
 8002164:	21d0      	movs	r1, #208	@ 0xd0
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fde6 	bl	8001d38 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Enabling FIFO..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, true); //	setFIFOEnabled(true);
 800216c:	2301      	movs	r3, #1
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2306      	movs	r3, #6
 8002172:	226a      	movs	r2, #106	@ 0x6a
 8002174:	21d0      	movs	r1, #208	@ 0xd0
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff fe20 	bl	8001dbc <setBit>

	//	DEBUG_PRINTLN(F("Resetting DMP..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true); //	resetDMP();
 800217c:	2301      	movs	r3, #1
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2303      	movs	r3, #3
 8002182:	226a      	movs	r2, #106	@ 0x6a
 8002184:	21d0      	movs	r1, #208	@ 0xd0
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fe18 	bl	8001dbc <setBit>

	//	DEBUG_PRINTLN(F("DMP is good to go! Finally."));
	//
	//	DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
	setDMPEnabled(hi2c, false);
 800218c:	2100      	movs	r1, #0
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f977 	bl	8002482 <setDMPEnabled>
	//
	//	DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
	dmpPacketSize = 42;
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <mpu6050_init_dmp+0x2c0>)
 8002196:	222a      	movs	r2, #42	@ 0x2a
 8002198:	801a      	strh	r2, [r3, #0]
	//
	//	DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
	resetFIFO(hi2c);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f9a2 	bl	80024e4 <resetFIFO>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_INT_STATUS, (uint8_t*) receive_buffer, 1);	//	getIntStatus();
 80021a0:	2301      	movs	r3, #1
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <mpu6050_init_dmp+0x2b8>)
 80021a6:	223a      	movs	r2, #58	@ 0x3a
 80021a8:	21d0      	movs	r1, #208	@ 0xd0
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fd76 	bl	8001c9c <i2c_Read_Accelerometer>

	return 0;
 80021b0:	e000      	b.n	80021b4 <mpu6050_init_dmp+0x2b0>
		return 1; // Failed
 80021b2:	bf00      	nop
}
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200002e4 	.word	0x200002e4
 80021c0:	0800c468 	.word	0x0800c468
 80021c4:	200002f8 	.word	0x200002f8

080021c8 <setMemoryBank>:

void setMemoryBank(I2C_HandleTypeDef *hi2c, uint8_t bank, bool prefetchEnabled, bool userBank)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	4608      	mov	r0, r1
 80021d2:	4611      	mov	r1, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	70fb      	strb	r3, [r7, #3]
 80021da:	460b      	mov	r3, r1
 80021dc:	70bb      	strb	r3, [r7, #2]
 80021de:	4613      	mov	r3, r2
 80021e0:	707b      	strb	r3, [r7, #1]
	bank &= 0x1F;
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	70fb      	strb	r3, [r7, #3]
	if (userBank)
 80021ec:	787b      	ldrb	r3, [r7, #1]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d004      	beq.n	80021fc <setMemoryBank+0x34>
		bank |= 0x20;
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	f043 0320 	orr.w	r3, r3, #32
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	70fb      	strb	r3, [r7, #3]
	if (prefetchEnabled)
 80021fc:	78bb      	ldrb	r3, [r7, #2]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <setMemoryBank+0x44>
		bank |= 0x40;
 8002202:	78fb      	ldrb	r3, [r7, #3]
 8002204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002208:	b2db      	uxtb	r3, r3
 800220a:	70fb      	strb	r3, [r7, #3]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_BANK_SEL, (uint8_t*) &bank, 1); //write to BANK_SEL = 0x6D register (not in register map documentation)
 800220c:	1cfb      	adds	r3, r7, #3
 800220e:	2201      	movs	r2, #1
 8002210:	9200      	str	r2, [sp, #0]
 8002212:	226d      	movs	r2, #109	@ 0x6d
 8002214:	21d0      	movs	r1, #208	@ 0xd0
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff fd8e 	bl	8001d38 <i2c_Write_Accelerometer>

}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <setMemoryStartAddress>:
void setMemoryStartAddress(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af02      	add	r7, sp, #8
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	70fb      	strb	r3, [r7, #3]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_START_ADDR, (uint8_t*) &address, 1); //MPU6050_RA_MEM_START_ADDR = 0x6E, write the start address to this register
 8002230:	1cfb      	adds	r3, r7, #3
 8002232:	2201      	movs	r2, #1
 8002234:	9200      	str	r2, [sp, #0]
 8002236:	226e      	movs	r2, #110	@ 0x6e
 8002238:	21d0      	movs	r1, #208	@ 0xd0
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fd7c 	bl	8001d38 <i2c_Write_Accelerometer>
}
 8002240:	bf00      	nop
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <getOTPBankValid>:
uint8_t getOTPBankValid(I2C_HandleTypeDef *hi2c)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af02      	add	r7, sp, #8
 800224e:	6078      	str	r0, [r7, #4]
	uint8_t temp_buf = 0; //bit 0 is MPU6050_TC_OTP_BNK_VLD_BIT, which is what we need to confirm if OTP bank is valid
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_XG_OFFS_TC, &temp_buf, 1); //MPU6050_RA_XG_OFFS_TC = 0x00
 8002254:	f107 030f 	add.w	r3, r7, #15
 8002258:	2201      	movs	r2, #1
 800225a:	9200      	str	r2, [sp, #0]
 800225c:	2200      	movs	r2, #0
 800225e:	21d0      	movs	r1, #208	@ 0xd0
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff fd1b 	bl	8001c9c <i2c_Read_Accelerometer>

	return temp_buf;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <setIntEnabled>:
void setIntEnabled(I2C_HandleTypeDef *hi2c, uint8_t enabled)
{ //call this function to choose which interrupts are enabled
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af02      	add	r7, sp, #8
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_INT_ENABLE, (uint8_t*) &enabled, 1);
 800227c:	1cfb      	adds	r3, r7, #3
 800227e:	2201      	movs	r2, #1
 8002280:	9200      	str	r2, [sp, #0]
 8002282:	2238      	movs	r2, #56	@ 0x38
 8002284:	21d0      	movs	r1, #208	@ 0xd0
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fd56 	bl	8001d38 <i2c_Write_Accelerometer>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <writeMemoryBlock>:
bool writeMemoryBlock(I2C_HandleTypeDef *hi2c, const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	@ 0x28
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	4611      	mov	r1, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	460b      	mov	r3, r1
 80022a4:	80fb      	strh	r3, [r7, #6]
 80022a6:	4613      	mov	r3, r2
 80022a8:	717b      	strb	r3, [r7, #5]
	setMemoryBank(hi2c, bank, false, false);
 80022aa:	7979      	ldrb	r1, [r7, #5]
 80022ac:	2300      	movs	r3, #0
 80022ae:	2200      	movs	r2, #0
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7ff ff89 	bl	80021c8 <setMemoryBank>
	setMemoryStartAddress(hi2c, address);
 80022b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022ba:	4619      	mov	r1, r3
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f7ff ffb1 	bl	8002224 <setMemoryStartAddress>
	uint8_t chunkSize;
	uint8_t *verifyBuffer = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
	uint8_t *progBuffer = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	617b      	str	r3, [r7, #20]
	uint16_t i;
	uint8_t j;
	if (verify)
 80022ca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <writeMemoryBlock+0x48>
		verifyBuffer = (uint8_t*) malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80022d2:	2010      	movs	r0, #16
 80022d4:	f008 ff50 	bl	800b178 <malloc>
 80022d8:	4603      	mov	r3, r0
 80022da:	61bb      	str	r3, [r7, #24]
	if (useProgMem)
 80022dc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d004      	beq.n	80022ee <writeMemoryBlock+0x5a>
		progBuffer = (uint8_t*) malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80022e4:	2010      	movs	r0, #16
 80022e6:	f008 ff47 	bl	800b178 <malloc>
 80022ea:	4603      	mov	r3, r0
 80022ec:	617b      	str	r3, [r7, #20]
	for (i = 0; i < dataSize;)
 80022ee:	2300      	movs	r3, #0
 80022f0:	827b      	strh	r3, [r7, #18]
 80022f2:	e091      	b.n	8002418 <writeMemoryBlock+0x184>
	{
		// determine correct chunk size according to bank position and data size
		chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 80022f4:	2310      	movs	r3, #16
 80022f6:	77fb      	strb	r3, [r7, #31]

		// make sure we don't go past the data size
		if (i + chunkSize > dataSize)
 80022f8:	8a7a      	ldrh	r2, [r7, #18]
 80022fa:	7ffb      	ldrb	r3, [r7, #31]
 80022fc:	441a      	add	r2, r3
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	429a      	cmp	r2, r3
 8002302:	dd05      	ble.n	8002310 <writeMemoryBlock+0x7c>
			chunkSize = dataSize - i;
 8002304:	88fb      	ldrh	r3, [r7, #6]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	8a7b      	ldrh	r3, [r7, #18]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	77fb      	strb	r3, [r7, #31]

		// make sure this chunk doesn't go past the bank boundary (256 bytes)
		if (chunkSize > 256 - address)
 8002310:	7ffa      	ldrb	r2, [r7, #31]
 8002312:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002316:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800231a:	429a      	cmp	r2, r3
 800231c:	dd03      	ble.n	8002326 <writeMemoryBlock+0x92>
			chunkSize = 256 - address;
 800231e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002322:	425b      	negs	r3, r3
 8002324:	77fb      	strb	r3, [r7, #31]

		if (useProgMem)
 8002326:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800232a:	2b00      	cmp	r3, #0
 800232c:	d014      	beq.n	8002358 <writeMemoryBlock+0xc4>
		{
			// write the chunk of data as specified
			for (j = 0; j < chunkSize; j++)
 800232e:	2300      	movs	r3, #0
 8002330:	747b      	strb	r3, [r7, #17]
 8002332:	e00c      	b.n	800234e <writeMemoryBlock+0xba>
				progBuffer[j] = pgm_read_byte(data + i + j);
 8002334:	8a7a      	ldrh	r2, [r7, #18]
 8002336:	7c7b      	ldrb	r3, [r7, #17]
 8002338:	4413      	add	r3, r2
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	441a      	add	r2, r3
 800233e:	7c7b      	ldrb	r3, [r7, #17]
 8002340:	6979      	ldr	r1, [r7, #20]
 8002342:	440b      	add	r3, r1
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < chunkSize; j++)
 8002348:	7c7b      	ldrb	r3, [r7, #17]
 800234a:	3301      	adds	r3, #1
 800234c:	747b      	strb	r3, [r7, #17]
 800234e:	7c7a      	ldrb	r2, [r7, #17]
 8002350:	7ffb      	ldrb	r3, [r7, #31]
 8002352:	429a      	cmp	r2, r3
 8002354:	d3ee      	bcc.n	8002334 <writeMemoryBlock+0xa0>
 8002356:	e003      	b.n	8002360 <writeMemoryBlock+0xcc>
		}
		else
		{
			// write the chunk of data as specified
			progBuffer = (uint8_t*) data + i;
 8002358:	8a7b      	ldrh	r3, [r7, #18]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	4413      	add	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
		}

		i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_R_W, (uint8_t*) progBuffer, chunkSize);
 8002360:	7ffb      	ldrb	r3, [r7, #31]
 8002362:	b29b      	uxth	r3, r3
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	226f      	movs	r2, #111	@ 0x6f
 800236a:	21d0      	movs	r1, #208	@ 0xd0
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f7ff fce3 	bl	8001d38 <i2c_Write_Accelerometer>

		// verify data if needed
		if (verify && verifyBuffer)
 8002372:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d02c      	beq.n	80023d4 <writeMemoryBlock+0x140>
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d029      	beq.n	80023d4 <writeMemoryBlock+0x140>
		{
			setMemoryBank(hi2c, bank, false, false);
 8002380:	7979      	ldrb	r1, [r7, #5]
 8002382:	2300      	movs	r3, #0
 8002384:	2200      	movs	r2, #0
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7ff ff1e 	bl	80021c8 <setMemoryBank>
			setMemoryStartAddress(hi2c, address);
 800238c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002390:	4619      	mov	r1, r3
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f7ff ff46 	bl	8002224 <setMemoryStartAddress>
			i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_R_W, (uint8_t*) verifyBuffer, chunkSize);
 8002398:	7ffb      	ldrb	r3, [r7, #31]
 800239a:	b29b      	uxth	r3, r3
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	226f      	movs	r2, #111	@ 0x6f
 80023a2:	21d0      	movs	r1, #208	@ 0xd0
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff fc79 	bl	8001c9c <i2c_Read_Accelerometer>
			if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0)
 80023aa:	7ffb      	ldrb	r3, [r7, #31]
 80023ac:	461a      	mov	r2, r3
 80023ae:	69b9      	ldr	r1, [r7, #24]
 80023b0:	6978      	ldr	r0, [r7, #20]
 80023b2:	f009 f997 	bl	800b6e4 <memcmp>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00b      	beq.n	80023d4 <writeMemoryBlock+0x140>
				 Serial.print(" 0x");
				 if (verifyBuffer[i + j] < 16) Serial.print("0");
				 Serial.print(verifyBuffer[i + j], HEX);
				 }
				 Serial.print("\n");*/
				free(verifyBuffer);
 80023bc:	69b8      	ldr	r0, [r7, #24]
 80023be:	f008 fee3 	bl	800b188 <free>
				if (useProgMem)
 80023c2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <writeMemoryBlock+0x13c>
					free(progBuffer);
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f008 fedc 	bl	800b188 <free>
				return false; // uh oh.
 80023d0:	2300      	movs	r3, #0
 80023d2:	e035      	b.n	8002440 <writeMemoryBlock+0x1ac>
			}
		}

		// increase byte index by [chunkSize]
		i += chunkSize;
 80023d4:	7ffb      	ldrb	r3, [r7, #31]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	8a7b      	ldrh	r3, [r7, #18]
 80023da:	4413      	add	r3, r2
 80023dc:	827b      	strh	r3, [r7, #18]

		// uint8_t automatically wraps to 0 at 256
		address += chunkSize;
 80023de:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80023e2:	7ffb      	ldrb	r3, [r7, #31]
 80023e4:	4413      	add	r3, r2
 80023e6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

		// if we aren't done, update bank (if necessary) and address
		if (i < dataSize)
 80023ea:	8a7a      	ldrh	r2, [r7, #18]
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d212      	bcs.n	8002418 <writeMemoryBlock+0x184>
		{
			if (address == 0)
 80023f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <writeMemoryBlock+0x16c>
				bank++;
 80023fa:	797b      	ldrb	r3, [r7, #5]
 80023fc:	3301      	adds	r3, #1
 80023fe:	717b      	strb	r3, [r7, #5]
			setMemoryBank(hi2c, bank, false, false);
 8002400:	7979      	ldrb	r1, [r7, #5]
 8002402:	2300      	movs	r3, #0
 8002404:	2200      	movs	r2, #0
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f7ff fede 	bl	80021c8 <setMemoryBank>
			setMemoryStartAddress(hi2c, address);
 800240c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002410:	4619      	mov	r1, r3
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f7ff ff06 	bl	8002224 <setMemoryStartAddress>
	for (i = 0; i < dataSize;)
 8002418:	8a7a      	ldrh	r2, [r7, #18]
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	429a      	cmp	r2, r3
 800241e:	f4ff af69 	bcc.w	80022f4 <writeMemoryBlock+0x60>
		}
	}
	if (verify)
 8002422:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <writeMemoryBlock+0x19c>
		free(verifyBuffer);
 800242a:	69b8      	ldr	r0, [r7, #24]
 800242c:	f008 feac 	bl	800b188 <free>
	if (useProgMem)
 8002430:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <writeMemoryBlock+0x1aa>
		free(progBuffer);
 8002438:	6978      	ldr	r0, [r7, #20]
 800243a:	f008 fea5 	bl	800b188 <free>
	return true;
 800243e:	2301      	movs	r3, #1
}
 8002440:	4618      	mov	r0, r3
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <writeProgMemoryBlock>:

bool writeProgMemoryBlock(I2C_HandleTypeDef *hi2c, const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af04      	add	r7, sp, #16
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	4611      	mov	r1, r2
 8002454:	461a      	mov	r2, r3
 8002456:	460b      	mov	r3, r1
 8002458:	80fb      	strh	r3, [r7, #6]
 800245a:	4613      	mov	r3, r2
 800245c:	717b      	strb	r3, [r7, #5]
	return writeMemoryBlock(hi2c, data, dataSize, bank, address, verify, true);
 800245e:	7979      	ldrb	r1, [r7, #5]
 8002460:	88fa      	ldrh	r2, [r7, #6]
 8002462:	2301      	movs	r3, #1
 8002464:	9302      	str	r3, [sp, #8]
 8002466:	7f3b      	ldrb	r3, [r7, #28]
 8002468:	9301      	str	r3, [sp, #4]
 800246a:	7e3b      	ldrb	r3, [r7, #24]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	460b      	mov	r3, r1
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f7ff ff0e 	bl	8002294 <writeMemoryBlock>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <setDMPEnabled>:

void setDMPEnabled(I2C_HandleTypeDef *hi2c, bool enabled)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af02      	add	r7, sp, #8
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	70fb      	strb	r3, [r7, #3]
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled); //	resetDMP();
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2307      	movs	r3, #7
 8002494:	226a      	movs	r2, #106	@ 0x6a
 8002496:	21d0      	movs	r1, #208	@ 0xd0
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff fc8f 	bl	8001dbc <setBit>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <getFIFOCount>:
//    getFIFOBytes(data, length); //Get 1 packet
//    return 1;
//}

uint16_t getFIFOCount(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	6078      	str	r0, [r7, #4]
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_FIFO_COUNTH, (uint8_t*) receive_buffer, 2);
 80024b0:	2302      	movs	r3, #2
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <getFIFOCount+0x38>)
 80024b6:	2272      	movs	r2, #114	@ 0x72
 80024b8:	21d0      	movs	r1, #208	@ 0xd0
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff fbee 	bl	8001c9c <i2c_Read_Accelerometer>
	return (((uint16_t) receive_buffer[0]) << 8) | receive_buffer[1];
 80024c0:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <getFIFOCount+0x38>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b21b      	sxth	r3, r3
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	b21a      	sxth	r2, r3
 80024ca:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <getFIFOCount+0x38>)
 80024cc:	785b      	ldrb	r3, [r3, #1]
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	b29b      	uxth	r3, r3
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200002e4 	.word	0x200002e4

080024e4 <resetFIFO>:

void resetFIFO(I2C_HandleTypeDef *hi2c)
{ //reset FIFO when it overflows to make sure the data is synchronized.
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	6078      	str	r0, [r7, #4]
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 80024ec:	2301      	movs	r3, #1
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2302      	movs	r3, #2
 80024f2:	226a      	movs	r2, #106	@ 0x6a
 80024f4:	21d0      	movs	r1, #208	@ 0xd0
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff fc60 	bl	8001dbc <setBit>
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <getFIFOBytes>:

void getFIFOBytes(I2C_HandleTypeDef *hi2c, uint8_t *data, uint8_t length)
{ //read Bytes from FIFO
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	71fb      	strb	r3, [r7, #7]
	if (length > 0)
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d009      	beq.n	800252c <getFIFOBytes+0x28>
	{
		i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_FIFO_R_W, (uint8_t*) data, length);
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	b29b      	uxth	r3, r3
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	2274      	movs	r2, #116	@ 0x74
 8002522:	21d0      	movs	r1, #208	@ 0xd0
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f7ff fbb9 	bl	8001c9c <i2c_Read_Accelerometer>
	}
	else
	{
		*data = 0;
	}
}
 800252a:	e002      	b.n	8002532 <getFIFOBytes+0x2e>
		*data = 0;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <dmpGetQuaternion>:

uint8_t dmpGetQuaternion(int16_t *data, const uint8_t *packet)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
	// TODO: accommodate different arrangements of sent data (ONLY default supported now)
	if (packet == 0)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <dmpGetQuaternion+0x16>
	{
		packet = dmpPacketBuffer;
 800254c:	4b21      	ldr	r3, [pc, #132]	@ (80025d4 <dmpGetQuaternion+0x98>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	603b      	str	r3, [r7, #0]
	}
	data[0] = ((packet[0] << 8) | packet[1]);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	b21b      	sxth	r3, r3
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	b21a      	sxth	r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	3301      	adds	r3, #1
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b21b      	sxth	r3, r3
 8002564:	4313      	orrs	r3, r2
 8002566:	b21a      	sxth	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	801a      	strh	r2, [r3, #0]
	data[1] = ((packet[4] << 8) | packet[5]);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	3304      	adds	r3, #4
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	b21b      	sxth	r3, r3
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	b219      	sxth	r1, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	3305      	adds	r3, #5
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b21a      	sxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3302      	adds	r3, #2
 8002584:	430a      	orrs	r2, r1
 8002586:	b212      	sxth	r2, r2
 8002588:	801a      	strh	r2, [r3, #0]
	data[2] = ((packet[8] << 8) | packet[9]);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	3308      	adds	r3, #8
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	b21b      	sxth	r3, r3
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	b219      	sxth	r1, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	3309      	adds	r3, #9
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	b21a      	sxth	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3304      	adds	r3, #4
 80025a2:	430a      	orrs	r2, r1
 80025a4:	b212      	sxth	r2, r2
 80025a6:	801a      	strh	r2, [r3, #0]
	data[3] = ((packet[12] << 8) | packet[13]);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	330c      	adds	r3, #12
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	b21b      	sxth	r3, r3
 80025b0:	021b      	lsls	r3, r3, #8
 80025b2:	b219      	sxth	r1, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	330d      	adds	r3, #13
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	b21a      	sxth	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3306      	adds	r3, #6
 80025c0:	430a      	orrs	r2, r1
 80025c2:	b212      	sxth	r2, r2
 80025c4:	801a      	strh	r2, [r3, #0]
	return 0;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	200002fc 	.word	0x200002fc

080025d8 <dmpGetQuaternionQuatStruct>:

uint8_t dmpGetQuaternionQuatStruct(Quaternion *q, const uint8_t *packet)
{ //returns data in struct format, which is more organized than dmpGetQuaternion
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
	// TODO: accommodate different arrangements of sent data (ONLY default supported now)
	int16_t qI[4];
	uint8_t status = dmpGetQuaternion(qI, packet);
 80025e2:	f107 030c 	add.w	r3, r7, #12
 80025e6:	6839      	ldr	r1, [r7, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ffa7 	bl	800253c <dmpGetQuaternion>
 80025ee:	4603      	mov	r3, r0
 80025f0:	75fb      	strb	r3, [r7, #23]
	if (status == 0)
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d13d      	bne.n	8002674 <dmpGetQuaternionQuatStruct+0x9c>
	{
		q->w = (float) qI[0] / 16384.0f;
 80025f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fb1d 	bl	8000c3c <__aeabi_i2f>
 8002602:	4603      	mov	r3, r0
 8002604:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8002608:	4618      	mov	r0, r3
 800260a:	f7fe fc1f 	bl	8000e4c <__aeabi_fdiv>
 800260e:	4603      	mov	r3, r0
 8002610:	461a      	mov	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	601a      	str	r2, [r3, #0]
		q->x = (float) qI[1] / 16384.0f;
 8002616:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fb0e 	bl	8000c3c <__aeabi_i2f>
 8002620:	4603      	mov	r3, r0
 8002622:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fc10 	bl	8000e4c <__aeabi_fdiv>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	605a      	str	r2, [r3, #4]
		q->y = (float) qI[2] / 16384.0f;
 8002634:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe faff 	bl	8000c3c <__aeabi_i2f>
 800263e:	4603      	mov	r3, r0
 8002640:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fc01 	bl	8000e4c <__aeabi_fdiv>
 800264a:	4603      	mov	r3, r0
 800264c:	461a      	mov	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	609a      	str	r2, [r3, #8]
		q->z = (float) qI[3] / 16384.0f;
 8002652:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fe faf0 	bl	8000c3c <__aeabi_i2f>
 800265c:	4603      	mov	r3, r0
 800265e:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fbf2 	bl	8000e4c <__aeabi_fdiv>
 8002668:	4603      	mov	r3, r0
 800266a:	461a      	mov	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	60da      	str	r2, [r3, #12]
		return 0;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <dmpGetQuaternionQuatStruct+0x9e>
	}
	return status; // int16 return value, indicates error if this line is reached
 8002674:	7dfb      	ldrb	r3, [r7, #23]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <dmpGetGravity>:
uint8_t dmpGetGravity(VectorFloat *v, Quaternion *q) {
 800267e:	b590      	push	{r4, r7, lr}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	6039      	str	r1, [r7, #0]
    v -> x = 2 * (q -> x*q -> z - q -> w*q -> y);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4619      	mov	r1, r3
 8002692:	4610      	mov	r0, r2
 8002694:	f7fe fb26 	bl	8000ce4 <__aeabi_fmul>
 8002698:	4603      	mov	r3, r0
 800269a:	461c      	mov	r4, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f7fe fb1c 	bl	8000ce4 <__aeabi_fmul>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4619      	mov	r1, r3
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7fe fa0d 	bl	8000ad0 <__aeabi_fsub>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4619      	mov	r1, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fa0a 	bl	8000ad4 <__addsf3>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]
    v -> y = 2 * (q -> w*q -> x + q -> y*q -> z);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	4619      	mov	r1, r3
 80026d2:	4610      	mov	r0, r2
 80026d4:	f7fe fb06 	bl	8000ce4 <__aeabi_fmul>
 80026d8:	4603      	mov	r3, r0
 80026da:	461c      	mov	r4, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4619      	mov	r1, r3
 80026e6:	4610      	mov	r0, r2
 80026e8:	f7fe fafc 	bl	8000ce4 <__aeabi_fmul>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4619      	mov	r1, r3
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7fe f9ef 	bl	8000ad4 <__addsf3>
 80026f6:	4603      	mov	r3, r0
 80026f8:	4619      	mov	r1, r3
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe f9ea 	bl	8000ad4 <__addsf3>
 8002700:	4603      	mov	r3, r0
 8002702:	461a      	mov	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	605a      	str	r2, [r3, #4]
    v -> z = q -> w*q -> w - q -> x*q -> x - q -> y*q -> y + q -> z*q -> z;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	4610      	mov	r0, r2
 8002714:	f7fe fae6 	bl	8000ce4 <__aeabi_fmul>
 8002718:	4603      	mov	r3, r0
 800271a:	461c      	mov	r4, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f7fe fadc 	bl	8000ce4 <__aeabi_fmul>
 800272c:	4603      	mov	r3, r0
 800272e:	4619      	mov	r1, r3
 8002730:	4620      	mov	r0, r4
 8002732:	f7fe f9cd 	bl	8000ad0 <__aeabi_fsub>
 8002736:	4603      	mov	r3, r0
 8002738:	461c      	mov	r4, r3
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	4619      	mov	r1, r3
 8002744:	4610      	mov	r0, r2
 8002746:	f7fe facd 	bl	8000ce4 <__aeabi_fmul>
 800274a:	4603      	mov	r3, r0
 800274c:	4619      	mov	r1, r3
 800274e:	4620      	mov	r0, r4
 8002750:	f7fe f9be 	bl	8000ad0 <__aeabi_fsub>
 8002754:	4603      	mov	r3, r0
 8002756:	461c      	mov	r4, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f7fe fabe 	bl	8000ce4 <__aeabi_fmul>
 8002768:	4603      	mov	r3, r0
 800276a:	4619      	mov	r1, r3
 800276c:	4620      	mov	r0, r4
 800276e:	f7fe f9b1 	bl	8000ad4 <__addsf3>
 8002772:	4603      	mov	r3, r0
 8002774:	461a      	mov	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	609a      	str	r2, [r3, #8]
    return 0;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bd90      	pop	{r4, r7, pc}
 8002784:	0000      	movs	r0, r0
	...

08002788 <dmpGetYawPitchRoll>:
uint8_t dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {
 8002788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
    // yaw: (about Z axis)
    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4619      	mov	r1, r3
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe f99a 	bl	8000ad4 <__addsf3>
 80027a0:	4603      	mov	r3, r0
 80027a2:	461a      	mov	r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f7fe fa9a 	bl	8000ce4 <__aeabi_fmul>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461c      	mov	r4, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4619      	mov	r1, r3
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe f98a 	bl	8000ad4 <__addsf3>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4619      	mov	r1, r3
 80027ca:	4610      	mov	r0, r2
 80027cc:	f7fe fa8a 	bl	8000ce4 <__aeabi_fmul>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4619      	mov	r1, r3
 80027d4:	4620      	mov	r0, r4
 80027d6:	f7fe f97b 	bl	8000ad0 <__aeabi_fsub>
 80027da:	4603      	mov	r3, r0
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fe1b 	bl	8000418 <__aeabi_f2d>
 80027e2:	4604      	mov	r4, r0
 80027e4:	460d      	mov	r5, r1
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4619      	mov	r1, r3
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe f971 	bl	8000ad4 <__addsf3>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461a      	mov	r2, r3
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f7fe fa71 	bl	8000ce4 <__aeabi_fmul>
 8002802:	4603      	mov	r3, r0
 8002804:	461e      	mov	r6, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4619      	mov	r1, r3
 800280c:	4618      	mov	r0, r3
 800280e:	f7fe f961 	bl	8000ad4 <__addsf3>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f7fe fa61 	bl	8000ce4 <__aeabi_fmul>
 8002822:	4603      	mov	r3, r0
 8002824:	4619      	mov	r1, r3
 8002826:	4630      	mov	r0, r6
 8002828:	f7fe f954 	bl	8000ad4 <__addsf3>
 800282c:	4603      	mov	r3, r0
 800282e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe f94c 	bl	8000ad0 <__aeabi_fsub>
 8002838:	4603      	mov	r3, r0
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd fdec 	bl	8000418 <__aeabi_f2d>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4620      	mov	r0, r4
 8002846:	4629      	mov	r1, r5
 8002848:	f009 f9c8 	bl	800bbdc <atan2>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fe f8e8 	bl	8000a28 <__aeabi_d2f>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	601a      	str	r2, [r3, #0]
    // pitch: (nose up/down, about Y axis)
    data[1] = atan2(gravity -> x , sqrt(gravity -> y*gravity -> y + gravity -> z*gravity -> z));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fdd8 	bl	8000418 <__aeabi_f2d>
 8002868:	4604      	mov	r4, r0
 800286a:	460d      	mov	r5, r1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	4619      	mov	r1, r3
 8002876:	4610      	mov	r0, r2
 8002878:	f7fe fa34 	bl	8000ce4 <__aeabi_fmul>
 800287c:	4603      	mov	r3, r0
 800287e:	461e      	mov	r6, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4619      	mov	r1, r3
 800288a:	4610      	mov	r0, r2
 800288c:	f7fe fa2a 	bl	8000ce4 <__aeabi_fmul>
 8002890:	4603      	mov	r3, r0
 8002892:	4619      	mov	r1, r3
 8002894:	4630      	mov	r0, r6
 8002896:	f7fe f91d 	bl	8000ad4 <__addsf3>
 800289a:	4603      	mov	r3, r0
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fdbb 	bl	8000418 <__aeabi_f2d>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f009 f999 	bl	800bbe0 <sqrt>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4620      	mov	r0, r4
 80028b4:	4629      	mov	r1, r5
 80028b6:	f009 f991 	bl	800bbdc <atan2>
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	68f9      	ldr	r1, [r7, #12]
 80028c0:	1d0c      	adds	r4, r1, #4
 80028c2:	4610      	mov	r0, r2
 80028c4:	4619      	mov	r1, r3
 80028c6:	f7fe f8af 	bl	8000a28 <__aeabi_d2f>
 80028ca:	4603      	mov	r3, r0
 80028cc:	6023      	str	r3, [r4, #0]
    // roll: (tilt left/right, about X axis)
    data[2] = atan2(gravity -> y , gravity -> z);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fd fda0 	bl	8000418 <__aeabi_f2d>
 80028d8:	4604      	mov	r4, r0
 80028da:	460d      	mov	r5, r1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fd99 	bl	8000418 <__aeabi_f2d>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4620      	mov	r0, r4
 80028ec:	4629      	mov	r1, r5
 80028ee:	f009 f975 	bl	800bbdc <atan2>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	68f9      	ldr	r1, [r7, #12]
 80028f8:	f101 0408 	add.w	r4, r1, #8
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	f7fe f892 	bl	8000a28 <__aeabi_d2f>
 8002904:	4603      	mov	r3, r0
 8002906:	6023      	str	r3, [r4, #0]
    if (gravity -> z < 0) {
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f04f 0100 	mov.w	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f7fe fb85 	bl	8001020 <__aeabi_fcmplt>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d039      	beq.n	8002990 <dmpGetYawPitchRoll+0x208>
        if(data[1] > 0) {
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3304      	adds	r3, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f04f 0100 	mov.w	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fb98 	bl	800105c <__aeabi_fcmpgt>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d017      	beq.n	8002962 <dmpGetYawPitchRoll+0x1da>
            data[1] = PI - data[1];
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3304      	adds	r3, #4
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7fd fd6d 	bl	8000418 <__aeabi_f2d>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	a117      	add	r1, pc, #92	@ (adr r1, 80029a0 <dmpGetYawPitchRoll+0x218>)
 8002944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002948:	f7fd fc06 	bl	8000158 <__aeabi_dsub>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1d1c      	adds	r4, r3, #4
 8002958:	f7fe f866 	bl	8000a28 <__aeabi_d2f>
 800295c:	4603      	mov	r3, r0
 800295e:	6023      	str	r3, [r4, #0]
 8002960:	e016      	b.n	8002990 <dmpGetYawPitchRoll+0x208>
        } else {
            data[1] = -PI - data[1];
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3304      	adds	r3, #4
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fd55 	bl	8000418 <__aeabi_f2d>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	a10d      	add	r1, pc, #52	@ (adr r1, 80029a8 <dmpGetYawPitchRoll+0x220>)
 8002974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002978:	f7fd fbee 	bl	8000158 <__aeabi_dsub>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1d1c      	adds	r4, r3, #4
 8002988:	f7fe f84e 	bl	8000a28 <__aeabi_d2f>
 800298c:	4603      	mov	r3, r0
 800298e:	6023      	str	r3, [r4, #0]
        }
    }
    return 0;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800299a:	bf00      	nop
 800299c:	f3af 8000 	nop.w
 80029a0:	54442eea 	.word	0x54442eea
 80029a4:	400921fb 	.word	0x400921fb
 80029a8:	54442eea 	.word	0x54442eea
 80029ac:	c00921fb 	.word	0xc00921fb

080029b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029b6:	4b18      	ldr	r3, [pc, #96]	@ (8002a18 <HAL_MspInit+0x68>)
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	4a17      	ldr	r2, [pc, #92]	@ (8002a18 <HAL_MspInit+0x68>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6193      	str	r3, [r2, #24]
 80029c2:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <HAL_MspInit+0x68>)
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	4b12      	ldr	r3, [pc, #72]	@ (8002a18 <HAL_MspInit+0x68>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4a11      	ldr	r2, [pc, #68]	@ (8002a18 <HAL_MspInit+0x68>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d8:	61d3      	str	r3, [r2, #28]
 80029da:	4b0f      	ldr	r3, [pc, #60]	@ (8002a18 <HAL_MspInit+0x68>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	210f      	movs	r1, #15
 80029ea:	f06f 0001 	mvn.w	r0, #1
 80029ee:	f000 fc1c 	bl	800322a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029f2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <HAL_MspInit+0x6c>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	4a04      	ldr	r2, [pc, #16]	@ (8002a1c <HAL_MspInit+0x6c>)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40010000 	.word	0x40010000

08002a20 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	f107 0310 	add.w	r3, r7, #16
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a41      	ldr	r2, [pc, #260]	@ (8002b40 <HAL_I2C_MspInit+0x120>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d17a      	bne.n	8002b36 <HAL_I2C_MspInit+0x116>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a40:	4b40      	ldr	r3, [pc, #256]	@ (8002b44 <HAL_I2C_MspInit+0x124>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	4a3f      	ldr	r2, [pc, #252]	@ (8002b44 <HAL_I2C_MspInit+0x124>)
 8002a46:	f043 0308 	orr.w	r3, r3, #8
 8002a4a:	6193      	str	r3, [r2, #24]
 8002a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b44 <HAL_I2C_MspInit+0x124>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a58:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a5e:	2312      	movs	r3, #18
 8002a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a62:	2303      	movs	r3, #3
 8002a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4836      	ldr	r0, [pc, #216]	@ (8002b48 <HAL_I2C_MspInit+0x128>)
 8002a6e:	f000 fe79 	bl	8003764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a72:	4b34      	ldr	r3, [pc, #208]	@ (8002b44 <HAL_I2C_MspInit+0x124>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4a33      	ldr	r2, [pc, #204]	@ (8002b44 <HAL_I2C_MspInit+0x124>)
 8002a78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a7c:	61d3      	str	r3, [r2, #28]
 8002a7e:	4b31      	ldr	r3, [pc, #196]	@ (8002b44 <HAL_I2C_MspInit+0x124>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8002a8a:	4b30      	ldr	r3, [pc, #192]	@ (8002b4c <HAL_I2C_MspInit+0x12c>)
 8002a8c:	4a30      	ldr	r2, [pc, #192]	@ (8002b50 <HAL_I2C_MspInit+0x130>)
 8002a8e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a90:	4b2e      	ldr	r3, [pc, #184]	@ (8002b4c <HAL_I2C_MspInit+0x12c>)
 8002a92:	2210      	movs	r2, #16
 8002a94:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a96:	4b2d      	ldr	r3, [pc, #180]	@ (8002b4c <HAL_I2C_MspInit+0x12c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b4c <HAL_I2C_MspInit+0x12c>)
 8002a9e:	2280      	movs	r2, #128	@ 0x80
 8002aa0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b4c <HAL_I2C_MspInit+0x12c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aa8:	4b28      	ldr	r3, [pc, #160]	@ (8002b4c <HAL_I2C_MspInit+0x12c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002aae:	4b27      	ldr	r3, [pc, #156]	@ (8002b4c <HAL_I2C_MspInit+0x12c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ab4:	4b25      	ldr	r3, [pc, #148]	@ (8002b4c <HAL_I2C_MspInit+0x12c>)
 8002ab6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002aba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002abc:	4823      	ldr	r0, [pc, #140]	@ (8002b4c <HAL_I2C_MspInit+0x12c>)
 8002abe:	f000 fbdf 	bl	8003280 <HAL_DMA_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 8002ac8:	f7ff f8e2 	bl	8001c90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a1f      	ldr	r2, [pc, #124]	@ (8002b4c <HAL_I2C_MspInit+0x12c>)
 8002ad0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b4c <HAL_I2C_MspInit+0x12c>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b54 <HAL_I2C_MspInit+0x134>)
 8002ada:	4a1f      	ldr	r2, [pc, #124]	@ (8002b58 <HAL_I2C_MspInit+0x138>)
 8002adc:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ade:	4b1d      	ldr	r3, [pc, #116]	@ (8002b54 <HAL_I2C_MspInit+0x134>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b54 <HAL_I2C_MspInit+0x134>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	@ (8002b54 <HAL_I2C_MspInit+0x134>)
 8002aec:	2280      	movs	r2, #128	@ 0x80
 8002aee:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002af0:	4b18      	ldr	r3, [pc, #96]	@ (8002b54 <HAL_I2C_MspInit+0x134>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002af6:	4b17      	ldr	r3, [pc, #92]	@ (8002b54 <HAL_I2C_MspInit+0x134>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002afc:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <HAL_I2C_MspInit+0x134>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002b02:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <HAL_I2C_MspInit+0x134>)
 8002b04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b08:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002b0a:	4812      	ldr	r0, [pc, #72]	@ (8002b54 <HAL_I2C_MspInit+0x134>)
 8002b0c:	f000 fbb8 	bl	8003280 <HAL_DMA_Init>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8002b16:	f7ff f8bb 	bl	8001c90 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b54 <HAL_I2C_MspInit+0x134>)
 8002b1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b20:	4a0c      	ldr	r2, [pc, #48]	@ (8002b54 <HAL_I2C_MspInit+0x134>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8002b26:	2200      	movs	r2, #0
 8002b28:	2105      	movs	r1, #5
 8002b2a:	2021      	movs	r0, #33	@ 0x21
 8002b2c:	f000 fb7d 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002b30:	2021      	movs	r0, #33	@ 0x21
 8002b32:	f000 fb96 	bl	8003262 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002b36:	bf00      	nop
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40005800 	.word	0x40005800
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40010c00 	.word	0x40010c00
 8002b4c:	200000dc 	.word	0x200000dc
 8002b50:	40020044 	.word	0x40020044
 8002b54:	20000120 	.word	0x20000120
 8002b58:	40020058 	.word	0x40020058

08002b5c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b6c:	d113      	bne.n	8002b96 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <HAL_TIM_PWM_MspInit+0x44>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	4a0b      	ldr	r2, [pc, #44]	@ (8002ba0 <HAL_TIM_PWM_MspInit+0x44>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	61d3      	str	r3, [r2, #28]
 8002b7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <HAL_TIM_PWM_MspInit+0x44>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2105      	movs	r1, #5
 8002b8a:	201c      	movs	r0, #28
 8002b8c:	f000 fb4d 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b90:	201c      	movs	r0, #28
 8002b92:	f000 fb66 	bl	8003262 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08a      	sub	sp, #40	@ 0x28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	f107 0318 	add.w	r3, r7, #24
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a25      	ldr	r2, [pc, #148]	@ (8002c54 <HAL_TIM_IC_MspInit+0xb0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d143      	bne.n	8002c4c <HAL_TIM_IC_MspInit+0xa8>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bc4:	4b24      	ldr	r3, [pc, #144]	@ (8002c58 <HAL_TIM_IC_MspInit+0xb4>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	4a23      	ldr	r2, [pc, #140]	@ (8002c58 <HAL_TIM_IC_MspInit+0xb4>)
 8002bca:	f043 0302 	orr.w	r3, r3, #2
 8002bce:	61d3      	str	r3, [r2, #28]
 8002bd0:	4b21      	ldr	r3, [pc, #132]	@ (8002c58 <HAL_TIM_IC_MspInit+0xb4>)
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c58 <HAL_TIM_IC_MspInit+0xb4>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c58 <HAL_TIM_IC_MspInit+0xb4>)
 8002be2:	f043 0304 	orr.w	r3, r3, #4
 8002be6:	6193      	str	r3, [r2, #24]
 8002be8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c58 <HAL_TIM_IC_MspInit+0xb4>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf4:	4b18      	ldr	r3, [pc, #96]	@ (8002c58 <HAL_TIM_IC_MspInit+0xb4>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	4a17      	ldr	r2, [pc, #92]	@ (8002c58 <HAL_TIM_IC_MspInit+0xb4>)
 8002bfa:	f043 0308 	orr.w	r3, r3, #8
 8002bfe:	6193      	str	r3, [r2, #24]
 8002c00:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <HAL_TIM_IC_MspInit+0xb4>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c0c:	23c0      	movs	r3, #192	@ 0xc0
 8002c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c18:	f107 0318 	add.w	r3, r7, #24
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	480f      	ldr	r0, [pc, #60]	@ (8002c5c <HAL_TIM_IC_MspInit+0xb8>)
 8002c20:	f000 fda0 	bl	8003764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c24:	2303      	movs	r3, #3
 8002c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c30:	f107 0318 	add.w	r3, r7, #24
 8002c34:	4619      	mov	r1, r3
 8002c36:	480a      	ldr	r0, [pc, #40]	@ (8002c60 <HAL_TIM_IC_MspInit+0xbc>)
 8002c38:	f000 fd94 	bl	8003764 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2105      	movs	r1, #5
 8002c40:	201d      	movs	r0, #29
 8002c42:	f000 faf2 	bl	800322a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c46:	201d      	movs	r0, #29
 8002c48:	f000 fb0b 	bl	8003262 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002c4c:	bf00      	nop
 8002c4e:	3728      	adds	r7, #40	@ 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	40010800 	.word	0x40010800
 8002c60:	40010c00 	.word	0x40010c00

08002c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 0310 	add.w	r3, r7, #16
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c82:	d117      	bne.n	8002cb4 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c84:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <HAL_TIM_MspPostInit+0x58>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	4a0c      	ldr	r2, [pc, #48]	@ (8002cbc <HAL_TIM_MspPostInit+0x58>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6193      	str	r3, [r2, #24]
 8002c90:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <HAL_TIM_MspPostInit+0x58>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002c9c:	230f      	movs	r3, #15
 8002c9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca8:	f107 0310 	add.w	r3, r7, #16
 8002cac:	4619      	mov	r1, r3
 8002cae:	4804      	ldr	r0, [pc, #16]	@ (8002cc0 <HAL_TIM_MspPostInit+0x5c>)
 8002cb0:	f000 fd58 	bl	8003764 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002cb4:	bf00      	nop
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40010800 	.word	0x40010800

08002cc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08e      	sub	sp, #56	@ 0x38
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002cda:	4b34      	ldr	r3, [pc, #208]	@ (8002dac <HAL_InitTick+0xe8>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	4a33      	ldr	r2, [pc, #204]	@ (8002dac <HAL_InitTick+0xe8>)
 8002ce0:	f043 0304 	orr.w	r3, r3, #4
 8002ce4:	61d3      	str	r3, [r2, #28]
 8002ce6:	4b31      	ldr	r3, [pc, #196]	@ (8002dac <HAL_InitTick+0xe8>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cf2:	f107 0210 	add.w	r2, r7, #16
 8002cf6:	f107 0314 	add.w	r3, r7, #20
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f003 fef9 	bl	8006af4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d103      	bne.n	8002d14 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d0c:	f003 fede 	bl	8006acc <HAL_RCC_GetPCLK1Freq>
 8002d10:	6378      	str	r0, [r7, #52]	@ 0x34
 8002d12:	e004      	b.n	8002d1e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d14:	f003 feda 	bl	8006acc <HAL_RCC_GetPCLK1Freq>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d20:	4a23      	ldr	r2, [pc, #140]	@ (8002db0 <HAL_InitTick+0xec>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0c9b      	lsrs	r3, r3, #18
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002d2c:	4b21      	ldr	r3, [pc, #132]	@ (8002db4 <HAL_InitTick+0xf0>)
 8002d2e:	4a22      	ldr	r2, [pc, #136]	@ (8002db8 <HAL_InitTick+0xf4>)
 8002d30:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002d32:	4b20      	ldr	r3, [pc, #128]	@ (8002db4 <HAL_InitTick+0xf0>)
 8002d34:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d38:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002db4 <HAL_InitTick+0xf0>)
 8002d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002d40:	4b1c      	ldr	r3, [pc, #112]	@ (8002db4 <HAL_InitTick+0xf0>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d46:	4b1b      	ldr	r3, [pc, #108]	@ (8002db4 <HAL_InitTick+0xf0>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d4c:	4b19      	ldr	r3, [pc, #100]	@ (8002db4 <HAL_InitTick+0xf0>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002d52:	4818      	ldr	r0, [pc, #96]	@ (8002db4 <HAL_InitTick+0xf0>)
 8002d54:	f003 ff1c 	bl	8006b90 <HAL_TIM_Base_Init>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002d5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d11b      	bne.n	8002d9e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002d66:	4813      	ldr	r0, [pc, #76]	@ (8002db4 <HAL_InitTick+0xf0>)
 8002d68:	f003 ff6a 	bl	8006c40 <HAL_TIM_Base_Start_IT>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002d72:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d111      	bne.n	8002d9e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d7a:	201e      	movs	r0, #30
 8002d7c:	f000 fa71 	bl	8003262 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b0f      	cmp	r3, #15
 8002d84:	d808      	bhi.n	8002d98 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002d86:	2200      	movs	r2, #0
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	201e      	movs	r0, #30
 8002d8c:	f000 fa4d 	bl	800322a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d90:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <HAL_InitTick+0xf8>)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e002      	b.n	8002d9e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d9e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3738      	adds	r7, #56	@ 0x38
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	431bde83 	.word	0x431bde83
 8002db4:	20000300 	.word	0x20000300
 8002db8:	40000800 	.word	0x40000800
 8002dbc:	20000004 	.word	0x20000004

08002dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <NMI_Handler+0x4>

08002dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <HardFault_Handler+0x4>

08002dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <MemManage_Handler+0x4>

08002dd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ddc:	bf00      	nop
 8002dde:	e7fd      	b.n	8002ddc <BusFault_Handler+0x4>

08002de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <UsageFault_Handler+0x4>

08002de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002df8:	4802      	ldr	r0, [pc, #8]	@ (8002e04 <DMA1_Channel4_IRQHandler+0x10>)
 8002dfa:	f000 fb73 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200000dc 	.word	0x200000dc

08002e08 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002e0c:	4802      	ldr	r0, [pc, #8]	@ (8002e18 <DMA1_Channel5_IRQHandler+0x10>)
 8002e0e:	f000 fb69 	bl	80034e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000120 	.word	0x20000120

08002e1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e20:	4802      	ldr	r0, [pc, #8]	@ (8002e2c <TIM2_IRQHandler+0x10>)
 8002e22:	f004 f9ad 	bl	8007180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000164 	.word	0x20000164

08002e30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e34:	4802      	ldr	r0, [pc, #8]	@ (8002e40 <TIM3_IRQHandler+0x10>)
 8002e36:	f004 f9a3 	bl	8007180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200001ac 	.word	0x200001ac

08002e44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e48:	4802      	ldr	r0, [pc, #8]	@ (8002e54 <TIM4_IRQHandler+0x10>)
 8002e4a:	f004 f999 	bl	8007180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000300 	.word	0x20000300

08002e58 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002e5c:	4802      	ldr	r0, [pc, #8]	@ (8002e68 <I2C2_EV_IRQHandler+0x10>)
 8002e5e:	f001 fd09 	bl	8004874 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000088 	.word	0x20000088

08002e6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002e70:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002e74:	f000 fe2c 	bl	8003ad0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e00a      	b.n	8002ea4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e8e:	f3af 8000 	nop.w
 8002e92:	4601      	mov	r1, r0
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	1c5a      	adds	r2, r3, #1
 8002e98:	60ba      	str	r2, [r7, #8]
 8002e9a:	b2ca      	uxtb	r2, r1
 8002e9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	dbf0      	blt.n	8002e8e <_read+0x12>
  }

  return len;
 8002eac:	687b      	ldr	r3, [r7, #4]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b086      	sub	sp, #24
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	e009      	b.n	8002edc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	60ba      	str	r2, [r7, #8]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	dbf1      	blt.n	8002ec8 <_write+0x12>
  }
  return len;
 8002ee4:	687b      	ldr	r3, [r7, #4]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_close>:

int _close(int file)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f14:	605a      	str	r2, [r3, #4]
  return 0;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <_isatty>:

int _isatty(int file)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f2a:	2301      	movs	r3, #1
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr
	...

08002f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f58:	4a14      	ldr	r2, [pc, #80]	@ (8002fac <_sbrk+0x5c>)
 8002f5a:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <_sbrk+0x60>)
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f64:	4b13      	ldr	r3, [pc, #76]	@ (8002fb4 <_sbrk+0x64>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d102      	bne.n	8002f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f6c:	4b11      	ldr	r3, [pc, #68]	@ (8002fb4 <_sbrk+0x64>)
 8002f6e:	4a12      	ldr	r2, [pc, #72]	@ (8002fb8 <_sbrk+0x68>)
 8002f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f72:	4b10      	ldr	r3, [pc, #64]	@ (8002fb4 <_sbrk+0x64>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d207      	bcs.n	8002f90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f80:	f008 fc7c 	bl	800b87c <__errno>
 8002f84:	4603      	mov	r3, r0
 8002f86:	220c      	movs	r2, #12
 8002f88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8e:	e009      	b.n	8002fa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f90:	4b08      	ldr	r3, [pc, #32]	@ (8002fb4 <_sbrk+0x64>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f96:	4b07      	ldr	r3, [pc, #28]	@ (8002fb4 <_sbrk+0x64>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	4a05      	ldr	r2, [pc, #20]	@ (8002fb4 <_sbrk+0x64>)
 8002fa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20005000 	.word	0x20005000
 8002fb0:	00000400 	.word	0x00000400
 8002fb4:	20000348 	.word	0x20000348
 8002fb8:	20001e88 	.word	0x20001e88

08002fbc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fc8:	f7ff fff8 	bl	8002fbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fcc:	480b      	ldr	r0, [pc, #44]	@ (8002ffc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002fce:	490c      	ldr	r1, [pc, #48]	@ (8003000 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8003004 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd4:	e002      	b.n	8002fdc <LoopCopyDataInit>

08002fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fda:	3304      	adds	r3, #4

08002fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe0:	d3f9      	bcc.n	8002fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe2:	4a09      	ldr	r2, [pc, #36]	@ (8003008 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002fe4:	4c09      	ldr	r4, [pc, #36]	@ (800300c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe8:	e001      	b.n	8002fee <LoopFillZerobss>

08002fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fec:	3204      	adds	r2, #4

08002fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff0:	d3fb      	bcc.n	8002fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ff2:	f008 fc49 	bl	800b888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ff6:	f7fe f83b 	bl	8001070 <main>
  bx lr
 8002ffa:	4770      	bx	lr
  ldr r0, =_sdata
 8002ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003000:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003004:	0800cbfc 	.word	0x0800cbfc
  ldr r2, =_sbss
 8003008:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800300c:	20001e84 	.word	0x20001e84

08003010 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003010:	e7fe      	b.n	8003010 <ADC1_2_IRQHandler>
	...

08003014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003018:	4b08      	ldr	r3, [pc, #32]	@ (800303c <HAL_Init+0x28>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a07      	ldr	r2, [pc, #28]	@ (800303c <HAL_Init+0x28>)
 800301e:	f043 0310 	orr.w	r3, r3, #16
 8003022:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003024:	2003      	movs	r0, #3
 8003026:	f000 f8f5 	bl	8003214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800302a:	200f      	movs	r0, #15
 800302c:	f7ff fe4a 	bl	8002cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003030:	f7ff fcbe 	bl	80029b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40022000 	.word	0x40022000

08003040 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003044:	4b05      	ldr	r3, [pc, #20]	@ (800305c <HAL_IncTick+0x1c>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	4b05      	ldr	r3, [pc, #20]	@ (8003060 <HAL_IncTick+0x20>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4413      	add	r3, r2
 8003050:	4a03      	ldr	r2, [pc, #12]	@ (8003060 <HAL_IncTick+0x20>)
 8003052:	6013      	str	r3, [r2, #0]
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	20000008 	.word	0x20000008
 8003060:	2000034c 	.word	0x2000034c

08003064 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return uwTick;
 8003068:	4b02      	ldr	r3, [pc, #8]	@ (8003074 <HAL_GetTick+0x10>)
 800306a:	681b      	ldr	r3, [r3, #0]
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	2000034c 	.word	0x2000034c

08003078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003080:	f7ff fff0 	bl	8003064 <HAL_GetTick>
 8003084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003090:	d005      	beq.n	800309e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003092:	4b0a      	ldr	r3, [pc, #40]	@ (80030bc <HAL_Delay+0x44>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800309e:	bf00      	nop
 80030a0:	f7ff ffe0 	bl	8003064 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d8f7      	bhi.n	80030a0 <HAL_Delay+0x28>
  {
  }
}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000008 	.word	0x20000008

080030c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030dc:	4013      	ands	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f2:	4a04      	ldr	r2, [pc, #16]	@ (8003104 <__NVIC_SetPriorityGrouping+0x44>)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	60d3      	str	r3, [r2, #12]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800310c:	4b04      	ldr	r3, [pc, #16]	@ (8003120 <__NVIC_GetPriorityGrouping+0x18>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	f003 0307 	and.w	r3, r3, #7
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	2b00      	cmp	r3, #0
 8003134:	db0b      	blt.n	800314e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	f003 021f 	and.w	r2, r3, #31
 800313c:	4906      	ldr	r1, [pc, #24]	@ (8003158 <__NVIC_EnableIRQ+0x34>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	2001      	movs	r0, #1
 8003146:	fa00 f202 	lsl.w	r2, r0, r2
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	e000e100 	.word	0xe000e100

0800315c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	2b00      	cmp	r3, #0
 800316e:	db0a      	blt.n	8003186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	490c      	ldr	r1, [pc, #48]	@ (80031a8 <__NVIC_SetPriority+0x4c>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	440b      	add	r3, r1
 8003180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003184:	e00a      	b.n	800319c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4908      	ldr	r1, [pc, #32]	@ (80031ac <__NVIC_SetPriority+0x50>)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3b04      	subs	r3, #4
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	440b      	add	r3, r1
 800319a:	761a      	strb	r2, [r3, #24]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	e000e100 	.word	0xe000e100
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	@ 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f1c3 0307 	rsb	r3, r3, #7
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	bf28      	it	cs
 80031ce:	2304      	movcs	r3, #4
 80031d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d902      	bls.n	80031e0 <NVIC_EncodePriority+0x30>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3b03      	subs	r3, #3
 80031de:	e000      	b.n	80031e2 <NVIC_EncodePriority+0x32>
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	401a      	ands	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f8:	f04f 31ff 	mov.w	r1, #4294967295
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	43d9      	mvns	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	4313      	orrs	r3, r2
         );
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	@ 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ff4f 	bl	80030c0 <__NVIC_SetPriorityGrouping>
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800322a:	b580      	push	{r7, lr}
 800322c:	b086      	sub	sp, #24
 800322e:	af00      	add	r7, sp, #0
 8003230:	4603      	mov	r3, r0
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800323c:	f7ff ff64 	bl	8003108 <__NVIC_GetPriorityGrouping>
 8003240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	6978      	ldr	r0, [r7, #20]
 8003248:	f7ff ffb2 	bl	80031b0 <NVIC_EncodePriority>
 800324c:	4602      	mov	r2, r0
 800324e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff ff81 	bl	800315c <__NVIC_SetPriority>
}
 800325a:	bf00      	nop
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	4603      	mov	r3, r0
 800326a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800326c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff57 	bl	8003124 <__NVIC_EnableIRQ>
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e043      	b.n	800331e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	4b22      	ldr	r3, [pc, #136]	@ (8003328 <HAL_DMA_Init+0xa8>)
 800329e:	4413      	add	r3, r2
 80032a0:	4a22      	ldr	r2, [pc, #136]	@ (800332c <HAL_DMA_Init+0xac>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	009a      	lsls	r2, r3, #2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003330 <HAL_DMA_Init+0xb0>)
 80032b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80032ca:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80032ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80032d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	bffdfff8 	.word	0xbffdfff8
 800332c:	cccccccd 	.word	0xcccccccd
 8003330:	40020000 	.word	0x40020000

08003334 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_DMA_Start_IT+0x20>
 8003350:	2302      	movs	r3, #2
 8003352:	e04b      	b.n	80033ec <HAL_DMA_Start_IT+0xb8>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d13a      	bne.n	80033de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f9bc 	bl	800370a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 020e 	orr.w	r2, r2, #14
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	e00f      	b.n	80033cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0204 	bic.w	r2, r2, #4
 80033ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 020a 	orr.w	r2, r2, #10
 80033ca:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e005      	b.n	80033ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80033e6:	2302      	movs	r3, #2
 80033e8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d005      	beq.n	8003418 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2204      	movs	r2, #4
 8003410:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	e051      	b.n	80034bc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 020e 	bic.w	r2, r2, #14
 8003426:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a22      	ldr	r2, [pc, #136]	@ (80034c8 <HAL_DMA_Abort_IT+0xd4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d029      	beq.n	8003496 <HAL_DMA_Abort_IT+0xa2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a21      	ldr	r2, [pc, #132]	@ (80034cc <HAL_DMA_Abort_IT+0xd8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d022      	beq.n	8003492 <HAL_DMA_Abort_IT+0x9e>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1f      	ldr	r2, [pc, #124]	@ (80034d0 <HAL_DMA_Abort_IT+0xdc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01a      	beq.n	800348c <HAL_DMA_Abort_IT+0x98>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1e      	ldr	r2, [pc, #120]	@ (80034d4 <HAL_DMA_Abort_IT+0xe0>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d012      	beq.n	8003486 <HAL_DMA_Abort_IT+0x92>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1c      	ldr	r2, [pc, #112]	@ (80034d8 <HAL_DMA_Abort_IT+0xe4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00a      	beq.n	8003480 <HAL_DMA_Abort_IT+0x8c>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1b      	ldr	r2, [pc, #108]	@ (80034dc <HAL_DMA_Abort_IT+0xe8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d102      	bne.n	800347a <HAL_DMA_Abort_IT+0x86>
 8003474:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003478:	e00e      	b.n	8003498 <HAL_DMA_Abort_IT+0xa4>
 800347a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800347e:	e00b      	b.n	8003498 <HAL_DMA_Abort_IT+0xa4>
 8003480:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003484:	e008      	b.n	8003498 <HAL_DMA_Abort_IT+0xa4>
 8003486:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800348a:	e005      	b.n	8003498 <HAL_DMA_Abort_IT+0xa4>
 800348c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003490:	e002      	b.n	8003498 <HAL_DMA_Abort_IT+0xa4>
 8003492:	2310      	movs	r3, #16
 8003494:	e000      	b.n	8003498 <HAL_DMA_Abort_IT+0xa4>
 8003496:	2301      	movs	r3, #1
 8003498:	4a11      	ldr	r2, [pc, #68]	@ (80034e0 <HAL_DMA_Abort_IT+0xec>)
 800349a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
    } 
  }
  return status;
 80034bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40020008 	.word	0x40020008
 80034cc:	4002001c 	.word	0x4002001c
 80034d0:	40020030 	.word	0x40020030
 80034d4:	40020044 	.word	0x40020044
 80034d8:	40020058 	.word	0x40020058
 80034dc:	4002006c 	.word	0x4002006c
 80034e0:	40020000 	.word	0x40020000

080034e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	2204      	movs	r2, #4
 8003502:	409a      	lsls	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d04f      	beq.n	80035ac <HAL_DMA_IRQHandler+0xc8>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b00      	cmp	r3, #0
 8003514:	d04a      	beq.n	80035ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d107      	bne.n	8003534 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0204 	bic.w	r2, r2, #4
 8003532:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a66      	ldr	r2, [pc, #408]	@ (80036d4 <HAL_DMA_IRQHandler+0x1f0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d029      	beq.n	8003592 <HAL_DMA_IRQHandler+0xae>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a65      	ldr	r2, [pc, #404]	@ (80036d8 <HAL_DMA_IRQHandler+0x1f4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d022      	beq.n	800358e <HAL_DMA_IRQHandler+0xaa>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a63      	ldr	r2, [pc, #396]	@ (80036dc <HAL_DMA_IRQHandler+0x1f8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d01a      	beq.n	8003588 <HAL_DMA_IRQHandler+0xa4>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a62      	ldr	r2, [pc, #392]	@ (80036e0 <HAL_DMA_IRQHandler+0x1fc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d012      	beq.n	8003582 <HAL_DMA_IRQHandler+0x9e>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a60      	ldr	r2, [pc, #384]	@ (80036e4 <HAL_DMA_IRQHandler+0x200>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00a      	beq.n	800357c <HAL_DMA_IRQHandler+0x98>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a5f      	ldr	r2, [pc, #380]	@ (80036e8 <HAL_DMA_IRQHandler+0x204>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d102      	bne.n	8003576 <HAL_DMA_IRQHandler+0x92>
 8003570:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003574:	e00e      	b.n	8003594 <HAL_DMA_IRQHandler+0xb0>
 8003576:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800357a:	e00b      	b.n	8003594 <HAL_DMA_IRQHandler+0xb0>
 800357c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003580:	e008      	b.n	8003594 <HAL_DMA_IRQHandler+0xb0>
 8003582:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003586:	e005      	b.n	8003594 <HAL_DMA_IRQHandler+0xb0>
 8003588:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800358c:	e002      	b.n	8003594 <HAL_DMA_IRQHandler+0xb0>
 800358e:	2340      	movs	r3, #64	@ 0x40
 8003590:	e000      	b.n	8003594 <HAL_DMA_IRQHandler+0xb0>
 8003592:	2304      	movs	r3, #4
 8003594:	4a55      	ldr	r2, [pc, #340]	@ (80036ec <HAL_DMA_IRQHandler+0x208>)
 8003596:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8094 	beq.w	80036ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80035aa:	e08e      	b.n	80036ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b0:	2202      	movs	r2, #2
 80035b2:	409a      	lsls	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d056      	beq.n	800366a <HAL_DMA_IRQHandler+0x186>
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d051      	beq.n	800366a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 020a 	bic.w	r2, r2, #10
 80035e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a38      	ldr	r2, [pc, #224]	@ (80036d4 <HAL_DMA_IRQHandler+0x1f0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d029      	beq.n	800364a <HAL_DMA_IRQHandler+0x166>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a37      	ldr	r2, [pc, #220]	@ (80036d8 <HAL_DMA_IRQHandler+0x1f4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d022      	beq.n	8003646 <HAL_DMA_IRQHandler+0x162>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a35      	ldr	r2, [pc, #212]	@ (80036dc <HAL_DMA_IRQHandler+0x1f8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01a      	beq.n	8003640 <HAL_DMA_IRQHandler+0x15c>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a34      	ldr	r2, [pc, #208]	@ (80036e0 <HAL_DMA_IRQHandler+0x1fc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d012      	beq.n	800363a <HAL_DMA_IRQHandler+0x156>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a32      	ldr	r2, [pc, #200]	@ (80036e4 <HAL_DMA_IRQHandler+0x200>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00a      	beq.n	8003634 <HAL_DMA_IRQHandler+0x150>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a31      	ldr	r2, [pc, #196]	@ (80036e8 <HAL_DMA_IRQHandler+0x204>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d102      	bne.n	800362e <HAL_DMA_IRQHandler+0x14a>
 8003628:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800362c:	e00e      	b.n	800364c <HAL_DMA_IRQHandler+0x168>
 800362e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003632:	e00b      	b.n	800364c <HAL_DMA_IRQHandler+0x168>
 8003634:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003638:	e008      	b.n	800364c <HAL_DMA_IRQHandler+0x168>
 800363a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800363e:	e005      	b.n	800364c <HAL_DMA_IRQHandler+0x168>
 8003640:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003644:	e002      	b.n	800364c <HAL_DMA_IRQHandler+0x168>
 8003646:	2320      	movs	r3, #32
 8003648:	e000      	b.n	800364c <HAL_DMA_IRQHandler+0x168>
 800364a:	2302      	movs	r3, #2
 800364c:	4a27      	ldr	r2, [pc, #156]	@ (80036ec <HAL_DMA_IRQHandler+0x208>)
 800364e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365c:	2b00      	cmp	r3, #0
 800365e:	d034      	beq.n	80036ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003668:	e02f      	b.n	80036ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	2208      	movs	r2, #8
 8003670:	409a      	lsls	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d028      	beq.n	80036cc <HAL_DMA_IRQHandler+0x1e8>
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d023      	beq.n	80036cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 020e 	bic.w	r2, r2, #14
 8003692:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369c:	2101      	movs	r1, #1
 800369e:	fa01 f202 	lsl.w	r2, r1, r2
 80036a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	4798      	blx	r3
    }
  }
  return;
 80036ca:	bf00      	nop
 80036cc:	bf00      	nop
}
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40020008 	.word	0x40020008
 80036d8:	4002001c 	.word	0x4002001c
 80036dc:	40020030 	.word	0x40020030
 80036e0:	40020044 	.word	0x40020044
 80036e4:	40020058 	.word	0x40020058
 80036e8:	4002006c 	.word	0x4002006c
 80036ec:	40020000 	.word	0x40020000

080036f0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80036fe:	b2db      	uxtb	r3, r3
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b10      	cmp	r3, #16
 8003736:	d108      	bne.n	800374a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003748:	e007      	b.n	800375a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	60da      	str	r2, [r3, #12]
}
 800375a:	bf00      	nop
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003764:	b480      	push	{r7}
 8003766:	b08b      	sub	sp, #44	@ 0x2c
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800376e:	2300      	movs	r3, #0
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003772:	2300      	movs	r3, #0
 8003774:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003776:	e169      	b.n	8003a4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003778:	2201      	movs	r2, #1
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	429a      	cmp	r2, r3
 8003792:	f040 8158 	bne.w	8003a46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4a9a      	ldr	r2, [pc, #616]	@ (8003a04 <HAL_GPIO_Init+0x2a0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d05e      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037a0:	4a98      	ldr	r2, [pc, #608]	@ (8003a04 <HAL_GPIO_Init+0x2a0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d875      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037a6:	4a98      	ldr	r2, [pc, #608]	@ (8003a08 <HAL_GPIO_Init+0x2a4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d058      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037ac:	4a96      	ldr	r2, [pc, #600]	@ (8003a08 <HAL_GPIO_Init+0x2a4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d86f      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037b2:	4a96      	ldr	r2, [pc, #600]	@ (8003a0c <HAL_GPIO_Init+0x2a8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d052      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037b8:	4a94      	ldr	r2, [pc, #592]	@ (8003a0c <HAL_GPIO_Init+0x2a8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d869      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037be:	4a94      	ldr	r2, [pc, #592]	@ (8003a10 <HAL_GPIO_Init+0x2ac>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d04c      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037c4:	4a92      	ldr	r2, [pc, #584]	@ (8003a10 <HAL_GPIO_Init+0x2ac>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d863      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037ca:	4a92      	ldr	r2, [pc, #584]	@ (8003a14 <HAL_GPIO_Init+0x2b0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d046      	beq.n	800385e <HAL_GPIO_Init+0xfa>
 80037d0:	4a90      	ldr	r2, [pc, #576]	@ (8003a14 <HAL_GPIO_Init+0x2b0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d85d      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037d6:	2b12      	cmp	r3, #18
 80037d8:	d82a      	bhi.n	8003830 <HAL_GPIO_Init+0xcc>
 80037da:	2b12      	cmp	r3, #18
 80037dc:	d859      	bhi.n	8003892 <HAL_GPIO_Init+0x12e>
 80037de:	a201      	add	r2, pc, #4	@ (adr r2, 80037e4 <HAL_GPIO_Init+0x80>)
 80037e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e4:	0800385f 	.word	0x0800385f
 80037e8:	08003839 	.word	0x08003839
 80037ec:	0800384b 	.word	0x0800384b
 80037f0:	0800388d 	.word	0x0800388d
 80037f4:	08003893 	.word	0x08003893
 80037f8:	08003893 	.word	0x08003893
 80037fc:	08003893 	.word	0x08003893
 8003800:	08003893 	.word	0x08003893
 8003804:	08003893 	.word	0x08003893
 8003808:	08003893 	.word	0x08003893
 800380c:	08003893 	.word	0x08003893
 8003810:	08003893 	.word	0x08003893
 8003814:	08003893 	.word	0x08003893
 8003818:	08003893 	.word	0x08003893
 800381c:	08003893 	.word	0x08003893
 8003820:	08003893 	.word	0x08003893
 8003824:	08003893 	.word	0x08003893
 8003828:	08003841 	.word	0x08003841
 800382c:	08003855 	.word	0x08003855
 8003830:	4a79      	ldr	r2, [pc, #484]	@ (8003a18 <HAL_GPIO_Init+0x2b4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003836:	e02c      	b.n	8003892 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	623b      	str	r3, [r7, #32]
          break;
 800383e:	e029      	b.n	8003894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	3304      	adds	r3, #4
 8003846:	623b      	str	r3, [r7, #32]
          break;
 8003848:	e024      	b.n	8003894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	3308      	adds	r3, #8
 8003850:	623b      	str	r3, [r7, #32]
          break;
 8003852:	e01f      	b.n	8003894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	330c      	adds	r3, #12
 800385a:	623b      	str	r3, [r7, #32]
          break;
 800385c:	e01a      	b.n	8003894 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d102      	bne.n	800386c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003866:	2304      	movs	r3, #4
 8003868:	623b      	str	r3, [r7, #32]
          break;
 800386a:	e013      	b.n	8003894 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003874:	2308      	movs	r3, #8
 8003876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	611a      	str	r2, [r3, #16]
          break;
 800387e:	e009      	b.n	8003894 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003880:	2308      	movs	r3, #8
 8003882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	615a      	str	r2, [r3, #20]
          break;
 800388a:	e003      	b.n	8003894 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800388c:	2300      	movs	r3, #0
 800388e:	623b      	str	r3, [r7, #32]
          break;
 8003890:	e000      	b.n	8003894 <HAL_GPIO_Init+0x130>
          break;
 8003892:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2bff      	cmp	r3, #255	@ 0xff
 8003898:	d801      	bhi.n	800389e <HAL_GPIO_Init+0x13a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	e001      	b.n	80038a2 <HAL_GPIO_Init+0x13e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2bff      	cmp	r3, #255	@ 0xff
 80038a8:	d802      	bhi.n	80038b0 <HAL_GPIO_Init+0x14c>
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	e002      	b.n	80038b6 <HAL_GPIO_Init+0x152>
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	3b08      	subs	r3, #8
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	210f      	movs	r1, #15
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	fa01 f303 	lsl.w	r3, r1, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	401a      	ands	r2, r3
 80038c8:	6a39      	ldr	r1, [r7, #32]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	fa01 f303 	lsl.w	r3, r1, r3
 80038d0:	431a      	orrs	r2, r3
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80b1 	beq.w	8003a46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038e4:	4b4d      	ldr	r3, [pc, #308]	@ (8003a1c <HAL_GPIO_Init+0x2b8>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	4a4c      	ldr	r2, [pc, #304]	@ (8003a1c <HAL_GPIO_Init+0x2b8>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6193      	str	r3, [r2, #24]
 80038f0:	4b4a      	ldr	r3, [pc, #296]	@ (8003a1c <HAL_GPIO_Init+0x2b8>)
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038fc:	4a48      	ldr	r2, [pc, #288]	@ (8003a20 <HAL_GPIO_Init+0x2bc>)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	3302      	adds	r3, #2
 8003904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003908:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	220f      	movs	r2, #15
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a40      	ldr	r2, [pc, #256]	@ (8003a24 <HAL_GPIO_Init+0x2c0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_GPIO_Init+0x1ec>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a3f      	ldr	r2, [pc, #252]	@ (8003a28 <HAL_GPIO_Init+0x2c4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00d      	beq.n	800394c <HAL_GPIO_Init+0x1e8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a3e      	ldr	r2, [pc, #248]	@ (8003a2c <HAL_GPIO_Init+0x2c8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d007      	beq.n	8003948 <HAL_GPIO_Init+0x1e4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a3d      	ldr	r2, [pc, #244]	@ (8003a30 <HAL_GPIO_Init+0x2cc>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_GPIO_Init+0x1e0>
 8003940:	2303      	movs	r3, #3
 8003942:	e006      	b.n	8003952 <HAL_GPIO_Init+0x1ee>
 8003944:	2304      	movs	r3, #4
 8003946:	e004      	b.n	8003952 <HAL_GPIO_Init+0x1ee>
 8003948:	2302      	movs	r3, #2
 800394a:	e002      	b.n	8003952 <HAL_GPIO_Init+0x1ee>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <HAL_GPIO_Init+0x1ee>
 8003950:	2300      	movs	r3, #0
 8003952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003954:	f002 0203 	and.w	r2, r2, #3
 8003958:	0092      	lsls	r2, r2, #2
 800395a:	4093      	lsls	r3, r2
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003962:	492f      	ldr	r1, [pc, #188]	@ (8003a20 <HAL_GPIO_Init+0x2bc>)
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	3302      	adds	r3, #2
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d006      	beq.n	800398a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800397c:	4b2d      	ldr	r3, [pc, #180]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	492c      	ldr	r1, [pc, #176]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]
 8003988:	e006      	b.n	8003998 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800398a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	43db      	mvns	r3, r3
 8003992:	4928      	ldr	r1, [pc, #160]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 8003994:	4013      	ands	r3, r2
 8003996:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d006      	beq.n	80039b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039a4:	4b23      	ldr	r3, [pc, #140]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	4922      	ldr	r1, [pc, #136]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60cb      	str	r3, [r1, #12]
 80039b0:	e006      	b.n	80039c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039b2:	4b20      	ldr	r3, [pc, #128]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	43db      	mvns	r3, r3
 80039ba:	491e      	ldr	r1, [pc, #120]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039bc:	4013      	ands	r3, r2
 80039be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d006      	beq.n	80039da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039cc:	4b19      	ldr	r3, [pc, #100]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	4918      	ldr	r1, [pc, #96]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
 80039d8:	e006      	b.n	80039e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039da:	4b16      	ldr	r3, [pc, #88]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	4914      	ldr	r1, [pc, #80]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d021      	beq.n	8003a38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	490e      	ldr	r1, [pc, #56]	@ (8003a34 <HAL_GPIO_Init+0x2d0>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	600b      	str	r3, [r1, #0]
 8003a00:	e021      	b.n	8003a46 <HAL_GPIO_Init+0x2e2>
 8003a02:	bf00      	nop
 8003a04:	10320000 	.word	0x10320000
 8003a08:	10310000 	.word	0x10310000
 8003a0c:	10220000 	.word	0x10220000
 8003a10:	10210000 	.word	0x10210000
 8003a14:	10120000 	.word	0x10120000
 8003a18:	10110000 	.word	0x10110000
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40010800 	.word	0x40010800
 8003a28:	40010c00 	.word	0x40010c00
 8003a2c:	40011000 	.word	0x40011000
 8003a30:	40011400 	.word	0x40011400
 8003a34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003a38:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <HAL_GPIO_Init+0x304>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	4909      	ldr	r1, [pc, #36]	@ (8003a68 <HAL_GPIO_Init+0x304>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	3301      	adds	r3, #1
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	fa22 f303 	lsr.w	r3, r2, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f47f ae8e 	bne.w	8003778 <HAL_GPIO_Init+0x14>
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	372c      	adds	r7, #44	@ 0x2c
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	40010400 	.word	0x40010400

08003a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a7c:	787b      	ldrb	r3, [r7, #1]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a82:	887a      	ldrh	r2, [r7, #2]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a88:	e003      	b.n	8003a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	041a      	lsls	r2, r3, #16
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	611a      	str	r2, [r3, #16]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr

08003a9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	041a      	lsls	r2, r3, #16
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	43d9      	mvns	r1, r3
 8003aba:	887b      	ldrh	r3, [r7, #2]
 8003abc:	400b      	ands	r3, r1
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	611a      	str	r2, [r3, #16]
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ada:	4b08      	ldr	r3, [pc, #32]	@ (8003afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d006      	beq.n	8003af4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ae6:	4a05      	ldr	r2, [pc, #20]	@ (8003afc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd fdf8 	bl	80016e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40010400 	.word	0x40010400

08003b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e12b      	b.n	8003d6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fe ff7a 	bl	8002a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2224      	movs	r2, #36	@ 0x24
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b64:	f002 ffb2 	bl	8006acc <HAL_RCC_GetPCLK1Freq>
 8003b68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	4a81      	ldr	r2, [pc, #516]	@ (8003d74 <HAL_I2C_Init+0x274>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d807      	bhi.n	8003b84 <HAL_I2C_Init+0x84>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a80      	ldr	r2, [pc, #512]	@ (8003d78 <HAL_I2C_Init+0x278>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	bf94      	ite	ls
 8003b7c:	2301      	movls	r3, #1
 8003b7e:	2300      	movhi	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e006      	b.n	8003b92 <HAL_I2C_Init+0x92>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a7d      	ldr	r2, [pc, #500]	@ (8003d7c <HAL_I2C_Init+0x27c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	bf94      	ite	ls
 8003b8c:	2301      	movls	r3, #1
 8003b8e:	2300      	movhi	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e0e7      	b.n	8003d6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a78      	ldr	r2, [pc, #480]	@ (8003d80 <HAL_I2C_Init+0x280>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	0c9b      	lsrs	r3, r3, #18
 8003ba4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4a6a      	ldr	r2, [pc, #424]	@ (8003d74 <HAL_I2C_Init+0x274>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d802      	bhi.n	8003bd4 <HAL_I2C_Init+0xd4>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	e009      	b.n	8003be8 <HAL_I2C_Init+0xe8>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bda:	fb02 f303 	mul.w	r3, r2, r3
 8003bde:	4a69      	ldr	r2, [pc, #420]	@ (8003d84 <HAL_I2C_Init+0x284>)
 8003be0:	fba2 2303 	umull	r2, r3, r2, r3
 8003be4:	099b      	lsrs	r3, r3, #6
 8003be6:	3301      	adds	r3, #1
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	430b      	orrs	r3, r1
 8003bee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bfa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	495c      	ldr	r1, [pc, #368]	@ (8003d74 <HAL_I2C_Init+0x274>)
 8003c04:	428b      	cmp	r3, r1
 8003c06:	d819      	bhi.n	8003c3c <HAL_I2C_Init+0x13c>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1e59      	subs	r1, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c16:	1c59      	adds	r1, r3, #1
 8003c18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c1c:	400b      	ands	r3, r1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_I2C_Init+0x138>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1e59      	subs	r1, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c30:	3301      	adds	r3, #1
 8003c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c36:	e051      	b.n	8003cdc <HAL_I2C_Init+0x1dc>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	e04f      	b.n	8003cdc <HAL_I2C_Init+0x1dc>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d111      	bne.n	8003c68 <HAL_I2C_Init+0x168>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	1e58      	subs	r0, r3, #1
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6859      	ldr	r1, [r3, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	440b      	add	r3, r1
 8003c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c56:	3301      	adds	r3, #1
 8003c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf0c      	ite	eq
 8003c60:	2301      	moveq	r3, #1
 8003c62:	2300      	movne	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	e012      	b.n	8003c8e <HAL_I2C_Init+0x18e>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	1e58      	subs	r0, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6859      	ldr	r1, [r3, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	0099      	lsls	r1, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Init+0x196>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e022      	b.n	8003cdc <HAL_I2C_Init+0x1dc>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10e      	bne.n	8003cbc <HAL_I2C_Init+0x1bc>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1e58      	subs	r0, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6859      	ldr	r1, [r3, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	440b      	add	r3, r1
 8003cac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cba:	e00f      	b.n	8003cdc <HAL_I2C_Init+0x1dc>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1e58      	subs	r0, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	0099      	lsls	r1, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	6809      	ldr	r1, [r1, #0]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69da      	ldr	r2, [r3, #28]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6911      	ldr	r1, [r2, #16]
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68d2      	ldr	r2, [r2, #12]
 8003d16:	4311      	orrs	r1, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0201 	orr.w	r2, r2, #1
 8003d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	000186a0 	.word	0x000186a0
 8003d78:	001e847f 	.word	0x001e847f
 8003d7c:	003d08ff 	.word	0x003d08ff
 8003d80:	431bde83 	.word	0x431bde83
 8003d84:	10624dd3 	.word	0x10624dd3

08003d88 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9a:	2b80      	cmp	r3, #128	@ 0x80
 8003d9c:	d103      	bne.n	8003da6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2200      	movs	r2, #0
 8003da4:	611a      	str	r2, [r3, #16]
  }
}
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr

08003db0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	817b      	strh	r3, [r7, #10]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	f040 8101 	bne.w	8003fd8 <HAL_I2C_Master_Transmit_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003dd6:	4b83      	ldr	r3, [pc, #524]	@ (8003fe4 <HAL_I2C_Master_Transmit_DMA+0x234>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	4a82      	ldr	r2, [pc, #520]	@ (8003fe8 <HAL_I2C_Master_Transmit_DMA+0x238>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	0a1a      	lsrs	r2, r3, #8
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009a      	lsls	r2, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d112      	bne.n	8003e22 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2220      	movs	r2, #32
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	f043 0220 	orr.w	r2, r3, #32
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e0db      	b.n	8003fda <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d0df      	beq.n	8003df0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_I2C_Master_Transmit_DMA+0x8e>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e0cd      	b.n	8003fda <HAL_I2C_Master_Transmit_DMA+0x22a>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d007      	beq.n	8003e64 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2221      	movs	r2, #33	@ 0x21
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2210      	movs	r2, #16
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	893a      	ldrh	r2, [r7, #8]
 8003e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4a52      	ldr	r2, [pc, #328]	@ (8003fec <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8003ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003ea6:	897a      	ldrh	r2, [r7, #10]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d073      	beq.n	8003f9c <HAL_I2C_Master_Transmit_DMA+0x1ec>
    {
      if (hi2c->hdmatx != NULL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d022      	beq.n	8003f02 <HAL_I2C_Master_Transmit_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ff0 <HAL_I2C_Master_Transmit_DMA+0x240>)
 8003ec2:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec8:	4a4a      	ldr	r2, [pc, #296]	@ (8003ff4 <HAL_I2C_Master_Transmit_DMA+0x244>)
 8003eca:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed8:	2200      	movs	r2, #0
 8003eda:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3310      	adds	r3, #16
 8003eec:	461a      	mov	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef2:	f7ff fa1f 	bl	8003334 <HAL_DMA_Start_IT>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003efa:	7dfb      	ldrb	r3, [r7, #23]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d139      	bne.n	8003f74 <HAL_I2C_Master_Transmit_DMA+0x1c4>
 8003f00:	e013      	b.n	8003f2a <HAL_I2C_Master_Transmit_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e057      	b.n	8003fda <HAL_I2C_Master_Transmit_DMA+0x22a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003f40:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f50:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f60:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	e02f      	b.n	8003fd4 <HAL_I2C_Master_Transmit_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f88:	f043 0210 	orr.w	r2, r3, #16
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e01e      	b.n	8003fda <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003faa:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fba:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003fd2:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e000      	b.n	8003fda <HAL_I2C_Master_Transmit_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
  }
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000000 	.word	0x20000000
 8003fe8:	14f8b589 	.word	0x14f8b589
 8003fec:	ffff0000 	.word	0xffff0000
 8003ff0:	08005e31 	.word	0x08005e31
 8003ff4:	08005fef 	.word	0x08005fef

08003ff8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08a      	sub	sp, #40	@ 0x28
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	607a      	str	r2, [r7, #4]
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	460b      	mov	r3, r1
 8004006:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004008:	f7ff f82c 	bl	8003064 <HAL_GetTick>
 800400c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b20      	cmp	r3, #32
 800401c:	f040 8111 	bne.w	8004242 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2319      	movs	r3, #25
 8004026:	2201      	movs	r2, #1
 8004028:	4988      	ldr	r1, [pc, #544]	@ (800424c <HAL_I2C_IsDeviceReady+0x254>)
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f002 f8be 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004036:	2302      	movs	r3, #2
 8004038:	e104      	b.n	8004244 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <HAL_I2C_IsDeviceReady+0x50>
 8004044:	2302      	movs	r3, #2
 8004046:	e0fd      	b.n	8004244 <HAL_I2C_IsDeviceReady+0x24c>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b01      	cmp	r3, #1
 800405c:	d007      	beq.n	800406e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800407c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2224      	movs	r2, #36	@ 0x24
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4a70      	ldr	r2, [pc, #448]	@ (8004250 <HAL_I2C_IsDeviceReady+0x258>)
 8004090:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040a0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f002 f87c 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040c8:	d103      	bne.n	80040d2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040d0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e0b6      	b.n	8004244 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040d6:	897b      	ldrh	r3, [r7, #10]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040e4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80040e6:	f7fe ffbd 	bl	8003064 <HAL_GetTick>
 80040ea:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	bf0c      	ite	eq
 80040fa:	2301      	moveq	r3, #1
 80040fc:	2300      	movne	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004110:	bf0c      	ite	eq
 8004112:	2301      	moveq	r3, #1
 8004114:	2300      	movne	r3, #0
 8004116:	b2db      	uxtb	r3, r3
 8004118:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800411a:	e025      	b.n	8004168 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800411c:	f7fe ffa2 	bl	8003064 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d302      	bcc.n	8004132 <HAL_I2C_IsDeviceReady+0x13a>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	22a0      	movs	r2, #160	@ 0xa0
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2ba0      	cmp	r3, #160	@ 0xa0
 8004172:	d005      	beq.n	8004180 <HAL_I2C_IsDeviceReady+0x188>
 8004174:	7dfb      	ldrb	r3, [r7, #23]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d102      	bne.n	8004180 <HAL_I2C_IsDeviceReady+0x188>
 800417a:	7dbb      	ldrb	r3, [r7, #22]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0cd      	beq.n	800411c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d129      	bne.n	80041ea <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041a4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2319      	movs	r3, #25
 80041c2:	2201      	movs	r2, #1
 80041c4:	4921      	ldr	r1, [pc, #132]	@ (800424c <HAL_I2C_IsDeviceReady+0x254>)
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f001 fff0 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e036      	b.n	8004244 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e02c      	b.n	8004244 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041f8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004202:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2319      	movs	r3, #25
 800420a:	2201      	movs	r2, #1
 800420c:	490f      	ldr	r1, [pc, #60]	@ (800424c <HAL_I2C_IsDeviceReady+0x254>)
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f001 ffcc 	bl	80061ac <I2C_WaitOnFlagUntilTimeout>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e012      	b.n	8004244 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	3301      	adds	r3, #1
 8004222:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	429a      	cmp	r2, r3
 800422a:	f4ff af32 	bcc.w	8004092 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004242:	2302      	movs	r3, #2
  }
}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	00100002 	.word	0x00100002
 8004250:	ffff0000 	.word	0xffff0000

08004254 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	461a      	mov	r2, r3
 8004260:	460b      	mov	r3, r1
 8004262:	817b      	strh	r3, [r7, #10]
 8004264:	4613      	mov	r3, r2
 8004266:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8004268:	2300      	movs	r3, #0
 800426a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b20      	cmp	r3, #32
 800427a:	f040 813c 	bne.w	80044f6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a2>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800428c:	d005      	beq.n	800429a <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800428e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004290:	2b08      	cmp	r3, #8
 8004292:	d002      	beq.n	800429a <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 8004294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004296:	2b01      	cmp	r3, #1
 8004298:	d12c      	bne.n	80042f4 <HAL_I2C_Master_Seq_Transmit_DMA+0xa0>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800429a:	4b99      	ldr	r3, [pc, #612]	@ (8004500 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	08db      	lsrs	r3, r3, #3
 80042a0:	4a98      	ldr	r2, [pc, #608]	@ (8004504 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 80042a2:	fba2 2303 	umull	r2, r3, r2, r3
 80042a6:	0a1a      	lsrs	r2, r3, #8
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009a      	lsls	r2, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d112      	bne.n	80042e6 <HAL_I2C_Master_Seq_Transmit_DMA+0x92>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	f043 0220 	orr.w	r2, r3, #32
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 80042e2:	2302      	movs	r3, #2
 80042e4:	e108      	b.n	80044f8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d0df      	beq.n	80042b4 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_I2C_Master_Seq_Transmit_DMA+0xae>
 80042fe:	2302      	movs	r3, #2
 8004300:	e0fa      	b.n	80044f8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b01      	cmp	r3, #1
 8004316:	d007      	beq.n	8004328 <HAL_I2C_Master_Seq_Transmit_DMA+0xd4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2221      	movs	r2, #33	@ 0x21
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2210      	movs	r2, #16
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	893a      	ldrh	r2, [r7, #8]
 8004358:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435e:	b29a      	uxth	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004368:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800436a:	897a      	ldrh	r2, [r7, #10]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437a:	2b00      	cmp	r3, #0
 800437c:	f000 808d 	beq.w	800449a <HAL_I2C_Master_Seq_Transmit_DMA+0x246>
    {
      if (hi2c->hdmatx != NULL)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004384:	2b00      	cmp	r3, #0
 8004386:	d022      	beq.n	80043ce <HAL_I2C_Master_Seq_Transmit_DMA+0x17a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438c:	4a5e      	ldr	r2, [pc, #376]	@ (8004508 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 800438e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004394:	4a5d      	ldr	r2, [pc, #372]	@ (800450c <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 8004396:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800439c:	2200      	movs	r2, #0
 800439e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a4:	2200      	movs	r2, #0
 80043a6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b0:	4619      	mov	r1, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3310      	adds	r3, #16
 80043b8:	461a      	mov	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043be:	f7fe ffb9 	bl	8003334 <HAL_DMA_Start_IT>
 80043c2:	4603      	mov	r3, r0
 80043c4:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80043c6:	7ffb      	ldrb	r3, [r7, #31]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d152      	bne.n	8004472 <HAL_I2C_Master_Seq_Transmit_DMA+0x21e>
 80043cc:	e013      	b.n	80043f6 <HAL_I2C_Master_Seq_Transmit_DMA+0x1a2>
        hi2c->State     = HAL_I2C_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e080      	b.n	80044f8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004404:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b11      	cmp	r3, #17
 800440a:	d10c      	bne.n	8004426 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d2>
 800440c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004412:	d003      	beq.n	800441c <HAL_I2C_Master_Seq_Transmit_DMA+0x1c8>
 8004414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004416:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800441a:	d101      	bne.n	8004420 <HAL_I2C_Master_Seq_Transmit_DMA+0x1cc>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ce>
 8004420:	2300      	movs	r3, #0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d107      	bne.n	8004436 <HAL_I2C_Master_Seq_Transmit_DMA+0x1e2>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004434:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800443e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004440:	2b04      	cmp	r3, #4
 8004442:	d005      	beq.n	8004450 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 8004444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004446:	2b20      	cmp	r3, #32
 8004448:	d002      	beq.n	8004450 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 800444a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444c:	2b10      	cmp	r3, #16
 800444e:	d107      	bne.n	8004460 <HAL_I2C_Master_Seq_Transmit_DMA+0x20c>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800445e:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800446e:	605a      	str	r2, [r3, #4]
 8004470:	e03f      	b.n	80044f2 <HAL_I2C_Master_Seq_Transmit_DMA+0x29e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2220      	movs	r2, #32
 8004476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	f043 0210 	orr.w	r2, r3, #16
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e02e      	b.n	80044f8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044a8:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b11      	cmp	r3, #17
 80044ae:	d10c      	bne.n	80044ca <HAL_I2C_Master_Seq_Transmit_DMA+0x276>
 80044b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80044b6:	d003      	beq.n	80044c0 <HAL_I2C_Master_Seq_Transmit_DMA+0x26c>
 80044b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ba:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80044be:	d101      	bne.n	80044c4 <HAL_I2C_Master_Seq_Transmit_DMA+0x270>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_I2C_Master_Seq_Transmit_DMA+0x272>
 80044c4:	2300      	movs	r3, #0
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d107      	bne.n	80044da <HAL_I2C_Master_Seq_Transmit_DMA+0x286>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044d8:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80044f0:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e000      	b.n	80044f8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
  }
  else
  {
    return HAL_BUSY;
 80044f6:	2302      	movs	r3, #2
  }
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3720      	adds	r7, #32
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000000 	.word	0x20000000
 8004504:	14f8b589 	.word	0x14f8b589
 8004508:	08005e31 	.word	0x08005e31
 800450c:	08005fef 	.word	0x08005fef

08004510 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	460b      	mov	r3, r1
 800451e:	817b      	strh	r3, [r7, #10]
 8004520:	4613      	mov	r3, r2
 8004522:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800452c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8004530:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b20      	cmp	r3, #32
 800453c:	f040 8195 	bne.w	800486a <HAL_I2C_Master_Seq_Receive_DMA+0x35a>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800454a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800454e:	d005      	beq.n	800455c <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 8004550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004552:	2b08      	cmp	r3, #8
 8004554:	d002      	beq.n	800455c <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 8004556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004558:	2b01      	cmp	r3, #1
 800455a:	d12c      	bne.n	80045b6 <HAL_I2C_Master_Seq_Receive_DMA+0xa6>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800455c:	4b8d      	ldr	r3, [pc, #564]	@ (8004794 <HAL_I2C_Master_Seq_Receive_DMA+0x284>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	08db      	lsrs	r3, r3, #3
 8004562:	4a8d      	ldr	r2, [pc, #564]	@ (8004798 <HAL_I2C_Master_Seq_Receive_DMA+0x288>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	0a1a      	lsrs	r2, r3, #8
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009a      	lsls	r2, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	3b01      	subs	r3, #1
 800457a:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d112      	bne.n	80045a8 <HAL_I2C_Master_Seq_Receive_DMA+0x98>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
 80045a6:	e161      	b.n	800486c <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d0df      	beq.n	8004576 <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_I2C_Master_Seq_Receive_DMA+0xb4>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e153      	b.n	800486c <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d007      	beq.n	80045ea <HAL_I2C_Master_Seq_Receive_DMA+0xda>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0201 	orr.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045f8:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004608:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2222      	movs	r2, #34	@ 0x22
 800460e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2210      	movs	r2, #16
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	893a      	ldrh	r2, [r7, #8]
 800462a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800463a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800463c:	897a      	ldrh	r2, [r7, #10]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004646:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80de 	beq.w	800480e <HAL_I2C_Master_Seq_Receive_DMA+0x2fe>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d12a      	bne.n	80046b2 <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
 800465c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465e:	2b20      	cmp	r3, #32
 8004660:	d002      	beq.n	8004668 <HAL_I2C_Master_Seq_Receive_DMA+0x158>
 8004662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004664:	2b10      	cmp	r3, #16
 8004666:	d124      	bne.n	80046b2 <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	2b12      	cmp	r3, #18
 800466c:	d118      	bne.n	80046a0 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800467c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800468c:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800469c:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800469e:	e022      	b.n	80046e6 <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046ae:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80046b0:	e019      	b.n	80046e6 <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046c0:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 80046c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d006      	beq.n	80046d6 <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 80046c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80046ce:	d002      	beq.n	80046d6 <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 80046d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d2:	2b10      	cmp	r3, #16
 80046d4:	d107      	bne.n	80046e6 <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046e4:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d022      	beq.n	8004734 <HAL_I2C_Master_Seq_Receive_DMA+0x224>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f2:	4a2a      	ldr	r2, [pc, #168]	@ (800479c <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 80046f4:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fa:	4a29      	ldr	r2, [pc, #164]	@ (80047a0 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 80046fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004702:	2200      	movs	r2, #0
 8004704:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	2200      	movs	r2, #0
 800470c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3310      	adds	r3, #16
 8004718:	4619      	mov	r1, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	461a      	mov	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004724:	f7fe fe06 	bl	8003334 <HAL_DMA_Start_IT>
 8004728:	4603      	mov	r3, r0
 800472a:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 800472c:	7efb      	ldrb	r3, [r7, #27]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d159      	bne.n	80047e6 <HAL_I2C_Master_Seq_Receive_DMA+0x2d6>
 8004732:	e013      	b.n	800475c <HAL_I2C_Master_Seq_Receive_DMA+0x24c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e087      	b.n	800486c <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2b12      	cmp	r3, #18
 8004760:	d10c      	bne.n	800477c <HAL_I2C_Master_Seq_Receive_DMA+0x26c>
 8004762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004764:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004768:	d003      	beq.n	8004772 <HAL_I2C_Master_Seq_Receive_DMA+0x262>
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004770:	d101      	bne.n	8004776 <HAL_I2C_Master_Seq_Receive_DMA+0x266>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <HAL_I2C_Master_Seq_Receive_DMA+0x268>
 8004776:	2300      	movs	r3, #0
 8004778:	2b01      	cmp	r3, #1
 800477a:	d113      	bne.n	80047a4 <HAL_I2C_Master_Seq_Receive_DMA+0x294>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800478a:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 800478c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	e00a      	b.n	80047aa <HAL_I2C_Master_Seq_Receive_DMA+0x29a>
 8004794:	20000000 	.word	0x20000000
 8004798:	14f8b589 	.word	0x14f8b589
 800479c:	08005e31 	.word	0x08005e31
 80047a0:	08005fef 	.word	0x08005fef
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 80047a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047a8:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 80047b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d005      	beq.n	80047c4 <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 80047b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d002      	beq.n	80047c4 <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d107      	bne.n	80047d4 <HAL_I2C_Master_Seq_Receive_DMA+0x2c4>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047d2:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6859      	ldr	r1, [r3, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69fa      	ldr	r2, [r7, #28]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
 80047e4:	e03f      	b.n	8004866 <HAL_I2C_Master_Seq_Receive_DMA+0x356>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	f043 0210 	orr.w	r2, r3, #16
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e02e      	b.n	800486c <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800481c:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b12      	cmp	r3, #18
 8004822:	d10c      	bne.n	800483e <HAL_I2C_Master_Seq_Receive_DMA+0x32e>
 8004824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004826:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800482a:	d003      	beq.n	8004834 <HAL_I2C_Master_Seq_Receive_DMA+0x324>
 800482c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004832:	d101      	bne.n	8004838 <HAL_I2C_Master_Seq_Receive_DMA+0x328>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_I2C_Master_Seq_Receive_DMA+0x32a>
 8004838:	2300      	movs	r3, #0
 800483a:	2b01      	cmp	r3, #1
 800483c:	d107      	bne.n	800484e <HAL_I2C_Master_Seq_Receive_DMA+0x33e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800484c:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	6859      	ldr	r1, [r3, #4]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	430a      	orrs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	e000      	b.n	800486c <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
  }
  else
  {
    return HAL_BUSY;
 800486a:	2302      	movs	r3, #2
  }
}
 800486c:	4618      	mov	r0, r3
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b088      	sub	sp, #32
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004894:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800489c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b10      	cmp	r3, #16
 80048a2:	d003      	beq.n	80048ac <HAL_I2C_EV_IRQHandler+0x38>
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b40      	cmp	r3, #64	@ 0x40
 80048a8:	f040 80c1 	bne.w	8004a2e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10d      	bne.n	80048e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80048cc:	d003      	beq.n	80048d6 <HAL_I2C_EV_IRQHandler+0x62>
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80048d4:	d101      	bne.n	80048da <HAL_I2C_EV_IRQHandler+0x66>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <HAL_I2C_EV_IRQHandler+0x68>
 80048da:	2300      	movs	r3, #0
 80048dc:	2b01      	cmp	r3, #1
 80048de:	f000 8132 	beq.w	8004b46 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00c      	beq.n	8004906 <HAL_I2C_EV_IRQHandler+0x92>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	0a5b      	lsrs	r3, r3, #9
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d006      	beq.n	8004906 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 fd03 	bl	8006304 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fce5 	bl	80052ce <I2C_Master_SB>
 8004904:	e092      	b.n	8004a2c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	08db      	lsrs	r3, r3, #3
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <HAL_I2C_EV_IRQHandler+0xb2>
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	0a5b      	lsrs	r3, r3, #9
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fd5a 	bl	80053d8 <I2C_Master_ADD10>
 8004924:	e082      	b.n	8004a2c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	085b      	lsrs	r3, r3, #1
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d009      	beq.n	8004946 <HAL_I2C_EV_IRQHandler+0xd2>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	0a5b      	lsrs	r3, r3, #9
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fd73 	bl	800542a <I2C_Master_ADDR>
 8004944:	e072      	b.n	8004a2c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	089b      	lsrs	r3, r3, #2
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d03b      	beq.n	80049ca <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800495c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004960:	f000 80f3 	beq.w	8004b4a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	09db      	lsrs	r3, r3, #7
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00f      	beq.n	8004990 <HAL_I2C_EV_IRQHandler+0x11c>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	0a9b      	lsrs	r3, r3, #10
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d009      	beq.n	8004990 <HAL_I2C_EV_IRQHandler+0x11c>
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b00      	cmp	r3, #0
 8004986:	d103      	bne.n	8004990 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f93d 	bl	8004c08 <I2C_MasterTransmit_TXE>
 800498e:	e04d      	b.n	8004a2c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	089b      	lsrs	r3, r3, #2
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 80d6 	beq.w	8004b4a <HAL_I2C_EV_IRQHandler+0x2d6>
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	0a5b      	lsrs	r3, r3, #9
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 80cf 	beq.w	8004b4a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80049ac:	7bbb      	ldrb	r3, [r7, #14]
 80049ae:	2b21      	cmp	r3, #33	@ 0x21
 80049b0:	d103      	bne.n	80049ba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f9c4 	bl	8004d40 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049b8:	e0c7      	b.n	8004b4a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	2b40      	cmp	r3, #64	@ 0x40
 80049be:	f040 80c4 	bne.w	8004b4a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fa32 	bl	8004e2c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049c8:	e0bf      	b.n	8004b4a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049d8:	f000 80b7 	beq.w	8004b4a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	099b      	lsrs	r3, r3, #6
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00f      	beq.n	8004a08 <HAL_I2C_EV_IRQHandler+0x194>
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	0a9b      	lsrs	r3, r3, #10
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d009      	beq.n	8004a08 <HAL_I2C_EV_IRQHandler+0x194>
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d103      	bne.n	8004a08 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 faab 	bl	8004f5c <I2C_MasterReceive_RXNE>
 8004a06:	e011      	b.n	8004a2c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	089b      	lsrs	r3, r3, #2
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 809a 	beq.w	8004b4a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	0a5b      	lsrs	r3, r3, #9
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f000 8093 	beq.w	8004b4a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fb61 	bl	80050ec <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a2a:	e08e      	b.n	8004b4a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a2c:	e08d      	b.n	8004b4a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d004      	beq.n	8004a40 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	e007      	b.n	8004a50 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d012      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x20e>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	0a5b      	lsrs	r3, r3, #9
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004a78:	69b9      	ldr	r1, [r7, #24]
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 ff2c 	bl	80058d8 <I2C_Slave_ADDR>
 8004a80:	e066      	b.n	8004b50 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	091b      	lsrs	r3, r3, #4
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_I2C_EV_IRQHandler+0x22e>
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	0a5b      	lsrs	r3, r3, #9
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 ff66 	bl	800596c <I2C_Slave_STOPF>
 8004aa0:	e056      	b.n	8004b50 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004aa2:	7bbb      	ldrb	r3, [r7, #14]
 8004aa4:	2b21      	cmp	r3, #33	@ 0x21
 8004aa6:	d002      	beq.n	8004aae <HAL_I2C_EV_IRQHandler+0x23a>
 8004aa8:	7bbb      	ldrb	r3, [r7, #14]
 8004aaa:	2b29      	cmp	r3, #41	@ 0x29
 8004aac:	d125      	bne.n	8004afa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	09db      	lsrs	r3, r3, #7
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00f      	beq.n	8004ada <HAL_I2C_EV_IRQHandler+0x266>
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	0a9b      	lsrs	r3, r3, #10
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <HAL_I2C_EV_IRQHandler+0x266>
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	089b      	lsrs	r3, r3, #2
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fe44 	bl	8005760 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ad8:	e039      	b.n	8004b4e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	089b      	lsrs	r3, r3, #2
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d033      	beq.n	8004b4e <HAL_I2C_EV_IRQHandler+0x2da>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	0a5b      	lsrs	r3, r3, #9
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d02d      	beq.n	8004b4e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 fe71 	bl	80057da <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004af8:	e029      	b.n	8004b4e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	099b      	lsrs	r3, r3, #6
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00f      	beq.n	8004b26 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	0a9b      	lsrs	r3, r3, #10
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d009      	beq.n	8004b26 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	089b      	lsrs	r3, r3, #2
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d103      	bne.n	8004b26 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fe7b 	bl	800581a <I2C_SlaveReceive_RXNE>
 8004b24:	e014      	b.n	8004b50 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	089b      	lsrs	r3, r3, #2
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00e      	beq.n	8004b50 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	0a5b      	lsrs	r3, r3, #9
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d008      	beq.n	8004b50 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fea9 	bl	8005896 <I2C_SlaveReceive_BTF>
 8004b44:	e004      	b.n	8004b50 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004b46:	bf00      	nop
 8004b48:	e002      	b.n	8004b50 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b4a:	bf00      	nop
 8004b4c:	e000      	b.n	8004b50 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b4e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	460b      	mov	r3, r1
 8004b84:	70fb      	strb	r3, [r7, #3]
 8004b86:	4613      	mov	r3, r2
 8004b88:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bc80      	pop	{r7}
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr

08004bca <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr

08004bdc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr

08004bee <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bfc:	b2db      	uxtb	r3, r3
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr

08004c08 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c16:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c1e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c24:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d150      	bne.n	8004cd0 <I2C_MasterTransmit_TXE+0xc8>
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	2b21      	cmp	r3, #33	@ 0x21
 8004c32:	d14d      	bne.n	8004cd0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d01d      	beq.n	8004c76 <I2C_MasterTransmit_TXE+0x6e>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d01a      	beq.n	8004c76 <I2C_MasterTransmit_TXE+0x6e>
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c46:	d016      	beq.n	8004c76 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c56:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2211      	movs	r2, #17
 8004c5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fc fd1c 	bl	80016ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c74:	e060      	b.n	8004d38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c84:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c94:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	2b40      	cmp	r3, #64	@ 0x40
 8004cae:	d107      	bne.n	8004cc0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff ff74 	bl	8004ba6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cbe:	e03b      	b.n	8004d38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7fc fcef 	bl	80016ac <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cce:	e033      	b.n	8004d38 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
 8004cd2:	2b21      	cmp	r3, #33	@ 0x21
 8004cd4:	d005      	beq.n	8004ce2 <I2C_MasterTransmit_TXE+0xda>
 8004cd6:	7bbb      	ldrb	r3, [r7, #14]
 8004cd8:	2b40      	cmp	r3, #64	@ 0x40
 8004cda:	d12d      	bne.n	8004d38 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	2b22      	cmp	r3, #34	@ 0x22
 8004ce0:	d12a      	bne.n	8004d38 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d108      	bne.n	8004cfe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cfa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004cfc:	e01c      	b.n	8004d38 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b40      	cmp	r3, #64	@ 0x40
 8004d08:	d103      	bne.n	8004d12 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f88e 	bl	8004e2c <I2C_MemoryTransmit_TXE_BTF>
}
 8004d10:	e012      	b.n	8004d38 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d16:	781a      	ldrb	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004d36:	e7ff      	b.n	8004d38 <I2C_MasterTransmit_TXE+0x130>
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b21      	cmp	r3, #33	@ 0x21
 8004d58:	d164      	bne.n	8004e24 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d012      	beq.n	8004d8a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d68:	781a      	ldrb	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d88:	e04c      	b.n	8004e24 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d01d      	beq.n	8004dcc <I2C_MasterTransmit_BTF+0x8c>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d01a      	beq.n	8004dcc <I2C_MasterTransmit_BTF+0x8c>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d9c:	d016      	beq.n	8004dcc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2211      	movs	r2, #17
 8004db2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7fc fc71 	bl	80016ac <HAL_I2C_MasterTxCpltCallback>
}
 8004dca:	e02b      	b.n	8004e24 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dda:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	2b40      	cmp	r3, #64	@ 0x40
 8004e04:	d107      	bne.n	8004e16 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7ff fec9 	bl	8004ba6 <HAL_I2C_MemTxCpltCallback>
}
 8004e14:	e006      	b.n	8004e24 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fc fc44 	bl	80016ac <HAL_I2C_MasterTxCpltCallback>
}
 8004e24:	bf00      	nop
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d11d      	bne.n	8004e80 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d10b      	bne.n	8004e64 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e50:	b2da      	uxtb	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e5c:	1c9a      	adds	r2, r3, #2
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004e62:	e077      	b.n	8004f54 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	121b      	asrs	r3, r3, #8
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e7e:	e069      	b.n	8004f54 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d10b      	bne.n	8004ea0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e9e:	e059      	b.n	8004f54 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d152      	bne.n	8004f4e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b22      	cmp	r3, #34	@ 0x22
 8004eac:	d10d      	bne.n	8004eca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ebc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ec8:	e044      	b.n	8004f54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d015      	beq.n	8004f00 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	2b21      	cmp	r3, #33	@ 0x21
 8004ed8:	d112      	bne.n	8004f00 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	781a      	ldrb	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004efe:	e029      	b.n	8004f54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d124      	bne.n	8004f54 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004f0a:	7bfb      	ldrb	r3, [r7, #15]
 8004f0c:	2b21      	cmp	r3, #33	@ 0x21
 8004f0e:	d121      	bne.n	8004f54 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f1e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f2e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff fe2d 	bl	8004ba6 <HAL_I2C_MemTxCpltCallback>
}
 8004f4c:	e002      	b.n	8004f54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fe ff1a 	bl	8003d88 <I2C_Flush_DR>
}
 8004f54:	bf00      	nop
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b22      	cmp	r3, #34	@ 0x22
 8004f6e:	f040 80b9 	bne.w	80050e4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f76:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d921      	bls.n	8004fca <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	f040 8096 	bne.w	80050e4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fc6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004fc8:	e08c      	b.n	80050e4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d07f      	beq.n	80050d2 <I2C_MasterReceive_RXNE+0x176>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d002      	beq.n	8004fde <I2C_MasterReceive_RXNE+0x82>
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d179      	bne.n	80050d2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 f95e 	bl	80062a0 <I2C_WaitOnSTOPRequestThroughIT>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d14c      	bne.n	8005084 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ff8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005008:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	691a      	ldr	r2, [r3, #16]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b40      	cmp	r3, #64	@ 0x40
 8005042:	d10a      	bne.n	800505a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7ff fdb0 	bl	8004bb8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005058:	e044      	b.n	80050e4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d002      	beq.n	800506e <I2C_MasterReceive_RXNE+0x112>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b20      	cmp	r3, #32
 800506c:	d103      	bne.n	8005076 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	631a      	str	r2, [r3, #48]	@ 0x30
 8005074:	e002      	b.n	800507c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2212      	movs	r2, #18
 800507a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7fc fb23 	bl	80016c8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005082:	e02f      	b.n	80050e4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005092:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7ff fd7d 	bl	8004bca <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050d0:	e008      	b.n	80050e4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050e0:	605a      	str	r2, [r3, #4]
}
 80050e2:	e7ff      	b.n	80050e4 <I2C_MasterReceive_RXNE+0x188>
 80050e4:	bf00      	nop
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2b04      	cmp	r3, #4
 8005102:	d11b      	bne.n	800513c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005112:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511e:	b2d2      	uxtb	r2, r2
 8005120:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29a      	uxth	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800513a:	e0c4      	b.n	80052c6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b03      	cmp	r3, #3
 8005144:	d129      	bne.n	800519a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005154:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d00a      	beq.n	8005172 <I2C_MasterReceive_BTF+0x86>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d007      	beq.n	8005172 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005170:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005198:	e095      	b.n	80052c6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d17d      	bne.n	80052a0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d002      	beq.n	80051b0 <I2C_MasterReceive_BTF+0xc4>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b10      	cmp	r3, #16
 80051ae:	d108      	bne.n	80051c2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	e016      	b.n	80051f0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d002      	beq.n	80051ce <I2C_MasterReceive_BTF+0xe2>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d108      	bne.n	80051e0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	e007      	b.n	80051f0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	691a      	ldr	r2, [r3, #16]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	b2d2      	uxtb	r2, r2
 8005222:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800524a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2220      	movs	r2, #32
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b40      	cmp	r3, #64	@ 0x40
 800525e:	d10a      	bne.n	8005276 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff fca2 	bl	8004bb8 <HAL_I2C_MemRxCpltCallback>
}
 8005274:	e027      	b.n	80052c6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b08      	cmp	r3, #8
 8005282:	d002      	beq.n	800528a <I2C_MasterReceive_BTF+0x19e>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b20      	cmp	r3, #32
 8005288:	d103      	bne.n	8005292 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005290:	e002      	b.n	8005298 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2212      	movs	r2, #18
 8005296:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7fc fa15 	bl	80016c8 <HAL_I2C_MasterRxCpltCallback>
}
 800529e:	e012      	b.n	80052c6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80052c6:	bf00      	nop
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b40      	cmp	r3, #64	@ 0x40
 80052e0:	d117      	bne.n	8005312 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	461a      	mov	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80052fc:	e067      	b.n	80053ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	b2da      	uxtb	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	611a      	str	r2, [r3, #16]
}
 8005310:	e05d      	b.n	80053ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800531a:	d133      	bne.n	8005384 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b21      	cmp	r3, #33	@ 0x21
 8005326:	d109      	bne.n	800533c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532c:	b2db      	uxtb	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005338:	611a      	str	r2, [r3, #16]
 800533a:	e008      	b.n	800534e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	b2da      	uxtb	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005352:	2b00      	cmp	r3, #0
 8005354:	d004      	beq.n	8005360 <I2C_Master_SB+0x92>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800535a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800535c:	2b00      	cmp	r3, #0
 800535e:	d108      	bne.n	8005372 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	2b00      	cmp	r3, #0
 8005366:	d032      	beq.n	80053ce <I2C_Master_SB+0x100>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536e:	2b00      	cmp	r3, #0
 8005370:	d02d      	beq.n	80053ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005380:	605a      	str	r2, [r3, #4]
}
 8005382:	e024      	b.n	80053ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10e      	bne.n	80053aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005390:	b29b      	uxth	r3, r3
 8005392:	11db      	asrs	r3, r3, #7
 8005394:	b2db      	uxtb	r3, r3
 8005396:	f003 0306 	and.w	r3, r3, #6
 800539a:	b2db      	uxtb	r3, r3
 800539c:	f063 030f 	orn	r3, r3, #15
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	611a      	str	r2, [r3, #16]
}
 80053a8:	e011      	b.n	80053ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d10d      	bne.n	80053ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	11db      	asrs	r3, r3, #7
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	f003 0306 	and.w	r3, r3, #6
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	f063 030e 	orn	r3, r3, #14
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	611a      	str	r2, [r3, #16]
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <I2C_Master_ADD10+0x26>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d108      	bne.n	8005410 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00c      	beq.n	8005420 <I2C_Master_ADD10+0x48>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800541e:	605a      	str	r2, [r3, #4]
  }
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr

0800542a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800542a:	b480      	push	{r7}
 800542c:	b091      	sub	sp, #68	@ 0x44
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005438:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005440:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005446:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b22      	cmp	r3, #34	@ 0x22
 8005452:	f040 8174 	bne.w	800573e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10f      	bne.n	800547e <I2C_Master_ADDR+0x54>
 800545e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005462:	2b40      	cmp	r3, #64	@ 0x40
 8005464:	d10b      	bne.n	800547e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005466:	2300      	movs	r3, #0
 8005468:	633b      	str	r3, [r7, #48]	@ 0x30
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	633b      	str	r3, [r7, #48]	@ 0x30
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	633b      	str	r3, [r7, #48]	@ 0x30
 800547a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547c:	e16b      	b.n	8005756 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005482:	2b00      	cmp	r3, #0
 8005484:	d11d      	bne.n	80054c2 <I2C_Master_ADDR+0x98>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800548e:	d118      	bne.n	80054c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005490:	2300      	movs	r3, #0
 8005492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	651a      	str	r2, [r3, #80]	@ 0x50
 80054c0:	e149      	b.n	8005756 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d113      	bne.n	80054f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054cc:	2300      	movs	r3, #0
 80054ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054f0:	601a      	str	r2, [r3, #0]
 80054f2:	e120      	b.n	8005736 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	f040 808a 	bne.w	8005614 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005502:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005506:	d137      	bne.n	8005578 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005516:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005522:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005526:	d113      	bne.n	8005550 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005536:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005538:	2300      	movs	r3, #0
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	627b      	str	r3, [r7, #36]	@ 0x24
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	627b      	str	r3, [r7, #36]	@ 0x24
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	e0f2      	b.n	8005736 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005550:	2300      	movs	r3, #0
 8005552:	623b      	str	r3, [r7, #32]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	623b      	str	r3, [r7, #32]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	623b      	str	r3, [r7, #32]
 8005564:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e0de      	b.n	8005736 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557a:	2b08      	cmp	r3, #8
 800557c:	d02e      	beq.n	80055dc <I2C_Master_ADDR+0x1b2>
 800557e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005580:	2b20      	cmp	r3, #32
 8005582:	d02b      	beq.n	80055dc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005586:	2b12      	cmp	r3, #18
 8005588:	d102      	bne.n	8005590 <I2C_Master_ADDR+0x166>
 800558a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558c:	2b01      	cmp	r3, #1
 800558e:	d125      	bne.n	80055dc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005592:	2b04      	cmp	r3, #4
 8005594:	d00e      	beq.n	80055b4 <I2C_Master_ADDR+0x18a>
 8005596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005598:	2b02      	cmp	r3, #2
 800559a:	d00b      	beq.n	80055b4 <I2C_Master_ADDR+0x18a>
 800559c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d008      	beq.n	80055b4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	e007      	b.n	80055c4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055c2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c4:	2300      	movs	r3, #0
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	61fb      	str	r3, [r7, #28]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	e0ac      	b.n	8005736 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ec:	2300      	movs	r3, #0
 80055ee:	61bb      	str	r3, [r7, #24]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	e090      	b.n	8005736 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d158      	bne.n	80056d0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	2b04      	cmp	r3, #4
 8005622:	d021      	beq.n	8005668 <I2C_Master_ADDR+0x23e>
 8005624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005626:	2b02      	cmp	r3, #2
 8005628:	d01e      	beq.n	8005668 <I2C_Master_ADDR+0x23e>
 800562a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562c:	2b10      	cmp	r3, #16
 800562e:	d01b      	beq.n	8005668 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800563e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	617b      	str	r3, [r7, #20]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	617b      	str	r3, [r7, #20]
 8005654:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	e012      	b.n	800568e <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005676:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005678:	2300      	movs	r3, #0
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	613b      	str	r3, [r7, #16]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800569c:	d14b      	bne.n	8005736 <I2C_Master_ADDR+0x30c>
 800569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056a4:	d00b      	beq.n	80056be <I2C_Master_ADDR+0x294>
 80056a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d008      	beq.n	80056be <I2C_Master_ADDR+0x294>
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	2b08      	cmp	r3, #8
 80056b0:	d005      	beq.n	80056be <I2C_Master_ADDR+0x294>
 80056b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d002      	beq.n	80056be <I2C_Master_ADDR+0x294>
 80056b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d13b      	bne.n	8005736 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	e032      	b.n	8005736 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056de:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ee:	d117      	bne.n	8005720 <I2C_Master_ADDR+0x2f6>
 80056f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056f6:	d00b      	beq.n	8005710 <I2C_Master_ADDR+0x2e6>
 80056f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d008      	beq.n	8005710 <I2C_Master_ADDR+0x2e6>
 80056fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005700:	2b08      	cmp	r3, #8
 8005702:	d005      	beq.n	8005710 <I2C_Master_ADDR+0x2e6>
 8005704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005706:	2b10      	cmp	r3, #16
 8005708:	d002      	beq.n	8005710 <I2C_Master_ADDR+0x2e6>
 800570a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570c:	2b20      	cmp	r3, #32
 800570e:	d107      	bne.n	8005720 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800571e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005720:	2300      	movs	r3, #0
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800573c:	e00b      	b.n	8005756 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	60bb      	str	r3, [r7, #8]
 8005752:	68bb      	ldr	r3, [r7, #8]
}
 8005754:	e7ff      	b.n	8005756 <I2C_Master_ADDR+0x32c>
 8005756:	bf00      	nop
 8005758:	3744      	adds	r7, #68	@ 0x44
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr

08005760 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800576e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d02b      	beq.n	80057d2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577e:	781a      	ldrb	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d114      	bne.n	80057d2 <I2C_SlaveTransmit_TXE+0x72>
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b29      	cmp	r3, #41	@ 0x29
 80057ac:	d111      	bne.n	80057d2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057bc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2221      	movs	r2, #33	@ 0x21
 80057c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2228      	movs	r2, #40	@ 0x28
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff f9c2 	bl	8004b56 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057d2:	bf00      	nop
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d011      	beq.n	8005810 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f0:	781a      	ldrb	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr

0800581a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005828:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d02c      	beq.n	800588e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583e:	b2d2      	uxtb	r2, r2
 8005840:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d114      	bne.n	800588e <I2C_SlaveReceive_RXNE+0x74>
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b2a      	cmp	r3, #42	@ 0x2a
 8005868:	d111      	bne.n	800588e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005878:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2222      	movs	r2, #34	@ 0x22
 800587e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2228      	movs	r2, #40	@ 0x28
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff f96d 	bl	8004b68 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800588e:	bf00      	nop
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d012      	beq.n	80058ce <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691a      	ldr	r2, [r3, #16]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80058f2:	2b28      	cmp	r3, #40	@ 0x28
 80058f4:	d127      	bne.n	8005946 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005904:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	089b      	lsrs	r3, r3, #2
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	09db      	lsrs	r3, r3, #7
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d103      	bne.n	800592a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	81bb      	strh	r3, [r7, #12]
 8005928:	e002      	b.n	8005930 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005938:	89ba      	ldrh	r2, [r7, #12]
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff f91b 	bl	8004b7a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005944:	e00e      	b.n	8005964 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005946:	2300      	movs	r3, #0
 8005948:	60bb      	str	r3, [r7, #8]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800597a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800598a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800598c:	2300      	movs	r3, #0
 800598e:	60bb      	str	r3, [r7, #8]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	60bb      	str	r3, [r7, #8]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0201 	orr.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059b8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059c8:	d172      	bne.n	8005ab0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	2b22      	cmp	r3, #34	@ 0x22
 80059ce:	d002      	beq.n	80059d6 <I2C_Slave_STOPF+0x6a>
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80059d4:	d135      	bne.n	8005a42 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	b29a      	uxth	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f2:	f043 0204 	orr.w	r2, r3, #4
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fd fe6e 	bl	80036f0 <HAL_DMA_GetState>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d049      	beq.n	8005aae <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a1e:	4a69      	ldr	r2, [pc, #420]	@ (8005bc4 <I2C_Slave_STOPF+0x258>)
 8005a20:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fd fce4 	bl	80033f4 <HAL_DMA_Abort_IT>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d03d      	beq.n	8005aae <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a40:	e035      	b.n	8005aae <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	f043 0204 	orr.w	r2, r3, #4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a74:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fd fe38 	bl	80036f0 <HAL_DMA_GetState>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d014      	beq.n	8005ab0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a8a:	4a4e      	ldr	r2, [pc, #312]	@ (8005bc4 <I2C_Slave_STOPF+0x258>)
 8005a8c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fd fcae 	bl	80033f4 <HAL_DMA_Abort_IT>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d008      	beq.n	8005ab0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4798      	blx	r3
 8005aac:	e000      	b.n	8005ab0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005aae:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d03e      	beq.n	8005b38 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d112      	bne.n	8005aee <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691a      	ldr	r2, [r3, #16]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005af8:	2b40      	cmp	r3, #64	@ 0x40
 8005afa:	d112      	bne.n	8005b22 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691a      	ldr	r2, [r3, #16]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b30:	f043 0204 	orr.w	r2, r3, #4
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f843 	bl	8005bcc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b46:	e039      	b.n	8005bbc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b48:	7bfb      	ldrb	r3, [r7, #15]
 8005b4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b4c:	d109      	bne.n	8005b62 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2228      	movs	r2, #40	@ 0x28
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff f803 	bl	8004b68 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b28      	cmp	r3, #40	@ 0x28
 8005b6c:	d111      	bne.n	8005b92 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a15      	ldr	r2, [pc, #84]	@ (8005bc8 <I2C_Slave_STOPF+0x25c>)
 8005b72:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2220      	movs	r2, #32
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff f802 	bl	8004b94 <HAL_I2C_ListenCpltCallback>
}
 8005b90:	e014      	b.n	8005bbc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b96:	2b22      	cmp	r3, #34	@ 0x22
 8005b98:	d002      	beq.n	8005ba0 <I2C_Slave_STOPF+0x234>
 8005b9a:	7bfb      	ldrb	r3, [r7, #15]
 8005b9c:	2b22      	cmp	r3, #34	@ 0x22
 8005b9e:	d10d      	bne.n	8005bbc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fe ffd6 	bl	8004b68 <HAL_I2C_SlaveRxCpltCallback>
}
 8005bbc:	bf00      	nop
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	0800605d 	.word	0x0800605d
 8005bc8:	ffff0000 	.word	0xffff0000

08005bcc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005be2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005be4:	7bbb      	ldrb	r3, [r7, #14]
 8005be6:	2b10      	cmp	r3, #16
 8005be8:	d002      	beq.n	8005bf0 <I2C_ITError+0x24>
 8005bea:	7bbb      	ldrb	r3, [r7, #14]
 8005bec:	2b40      	cmp	r3, #64	@ 0x40
 8005bee:	d10a      	bne.n	8005c06 <I2C_ITError+0x3a>
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	2b22      	cmp	r3, #34	@ 0x22
 8005bf4:	d107      	bne.n	8005c06 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c04:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c0c:	2b28      	cmp	r3, #40	@ 0x28
 8005c0e:	d107      	bne.n	8005c20 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2228      	movs	r2, #40	@ 0x28
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005c1e:	e015      	b.n	8005c4c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c2e:	d00a      	beq.n	8005c46 <I2C_ITError+0x7a>
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b60      	cmp	r3, #96	@ 0x60
 8005c34:	d007      	beq.n	8005c46 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c5a:	d162      	bne.n	8005d22 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c6a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c70:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d020      	beq.n	8005cbc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7e:	4a6a      	ldr	r2, [pc, #424]	@ (8005e28 <I2C_ITError+0x25c>)
 8005c80:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fd fbb4 	bl	80033f4 <HAL_DMA_Abort_IT>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 8089 	beq.w	8005da6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	4798      	blx	r3
 8005cba:	e074      	b.n	8005da6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc0:	4a59      	ldr	r2, [pc, #356]	@ (8005e28 <I2C_ITError+0x25c>)
 8005cc2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fd fb93 	bl	80033f4 <HAL_DMA_Abort_IT>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d068      	beq.n	8005da6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cde:	2b40      	cmp	r3, #64	@ 0x40
 8005ce0:	d10b      	bne.n	8005cfa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0201 	bic.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
 8005d20:	e041      	b.n	8005da6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b60      	cmp	r3, #96	@ 0x60
 8005d2c:	d125      	bne.n	8005d7a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d46:	2b40      	cmp	r3, #64	@ 0x40
 8005d48:	d10b      	bne.n	8005d62 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0201 	bic.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f7fe ff32 	bl	8004bdc <HAL_I2C_AbortCpltCallback>
 8005d78:	e015      	b.n	8005da6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d84:	2b40      	cmp	r3, #64	@ 0x40
 8005d86:	d10b      	bne.n	8005da0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7fe ff12 	bl	8004bca <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10e      	bne.n	8005dd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d109      	bne.n	8005dd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005de2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df0:	f003 0304 	and.w	r3, r3, #4
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d113      	bne.n	8005e20 <I2C_ITError+0x254>
 8005df8:	7bfb      	ldrb	r3, [r7, #15]
 8005dfa:	2b28      	cmp	r3, #40	@ 0x28
 8005dfc:	d110      	bne.n	8005e20 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a0a      	ldr	r2, [pc, #40]	@ (8005e2c <I2C_ITError+0x260>)
 8005e02:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fe feba 	bl	8004b94 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	0800605d 	.word	0x0800605d
 8005e2c:	ffff0000 	.word	0xffff0000

08005e30 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e44:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e4c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005e62:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e70:	2200      	movs	r2, #0
 8005e72:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d003      	beq.n	8005e84 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e80:	2200      	movs	r2, #0
 8005e82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005e84:	7cfb      	ldrb	r3, [r7, #19]
 8005e86:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005e8a:	2b21      	cmp	r3, #33	@ 0x21
 8005e8c:	d007      	beq.n	8005e9e <I2C_DMAXferCplt+0x6e>
 8005e8e:	7cfb      	ldrb	r3, [r7, #19]
 8005e90:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005e94:	2b22      	cmp	r3, #34	@ 0x22
 8005e96:	d131      	bne.n	8005efc <I2C_DMAXferCplt+0xcc>
 8005e98:	7cbb      	ldrb	r3, [r7, #18]
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d12e      	bne.n	8005efc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eac:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005eb4:	7cfb      	ldrb	r3, [r7, #19]
 8005eb6:	2b29      	cmp	r3, #41	@ 0x29
 8005eb8:	d10a      	bne.n	8005ed0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2221      	movs	r2, #33	@ 0x21
 8005ebe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2228      	movs	r2, #40	@ 0x28
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ec8:	6978      	ldr	r0, [r7, #20]
 8005eca:	f7fe fe44 	bl	8004b56 <HAL_I2C_SlaveTxCpltCallback>
 8005ece:	e00c      	b.n	8005eea <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005ed0:	7cfb      	ldrb	r3, [r7, #19]
 8005ed2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ed4:	d109      	bne.n	8005eea <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2222      	movs	r2, #34	@ 0x22
 8005eda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2228      	movs	r2, #40	@ 0x28
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ee4:	6978      	ldr	r0, [r7, #20]
 8005ee6:	f7fe fe3f 	bl	8004b68 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005ef8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005efa:	e074      	b.n	8005fe6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d06e      	beq.n	8005fe6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d107      	bne.n	8005f22 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f20:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005f30:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f38:	d009      	beq.n	8005f4e <I2C_DMAXferCplt+0x11e>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d006      	beq.n	8005f4e <I2C_DMAXferCplt+0x11e>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005f46:	d002      	beq.n	8005f4e <I2C_DMAXferCplt+0x11e>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	d107      	bne.n	8005f5e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f5c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f6c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f7c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2200      	movs	r2, #0
 8005f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d003      	beq.n	8005f94 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005f8c:	6978      	ldr	r0, [r7, #20]
 8005f8e:	f7fe fe1c 	bl	8004bca <HAL_I2C_ErrorCallback>
}
 8005f92:	e028      	b.n	8005fe6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b40      	cmp	r3, #64	@ 0x40
 8005fa6:	d10a      	bne.n	8005fbe <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005fb6:	6978      	ldr	r0, [r7, #20]
 8005fb8:	f7fe fdfe 	bl	8004bb8 <HAL_I2C_MemRxCpltCallback>
}
 8005fbc:	e013      	b.n	8005fe6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d002      	beq.n	8005fd2 <I2C_DMAXferCplt+0x1a2>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b20      	cmp	r3, #32
 8005fd0:	d103      	bne.n	8005fda <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fd8:	e002      	b.n	8005fe0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2212      	movs	r2, #18
 8005fde:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005fe0:	6978      	ldr	r0, [r7, #20]
 8005fe2:	f7fb fb71 	bl	80016c8 <HAL_I2C_MasterRxCpltCallback>
}
 8005fe6:	bf00      	nop
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006008:	2200      	movs	r2, #0
 800600a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006018:	2200      	movs	r2, #0
 800601a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800602a:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006046:	f043 0210 	orr.w	r2, r3, #16
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7fe fdbb 	bl	8004bca <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006074:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006076:	4b4b      	ldr	r3, [pc, #300]	@ (80061a4 <I2C_DMAAbort+0x148>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	08db      	lsrs	r3, r3, #3
 800607c:	4a4a      	ldr	r2, [pc, #296]	@ (80061a8 <I2C_DMAAbort+0x14c>)
 800607e:	fba2 2303 	umull	r2, r3, r2, r3
 8006082:	0a1a      	lsrs	r2, r3, #8
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	00da      	lsls	r2, r3, #3
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609a:	f043 0220 	orr.w	r2, r3, #32
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80060a2:	e00a      	b.n	80060ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060b8:	d0ea      	beq.n	8006090 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c6:	2200      	movs	r2, #0
 80060c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d6:	2200      	movs	r2, #0
 80060d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2200      	movs	r2, #0
 80060ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fc:	2200      	movs	r2, #0
 80060fe:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006104:	2b00      	cmp	r3, #0
 8006106:	d003      	beq.n	8006110 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800610c:	2200      	movs	r2, #0
 800610e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 0201 	bic.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b60      	cmp	r3, #96	@ 0x60
 800612a:	d10e      	bne.n	800614a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2200      	movs	r2, #0
 8006140:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006142:	6978      	ldr	r0, [r7, #20]
 8006144:	f7fe fd4a 	bl	8004bdc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006148:	e027      	b.n	800619a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800614a:	7cfb      	ldrb	r3, [r7, #19]
 800614c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006150:	2b28      	cmp	r3, #40	@ 0x28
 8006152:	d117      	bne.n	8006184 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0201 	orr.w	r2, r2, #1
 8006162:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006172:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2200      	movs	r2, #0
 8006178:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2228      	movs	r2, #40	@ 0x28
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006182:	e007      	b.n	8006194 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006194:	6978      	ldr	r0, [r7, #20]
 8006196:	f7fe fd18 	bl	8004bca <HAL_I2C_ErrorCallback>
}
 800619a:	bf00      	nop
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20000000 	.word	0x20000000
 80061a8:	14f8b589 	.word	0x14f8b589

080061ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	603b      	str	r3, [r7, #0]
 80061b8:	4613      	mov	r3, r2
 80061ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061bc:	e048      	b.n	8006250 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c4:	d044      	beq.n	8006250 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061c6:	f7fc ff4d 	bl	8003064 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d302      	bcc.n	80061dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d139      	bne.n	8006250 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	0c1b      	lsrs	r3, r3, #16
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d10d      	bne.n	8006202 <I2C_WaitOnFlagUntilTimeout+0x56>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	43da      	mvns	r2, r3
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4013      	ands	r3, r2
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	bf0c      	ite	eq
 80061f8:	2301      	moveq	r3, #1
 80061fa:	2300      	movne	r3, #0
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	461a      	mov	r2, r3
 8006200:	e00c      	b.n	800621c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	43da      	mvns	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	4013      	ands	r3, r2
 800620e:	b29b      	uxth	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	bf0c      	ite	eq
 8006214:	2301      	moveq	r3, #1
 8006216:	2300      	movne	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	79fb      	ldrb	r3, [r7, #7]
 800621e:	429a      	cmp	r2, r3
 8006220:	d116      	bne.n	8006250 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623c:	f043 0220 	orr.w	r2, r3, #32
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e023      	b.n	8006298 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	0c1b      	lsrs	r3, r3, #16
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b01      	cmp	r3, #1
 8006258:	d10d      	bne.n	8006276 <I2C_WaitOnFlagUntilTimeout+0xca>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	43da      	mvns	r2, r3
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4013      	ands	r3, r2
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	bf0c      	ite	eq
 800626c:	2301      	moveq	r3, #1
 800626e:	2300      	movne	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	461a      	mov	r2, r3
 8006274:	e00c      	b.n	8006290 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	43da      	mvns	r2, r3
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4013      	ands	r3, r2
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	bf0c      	ite	eq
 8006288:	2301      	moveq	r3, #1
 800628a:	2300      	movne	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	461a      	mov	r2, r3
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	429a      	cmp	r2, r3
 8006294:	d093      	beq.n	80061be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80062ac:	4b13      	ldr	r3, [pc, #76]	@ (80062fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	08db      	lsrs	r3, r3, #3
 80062b2:	4a13      	ldr	r2, [pc, #76]	@ (8006300 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80062b4:	fba2 2303 	umull	r2, r3, r2, r3
 80062b8:	0a1a      	lsrs	r2, r3, #8
 80062ba:	4613      	mov	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d107      	bne.n	80062de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d2:	f043 0220 	orr.w	r2, r3, #32
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e008      	b.n	80062f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062ec:	d0e9      	beq.n	80062c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	20000000 	.word	0x20000000
 8006300:	14f8b589 	.word	0x14f8b589

08006304 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006310:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006314:	d103      	bne.n	800631e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800631c:	e007      	b.n	800632e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006322:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006326:	d102      	bne.n	800632e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2208      	movs	r2, #8
 800632c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr

08006338 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d101      	bne.n	800634a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e272      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 8087 	beq.w	8006466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006358:	4b92      	ldr	r3, [pc, #584]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f003 030c 	and.w	r3, r3, #12
 8006360:	2b04      	cmp	r3, #4
 8006362:	d00c      	beq.n	800637e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006364:	4b8f      	ldr	r3, [pc, #572]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f003 030c 	and.w	r3, r3, #12
 800636c:	2b08      	cmp	r3, #8
 800636e:	d112      	bne.n	8006396 <HAL_RCC_OscConfig+0x5e>
 8006370:	4b8c      	ldr	r3, [pc, #560]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800637c:	d10b      	bne.n	8006396 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800637e:	4b89      	ldr	r3, [pc, #548]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d06c      	beq.n	8006464 <HAL_RCC_OscConfig+0x12c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d168      	bne.n	8006464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e24c      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800639e:	d106      	bne.n	80063ae <HAL_RCC_OscConfig+0x76>
 80063a0:	4b80      	ldr	r3, [pc, #512]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a7f      	ldr	r2, [pc, #508]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063aa:	6013      	str	r3, [r2, #0]
 80063ac:	e02e      	b.n	800640c <HAL_RCC_OscConfig+0xd4>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10c      	bne.n	80063d0 <HAL_RCC_OscConfig+0x98>
 80063b6:	4b7b      	ldr	r3, [pc, #492]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a7a      	ldr	r2, [pc, #488]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	4b78      	ldr	r3, [pc, #480]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a77      	ldr	r2, [pc, #476]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063cc:	6013      	str	r3, [r2, #0]
 80063ce:	e01d      	b.n	800640c <HAL_RCC_OscConfig+0xd4>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063d8:	d10c      	bne.n	80063f4 <HAL_RCC_OscConfig+0xbc>
 80063da:	4b72      	ldr	r3, [pc, #456]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a71      	ldr	r2, [pc, #452]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	4b6f      	ldr	r3, [pc, #444]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a6e      	ldr	r2, [pc, #440]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e00b      	b.n	800640c <HAL_RCC_OscConfig+0xd4>
 80063f4:	4b6b      	ldr	r3, [pc, #428]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a6a      	ldr	r2, [pc, #424]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80063fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	4b68      	ldr	r3, [pc, #416]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a67      	ldr	r2, [pc, #412]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800640a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d013      	beq.n	800643c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006414:	f7fc fe26 	bl	8003064 <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800641c:	f7fc fe22 	bl	8003064 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b64      	cmp	r3, #100	@ 0x64
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e200      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642e:	4b5d      	ldr	r3, [pc, #372]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0f0      	beq.n	800641c <HAL_RCC_OscConfig+0xe4>
 800643a:	e014      	b.n	8006466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643c:	f7fc fe12 	bl	8003064 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006444:	f7fc fe0e 	bl	8003064 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b64      	cmp	r3, #100	@ 0x64
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e1ec      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006456:	4b53      	ldr	r3, [pc, #332]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f0      	bne.n	8006444 <HAL_RCC_OscConfig+0x10c>
 8006462:	e000      	b.n	8006466 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d063      	beq.n	800653a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006472:	4b4c      	ldr	r3, [pc, #304]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f003 030c 	and.w	r3, r3, #12
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800647e:	4b49      	ldr	r3, [pc, #292]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f003 030c 	and.w	r3, r3, #12
 8006486:	2b08      	cmp	r3, #8
 8006488:	d11c      	bne.n	80064c4 <HAL_RCC_OscConfig+0x18c>
 800648a:	4b46      	ldr	r3, [pc, #280]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d116      	bne.n	80064c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006496:	4b43      	ldr	r3, [pc, #268]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <HAL_RCC_OscConfig+0x176>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d001      	beq.n	80064ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e1c0      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ae:	4b3d      	ldr	r3, [pc, #244]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	4939      	ldr	r1, [pc, #228]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064c2:	e03a      	b.n	800653a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d020      	beq.n	800650e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064cc:	4b36      	ldr	r3, [pc, #216]	@ (80065a8 <HAL_RCC_OscConfig+0x270>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d2:	f7fc fdc7 	bl	8003064 <HAL_GetTick>
 80064d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d8:	e008      	b.n	80064ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064da:	f7fc fdc3 	bl	8003064 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d901      	bls.n	80064ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e1a1      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064ec:	4b2d      	ldr	r3, [pc, #180]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d0f0      	beq.n	80064da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f8:	4b2a      	ldr	r3, [pc, #168]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	4927      	ldr	r1, [pc, #156]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006508:	4313      	orrs	r3, r2
 800650a:	600b      	str	r3, [r1, #0]
 800650c:	e015      	b.n	800653a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800650e:	4b26      	ldr	r3, [pc, #152]	@ (80065a8 <HAL_RCC_OscConfig+0x270>)
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006514:	f7fc fda6 	bl	8003064 <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800651c:	f7fc fda2 	bl	8003064 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e180      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800652e:	4b1d      	ldr	r3, [pc, #116]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1f0      	bne.n	800651c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d03a      	beq.n	80065bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d019      	beq.n	8006582 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800654e:	4b17      	ldr	r3, [pc, #92]	@ (80065ac <HAL_RCC_OscConfig+0x274>)
 8006550:	2201      	movs	r2, #1
 8006552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006554:	f7fc fd86 	bl	8003064 <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800655c:	f7fc fd82 	bl	8003064 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e160      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800656e:	4b0d      	ldr	r3, [pc, #52]	@ (80065a4 <HAL_RCC_OscConfig+0x26c>)
 8006570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800657a:	2001      	movs	r0, #1
 800657c:	f000 faea 	bl	8006b54 <RCC_Delay>
 8006580:	e01c      	b.n	80065bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006582:	4b0a      	ldr	r3, [pc, #40]	@ (80065ac <HAL_RCC_OscConfig+0x274>)
 8006584:	2200      	movs	r2, #0
 8006586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006588:	f7fc fd6c 	bl	8003064 <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800658e:	e00f      	b.n	80065b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006590:	f7fc fd68 	bl	8003064 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d908      	bls.n	80065b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e146      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
 80065a2:	bf00      	nop
 80065a4:	40021000 	.word	0x40021000
 80065a8:	42420000 	.word	0x42420000
 80065ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b0:	4b92      	ldr	r3, [pc, #584]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e9      	bne.n	8006590 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80a6 	beq.w	8006716 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ca:	2300      	movs	r3, #0
 80065cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ce:	4b8b      	ldr	r3, [pc, #556]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10d      	bne.n	80065f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065da:	4b88      	ldr	r3, [pc, #544]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	4a87      	ldr	r2, [pc, #540]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 80065e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065e4:	61d3      	str	r3, [r2, #28]
 80065e6:	4b85      	ldr	r3, [pc, #532]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ee:	60bb      	str	r3, [r7, #8]
 80065f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065f2:	2301      	movs	r3, #1
 80065f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f6:	4b82      	ldr	r3, [pc, #520]	@ (8006800 <HAL_RCC_OscConfig+0x4c8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d118      	bne.n	8006634 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006602:	4b7f      	ldr	r3, [pc, #508]	@ (8006800 <HAL_RCC_OscConfig+0x4c8>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a7e      	ldr	r2, [pc, #504]	@ (8006800 <HAL_RCC_OscConfig+0x4c8>)
 8006608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800660c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800660e:	f7fc fd29 	bl	8003064 <HAL_GetTick>
 8006612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006616:	f7fc fd25 	bl	8003064 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b64      	cmp	r3, #100	@ 0x64
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e103      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006628:	4b75      	ldr	r3, [pc, #468]	@ (8006800 <HAL_RCC_OscConfig+0x4c8>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f0      	beq.n	8006616 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d106      	bne.n	800664a <HAL_RCC_OscConfig+0x312>
 800663c:	4b6f      	ldr	r3, [pc, #444]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	4a6e      	ldr	r2, [pc, #440]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	6213      	str	r3, [r2, #32]
 8006648:	e02d      	b.n	80066a6 <HAL_RCC_OscConfig+0x36e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10c      	bne.n	800666c <HAL_RCC_OscConfig+0x334>
 8006652:	4b6a      	ldr	r3, [pc, #424]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	4a69      	ldr	r2, [pc, #420]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006658:	f023 0301 	bic.w	r3, r3, #1
 800665c:	6213      	str	r3, [r2, #32]
 800665e:	4b67      	ldr	r3, [pc, #412]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	4a66      	ldr	r2, [pc, #408]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006664:	f023 0304 	bic.w	r3, r3, #4
 8006668:	6213      	str	r3, [r2, #32]
 800666a:	e01c      	b.n	80066a6 <HAL_RCC_OscConfig+0x36e>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2b05      	cmp	r3, #5
 8006672:	d10c      	bne.n	800668e <HAL_RCC_OscConfig+0x356>
 8006674:	4b61      	ldr	r3, [pc, #388]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	4a60      	ldr	r2, [pc, #384]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 800667a:	f043 0304 	orr.w	r3, r3, #4
 800667e:	6213      	str	r3, [r2, #32]
 8006680:	4b5e      	ldr	r3, [pc, #376]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	4a5d      	ldr	r2, [pc, #372]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	6213      	str	r3, [r2, #32]
 800668c:	e00b      	b.n	80066a6 <HAL_RCC_OscConfig+0x36e>
 800668e:	4b5b      	ldr	r3, [pc, #364]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	4a5a      	ldr	r2, [pc, #360]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006694:	f023 0301 	bic.w	r3, r3, #1
 8006698:	6213      	str	r3, [r2, #32]
 800669a:	4b58      	ldr	r3, [pc, #352]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	4a57      	ldr	r2, [pc, #348]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 80066a0:	f023 0304 	bic.w	r3, r3, #4
 80066a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d015      	beq.n	80066da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ae:	f7fc fcd9 	bl	8003064 <HAL_GetTick>
 80066b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b4:	e00a      	b.n	80066cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b6:	f7fc fcd5 	bl	8003064 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e0b1      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066cc:	4b4b      	ldr	r3, [pc, #300]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0ee      	beq.n	80066b6 <HAL_RCC_OscConfig+0x37e>
 80066d8:	e014      	b.n	8006704 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066da:	f7fc fcc3 	bl	8003064 <HAL_GetTick>
 80066de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e0:	e00a      	b.n	80066f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e2:	f7fc fcbf 	bl	8003064 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e09b      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066f8:	4b40      	ldr	r3, [pc, #256]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1ee      	bne.n	80066e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006704:	7dfb      	ldrb	r3, [r7, #23]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d105      	bne.n	8006716 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800670a:	4b3c      	ldr	r3, [pc, #240]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 800670c:	69db      	ldr	r3, [r3, #28]
 800670e:	4a3b      	ldr	r2, [pc, #236]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006710:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006714:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 8087 	beq.w	800682e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006720:	4b36      	ldr	r3, [pc, #216]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f003 030c 	and.w	r3, r3, #12
 8006728:	2b08      	cmp	r3, #8
 800672a:	d061      	beq.n	80067f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	2b02      	cmp	r3, #2
 8006732:	d146      	bne.n	80067c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006734:	4b33      	ldr	r3, [pc, #204]	@ (8006804 <HAL_RCC_OscConfig+0x4cc>)
 8006736:	2200      	movs	r2, #0
 8006738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800673a:	f7fc fc93 	bl	8003064 <HAL_GetTick>
 800673e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006740:	e008      	b.n	8006754 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006742:	f7fc fc8f 	bl	8003064 <HAL_GetTick>
 8006746:	4602      	mov	r2, r0
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	2b02      	cmp	r3, #2
 800674e:	d901      	bls.n	8006754 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e06d      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006754:	4b29      	ldr	r3, [pc, #164]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1f0      	bne.n	8006742 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006768:	d108      	bne.n	800677c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800676a:	4b24      	ldr	r3, [pc, #144]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	4921      	ldr	r1, [pc, #132]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006778:	4313      	orrs	r3, r2
 800677a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800677c:	4b1f      	ldr	r3, [pc, #124]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a19      	ldr	r1, [r3, #32]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678c:	430b      	orrs	r3, r1
 800678e:	491b      	ldr	r1, [pc, #108]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 8006790:	4313      	orrs	r3, r2
 8006792:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006794:	4b1b      	ldr	r3, [pc, #108]	@ (8006804 <HAL_RCC_OscConfig+0x4cc>)
 8006796:	2201      	movs	r2, #1
 8006798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679a:	f7fc fc63 	bl	8003064 <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067a2:	f7fc fc5f 	bl	8003064 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e03d      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067b4:	4b11      	ldr	r3, [pc, #68]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0f0      	beq.n	80067a2 <HAL_RCC_OscConfig+0x46a>
 80067c0:	e035      	b.n	800682e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067c2:	4b10      	ldr	r3, [pc, #64]	@ (8006804 <HAL_RCC_OscConfig+0x4cc>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c8:	f7fc fc4c 	bl	8003064 <HAL_GetTick>
 80067cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067ce:	e008      	b.n	80067e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067d0:	f7fc fc48 	bl	8003064 <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e026      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067e2:	4b06      	ldr	r3, [pc, #24]	@ (80067fc <HAL_RCC_OscConfig+0x4c4>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1f0      	bne.n	80067d0 <HAL_RCC_OscConfig+0x498>
 80067ee:	e01e      	b.n	800682e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d107      	bne.n	8006808 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e019      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
 80067fc:	40021000 	.word	0x40021000
 8006800:	40007000 	.word	0x40007000
 8006804:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006808:	4b0b      	ldr	r3, [pc, #44]	@ (8006838 <HAL_RCC_OscConfig+0x500>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	429a      	cmp	r2, r3
 800681a:	d106      	bne.n	800682a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006826:	429a      	cmp	r2, r3
 8006828:	d001      	beq.n	800682e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e000      	b.n	8006830 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	40021000 	.word	0x40021000

0800683c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0d0      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006850:	4b6a      	ldr	r3, [pc, #424]	@ (80069fc <HAL_RCC_ClockConfig+0x1c0>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d910      	bls.n	8006880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685e:	4b67      	ldr	r3, [pc, #412]	@ (80069fc <HAL_RCC_ClockConfig+0x1c0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f023 0207 	bic.w	r2, r3, #7
 8006866:	4965      	ldr	r1, [pc, #404]	@ (80069fc <HAL_RCC_ClockConfig+0x1c0>)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	4313      	orrs	r3, r2
 800686c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800686e:	4b63      	ldr	r3, [pc, #396]	@ (80069fc <HAL_RCC_ClockConfig+0x1c0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	429a      	cmp	r2, r3
 800687a:	d001      	beq.n	8006880 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e0b8      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d020      	beq.n	80068ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006898:	4b59      	ldr	r3, [pc, #356]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	4a58      	ldr	r2, [pc, #352]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 800689e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80068a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0308 	and.w	r3, r3, #8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068b0:	4b53      	ldr	r3, [pc, #332]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	4a52      	ldr	r2, [pc, #328]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 80068b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80068ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068bc:	4b50      	ldr	r3, [pc, #320]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	494d      	ldr	r1, [pc, #308]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d040      	beq.n	800695c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d107      	bne.n	80068f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e2:	4b47      	ldr	r3, [pc, #284]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d115      	bne.n	800691a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e07f      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d107      	bne.n	800690a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068fa:	4b41      	ldr	r3, [pc, #260]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d109      	bne.n	800691a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e073      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800690a:	4b3d      	ldr	r3, [pc, #244]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e06b      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800691a:	4b39      	ldr	r3, [pc, #228]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f023 0203 	bic.w	r2, r3, #3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	4936      	ldr	r1, [pc, #216]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 8006928:	4313      	orrs	r3, r2
 800692a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800692c:	f7fc fb9a 	bl	8003064 <HAL_GetTick>
 8006930:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006932:	e00a      	b.n	800694a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006934:	f7fc fb96 	bl	8003064 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006942:	4293      	cmp	r3, r2
 8006944:	d901      	bls.n	800694a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e053      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800694a:	4b2d      	ldr	r3, [pc, #180]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f003 020c 	and.w	r2, r3, #12
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	429a      	cmp	r2, r3
 800695a:	d1eb      	bne.n	8006934 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800695c:	4b27      	ldr	r3, [pc, #156]	@ (80069fc <HAL_RCC_ClockConfig+0x1c0>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0307 	and.w	r3, r3, #7
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d210      	bcs.n	800698c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696a:	4b24      	ldr	r3, [pc, #144]	@ (80069fc <HAL_RCC_ClockConfig+0x1c0>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f023 0207 	bic.w	r2, r3, #7
 8006972:	4922      	ldr	r1, [pc, #136]	@ (80069fc <HAL_RCC_ClockConfig+0x1c0>)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	4313      	orrs	r3, r2
 8006978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800697a:	4b20      	ldr	r3, [pc, #128]	@ (80069fc <HAL_RCC_ClockConfig+0x1c0>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d001      	beq.n	800698c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e032      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006998:	4b19      	ldr	r3, [pc, #100]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	4916      	ldr	r1, [pc, #88]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d009      	beq.n	80069ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80069b6:	4b12      	ldr	r3, [pc, #72]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	490e      	ldr	r1, [pc, #56]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069ca:	f000 f821 	bl	8006a10 <HAL_RCC_GetSysClockFreq>
 80069ce:	4602      	mov	r2, r0
 80069d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a00 <HAL_RCC_ClockConfig+0x1c4>)
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	091b      	lsrs	r3, r3, #4
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	490a      	ldr	r1, [pc, #40]	@ (8006a04 <HAL_RCC_ClockConfig+0x1c8>)
 80069dc:	5ccb      	ldrb	r3, [r1, r3]
 80069de:	fa22 f303 	lsr.w	r3, r2, r3
 80069e2:	4a09      	ldr	r2, [pc, #36]	@ (8006a08 <HAL_RCC_ClockConfig+0x1cc>)
 80069e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069e6:	4b09      	ldr	r3, [pc, #36]	@ (8006a0c <HAL_RCC_ClockConfig+0x1d0>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fc f96a 	bl	8002cc4 <HAL_InitTick>

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	40022000 	.word	0x40022000
 8006a00:	40021000 	.word	0x40021000
 8006a04:	0800c3bc 	.word	0x0800c3bc
 8006a08:	20000000 	.word	0x20000000
 8006a0c:	20000004 	.word	0x20000004

08006a10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60bb      	str	r3, [r7, #8]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	2300      	movs	r3, #0
 8006a24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f003 030c 	and.w	r3, r3, #12
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d002      	beq.n	8006a40 <HAL_RCC_GetSysClockFreq+0x30>
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	d003      	beq.n	8006a46 <HAL_RCC_GetSysClockFreq+0x36>
 8006a3e:	e027      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a40:	4b19      	ldr	r3, [pc, #100]	@ (8006aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a42:	613b      	str	r3, [r7, #16]
      break;
 8006a44:	e027      	b.n	8006a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	0c9b      	lsrs	r3, r3, #18
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	4a17      	ldr	r2, [pc, #92]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x9c>)
 8006a50:	5cd3      	ldrb	r3, [r2, r3]
 8006a52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d010      	beq.n	8006a80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006a5e:	4b11      	ldr	r3, [pc, #68]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x94>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	0c5b      	lsrs	r3, r3, #17
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	4a11      	ldr	r2, [pc, #68]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006a6a:	5cd3      	ldrb	r3, [r2, r3]
 8006a6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a0d      	ldr	r2, [pc, #52]	@ (8006aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a72:	fb03 f202 	mul.w	r2, r3, r2
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7c:	617b      	str	r3, [r7, #20]
 8006a7e:	e004      	b.n	8006a8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a0c      	ldr	r2, [pc, #48]	@ (8006ab4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006a84:	fb02 f303 	mul.w	r3, r2, r3
 8006a88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	613b      	str	r3, [r7, #16]
      break;
 8006a8e:	e002      	b.n	8006a96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a90:	4b05      	ldr	r3, [pc, #20]	@ (8006aa8 <HAL_RCC_GetSysClockFreq+0x98>)
 8006a92:	613b      	str	r3, [r7, #16]
      break;
 8006a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a96:	693b      	ldr	r3, [r7, #16]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc80      	pop	{r7}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40021000 	.word	0x40021000
 8006aa8:	007a1200 	.word	0x007a1200
 8006aac:	0800c3d4 	.word	0x0800c3d4
 8006ab0:	0800c3e4 	.word	0x0800c3e4
 8006ab4:	003d0900 	.word	0x003d0900

08006ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006abc:	4b02      	ldr	r3, [pc, #8]	@ (8006ac8 <HAL_RCC_GetHCLKFreq+0x10>)
 8006abe:	681b      	ldr	r3, [r3, #0]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr
 8006ac8:	20000000 	.word	0x20000000

08006acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ad0:	f7ff fff2 	bl	8006ab8 <HAL_RCC_GetHCLKFreq>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	4b05      	ldr	r3, [pc, #20]	@ (8006aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	0a1b      	lsrs	r3, r3, #8
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	4903      	ldr	r1, [pc, #12]	@ (8006af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ae2:	5ccb      	ldrb	r3, [r1, r3]
 8006ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40021000 	.word	0x40021000
 8006af0:	0800c3cc 	.word	0x0800c3cc

08006af4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	220f      	movs	r2, #15
 8006b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b04:	4b11      	ldr	r3, [pc, #68]	@ (8006b4c <HAL_RCC_GetClockConfig+0x58>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f003 0203 	and.w	r2, r3, #3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b10:	4b0e      	ldr	r3, [pc, #56]	@ (8006b4c <HAL_RCC_GetClockConfig+0x58>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b4c <HAL_RCC_GetClockConfig+0x58>)
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006b28:	4b08      	ldr	r3, [pc, #32]	@ (8006b4c <HAL_RCC_GetClockConfig+0x58>)
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	08db      	lsrs	r3, r3, #3
 8006b2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b36:	4b06      	ldr	r3, [pc, #24]	@ (8006b50 <HAL_RCC_GetClockConfig+0x5c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0207 	and.w	r2, r3, #7
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006b42:	bf00      	nop
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr
 8006b4c:	40021000 	.word	0x40021000
 8006b50:	40022000 	.word	0x40022000

08006b54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b88 <RCC_Delay+0x34>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a0a      	ldr	r2, [pc, #40]	@ (8006b8c <RCC_Delay+0x38>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	0a5b      	lsrs	r3, r3, #9
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	fb02 f303 	mul.w	r3, r2, r3
 8006b6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b70:	bf00      	nop
  }
  while (Delay --);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	1e5a      	subs	r2, r3, #1
 8006b76:	60fa      	str	r2, [r7, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1f9      	bne.n	8006b70 <RCC_Delay+0x1c>
}
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr
 8006b88:	20000000 	.word	0x20000000
 8006b8c:	10624dd3 	.word	0x10624dd3

08006b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e041      	b.n	8006c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d106      	bne.n	8006bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f839 	bl	8006c2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3304      	adds	r3, #4
 8006bcc:	4619      	mov	r1, r3
 8006bce:	4610      	mov	r0, r2
 8006bd0:	f000 fd84 	bl	80076dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr

08006c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d001      	beq.n	8006c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e03a      	b.n	8006cce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f042 0201 	orr.w	r2, r2, #1
 8006c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a18      	ldr	r2, [pc, #96]	@ (8006cd8 <HAL_TIM_Base_Start_IT+0x98>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00e      	beq.n	8006c98 <HAL_TIM_Base_Start_IT+0x58>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c82:	d009      	beq.n	8006c98 <HAL_TIM_Base_Start_IT+0x58>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a14      	ldr	r2, [pc, #80]	@ (8006cdc <HAL_TIM_Base_Start_IT+0x9c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d004      	beq.n	8006c98 <HAL_TIM_Base_Start_IT+0x58>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a13      	ldr	r2, [pc, #76]	@ (8006ce0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d111      	bne.n	8006cbc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b06      	cmp	r3, #6
 8006ca8:	d010      	beq.n	8006ccc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f042 0201 	orr.w	r2, r2, #1
 8006cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cba:	e007      	b.n	8006ccc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bc80      	pop	{r7}
 8006cd6:	4770      	bx	lr
 8006cd8:	40012c00 	.word	0x40012c00
 8006cdc:	40000400 	.word	0x40000400
 8006ce0:	40000800 	.word	0x40000800

08006ce4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e041      	b.n	8006d7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fb ff26 	bl	8002b5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f000 fcda 	bl	80076dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d109      	bne.n	8006da8 <HAL_TIM_PWM_Start+0x24>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	bf14      	ite	ne
 8006da0:	2301      	movne	r3, #1
 8006da2:	2300      	moveq	r3, #0
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	e022      	b.n	8006dee <HAL_TIM_PWM_Start+0x6a>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d109      	bne.n	8006dc2 <HAL_TIM_PWM_Start+0x3e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	bf14      	ite	ne
 8006dba:	2301      	movne	r3, #1
 8006dbc:	2300      	moveq	r3, #0
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	e015      	b.n	8006dee <HAL_TIM_PWM_Start+0x6a>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d109      	bne.n	8006ddc <HAL_TIM_PWM_Start+0x58>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	bf14      	ite	ne
 8006dd4:	2301      	movne	r3, #1
 8006dd6:	2300      	moveq	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	e008      	b.n	8006dee <HAL_TIM_PWM_Start+0x6a>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	bf14      	ite	ne
 8006de8:	2301      	movne	r3, #1
 8006dea:	2300      	moveq	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e05e      	b.n	8006eb4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <HAL_TIM_PWM_Start+0x82>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e04:	e013      	b.n	8006e2e <HAL_TIM_PWM_Start+0xaa>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b04      	cmp	r3, #4
 8006e0a:	d104      	bne.n	8006e16 <HAL_TIM_PWM_Start+0x92>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e14:	e00b      	b.n	8006e2e <HAL_TIM_PWM_Start+0xaa>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b08      	cmp	r3, #8
 8006e1a:	d104      	bne.n	8006e26 <HAL_TIM_PWM_Start+0xa2>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e24:	e003      	b.n	8006e2e <HAL_TIM_PWM_Start+0xaa>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2202      	movs	r2, #2
 8006e2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2201      	movs	r2, #1
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 ff53 	bl	8007ce2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1e      	ldr	r2, [pc, #120]	@ (8006ebc <HAL_TIM_PWM_Start+0x138>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d107      	bne.n	8006e56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a18      	ldr	r2, [pc, #96]	@ (8006ebc <HAL_TIM_PWM_Start+0x138>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d00e      	beq.n	8006e7e <HAL_TIM_PWM_Start+0xfa>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e68:	d009      	beq.n	8006e7e <HAL_TIM_PWM_Start+0xfa>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a14      	ldr	r2, [pc, #80]	@ (8006ec0 <HAL_TIM_PWM_Start+0x13c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d004      	beq.n	8006e7e <HAL_TIM_PWM_Start+0xfa>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a12      	ldr	r2, [pc, #72]	@ (8006ec4 <HAL_TIM_PWM_Start+0x140>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d111      	bne.n	8006ea2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b06      	cmp	r3, #6
 8006e8e:	d010      	beq.n	8006eb2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea0:	e007      	b.n	8006eb2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f042 0201 	orr.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40012c00 	.word	0x40012c00
 8006ec0:	40000400 	.word	0x40000400
 8006ec4:	40000800 	.word	0x40000800

08006ec8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e041      	b.n	8006f5e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7fb fe58 	bl	8002ba4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f000 fbe8 	bl	80076dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d104      	bne.n	8006f86 <HAL_TIM_IC_Start_IT+0x1e>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	e013      	b.n	8006fae <HAL_TIM_IC_Start_IT+0x46>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d104      	bne.n	8006f96 <HAL_TIM_IC_Start_IT+0x2e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	e00b      	b.n	8006fae <HAL_TIM_IC_Start_IT+0x46>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d104      	bne.n	8006fa6 <HAL_TIM_IC_Start_IT+0x3e>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	e003      	b.n	8006fae <HAL_TIM_IC_Start_IT+0x46>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d104      	bne.n	8006fc0 <HAL_TIM_IC_Start_IT+0x58>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	e013      	b.n	8006fe8 <HAL_TIM_IC_Start_IT+0x80>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d104      	bne.n	8006fd0 <HAL_TIM_IC_Start_IT+0x68>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	e00b      	b.n	8006fe8 <HAL_TIM_IC_Start_IT+0x80>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	d104      	bne.n	8006fe0 <HAL_TIM_IC_Start_IT+0x78>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	e003      	b.n	8006fe8 <HAL_TIM_IC_Start_IT+0x80>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fea:	7bbb      	ldrb	r3, [r7, #14]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d102      	bne.n	8006ff6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ff0:	7b7b      	ldrb	r3, [r7, #13]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d001      	beq.n	8006ffa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e0b8      	b.n	800716c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_IC_Start_IT+0xa2>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007008:	e013      	b.n	8007032 <HAL_TIM_IC_Start_IT+0xca>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b04      	cmp	r3, #4
 800700e:	d104      	bne.n	800701a <HAL_TIM_IC_Start_IT+0xb2>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007018:	e00b      	b.n	8007032 <HAL_TIM_IC_Start_IT+0xca>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d104      	bne.n	800702a <HAL_TIM_IC_Start_IT+0xc2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007028:	e003      	b.n	8007032 <HAL_TIM_IC_Start_IT+0xca>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2202      	movs	r2, #2
 800702e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d104      	bne.n	8007042 <HAL_TIM_IC_Start_IT+0xda>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007040:	e013      	b.n	800706a <HAL_TIM_IC_Start_IT+0x102>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	2b04      	cmp	r3, #4
 8007046:	d104      	bne.n	8007052 <HAL_TIM_IC_Start_IT+0xea>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007050:	e00b      	b.n	800706a <HAL_TIM_IC_Start_IT+0x102>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b08      	cmp	r3, #8
 8007056:	d104      	bne.n	8007062 <HAL_TIM_IC_Start_IT+0xfa>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007060:	e003      	b.n	800706a <HAL_TIM_IC_Start_IT+0x102>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b0c      	cmp	r3, #12
 800706e:	d841      	bhi.n	80070f4 <HAL_TIM_IC_Start_IT+0x18c>
 8007070:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <HAL_TIM_IC_Start_IT+0x110>)
 8007072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007076:	bf00      	nop
 8007078:	080070ad 	.word	0x080070ad
 800707c:	080070f5 	.word	0x080070f5
 8007080:	080070f5 	.word	0x080070f5
 8007084:	080070f5 	.word	0x080070f5
 8007088:	080070bf 	.word	0x080070bf
 800708c:	080070f5 	.word	0x080070f5
 8007090:	080070f5 	.word	0x080070f5
 8007094:	080070f5 	.word	0x080070f5
 8007098:	080070d1 	.word	0x080070d1
 800709c:	080070f5 	.word	0x080070f5
 80070a0:	080070f5 	.word	0x080070f5
 80070a4:	080070f5 	.word	0x080070f5
 80070a8:	080070e3 	.word	0x080070e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0202 	orr.w	r2, r2, #2
 80070ba:	60da      	str	r2, [r3, #12]
      break;
 80070bc:	e01d      	b.n	80070fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0204 	orr.w	r2, r2, #4
 80070cc:	60da      	str	r2, [r3, #12]
      break;
 80070ce:	e014      	b.n	80070fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0208 	orr.w	r2, r2, #8
 80070de:	60da      	str	r2, [r3, #12]
      break;
 80070e0:	e00b      	b.n	80070fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68da      	ldr	r2, [r3, #12]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0210 	orr.w	r2, r2, #16
 80070f0:	60da      	str	r2, [r3, #12]
      break;
 80070f2:	e002      	b.n	80070fa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	73fb      	strb	r3, [r7, #15]
      break;
 80070f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d134      	bne.n	800716a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2201      	movs	r2, #1
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	4618      	mov	r0, r3
 800710a:	f000 fdea 	bl	8007ce2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a18      	ldr	r2, [pc, #96]	@ (8007174 <HAL_TIM_IC_Start_IT+0x20c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00e      	beq.n	8007136 <HAL_TIM_IC_Start_IT+0x1ce>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007120:	d009      	beq.n	8007136 <HAL_TIM_IC_Start_IT+0x1ce>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a14      	ldr	r2, [pc, #80]	@ (8007178 <HAL_TIM_IC_Start_IT+0x210>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d004      	beq.n	8007136 <HAL_TIM_IC_Start_IT+0x1ce>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a12      	ldr	r2, [pc, #72]	@ (800717c <HAL_TIM_IC_Start_IT+0x214>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d111      	bne.n	800715a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2b06      	cmp	r3, #6
 8007146:	d010      	beq.n	800716a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0201 	orr.w	r2, r2, #1
 8007156:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007158:	e007      	b.n	800716a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f042 0201 	orr.w	r2, r2, #1
 8007168:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800716a:	7bfb      	ldrb	r3, [r7, #15]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	40012c00 	.word	0x40012c00
 8007178:	40000400 	.word	0x40000400
 800717c:	40000800 	.word	0x40000800

08007180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d020      	beq.n	80071e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f003 0302 	and.w	r3, r3, #2
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01b      	beq.n	80071e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f06f 0202 	mvn.w	r2, #2
 80071b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	f003 0303 	and.w	r3, r3, #3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fa fa9e 	bl	800170c <HAL_TIM_IC_CaptureCallback>
 80071d0:	e005      	b.n	80071de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa66 	bl	80076a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fa6c 	bl	80076b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f003 0304 	and.w	r3, r3, #4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d020      	beq.n	8007230 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01b      	beq.n	8007230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f06f 0204 	mvn.w	r2, #4
 8007200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2202      	movs	r2, #2
 8007206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7fa fa78 	bl	800170c <HAL_TIM_IC_CaptureCallback>
 800721c:	e005      	b.n	800722a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa40 	bl	80076a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fa46 	bl	80076b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d020      	beq.n	800727c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b00      	cmp	r3, #0
 8007242:	d01b      	beq.n	800727c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f06f 0208 	mvn.w	r2, #8
 800724c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2204      	movs	r2, #4
 8007252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	f003 0303 	and.w	r3, r3, #3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fa fa52 	bl	800170c <HAL_TIM_IC_CaptureCallback>
 8007268:	e005      	b.n	8007276 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa1a 	bl	80076a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fa20 	bl	80076b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	2b00      	cmp	r3, #0
 8007284:	d020      	beq.n	80072c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f003 0310 	and.w	r3, r3, #16
 800728c:	2b00      	cmp	r3, #0
 800728e:	d01b      	beq.n	80072c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f06f 0210 	mvn.w	r2, #16
 8007298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2208      	movs	r2, #8
 800729e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fa fa2c 	bl	800170c <HAL_TIM_IC_CaptureCallback>
 80072b4:	e005      	b.n	80072c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f9f4 	bl	80076a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f9fa 	bl	80076b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00c      	beq.n	80072ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d007      	beq.n	80072ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f06f 0201 	mvn.w	r2, #1
 80072e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7fa fcc0 	bl	8001c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00c      	beq.n	8007310 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d007      	beq.n	8007310 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fd75 	bl	8007dfa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00c      	beq.n	8007334 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d007      	beq.n	8007334 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800732c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f9ca 	bl	80076c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	f003 0320 	and.w	r3, r3, #32
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00c      	beq.n	8007358 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d007      	beq.n	8007358 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f06f 0220 	mvn.w	r2, #32
 8007350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fd48 	bl	8007de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007358:	bf00      	nop
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_TIM_IC_ConfigChannel+0x1e>
 800737a:	2302      	movs	r3, #2
 800737c:	e088      	b.n	8007490 <HAL_TIM_IC_ConfigChannel+0x130>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d11b      	bne.n	80073c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800739c:	f000 fb94 	bl	8007ac8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 020c 	bic.w	r2, r2, #12
 80073ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6999      	ldr	r1, [r3, #24]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	619a      	str	r2, [r3, #24]
 80073c2:	e060      	b.n	8007486 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d11c      	bne.n	8007404 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80073da:	f000 fbcf 	bl	8007b7c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	699a      	ldr	r2, [r3, #24]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80073ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6999      	ldr	r1, [r3, #24]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	021a      	lsls	r2, r3, #8
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	619a      	str	r2, [r3, #24]
 8007402:	e040      	b.n	8007486 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b08      	cmp	r3, #8
 8007408:	d11b      	bne.n	8007442 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800741a:	f000 fbeb 	bl	8007bf4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69da      	ldr	r2, [r3, #28]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 020c 	bic.w	r2, r2, #12
 800742c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69d9      	ldr	r1, [r3, #28]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	61da      	str	r2, [r3, #28]
 8007440:	e021      	b.n	8007486 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b0c      	cmp	r3, #12
 8007446:	d11c      	bne.n	8007482 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007458:	f000 fc07 	bl	8007c6a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	69da      	ldr	r2, [r3, #28]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800746a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69d9      	ldr	r1, [r3, #28]
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	021a      	lsls	r2, r3, #8
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	430a      	orrs	r2, r1
 800747e:	61da      	str	r2, [r3, #28]
 8007480:	e001      	b.n	8007486 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800748e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e0ae      	b.n	8007614 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b0c      	cmp	r3, #12
 80074c2:	f200 809f 	bhi.w	8007604 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074c6:	a201      	add	r2, pc, #4	@ (adr r2, 80074cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	08007501 	.word	0x08007501
 80074d0:	08007605 	.word	0x08007605
 80074d4:	08007605 	.word	0x08007605
 80074d8:	08007605 	.word	0x08007605
 80074dc:	08007541 	.word	0x08007541
 80074e0:	08007605 	.word	0x08007605
 80074e4:	08007605 	.word	0x08007605
 80074e8:	08007605 	.word	0x08007605
 80074ec:	08007583 	.word	0x08007583
 80074f0:	08007605 	.word	0x08007605
 80074f4:	08007605 	.word	0x08007605
 80074f8:	08007605 	.word	0x08007605
 80074fc:	080075c3 	.word	0x080075c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	4618      	mov	r0, r3
 8007508:	f000 f956 	bl	80077b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0208 	orr.w	r2, r2, #8
 800751a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0204 	bic.w	r2, r2, #4
 800752a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6999      	ldr	r1, [r3, #24]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	619a      	str	r2, [r3, #24]
      break;
 800753e:	e064      	b.n	800760a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	4618      	mov	r0, r3
 8007548:	f000 f99c 	bl	8007884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800755a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800756a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6999      	ldr	r1, [r3, #24]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	021a      	lsls	r2, r3, #8
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	619a      	str	r2, [r3, #24]
      break;
 8007580:	e043      	b.n	800760a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	4618      	mov	r0, r3
 800758a:	f000 f9e5 	bl	8007958 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69da      	ldr	r2, [r3, #28]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0208 	orr.w	r2, r2, #8
 800759c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69da      	ldr	r2, [r3, #28]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0204 	bic.w	r2, r2, #4
 80075ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69d9      	ldr	r1, [r3, #28]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	61da      	str	r2, [r3, #28]
      break;
 80075c0:	e023      	b.n	800760a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fa2f 	bl	8007a2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69da      	ldr	r2, [r3, #28]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69d9      	ldr	r1, [r3, #28]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	021a      	lsls	r2, r3, #8
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	61da      	str	r2, [r3, #28]
      break;
 8007602:	e002      	b.n	800760a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	75fb      	strb	r3, [r7, #23]
      break;
 8007608:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007612:	7dfb      	ldrb	r3, [r7, #23]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b0c      	cmp	r3, #12
 800762e:	d831      	bhi.n	8007694 <HAL_TIM_ReadCapturedValue+0x78>
 8007630:	a201      	add	r2, pc, #4	@ (adr r2, 8007638 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007636:	bf00      	nop
 8007638:	0800766d 	.word	0x0800766d
 800763c:	08007695 	.word	0x08007695
 8007640:	08007695 	.word	0x08007695
 8007644:	08007695 	.word	0x08007695
 8007648:	08007677 	.word	0x08007677
 800764c:	08007695 	.word	0x08007695
 8007650:	08007695 	.word	0x08007695
 8007654:	08007695 	.word	0x08007695
 8007658:	08007681 	.word	0x08007681
 800765c:	08007695 	.word	0x08007695
 8007660:	08007695 	.word	0x08007695
 8007664:	08007695 	.word	0x08007695
 8007668:	0800768b 	.word	0x0800768b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007672:	60fb      	str	r3, [r7, #12]

      break;
 8007674:	e00f      	b.n	8007696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767c:	60fb      	str	r3, [r7, #12]

      break;
 800767e:	e00a      	b.n	8007696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007686:	60fb      	str	r3, [r7, #12]

      break;
 8007688:	e005      	b.n	8007696 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007690:	60fb      	str	r3, [r7, #12]

      break;
 8007692:	e000      	b.n	8007696 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007694:	bf00      	nop
  }

  return tmpreg;
 8007696:	68fb      	ldr	r3, [r7, #12]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	bc80      	pop	{r7}
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop

080076a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bc80      	pop	{r7}
 80076b4:	4770      	bx	lr

080076b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bc80      	pop	{r7}
 80076c6:	4770      	bx	lr

080076c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bc80      	pop	{r7}
 80076d8:	4770      	bx	lr
	...

080076dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a2f      	ldr	r2, [pc, #188]	@ (80077ac <TIM_Base_SetConfig+0xd0>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00b      	beq.n	800770c <TIM_Base_SetConfig+0x30>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076fa:	d007      	beq.n	800770c <TIM_Base_SetConfig+0x30>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a2c      	ldr	r2, [pc, #176]	@ (80077b0 <TIM_Base_SetConfig+0xd4>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d003      	beq.n	800770c <TIM_Base_SetConfig+0x30>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a2b      	ldr	r2, [pc, #172]	@ (80077b4 <TIM_Base_SetConfig+0xd8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d108      	bne.n	800771e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a22      	ldr	r2, [pc, #136]	@ (80077ac <TIM_Base_SetConfig+0xd0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d00b      	beq.n	800773e <TIM_Base_SetConfig+0x62>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800772c:	d007      	beq.n	800773e <TIM_Base_SetConfig+0x62>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a1f      	ldr	r2, [pc, #124]	@ (80077b0 <TIM_Base_SetConfig+0xd4>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d003      	beq.n	800773e <TIM_Base_SetConfig+0x62>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a1e      	ldr	r2, [pc, #120]	@ (80077b4 <TIM_Base_SetConfig+0xd8>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d108      	bne.n	8007750 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	4313      	orrs	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	4313      	orrs	r3, r2
 800775c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	689a      	ldr	r2, [r3, #8]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a0d      	ldr	r2, [pc, #52]	@ (80077ac <TIM_Base_SetConfig+0xd0>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d103      	bne.n	8007784 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	691a      	ldr	r2, [r3, #16]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	d005      	beq.n	80077a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f023 0201 	bic.w	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	611a      	str	r2, [r3, #16]
  }
}
 80077a2:	bf00      	nop
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bc80      	pop	{r7}
 80077aa:	4770      	bx	lr
 80077ac:	40012c00 	.word	0x40012c00
 80077b0:	40000400 	.word	0x40000400
 80077b4:	40000800 	.word	0x40000800

080077b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	f023 0201 	bic.w	r2, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0303 	bic.w	r3, r3, #3
 80077ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f023 0302 	bic.w	r3, r3, #2
 8007800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	4313      	orrs	r3, r2
 800780a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a1c      	ldr	r2, [pc, #112]	@ (8007880 <TIM_OC1_SetConfig+0xc8>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d10c      	bne.n	800782e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f023 0308 	bic.w	r3, r3, #8
 800781a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	4313      	orrs	r3, r2
 8007824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f023 0304 	bic.w	r3, r3, #4
 800782c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a13      	ldr	r2, [pc, #76]	@ (8007880 <TIM_OC1_SetConfig+0xc8>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d111      	bne.n	800785a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800783c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007844:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	4313      	orrs	r3, r2
 800784e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	4313      	orrs	r3, r2
 8007858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	621a      	str	r2, [r3, #32]
}
 8007874:	bf00      	nop
 8007876:	371c      	adds	r7, #28
 8007878:	46bd      	mov	sp, r7
 800787a:	bc80      	pop	{r7}
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	40012c00 	.word	0x40012c00

08007884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	f023 0210 	bic.w	r2, r3, #16
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	021b      	lsls	r3, r3, #8
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f023 0320 	bic.w	r3, r3, #32
 80078ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	011b      	lsls	r3, r3, #4
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	4313      	orrs	r3, r2
 80078da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a1d      	ldr	r2, [pc, #116]	@ (8007954 <TIM_OC2_SetConfig+0xd0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d10d      	bne.n	8007900 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a14      	ldr	r2, [pc, #80]	@ (8007954 <TIM_OC2_SetConfig+0xd0>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d113      	bne.n	8007930 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800790e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007916:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	4313      	orrs	r3, r2
 8007922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	621a      	str	r2, [r3, #32]
}
 800794a:	bf00      	nop
 800794c:	371c      	adds	r7, #28
 800794e:	46bd      	mov	sp, r7
 8007950:	bc80      	pop	{r7}
 8007952:	4770      	bx	lr
 8007954:	40012c00 	.word	0x40012c00

08007958 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 0303 	bic.w	r3, r3, #3
 800798e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4313      	orrs	r3, r2
 8007998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a28 <TIM_OC3_SetConfig+0xd0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d10d      	bne.n	80079d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	021b      	lsls	r3, r3, #8
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80079d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a14      	ldr	r2, [pc, #80]	@ (8007a28 <TIM_OC3_SetConfig+0xd0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d113      	bne.n	8007a02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80079e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	621a      	str	r2, [r3, #32]
}
 8007a1c:	bf00      	nop
 8007a1e:	371c      	adds	r7, #28
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bc80      	pop	{r7}
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	40012c00 	.word	0x40012c00

08007a2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	021b      	lsls	r3, r3, #8
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	031b      	lsls	r3, r3, #12
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a0f      	ldr	r2, [pc, #60]	@ (8007ac4 <TIM_OC4_SetConfig+0x98>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d109      	bne.n	8007aa0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	019b      	lsls	r3, r3, #6
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	621a      	str	r2, [r3, #32]
}
 8007aba:	bf00      	nop
 8007abc:	371c      	adds	r7, #28
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bc80      	pop	{r7}
 8007ac2:	4770      	bx	lr
 8007ac4:	40012c00 	.word	0x40012c00

08007ac8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	607a      	str	r2, [r7, #4]
 8007ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	f023 0201 	bic.w	r2, r3, #1
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	4a1f      	ldr	r2, [pc, #124]	@ (8007b70 <TIM_TI1_SetConfig+0xa8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d00b      	beq.n	8007b0e <TIM_TI1_SetConfig+0x46>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007afc:	d007      	beq.n	8007b0e <TIM_TI1_SetConfig+0x46>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4a1c      	ldr	r2, [pc, #112]	@ (8007b74 <TIM_TI1_SetConfig+0xac>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d003      	beq.n	8007b0e <TIM_TI1_SetConfig+0x46>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4a1b      	ldr	r2, [pc, #108]	@ (8007b78 <TIM_TI1_SetConfig+0xb0>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d101      	bne.n	8007b12 <TIM_TI1_SetConfig+0x4a>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e000      	b.n	8007b14 <TIM_TI1_SetConfig+0x4c>
 8007b12:	2300      	movs	r3, #0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d008      	beq.n	8007b2a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f023 0303 	bic.w	r3, r3, #3
 8007b1e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	e003      	b.n	8007b32 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f043 0301 	orr.w	r3, r3, #1
 8007b30:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f023 030a 	bic.w	r3, r3, #10
 8007b4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f003 030a 	and.w	r3, r3, #10
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	621a      	str	r2, [r3, #32]
}
 8007b66:	bf00      	nop
 8007b68:	371c      	adds	r7, #28
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bc80      	pop	{r7}
 8007b6e:	4770      	bx	lr
 8007b70:	40012c00 	.word	0x40012c00
 8007b74:	40000400 	.word	0x40000400
 8007b78:	40000800 	.word	0x40000800

08007b7c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	f023 0210 	bic.w	r2, r3, #16
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	021b      	lsls	r3, r3, #8
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	031b      	lsls	r3, r3, #12
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007bce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	621a      	str	r2, [r3, #32]
}
 8007bea:	bf00      	nop
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bc80      	pop	{r7}
 8007bf2:	4770      	bx	lr

08007bf4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f023 0303 	bic.w	r3, r3, #3
 8007c20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c44:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	021b      	lsls	r3, r3, #8
 8007c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	621a      	str	r2, [r3, #32]
}
 8007c60:	bf00      	nop
 8007c62:	371c      	adds	r7, #28
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bc80      	pop	{r7}
 8007c68:	4770      	bx	lr

08007c6a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b087      	sub	sp, #28
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	607a      	str	r2, [r7, #4]
 8007c76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c96:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	021b      	lsls	r3, r3, #8
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ca8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	031b      	lsls	r3, r3, #12
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cbc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	031b      	lsls	r3, r3, #12
 8007cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	621a      	str	r2, [r3, #32]
}
 8007cd8:	bf00      	nop
 8007cda:	371c      	adds	r7, #28
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bc80      	pop	{r7}
 8007ce0:	4770      	bx	lr

08007ce2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b087      	sub	sp, #28
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	60f8      	str	r0, [r7, #12]
 8007cea:	60b9      	str	r1, [r7, #8]
 8007cec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f003 031f 	and.w	r3, r3, #31
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a1a      	ldr	r2, [r3, #32]
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	43db      	mvns	r3, r3
 8007d04:	401a      	ands	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a1a      	ldr	r2, [r3, #32]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f003 031f 	and.w	r3, r3, #31
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	fa01 f303 	lsl.w	r3, r1, r3
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	621a      	str	r2, [r3, #32]
}
 8007d20:	bf00      	nop
 8007d22:	371c      	adds	r7, #28
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bc80      	pop	{r7}
 8007d28:	4770      	bx	lr
	...

08007d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d101      	bne.n	8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d40:	2302      	movs	r3, #2
 8007d42:	e046      	b.n	8007dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a16      	ldr	r2, [pc, #88]	@ (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d00e      	beq.n	8007da6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d90:	d009      	beq.n	8007da6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a12      	ldr	r2, [pc, #72]	@ (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d004      	beq.n	8007da6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a10      	ldr	r2, [pc, #64]	@ (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d10c      	bne.n	8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	68ba      	ldr	r2, [r7, #8]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bc80      	pop	{r7}
 8007dda:	4770      	bx	lr
 8007ddc:	40012c00 	.word	0x40012c00
 8007de0:	40000400 	.word	0x40000400
 8007de4:	40000800 	.word	0x40000800

08007de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bc80      	pop	{r7}
 8007df8:	4770      	bx	lr

08007dfa <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bc80      	pop	{r7}
 8007e0a:	4770      	bx	lr

08007e0c <__NVIC_SetPriority>:
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	4603      	mov	r3, r0
 8007e14:	6039      	str	r1, [r7, #0]
 8007e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	db0a      	blt.n	8007e36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	490c      	ldr	r1, [pc, #48]	@ (8007e58 <__NVIC_SetPriority+0x4c>)
 8007e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e2a:	0112      	lsls	r2, r2, #4
 8007e2c:	b2d2      	uxtb	r2, r2
 8007e2e:	440b      	add	r3, r1
 8007e30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007e34:	e00a      	b.n	8007e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	4908      	ldr	r1, [pc, #32]	@ (8007e5c <__NVIC_SetPriority+0x50>)
 8007e3c:	79fb      	ldrb	r3, [r7, #7]
 8007e3e:	f003 030f 	and.w	r3, r3, #15
 8007e42:	3b04      	subs	r3, #4
 8007e44:	0112      	lsls	r2, r2, #4
 8007e46:	b2d2      	uxtb	r2, r2
 8007e48:	440b      	add	r3, r1
 8007e4a:	761a      	strb	r2, [r3, #24]
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bc80      	pop	{r7}
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	e000e100 	.word	0xe000e100
 8007e5c:	e000ed00 	.word	0xe000ed00

08007e60 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007e64:	4b05      	ldr	r3, [pc, #20]	@ (8007e7c <SysTick_Handler+0x1c>)
 8007e66:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007e68:	f002 f870 	bl	8009f4c <xTaskGetSchedulerState>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d001      	beq.n	8007e76 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007e72:	f002 ff11 	bl	800ac98 <xPortSysTickHandler>
  }
}
 8007e76:	bf00      	nop
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	e000e010 	.word	0xe000e010

08007e80 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007e84:	2100      	movs	r1, #0
 8007e86:	f06f 0004 	mvn.w	r0, #4
 8007e8a:	f7ff ffbf 	bl	8007e0c <__NVIC_SetPriority>
#endif
}
 8007e8e:	bf00      	nop
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e9a:	f3ef 8305 	mrs	r3, IPSR
 8007e9e:	603b      	str	r3, [r7, #0]
  return(result);
 8007ea0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007ea6:	f06f 0305 	mvn.w	r3, #5
 8007eaa:	607b      	str	r3, [r7, #4]
 8007eac:	e00c      	b.n	8007ec8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007eae:	4b09      	ldr	r3, [pc, #36]	@ (8007ed4 <osKernelInitialize+0x40>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d105      	bne.n	8007ec2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007eb6:	4b07      	ldr	r3, [pc, #28]	@ (8007ed4 <osKernelInitialize+0x40>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	607b      	str	r3, [r7, #4]
 8007ec0:	e002      	b.n	8007ec8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ec8:	687b      	ldr	r3, [r7, #4]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr
 8007ed4:	20000350 	.word	0x20000350

08007ed8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ede:	f3ef 8305 	mrs	r3, IPSR
 8007ee2:	603b      	str	r3, [r7, #0]
  return(result);
 8007ee4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007eea:	f06f 0305 	mvn.w	r3, #5
 8007eee:	607b      	str	r3, [r7, #4]
 8007ef0:	e010      	b.n	8007f14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8007f20 <osKernelStart+0x48>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d109      	bne.n	8007f0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007efa:	f7ff ffc1 	bl	8007e80 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007efe:	4b08      	ldr	r3, [pc, #32]	@ (8007f20 <osKernelStart+0x48>)
 8007f00:	2202      	movs	r2, #2
 8007f02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f04:	f001 fbb4 	bl	8009670 <vTaskStartScheduler>
      stat = osOK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	607b      	str	r3, [r7, #4]
 8007f0c:	e002      	b.n	8007f14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f14:	687b      	ldr	r3, [r7, #4]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000350 	.word	0x20000350

08007f24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b08e      	sub	sp, #56	@ 0x38
 8007f28:	af04      	add	r7, sp, #16
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f34:	f3ef 8305 	mrs	r3, IPSR
 8007f38:	617b      	str	r3, [r7, #20]
  return(result);
 8007f3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d17e      	bne.n	800803e <osThreadNew+0x11a>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d07b      	beq.n	800803e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007f46:	2380      	movs	r3, #128	@ 0x80
 8007f48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007f4a:	2318      	movs	r3, #24
 8007f4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007f52:	f04f 33ff 	mov.w	r3, #4294967295
 8007f56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d045      	beq.n	8007fea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <osThreadNew+0x48>
        name = attr->name;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d008      	beq.n	8007f92 <osThreadNew+0x6e>
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	2b38      	cmp	r3, #56	@ 0x38
 8007f84:	d805      	bhi.n	8007f92 <osThreadNew+0x6e>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <osThreadNew+0x72>
        return (NULL);
 8007f92:	2300      	movs	r3, #0
 8007f94:	e054      	b.n	8008040 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	089b      	lsrs	r3, r3, #2
 8007fa4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00e      	beq.n	8007fcc <osThreadNew+0xa8>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	2ba7      	cmp	r3, #167	@ 0xa7
 8007fb4:	d90a      	bls.n	8007fcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d006      	beq.n	8007fcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <osThreadNew+0xa8>
        mem = 1;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	e010      	b.n	8007fee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10c      	bne.n	8007fee <osThreadNew+0xca>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d108      	bne.n	8007fee <osThreadNew+0xca>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <osThreadNew+0xca>
          mem = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61bb      	str	r3, [r7, #24]
 8007fe8:	e001      	b.n	8007fee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d110      	bne.n	8008016 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007ffc:	9202      	str	r2, [sp, #8]
 8007ffe:	9301      	str	r3, [sp, #4]
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	6a3a      	ldr	r2, [r7, #32]
 8008008:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f001 f93c 	bl	8009288 <xTaskCreateStatic>
 8008010:	4603      	mov	r3, r0
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	e013      	b.n	800803e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d110      	bne.n	800803e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	b29a      	uxth	r2, r3
 8008020:	f107 0310 	add.w	r3, r7, #16
 8008024:	9301      	str	r3, [sp, #4]
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f001 f98a 	bl	8009348 <xTaskCreate>
 8008034:	4603      	mov	r3, r0
 8008036:	2b01      	cmp	r3, #1
 8008038:	d001      	beq.n	800803e <osThreadNew+0x11a>
            hTask = NULL;
 800803a:	2300      	movs	r3, #0
 800803c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800803e:	693b      	ldr	r3, [r7, #16]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3728      	adds	r7, #40	@ 0x28
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008050:	f3ef 8305 	mrs	r3, IPSR
 8008054:	60bb      	str	r3, [r7, #8]
  return(result);
 8008056:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <osDelay+0x1c>
    stat = osErrorISR;
 800805c:	f06f 0305 	mvn.w	r3, #5
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	e007      	b.n	8008074 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <osDelay+0x2c>
      vTaskDelay(ticks);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 fac8 	bl	8009604 <vTaskDelay>
    }
  }

  return (stat);
 8008074:	68fb      	ldr	r3, [r7, #12]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800807e:	b580      	push	{r7, lr}
 8008080:	b088      	sub	sp, #32
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008086:	2300      	movs	r3, #0
 8008088:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800808a:	f3ef 8305 	mrs	r3, IPSR
 800808e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008090:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008092:	2b00      	cmp	r3, #0
 8008094:	d174      	bne.n	8008180 <osMutexNew+0x102>
    if (attr != NULL) {
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d003      	beq.n	80080a4 <osMutexNew+0x26>
      type = attr->attr_bits;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	61bb      	str	r3, [r7, #24]
 80080a2:	e001      	b.n	80080a8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <osMutexNew+0x3a>
      rmtx = 1U;
 80080b2:	2301      	movs	r3, #1
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	e001      	b.n	80080bc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	f003 0308 	and.w	r3, r3, #8
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d15c      	bne.n	8008180 <osMutexNew+0x102>
      mem = -1;
 80080c6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ca:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d015      	beq.n	80080fe <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d006      	beq.n	80080e8 <osMutexNew+0x6a>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	2b4f      	cmp	r3, #79	@ 0x4f
 80080e0:	d902      	bls.n	80080e8 <osMutexNew+0x6a>
          mem = 1;
 80080e2:	2301      	movs	r3, #1
 80080e4:	613b      	str	r3, [r7, #16]
 80080e6:	e00c      	b.n	8008102 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d108      	bne.n	8008102 <osMutexNew+0x84>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <osMutexNew+0x84>
            mem = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	613b      	str	r3, [r7, #16]
 80080fc:	e001      	b.n	8008102 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d112      	bne.n	800812e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d007      	beq.n	800811e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	4619      	mov	r1, r3
 8008114:	2004      	movs	r0, #4
 8008116:	f000 fb1a 	bl	800874e <xQueueCreateMutexStatic>
 800811a:	61f8      	str	r0, [r7, #28]
 800811c:	e016      	b.n	800814c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	4619      	mov	r1, r3
 8008124:	2001      	movs	r0, #1
 8008126:	f000 fb12 	bl	800874e <xQueueCreateMutexStatic>
 800812a:	61f8      	str	r0, [r7, #28]
 800812c:	e00e      	b.n	800814c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10b      	bne.n	800814c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d004      	beq.n	8008144 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800813a:	2004      	movs	r0, #4
 800813c:	f000 faef 	bl	800871e <xQueueCreateMutex>
 8008140:	61f8      	str	r0, [r7, #28]
 8008142:	e003      	b.n	800814c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008144:	2001      	movs	r0, #1
 8008146:	f000 faea 	bl	800871e <xQueueCreateMutex>
 800814a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00c      	beq.n	800816c <osMutexNew+0xee>
        if (attr != NULL) {
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <osMutexNew+0xe2>
          name = attr->name;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	60fb      	str	r3, [r7, #12]
 800815e:	e001      	b.n	8008164 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008160:	2300      	movs	r3, #0
 8008162:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008164:	68f9      	ldr	r1, [r7, #12]
 8008166:	69f8      	ldr	r0, [r7, #28]
 8008168:	f001 f832 	bl	80091d0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d006      	beq.n	8008180 <osMutexNew+0x102>
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	f043 0301 	orr.w	r3, r3, #1
 800817e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008180:	69fb      	ldr	r3, [r7, #28]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3720      	adds	r7, #32
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800818a:	b580      	push	{r7, lr}
 800818c:	b086      	sub	sp, #24
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f023 0301 	bic.w	r3, r3, #1
 800819a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081a8:	f3ef 8305 	mrs	r3, IPSR
 80081ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80081ae:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80081b4:	f06f 0305 	mvn.w	r3, #5
 80081b8:	617b      	str	r3, [r7, #20]
 80081ba:	e02c      	b.n	8008216 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d103      	bne.n	80081ca <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80081c2:	f06f 0303 	mvn.w	r3, #3
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	e025      	b.n	8008216 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d011      	beq.n	80081f4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80081d0:	6839      	ldr	r1, [r7, #0]
 80081d2:	6938      	ldr	r0, [r7, #16]
 80081d4:	f000 fb0b 	bl	80087ee <xQueueTakeMutexRecursive>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d01b      	beq.n	8008216 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d003      	beq.n	80081ec <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80081e4:	f06f 0301 	mvn.w	r3, #1
 80081e8:	617b      	str	r3, [r7, #20]
 80081ea:	e014      	b.n	8008216 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80081ec:	f06f 0302 	mvn.w	r3, #2
 80081f0:	617b      	str	r3, [r7, #20]
 80081f2:	e010      	b.n	8008216 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80081f4:	6839      	ldr	r1, [r7, #0]
 80081f6:	6938      	ldr	r0, [r7, #16]
 80081f8:	f000 fdb2 	bl	8008d60 <xQueueSemaphoreTake>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d009      	beq.n	8008216 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008208:	f06f 0301 	mvn.w	r3, #1
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	e002      	b.n	8008216 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008210:	f06f 0302 	mvn.w	r3, #2
 8008214:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008216:	697b      	ldr	r3, [r7, #20]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f023 0301 	bic.w	r3, r3, #1
 800822e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800823c:	f3ef 8305 	mrs	r3, IPSR
 8008240:	60bb      	str	r3, [r7, #8]
  return(result);
 8008242:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008244:	2b00      	cmp	r3, #0
 8008246:	d003      	beq.n	8008250 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008248:	f06f 0305 	mvn.w	r3, #5
 800824c:	617b      	str	r3, [r7, #20]
 800824e:	e01f      	b.n	8008290 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d103      	bne.n	800825e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008256:	f06f 0303 	mvn.w	r3, #3
 800825a:	617b      	str	r3, [r7, #20]
 800825c:	e018      	b.n	8008290 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d009      	beq.n	8008278 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008264:	6938      	ldr	r0, [r7, #16]
 8008266:	f000 fa8d 	bl	8008784 <xQueueGiveMutexRecursive>
 800826a:	4603      	mov	r3, r0
 800826c:	2b01      	cmp	r3, #1
 800826e:	d00f      	beq.n	8008290 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008270:	f06f 0302 	mvn.w	r3, #2
 8008274:	617b      	str	r3, [r7, #20]
 8008276:	e00b      	b.n	8008290 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008278:	2300      	movs	r3, #0
 800827a:	2200      	movs	r2, #0
 800827c:	2100      	movs	r1, #0
 800827e:	6938      	ldr	r0, [r7, #16]
 8008280:	f000 faec 	bl	800885c <xQueueGenericSend>
 8008284:	4603      	mov	r3, r0
 8008286:	2b01      	cmp	r3, #1
 8008288:	d002      	beq.n	8008290 <osMutexRelease+0x70>
        stat = osErrorResource;
 800828a:	f06f 0302 	mvn.w	r3, #2
 800828e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008290:	697b      	ldr	r3, [r7, #20]
}
 8008292:	4618      	mov	r0, r3
 8008294:	3718      	adds	r7, #24
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
	...

0800829c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4a06      	ldr	r2, [pc, #24]	@ (80082c4 <vApplicationGetIdleTaskMemory+0x28>)
 80082ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	4a05      	ldr	r2, [pc, #20]	@ (80082c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80082b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2280      	movs	r2, #128	@ 0x80
 80082b8:	601a      	str	r2, [r3, #0]
}
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc80      	pop	{r7}
 80082c2:	4770      	bx	lr
 80082c4:	20000354 	.word	0x20000354
 80082c8:	200003fc 	.word	0x200003fc

080082cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4a07      	ldr	r2, [pc, #28]	@ (80082f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80082dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	4a06      	ldr	r2, [pc, #24]	@ (80082fc <vApplicationGetTimerTaskMemory+0x30>)
 80082e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082ea:	601a      	str	r2, [r3, #0]
}
 80082ec:	bf00      	nop
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bc80      	pop	{r7}
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	200005fc 	.word	0x200005fc
 80082fc:	200006a4 	.word	0x200006a4

08008300 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f103 0208 	add.w	r2, r3, #8
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f04f 32ff 	mov.w	r2, #4294967295
 8008318:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f103 0208 	add.w	r2, r3, #8
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f103 0208 	add.w	r2, r3, #8
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	bc80      	pop	{r7}
 800833c:	4770      	bx	lr

0800833e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	bc80      	pop	{r7}
 8008354:	4770      	bx	lr

08008356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	1c5a      	adds	r2, r3, #1
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	601a      	str	r2, [r3, #0]
}
 8008392:	bf00      	nop
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	bc80      	pop	{r7}
 800839a:	4770      	bx	lr

0800839c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b2:	d103      	bne.n	80083bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	60fb      	str	r3, [r7, #12]
 80083ba:	e00c      	b.n	80083d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	3308      	adds	r3, #8
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	e002      	b.n	80083ca <vListInsert+0x2e>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d2f6      	bcs.n	80083c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	685a      	ldr	r2, [r3, #4]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	601a      	str	r2, [r3, #0]
}
 8008402:	bf00      	nop
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	bc80      	pop	{r7}
 800840a:	4770      	bx	lr

0800840c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	6892      	ldr	r2, [r2, #8]
 8008422:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	6852      	ldr	r2, [r2, #4]
 800842c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	429a      	cmp	r2, r3
 8008436:	d103      	bne.n	8008440 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	1e5a      	subs	r2, r3, #1
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	bc80      	pop	{r7}
 800845c:	4770      	bx	lr
	...

08008460 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10b      	bne.n	800848c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008486:	bf00      	nop
 8008488:	bf00      	nop
 800848a:	e7fd      	b.n	8008488 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800848c:	f002 fb86 	bl	800ab9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008498:	68f9      	ldr	r1, [r7, #12]
 800849a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800849c:	fb01 f303 	mul.w	r3, r1, r3
 80084a0:	441a      	add	r2, r3
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084bc:	3b01      	subs	r3, #1
 80084be:	68f9      	ldr	r1, [r7, #12]
 80084c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80084c2:	fb01 f303 	mul.w	r3, r1, r3
 80084c6:	441a      	add	r2, r3
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	22ff      	movs	r2, #255	@ 0xff
 80084d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	22ff      	movs	r2, #255	@ 0xff
 80084d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d114      	bne.n	800850c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d01a      	beq.n	8008520 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3310      	adds	r3, #16
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 fb58 	bl	8009ba4 <xTaskRemoveFromEventList>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d012      	beq.n	8008520 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80084fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008530 <xQueueGenericReset+0xd0>)
 80084fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	e009      	b.n	8008520 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3310      	adds	r3, #16
 8008510:	4618      	mov	r0, r3
 8008512:	f7ff fef5 	bl	8008300 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	3324      	adds	r3, #36	@ 0x24
 800851a:	4618      	mov	r0, r3
 800851c:	f7ff fef0 	bl	8008300 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008520:	f002 fb6c 	bl	800abfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008524:	2301      	movs	r3, #1
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	e000ed04 	.word	0xe000ed04

08008534 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08e      	sub	sp, #56	@ 0x38
 8008538:	af02      	add	r7, sp, #8
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
 8008540:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10b      	bne.n	8008560 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800855a:	bf00      	nop
 800855c:	bf00      	nop
 800855e:	e7fd      	b.n	800855c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10b      	bne.n	800857e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008578:	bf00      	nop
 800857a:	bf00      	nop
 800857c:	e7fd      	b.n	800857a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <xQueueGenericCreateStatic+0x56>
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <xQueueGenericCreateStatic+0x5a>
 800858a:	2301      	movs	r3, #1
 800858c:	e000      	b.n	8008590 <xQueueGenericCreateStatic+0x5c>
 800858e:	2300      	movs	r3, #0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10b      	bne.n	80085ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	623b      	str	r3, [r7, #32]
}
 80085a6:	bf00      	nop
 80085a8:	bf00      	nop
 80085aa:	e7fd      	b.n	80085a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d102      	bne.n	80085b8 <xQueueGenericCreateStatic+0x84>
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <xQueueGenericCreateStatic+0x88>
 80085b8:	2301      	movs	r3, #1
 80085ba:	e000      	b.n	80085be <xQueueGenericCreateStatic+0x8a>
 80085bc:	2300      	movs	r3, #0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10b      	bne.n	80085da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	61fb      	str	r3, [r7, #28]
}
 80085d4:	bf00      	nop
 80085d6:	bf00      	nop
 80085d8:	e7fd      	b.n	80085d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80085da:	2350      	movs	r3, #80	@ 0x50
 80085dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b50      	cmp	r3, #80	@ 0x50
 80085e2:	d00b      	beq.n	80085fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	61bb      	str	r3, [r7, #24]
}
 80085f6:	bf00      	nop
 80085f8:	bf00      	nop
 80085fa:	e7fd      	b.n	80085f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80085fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00d      	beq.n	8008624 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008610:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	4613      	mov	r3, r2
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	68b9      	ldr	r1, [r7, #8]
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 f840 	bl	80086a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008626:	4618      	mov	r0, r3
 8008628:	3730      	adds	r7, #48	@ 0x30
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800862e:	b580      	push	{r7, lr}
 8008630:	b08a      	sub	sp, #40	@ 0x28
 8008632:	af02      	add	r7, sp, #8
 8008634:	60f8      	str	r0, [r7, #12]
 8008636:	60b9      	str	r1, [r7, #8]
 8008638:	4613      	mov	r3, r2
 800863a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10b      	bne.n	800865a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	613b      	str	r3, [r7, #16]
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop
 8008658:	e7fd      	b.n	8008656 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	fb02 f303 	mul.w	r3, r2, r3
 8008662:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	3350      	adds	r3, #80	@ 0x50
 8008668:	4618      	mov	r0, r3
 800866a:	f002 fb99 	bl	800ada0 <pvPortMalloc>
 800866e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d011      	beq.n	800869a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	3350      	adds	r3, #80	@ 0x50
 800867e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008688:	79fa      	ldrb	r2, [r7, #7]
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	4613      	mov	r3, r2
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	68b9      	ldr	r1, [r7, #8]
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 f805 	bl	80086a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800869a:	69bb      	ldr	r3, [r7, #24]
	}
 800869c:	4618      	mov	r0, r3
 800869e:	3720      	adds	r7, #32
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d103      	bne.n	80086c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	e002      	b.n	80086c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80086d2:	2101      	movs	r1, #1
 80086d4:	69b8      	ldr	r0, [r7, #24]
 80086d6:	f7ff fec3 	bl	8008460 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	78fa      	ldrb	r2, [r7, #3]
 80086de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80086e2:	bf00      	nop
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00e      	beq.n	8008716 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800870a:	2300      	movs	r3, #0
 800870c:	2200      	movs	r2, #0
 800870e:	2100      	movs	r1, #0
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f8a3 	bl	800885c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008716:	bf00      	nop
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800871e:	b580      	push	{r7, lr}
 8008720:	b086      	sub	sp, #24
 8008722:	af00      	add	r7, sp, #0
 8008724:	4603      	mov	r3, r0
 8008726:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008728:	2301      	movs	r3, #1
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	2300      	movs	r3, #0
 800872e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008730:	79fb      	ldrb	r3, [r7, #7]
 8008732:	461a      	mov	r2, r3
 8008734:	6939      	ldr	r1, [r7, #16]
 8008736:	6978      	ldr	r0, [r7, #20]
 8008738:	f7ff ff79 	bl	800862e <xQueueGenericCreate>
 800873c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7ff ffd3 	bl	80086ea <prvInitialiseMutex>

		return xNewQueue;
 8008744:	68fb      	ldr	r3, [r7, #12]
	}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800874e:	b580      	push	{r7, lr}
 8008750:	b088      	sub	sp, #32
 8008752:	af02      	add	r7, sp, #8
 8008754:	4603      	mov	r3, r0
 8008756:	6039      	str	r1, [r7, #0]
 8008758:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800875a:	2301      	movs	r3, #1
 800875c:	617b      	str	r3, [r7, #20]
 800875e:	2300      	movs	r3, #0
 8008760:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008762:	79fb      	ldrb	r3, [r7, #7]
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2200      	movs	r2, #0
 800876a:	6939      	ldr	r1, [r7, #16]
 800876c:	6978      	ldr	r0, [r7, #20]
 800876e:	f7ff fee1 	bl	8008534 <xQueueGenericCreateStatic>
 8008772:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f7ff ffb8 	bl	80086ea <prvInitialiseMutex>

		return xNewQueue;
 800877a:	68fb      	ldr	r3, [r7, #12]
	}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008784:	b590      	push	{r4, r7, lr}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10b      	bne.n	80087ae <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	60fb      	str	r3, [r7, #12]
}
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
 80087ac:	e7fd      	b.n	80087aa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	689c      	ldr	r4, [r3, #8]
 80087b2:	f001 fbbd 	bl	8009f30 <xTaskGetCurrentTaskHandle>
 80087b6:	4603      	mov	r3, r0
 80087b8:	429c      	cmp	r4, r3
 80087ba:	d111      	bne.n	80087e0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	1e5a      	subs	r2, r3, #1
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d105      	bne.n	80087da <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80087ce:	2300      	movs	r3, #0
 80087d0:	2200      	movs	r2, #0
 80087d2:	2100      	movs	r1, #0
 80087d4:	6938      	ldr	r0, [r7, #16]
 80087d6:	f000 f841 	bl	800885c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80087da:	2301      	movs	r3, #1
 80087dc:	617b      	str	r3, [r7, #20]
 80087de:	e001      	b.n	80087e4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80087e0:	2300      	movs	r3, #0
 80087e2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80087e4:	697b      	ldr	r3, [r7, #20]
	}
 80087e6:	4618      	mov	r0, r3
 80087e8:	371c      	adds	r7, #28
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd90      	pop	{r4, r7, pc}

080087ee <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80087ee:	b590      	push	{r4, r7, lr}
 80087f0:	b087      	sub	sp, #28
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10b      	bne.n	800881a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	60fb      	str	r3, [r7, #12]
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	e7fd      	b.n	8008816 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	689c      	ldr	r4, [r3, #8]
 800881e:	f001 fb87 	bl	8009f30 <xTaskGetCurrentTaskHandle>
 8008822:	4603      	mov	r3, r0
 8008824:	429c      	cmp	r4, r3
 8008826:	d107      	bne.n	8008838 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	1c5a      	adds	r2, r3, #1
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008832:	2301      	movs	r3, #1
 8008834:	617b      	str	r3, [r7, #20]
 8008836:	e00c      	b.n	8008852 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6938      	ldr	r0, [r7, #16]
 800883c:	f000 fa90 	bl	8008d60 <xQueueSemaphoreTake>
 8008840:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d004      	beq.n	8008852 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008852:	697b      	ldr	r3, [r7, #20]
	}
 8008854:	4618      	mov	r0, r3
 8008856:	371c      	adds	r7, #28
 8008858:	46bd      	mov	sp, r7
 800885a:	bd90      	pop	{r4, r7, pc}

0800885c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08e      	sub	sp, #56	@ 0x38
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800886a:	2300      	movs	r3, #0
 800886c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10b      	bne.n	8008890 <xQueueGenericSend+0x34>
	__asm volatile
 8008878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887c:	f383 8811 	msr	BASEPRI, r3
 8008880:	f3bf 8f6f 	isb	sy
 8008884:	f3bf 8f4f 	dsb	sy
 8008888:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800888a:	bf00      	nop
 800888c:	bf00      	nop
 800888e:	e7fd      	b.n	800888c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d103      	bne.n	800889e <xQueueGenericSend+0x42>
 8008896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <xQueueGenericSend+0x46>
 800889e:	2301      	movs	r3, #1
 80088a0:	e000      	b.n	80088a4 <xQueueGenericSend+0x48>
 80088a2:	2300      	movs	r3, #0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10b      	bne.n	80088c0 <xQueueGenericSend+0x64>
	__asm volatile
 80088a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088ba:	bf00      	nop
 80088bc:	bf00      	nop
 80088be:	e7fd      	b.n	80088bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d103      	bne.n	80088ce <xQueueGenericSend+0x72>
 80088c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d101      	bne.n	80088d2 <xQueueGenericSend+0x76>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <xQueueGenericSend+0x78>
 80088d2:	2300      	movs	r3, #0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10b      	bne.n	80088f0 <xQueueGenericSend+0x94>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	623b      	str	r3, [r7, #32]
}
 80088ea:	bf00      	nop
 80088ec:	bf00      	nop
 80088ee:	e7fd      	b.n	80088ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088f0:	f001 fb2c 	bl	8009f4c <xTaskGetSchedulerState>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d102      	bne.n	8008900 <xQueueGenericSend+0xa4>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d101      	bne.n	8008904 <xQueueGenericSend+0xa8>
 8008900:	2301      	movs	r3, #1
 8008902:	e000      	b.n	8008906 <xQueueGenericSend+0xaa>
 8008904:	2300      	movs	r3, #0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10b      	bne.n	8008922 <xQueueGenericSend+0xc6>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	61fb      	str	r3, [r7, #28]
}
 800891c:	bf00      	nop
 800891e:	bf00      	nop
 8008920:	e7fd      	b.n	800891e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008922:	f002 f93b 	bl	800ab9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008928:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800892a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800892e:	429a      	cmp	r2, r3
 8008930:	d302      	bcc.n	8008938 <xQueueGenericSend+0xdc>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d129      	bne.n	800898c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008938:	683a      	ldr	r2, [r7, #0]
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800893e:	f000 fb36 	bl	8008fae <prvCopyDataToQueue>
 8008942:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008948:	2b00      	cmp	r3, #0
 800894a:	d010      	beq.n	800896e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800894c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800894e:	3324      	adds	r3, #36	@ 0x24
 8008950:	4618      	mov	r0, r3
 8008952:	f001 f927 	bl	8009ba4 <xTaskRemoveFromEventList>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d013      	beq.n	8008984 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800895c:	4b3f      	ldr	r3, [pc, #252]	@ (8008a5c <xQueueGenericSend+0x200>)
 800895e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	e00a      	b.n	8008984 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800896e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008970:	2b00      	cmp	r3, #0
 8008972:	d007      	beq.n	8008984 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008974:	4b39      	ldr	r3, [pc, #228]	@ (8008a5c <xQueueGenericSend+0x200>)
 8008976:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800897a:	601a      	str	r2, [r3, #0]
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008984:	f002 f93a 	bl	800abfc <vPortExitCritical>
				return pdPASS;
 8008988:	2301      	movs	r3, #1
 800898a:	e063      	b.n	8008a54 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d103      	bne.n	800899a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008992:	f002 f933 	bl	800abfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008996:	2300      	movs	r3, #0
 8008998:	e05c      	b.n	8008a54 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800899a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800899c:	2b00      	cmp	r3, #0
 800899e:	d106      	bne.n	80089ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089a0:	f107 0314 	add.w	r3, r7, #20
 80089a4:	4618      	mov	r0, r3
 80089a6:	f001 f961 	bl	8009c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089aa:	2301      	movs	r3, #1
 80089ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089ae:	f002 f925 	bl	800abfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089b2:	f000 fecd 	bl	8009750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089b6:	f002 f8f1 	bl	800ab9c <vPortEnterCritical>
 80089ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089c0:	b25b      	sxtb	r3, r3
 80089c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c6:	d103      	bne.n	80089d0 <xQueueGenericSend+0x174>
 80089c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089d6:	b25b      	sxtb	r3, r3
 80089d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089dc:	d103      	bne.n	80089e6 <xQueueGenericSend+0x18a>
 80089de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089e6:	f002 f909 	bl	800abfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089ea:	1d3a      	adds	r2, r7, #4
 80089ec:	f107 0314 	add.w	r3, r7, #20
 80089f0:	4611      	mov	r1, r2
 80089f2:	4618      	mov	r0, r3
 80089f4:	f001 f950 	bl	8009c98 <xTaskCheckForTimeOut>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d124      	bne.n	8008a48 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a00:	f000 fbcd 	bl	800919e <prvIsQueueFull>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d018      	beq.n	8008a3c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0c:	3310      	adds	r3, #16
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	4611      	mov	r1, r2
 8008a12:	4618      	mov	r0, r3
 8008a14:	f001 f874 	bl	8009b00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a1a:	f000 fb58 	bl	80090ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a1e:	f000 fea5 	bl	800976c <xTaskResumeAll>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f47f af7c 	bne.w	8008922 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a5c <xQueueGenericSend+0x200>)
 8008a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	e772      	b.n	8008922 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a3e:	f000 fb46 	bl	80090ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a42:	f000 fe93 	bl	800976c <xTaskResumeAll>
 8008a46:	e76c      	b.n	8008922 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a4a:	f000 fb40 	bl	80090ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a4e:	f000 fe8d 	bl	800976c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3738      	adds	r7, #56	@ 0x38
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	e000ed04 	.word	0xe000ed04

08008a60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b090      	sub	sp, #64	@ 0x40
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10b      	bne.n	8008a90 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008a8a:	bf00      	nop
 8008a8c:	bf00      	nop
 8008a8e:	e7fd      	b.n	8008a8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d103      	bne.n	8008a9e <xQueueGenericSendFromISR+0x3e>
 8008a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <xQueueGenericSendFromISR+0x42>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e000      	b.n	8008aa4 <xQueueGenericSendFromISR+0x44>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10b      	bne.n	8008ac0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	e7fd      	b.n	8008abc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d103      	bne.n	8008ace <xQueueGenericSendFromISR+0x6e>
 8008ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d101      	bne.n	8008ad2 <xQueueGenericSendFromISR+0x72>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e000      	b.n	8008ad4 <xQueueGenericSendFromISR+0x74>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10b      	bne.n	8008af0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	623b      	str	r3, [r7, #32]
}
 8008aea:	bf00      	nop
 8008aec:	bf00      	nop
 8008aee:	e7fd      	b.n	8008aec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008af0:	f002 f916 	bl	800ad20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008af4:	f3ef 8211 	mrs	r2, BASEPRI
 8008af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	61fa      	str	r2, [r7, #28]
 8008b0a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b0c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b0e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d302      	bcc.n	8008b22 <xQueueGenericSendFromISR+0xc2>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d12f      	bne.n	8008b82 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	68b9      	ldr	r1, [r7, #8]
 8008b36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b38:	f000 fa39 	bl	8008fae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b3c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b44:	d112      	bne.n	8008b6c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d016      	beq.n	8008b7c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b50:	3324      	adds	r3, #36	@ 0x24
 8008b52:	4618      	mov	r0, r3
 8008b54:	f001 f826 	bl	8009ba4 <xTaskRemoveFromEventList>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00e      	beq.n	8008b7c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00b      	beq.n	8008b7c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	e007      	b.n	8008b7c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b70:	3301      	adds	r3, #1
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	b25a      	sxtb	r2, r3
 8008b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008b80:	e001      	b.n	8008b86 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b88:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3740      	adds	r7, #64	@ 0x40
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b08c      	sub	sp, #48	@ 0x30
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10b      	bne.n	8008bce <xQueueReceive+0x32>
	__asm volatile
 8008bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	623b      	str	r3, [r7, #32]
}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	e7fd      	b.n	8008bca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d103      	bne.n	8008bdc <xQueueReceive+0x40>
 8008bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d101      	bne.n	8008be0 <xQueueReceive+0x44>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e000      	b.n	8008be2 <xQueueReceive+0x46>
 8008be0:	2300      	movs	r3, #0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10b      	bne.n	8008bfe <xQueueReceive+0x62>
	__asm volatile
 8008be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bea:	f383 8811 	msr	BASEPRI, r3
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	61fb      	str	r3, [r7, #28]
}
 8008bf8:	bf00      	nop
 8008bfa:	bf00      	nop
 8008bfc:	e7fd      	b.n	8008bfa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bfe:	f001 f9a5 	bl	8009f4c <xTaskGetSchedulerState>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d102      	bne.n	8008c0e <xQueueReceive+0x72>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <xQueueReceive+0x76>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e000      	b.n	8008c14 <xQueueReceive+0x78>
 8008c12:	2300      	movs	r3, #0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d10b      	bne.n	8008c30 <xQueueReceive+0x94>
	__asm volatile
 8008c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c1c:	f383 8811 	msr	BASEPRI, r3
 8008c20:	f3bf 8f6f 	isb	sy
 8008c24:	f3bf 8f4f 	dsb	sy
 8008c28:	61bb      	str	r3, [r7, #24]
}
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
 8008c2e:	e7fd      	b.n	8008c2c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c30:	f001 ffb4 	bl	800ab9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c38:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d01f      	beq.n	8008c80 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c40:	68b9      	ldr	r1, [r7, #8]
 8008c42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c44:	f000 fa1d 	bl	8009082 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4a:	1e5a      	subs	r2, r3, #1
 8008c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00f      	beq.n	8008c78 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c5a:	3310      	adds	r3, #16
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f000 ffa1 	bl	8009ba4 <xTaskRemoveFromEventList>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d007      	beq.n	8008c78 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c68:	4b3c      	ldr	r3, [pc, #240]	@ (8008d5c <xQueueReceive+0x1c0>)
 8008c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c78:	f001 ffc0 	bl	800abfc <vPortExitCritical>
				return pdPASS;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e069      	b.n	8008d54 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d103      	bne.n	8008c8e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c86:	f001 ffb9 	bl	800abfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	e062      	b.n	8008d54 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d106      	bne.n	8008ca2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c94:	f107 0310 	add.w	r3, r7, #16
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 ffe7 	bl	8009c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ca2:	f001 ffab 	bl	800abfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ca6:	f000 fd53 	bl	8009750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008caa:	f001 ff77 	bl	800ab9c <vPortEnterCritical>
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008cb4:	b25b      	sxtb	r3, r3
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cba:	d103      	bne.n	8008cc4 <xQueueReceive+0x128>
 8008cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cca:	b25b      	sxtb	r3, r3
 8008ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd0:	d103      	bne.n	8008cda <xQueueReceive+0x13e>
 8008cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cda:	f001 ff8f 	bl	800abfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cde:	1d3a      	adds	r2, r7, #4
 8008ce0:	f107 0310 	add.w	r3, r7, #16
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f000 ffd6 	bl	8009c98 <xTaskCheckForTimeOut>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d123      	bne.n	8008d3a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cf4:	f000 fa3d 	bl	8009172 <prvIsQueueEmpty>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d017      	beq.n	8008d2e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d00:	3324      	adds	r3, #36	@ 0x24
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	4611      	mov	r1, r2
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fefa 	bl	8009b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d0e:	f000 f9de 	bl	80090ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d12:	f000 fd2b 	bl	800976c <xTaskResumeAll>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d189      	bne.n	8008c30 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8008d5c <xQueueReceive+0x1c0>)
 8008d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	e780      	b.n	8008c30 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d30:	f000 f9cd 	bl	80090ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d34:	f000 fd1a 	bl	800976c <xTaskResumeAll>
 8008d38:	e77a      	b.n	8008c30 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d3c:	f000 f9c7 	bl	80090ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d40:	f000 fd14 	bl	800976c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d46:	f000 fa14 	bl	8009172 <prvIsQueueEmpty>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f43f af6f 	beq.w	8008c30 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d52:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3730      	adds	r7, #48	@ 0x30
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	e000ed04 	.word	0xe000ed04

08008d60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08e      	sub	sp, #56	@ 0x38
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008d72:	2300      	movs	r3, #0
 8008d74:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10b      	bne.n	8008d94 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	623b      	str	r3, [r7, #32]
}
 8008d8e:	bf00      	nop
 8008d90:	bf00      	nop
 8008d92:	e7fd      	b.n	8008d90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00b      	beq.n	8008db4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	61fb      	str	r3, [r7, #28]
}
 8008dae:	bf00      	nop
 8008db0:	bf00      	nop
 8008db2:	e7fd      	b.n	8008db0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008db4:	f001 f8ca 	bl	8009f4c <xTaskGetSchedulerState>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d102      	bne.n	8008dc4 <xQueueSemaphoreTake+0x64>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <xQueueSemaphoreTake+0x68>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e000      	b.n	8008dca <xQueueSemaphoreTake+0x6a>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10b      	bne.n	8008de6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	61bb      	str	r3, [r7, #24]
}
 8008de0:	bf00      	nop
 8008de2:	bf00      	nop
 8008de4:	e7fd      	b.n	8008de2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008de6:	f001 fed9 	bl	800ab9c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d024      	beq.n	8008e40 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df8:	1e5a      	subs	r2, r3, #1
 8008dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d104      	bne.n	8008e10 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008e06:	f001 fa1b 	bl	800a240 <pvTaskIncrementMutexHeldCount>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e0e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00f      	beq.n	8008e38 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1a:	3310      	adds	r3, #16
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 fec1 	bl	8009ba4 <xTaskRemoveFromEventList>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d007      	beq.n	8008e38 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e28:	4b54      	ldr	r3, [pc, #336]	@ (8008f7c <xQueueSemaphoreTake+0x21c>)
 8008e2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e38:	f001 fee0 	bl	800abfc <vPortExitCritical>
				return pdPASS;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e098      	b.n	8008f72 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d112      	bne.n	8008e6c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00b      	beq.n	8008e64 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	617b      	str	r3, [r7, #20]
}
 8008e5e:	bf00      	nop
 8008e60:	bf00      	nop
 8008e62:	e7fd      	b.n	8008e60 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008e64:	f001 feca 	bl	800abfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	e082      	b.n	8008f72 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d106      	bne.n	8008e80 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e72:	f107 030c 	add.w	r3, r7, #12
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fef8 	bl	8009c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e80:	f001 febc 	bl	800abfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e84:	f000 fc64 	bl	8009750 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e88:	f001 fe88 	bl	800ab9c <vPortEnterCritical>
 8008e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e92:	b25b      	sxtb	r3, r3
 8008e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e98:	d103      	bne.n	8008ea2 <xQueueSemaphoreTake+0x142>
 8008e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ea8:	b25b      	sxtb	r3, r3
 8008eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eae:	d103      	bne.n	8008eb8 <xQueueSemaphoreTake+0x158>
 8008eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008eb8:	f001 fea0 	bl	800abfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ebc:	463a      	mov	r2, r7
 8008ebe:	f107 030c 	add.w	r3, r7, #12
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 fee7 	bl	8009c98 <xTaskCheckForTimeOut>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d132      	bne.n	8008f36 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ed0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ed2:	f000 f94e 	bl	8009172 <prvIsQueueEmpty>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d026      	beq.n	8008f2a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d109      	bne.n	8008ef8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008ee4:	f001 fe5a 	bl	800ab9c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f001 f84b 	bl	8009f88 <xTaskPriorityInherit>
 8008ef2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008ef4:	f001 fe82 	bl	800abfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efa:	3324      	adds	r3, #36	@ 0x24
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	4611      	mov	r1, r2
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fdfd 	bl	8009b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f08:	f000 f8e1 	bl	80090ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f0c:	f000 fc2e 	bl	800976c <xTaskResumeAll>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f47f af67 	bne.w	8008de6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008f18:	4b18      	ldr	r3, [pc, #96]	@ (8008f7c <xQueueSemaphoreTake+0x21c>)
 8008f1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f1e:	601a      	str	r2, [r3, #0]
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	e75d      	b.n	8008de6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008f2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f2c:	f000 f8cf 	bl	80090ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f30:	f000 fc1c 	bl	800976c <xTaskResumeAll>
 8008f34:	e757      	b.n	8008de6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008f36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f38:	f000 f8c9 	bl	80090ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f3c:	f000 fc16 	bl	800976c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f42:	f000 f916 	bl	8009172 <prvIsQueueEmpty>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f43f af4c 	beq.w	8008de6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00d      	beq.n	8008f70 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008f54:	f001 fe22 	bl	800ab9c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008f58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f5a:	f000 f811 	bl	8008f80 <prvGetDisinheritPriorityAfterTimeout>
 8008f5e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f66:	4618      	mov	r0, r3
 8008f68:	f001 f8e6 	bl	800a138 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008f6c:	f001 fe46 	bl	800abfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3738      	adds	r7, #56	@ 0x38
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	e000ed04 	.word	0xe000ed04

08008f80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d006      	beq.n	8008f9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	e001      	b.n	8008fa2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
	}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bc80      	pop	{r7}
 8008fac:	4770      	bx	lr

08008fae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b086      	sub	sp, #24
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10d      	bne.n	8008fe8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d14d      	bne.n	8009070 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 f83d 	bl	800a058 <xTaskPriorityDisinherit>
 8008fde:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	609a      	str	r2, [r3, #8]
 8008fe6:	e043      	b.n	8009070 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d119      	bne.n	8009022 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6858      	ldr	r0, [r3, #4]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	68b9      	ldr	r1, [r7, #8]
 8008ffa:	f002 fc6c 	bl	800b8d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009006:	441a      	add	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	429a      	cmp	r2, r3
 8009016:	d32b      	bcc.n	8009070 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	605a      	str	r2, [r3, #4]
 8009020:	e026      	b.n	8009070 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	68d8      	ldr	r0, [r3, #12]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800902a:	461a      	mov	r2, r3
 800902c:	68b9      	ldr	r1, [r7, #8]
 800902e:	f002 fc52 	bl	800b8d6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	68da      	ldr	r2, [r3, #12]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903a:	425b      	negs	r3, r3
 800903c:	441a      	add	r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	68da      	ldr	r2, [r3, #12]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	429a      	cmp	r2, r3
 800904c:	d207      	bcs.n	800905e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009056:	425b      	negs	r3, r3
 8009058:	441a      	add	r2, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b02      	cmp	r3, #2
 8009062:	d105      	bne.n	8009070 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	3b01      	subs	r3, #1
 800906e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009078:	697b      	ldr	r3, [r7, #20]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b082      	sub	sp, #8
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009090:	2b00      	cmp	r3, #0
 8009092:	d018      	beq.n	80090c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800909c:	441a      	add	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68da      	ldr	r2, [r3, #12]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d303      	bcc.n	80090b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	68d9      	ldr	r1, [r3, #12]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090be:	461a      	mov	r2, r3
 80090c0:	6838      	ldr	r0, [r7, #0]
 80090c2:	f002 fc08 	bl	800b8d6 <memcpy>
	}
}
 80090c6:	bf00      	nop
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090d6:	f001 fd61 	bl	800ab9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80090e2:	e011      	b.n	8009108 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d012      	beq.n	8009112 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	3324      	adds	r3, #36	@ 0x24
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fd57 	bl	8009ba4 <xTaskRemoveFromEventList>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80090fc:	f000 fe30 	bl	8009d60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009100:	7bfb      	ldrb	r3, [r7, #15]
 8009102:	3b01      	subs	r3, #1
 8009104:	b2db      	uxtb	r3, r3
 8009106:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009108:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800910c:	2b00      	cmp	r3, #0
 800910e:	dce9      	bgt.n	80090e4 <prvUnlockQueue+0x16>
 8009110:	e000      	b.n	8009114 <prvUnlockQueue+0x46>
					break;
 8009112:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	22ff      	movs	r2, #255	@ 0xff
 8009118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800911c:	f001 fd6e 	bl	800abfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009120:	f001 fd3c 	bl	800ab9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800912a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800912c:	e011      	b.n	8009152 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d012      	beq.n	800915c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3310      	adds	r3, #16
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fd32 	bl	8009ba4 <xTaskRemoveFromEventList>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009146:	f000 fe0b 	bl	8009d60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	3b01      	subs	r3, #1
 800914e:	b2db      	uxtb	r3, r3
 8009150:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009152:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009156:	2b00      	cmp	r3, #0
 8009158:	dce9      	bgt.n	800912e <prvUnlockQueue+0x60>
 800915a:	e000      	b.n	800915e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800915c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	22ff      	movs	r2, #255	@ 0xff
 8009162:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009166:	f001 fd49 	bl	800abfc <vPortExitCritical>
}
 800916a:	bf00      	nop
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800917a:	f001 fd0f 	bl	800ab9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009182:	2b00      	cmp	r3, #0
 8009184:	d102      	bne.n	800918c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009186:	2301      	movs	r3, #1
 8009188:	60fb      	str	r3, [r7, #12]
 800918a:	e001      	b.n	8009190 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800918c:	2300      	movs	r3, #0
 800918e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009190:	f001 fd34 	bl	800abfc <vPortExitCritical>

	return xReturn;
 8009194:	68fb      	ldr	r3, [r7, #12]
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b084      	sub	sp, #16
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091a6:	f001 fcf9 	bl	800ab9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d102      	bne.n	80091bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091b6:	2301      	movs	r3, #1
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	e001      	b.n	80091c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091bc:	2300      	movs	r3, #0
 80091be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091c0:	f001 fd1c 	bl	800abfc <vPortExitCritical>

	return xReturn;
 80091c4:	68fb      	ldr	r3, [r7, #12]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
	...

080091d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091da:	2300      	movs	r3, #0
 80091dc:	60fb      	str	r3, [r7, #12]
 80091de:	e014      	b.n	800920a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80091e0:	4a0e      	ldr	r2, [pc, #56]	@ (800921c <vQueueAddToRegistry+0x4c>)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10b      	bne.n	8009204 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80091ec:	490b      	ldr	r1, [pc, #44]	@ (800921c <vQueueAddToRegistry+0x4c>)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80091f6:	4a09      	ldr	r2, [pc, #36]	@ (800921c <vQueueAddToRegistry+0x4c>)
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	4413      	add	r3, r2
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009202:	e006      	b.n	8009212 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	3301      	adds	r3, #1
 8009208:	60fb      	str	r3, [r7, #12]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b07      	cmp	r3, #7
 800920e:	d9e7      	bls.n	80091e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009210:	bf00      	nop
 8009212:	bf00      	nop
 8009214:	3714      	adds	r7, #20
 8009216:	46bd      	mov	sp, r7
 8009218:	bc80      	pop	{r7}
 800921a:	4770      	bx	lr
 800921c:	20000aa4 	.word	0x20000aa4

08009220 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009230:	f001 fcb4 	bl	800ab9c <vPortEnterCritical>
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800923a:	b25b      	sxtb	r3, r3
 800923c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009240:	d103      	bne.n	800924a <vQueueWaitForMessageRestricted+0x2a>
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009250:	b25b      	sxtb	r3, r3
 8009252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009256:	d103      	bne.n	8009260 <vQueueWaitForMessageRestricted+0x40>
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009260:	f001 fccc 	bl	800abfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009268:	2b00      	cmp	r3, #0
 800926a:	d106      	bne.n	800927a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	3324      	adds	r3, #36	@ 0x24
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	68b9      	ldr	r1, [r7, #8]
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fc69 	bl	8009b4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800927a:	6978      	ldr	r0, [r7, #20]
 800927c:	f7ff ff27 	bl	80090ce <prvUnlockQueue>
	}
 8009280:	bf00      	nop
 8009282:	3718      	adds	r7, #24
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08e      	sub	sp, #56	@ 0x38
 800928c:	af04      	add	r7, sp, #16
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
 8009294:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10b      	bne.n	80092b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800929c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	623b      	str	r3, [r7, #32]
}
 80092ae:	bf00      	nop
 80092b0:	bf00      	nop
 80092b2:	e7fd      	b.n	80092b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80092b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10b      	bne.n	80092d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	61fb      	str	r3, [r7, #28]
}
 80092cc:	bf00      	nop
 80092ce:	bf00      	nop
 80092d0:	e7fd      	b.n	80092ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092d2:	23a8      	movs	r3, #168	@ 0xa8
 80092d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	2ba8      	cmp	r3, #168	@ 0xa8
 80092da:	d00b      	beq.n	80092f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80092dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e0:	f383 8811 	msr	BASEPRI, r3
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	f3bf 8f4f 	dsb	sy
 80092ec:	61bb      	str	r3, [r7, #24]
}
 80092ee:	bf00      	nop
 80092f0:	bf00      	nop
 80092f2:	e7fd      	b.n	80092f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80092f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80092f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d01e      	beq.n	800933a <xTaskCreateStatic+0xb2>
 80092fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d01b      	beq.n	800933a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009304:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009308:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800930a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800930c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930e:	2202      	movs	r2, #2
 8009310:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009314:	2300      	movs	r3, #0
 8009316:	9303      	str	r3, [sp, #12]
 8009318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931a:	9302      	str	r3, [sp, #8]
 800931c:	f107 0314 	add.w	r3, r7, #20
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 f851 	bl	80093d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009332:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009334:	f000 f8f6 	bl	8009524 <prvAddNewTaskToReadyList>
 8009338:	e001      	b.n	800933e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800933e:	697b      	ldr	r3, [r7, #20]
	}
 8009340:	4618      	mov	r0, r3
 8009342:	3728      	adds	r7, #40	@ 0x28
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08c      	sub	sp, #48	@ 0x30
 800934c:	af04      	add	r7, sp, #16
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	603b      	str	r3, [r7, #0]
 8009354:	4613      	mov	r3, r2
 8009356:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009358:	88fb      	ldrh	r3, [r7, #6]
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4618      	mov	r0, r3
 800935e:	f001 fd1f 	bl	800ada0 <pvPortMalloc>
 8009362:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00e      	beq.n	8009388 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800936a:	20a8      	movs	r0, #168	@ 0xa8
 800936c:	f001 fd18 	bl	800ada0 <pvPortMalloc>
 8009370:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d003      	beq.n	8009380 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	697a      	ldr	r2, [r7, #20]
 800937c:	631a      	str	r2, [r3, #48]	@ 0x30
 800937e:	e005      	b.n	800938c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009380:	6978      	ldr	r0, [r7, #20]
 8009382:	f001 fddb 	bl	800af3c <vPortFree>
 8009386:	e001      	b.n	800938c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009388:	2300      	movs	r3, #0
 800938a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d017      	beq.n	80093c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800939a:	88fa      	ldrh	r2, [r7, #6]
 800939c:	2300      	movs	r3, #0
 800939e:	9303      	str	r3, [sp, #12]
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	9302      	str	r3, [sp, #8]
 80093a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	68b9      	ldr	r1, [r7, #8]
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f80f 	bl	80093d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093b6:	69f8      	ldr	r0, [r7, #28]
 80093b8:	f000 f8b4 	bl	8009524 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80093bc:	2301      	movs	r3, #1
 80093be:	61bb      	str	r3, [r7, #24]
 80093c0:	e002      	b.n	80093c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093c2:	f04f 33ff 	mov.w	r3, #4294967295
 80093c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093c8:	69bb      	ldr	r3, [r7, #24]
	}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3720      	adds	r7, #32
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
 80093e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80093e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	461a      	mov	r2, r3
 80093ec:	21a5      	movs	r1, #165	@ 0xa5
 80093ee:	f002 f989 	bl	800b704 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80093f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80093fc:	3b01      	subs	r3, #1
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	f023 0307 	bic.w	r3, r3, #7
 800940a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	f003 0307 	and.w	r3, r3, #7
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00b      	beq.n	800942e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	617b      	str	r3, [r7, #20]
}
 8009428:	bf00      	nop
 800942a:	bf00      	nop
 800942c:	e7fd      	b.n	800942a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d01f      	beq.n	8009474 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009434:	2300      	movs	r3, #0
 8009436:	61fb      	str	r3, [r7, #28]
 8009438:	e012      	b.n	8009460 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	4413      	add	r3, r2
 8009440:	7819      	ldrb	r1, [r3, #0]
 8009442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	4413      	add	r3, r2
 8009448:	3334      	adds	r3, #52	@ 0x34
 800944a:	460a      	mov	r2, r1
 800944c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	4413      	add	r3, r2
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d006      	beq.n	8009468 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	3301      	adds	r3, #1
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	2b0f      	cmp	r3, #15
 8009464:	d9e9      	bls.n	800943a <prvInitialiseNewTask+0x66>
 8009466:	e000      	b.n	800946a <prvInitialiseNewTask+0x96>
			{
				break;
 8009468:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800946a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009472:	e003      	b.n	800947c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009476:	2200      	movs	r2, #0
 8009478:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800947c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947e:	2b37      	cmp	r3, #55	@ 0x37
 8009480:	d901      	bls.n	8009486 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009482:	2337      	movs	r3, #55	@ 0x37
 8009484:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009488:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800948a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800948c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009490:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	2200      	movs	r2, #0
 8009496:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949a:	3304      	adds	r3, #4
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe ff4e 	bl	800833e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a4:	3318      	adds	r3, #24
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fe ff49 	bl	800833e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c4:	2200      	movs	r2, #0
 80094c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80094d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d4:	3354      	adds	r3, #84	@ 0x54
 80094d6:	224c      	movs	r2, #76	@ 0x4c
 80094d8:	2100      	movs	r1, #0
 80094da:	4618      	mov	r0, r3
 80094dc:	f002 f912 	bl	800b704 <memset>
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	4a0d      	ldr	r2, [pc, #52]	@ (8009518 <prvInitialiseNewTask+0x144>)
 80094e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80094e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e8:	4a0c      	ldr	r2, [pc, #48]	@ (800951c <prvInitialiseNewTask+0x148>)
 80094ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80094ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ee:	4a0c      	ldr	r2, [pc, #48]	@ (8009520 <prvInitialiseNewTask+0x14c>)
 80094f0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	68f9      	ldr	r1, [r7, #12]
 80094f6:	69b8      	ldr	r0, [r7, #24]
 80094f8:	f001 fa62 	bl	800a9c0 <pxPortInitialiseStack>
 80094fc:	4602      	mov	r2, r0
 80094fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009500:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800950a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800950c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800950e:	bf00      	nop
 8009510:	3720      	adds	r7, #32
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20001d40 	.word	0x20001d40
 800951c:	20001da8 	.word	0x20001da8
 8009520:	20001e10 	.word	0x20001e10

08009524 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800952c:	f001 fb36 	bl	800ab9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009530:	4b2d      	ldr	r3, [pc, #180]	@ (80095e8 <prvAddNewTaskToReadyList+0xc4>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3301      	adds	r3, #1
 8009536:	4a2c      	ldr	r2, [pc, #176]	@ (80095e8 <prvAddNewTaskToReadyList+0xc4>)
 8009538:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800953a:	4b2c      	ldr	r3, [pc, #176]	@ (80095ec <prvAddNewTaskToReadyList+0xc8>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d109      	bne.n	8009556 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009542:	4a2a      	ldr	r2, [pc, #168]	@ (80095ec <prvAddNewTaskToReadyList+0xc8>)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009548:	4b27      	ldr	r3, [pc, #156]	@ (80095e8 <prvAddNewTaskToReadyList+0xc4>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d110      	bne.n	8009572 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009550:	f000 fc2a 	bl	8009da8 <prvInitialiseTaskLists>
 8009554:	e00d      	b.n	8009572 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009556:	4b26      	ldr	r3, [pc, #152]	@ (80095f0 <prvAddNewTaskToReadyList+0xcc>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d109      	bne.n	8009572 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800955e:	4b23      	ldr	r3, [pc, #140]	@ (80095ec <prvAddNewTaskToReadyList+0xc8>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009568:	429a      	cmp	r2, r3
 800956a:	d802      	bhi.n	8009572 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800956c:	4a1f      	ldr	r2, [pc, #124]	@ (80095ec <prvAddNewTaskToReadyList+0xc8>)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009572:	4b20      	ldr	r3, [pc, #128]	@ (80095f4 <prvAddNewTaskToReadyList+0xd0>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	3301      	adds	r3, #1
 8009578:	4a1e      	ldr	r2, [pc, #120]	@ (80095f4 <prvAddNewTaskToReadyList+0xd0>)
 800957a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800957c:	4b1d      	ldr	r3, [pc, #116]	@ (80095f4 <prvAddNewTaskToReadyList+0xd0>)
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009588:	4b1b      	ldr	r3, [pc, #108]	@ (80095f8 <prvAddNewTaskToReadyList+0xd4>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	429a      	cmp	r2, r3
 800958e:	d903      	bls.n	8009598 <prvAddNewTaskToReadyList+0x74>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009594:	4a18      	ldr	r2, [pc, #96]	@ (80095f8 <prvAddNewTaskToReadyList+0xd4>)
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800959c:	4613      	mov	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4a15      	ldr	r2, [pc, #84]	@ (80095fc <prvAddNewTaskToReadyList+0xd8>)
 80095a6:	441a      	add	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4619      	mov	r1, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	f7fe fed1 	bl	8008356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095b4:	f001 fb22 	bl	800abfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095b8:	4b0d      	ldr	r3, [pc, #52]	@ (80095f0 <prvAddNewTaskToReadyList+0xcc>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00e      	beq.n	80095de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095c0:	4b0a      	ldr	r3, [pc, #40]	@ (80095ec <prvAddNewTaskToReadyList+0xc8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d207      	bcs.n	80095de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095ce:	4b0c      	ldr	r3, [pc, #48]	@ (8009600 <prvAddNewTaskToReadyList+0xdc>)
 80095d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095d4:	601a      	str	r2, [r3, #0]
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20000fb8 	.word	0x20000fb8
 80095ec:	20000ae4 	.word	0x20000ae4
 80095f0:	20000fc4 	.word	0x20000fc4
 80095f4:	20000fd4 	.word	0x20000fd4
 80095f8:	20000fc0 	.word	0x20000fc0
 80095fc:	20000ae8 	.word	0x20000ae8
 8009600:	e000ed04 	.word	0xe000ed04

08009604 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800960c:	2300      	movs	r3, #0
 800960e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d018      	beq.n	8009648 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009616:	4b14      	ldr	r3, [pc, #80]	@ (8009668 <vTaskDelay+0x64>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00b      	beq.n	8009636 <vTaskDelay+0x32>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	60bb      	str	r3, [r7, #8]
}
 8009630:	bf00      	nop
 8009632:	bf00      	nop
 8009634:	e7fd      	b.n	8009632 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009636:	f000 f88b 	bl	8009750 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800963a:	2100      	movs	r1, #0
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fe13 	bl	800a268 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009642:	f000 f893 	bl	800976c <xTaskResumeAll>
 8009646:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d107      	bne.n	800965e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800964e:	4b07      	ldr	r3, [pc, #28]	@ (800966c <vTaskDelay+0x68>)
 8009650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009654:	601a      	str	r2, [r3, #0]
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20000fe0 	.word	0x20000fe0
 800966c:	e000ed04 	.word	0xe000ed04

08009670 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b08a      	sub	sp, #40	@ 0x28
 8009674:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009676:	2300      	movs	r3, #0
 8009678:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800967a:	2300      	movs	r3, #0
 800967c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800967e:	463a      	mov	r2, r7
 8009680:	1d39      	adds	r1, r7, #4
 8009682:	f107 0308 	add.w	r3, r7, #8
 8009686:	4618      	mov	r0, r3
 8009688:	f7fe fe08 	bl	800829c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	9202      	str	r2, [sp, #8]
 8009694:	9301      	str	r3, [sp, #4]
 8009696:	2300      	movs	r3, #0
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	2300      	movs	r3, #0
 800969c:	460a      	mov	r2, r1
 800969e:	4924      	ldr	r1, [pc, #144]	@ (8009730 <vTaskStartScheduler+0xc0>)
 80096a0:	4824      	ldr	r0, [pc, #144]	@ (8009734 <vTaskStartScheduler+0xc4>)
 80096a2:	f7ff fdf1 	bl	8009288 <xTaskCreateStatic>
 80096a6:	4603      	mov	r3, r0
 80096a8:	4a23      	ldr	r2, [pc, #140]	@ (8009738 <vTaskStartScheduler+0xc8>)
 80096aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096ac:	4b22      	ldr	r3, [pc, #136]	@ (8009738 <vTaskStartScheduler+0xc8>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096b4:	2301      	movs	r3, #1
 80096b6:	617b      	str	r3, [r7, #20]
 80096b8:	e001      	b.n	80096be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d102      	bne.n	80096ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80096c4:	f000 fe24 	bl	800a310 <xTimerCreateTimerTask>
 80096c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d11b      	bne.n	8009708 <vTaskStartScheduler+0x98>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	613b      	str	r3, [r7, #16]
}
 80096e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096e4:	4b15      	ldr	r3, [pc, #84]	@ (800973c <vTaskStartScheduler+0xcc>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3354      	adds	r3, #84	@ 0x54
 80096ea:	4a15      	ldr	r2, [pc, #84]	@ (8009740 <vTaskStartScheduler+0xd0>)
 80096ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096ee:	4b15      	ldr	r3, [pc, #84]	@ (8009744 <vTaskStartScheduler+0xd4>)
 80096f0:	f04f 32ff 	mov.w	r2, #4294967295
 80096f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096f6:	4b14      	ldr	r3, [pc, #80]	@ (8009748 <vTaskStartScheduler+0xd8>)
 80096f8:	2201      	movs	r2, #1
 80096fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096fc:	4b13      	ldr	r3, [pc, #76]	@ (800974c <vTaskStartScheduler+0xdc>)
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009702:	f001 f9d9 	bl	800aab8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009706:	e00f      	b.n	8009728 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970e:	d10b      	bne.n	8009728 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	60fb      	str	r3, [r7, #12]
}
 8009722:	bf00      	nop
 8009724:	bf00      	nop
 8009726:	e7fd      	b.n	8009724 <vTaskStartScheduler+0xb4>
}
 8009728:	bf00      	nop
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	0800c304 	.word	0x0800c304
 8009734:	08009d79 	.word	0x08009d79
 8009738:	20000fdc 	.word	0x20000fdc
 800973c:	20000ae4 	.word	0x20000ae4
 8009740:	2000001c 	.word	0x2000001c
 8009744:	20000fd8 	.word	0x20000fd8
 8009748:	20000fc4 	.word	0x20000fc4
 800974c:	20000fbc 	.word	0x20000fbc

08009750 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009750:	b480      	push	{r7}
 8009752:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009754:	4b04      	ldr	r3, [pc, #16]	@ (8009768 <vTaskSuspendAll+0x18>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3301      	adds	r3, #1
 800975a:	4a03      	ldr	r2, [pc, #12]	@ (8009768 <vTaskSuspendAll+0x18>)
 800975c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800975e:	bf00      	nop
 8009760:	46bd      	mov	sp, r7
 8009762:	bc80      	pop	{r7}
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	20000fe0 	.word	0x20000fe0

0800976c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009772:	2300      	movs	r3, #0
 8009774:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009776:	2300      	movs	r3, #0
 8009778:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800977a:	4b42      	ldr	r3, [pc, #264]	@ (8009884 <xTaskResumeAll+0x118>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10b      	bne.n	800979a <xTaskResumeAll+0x2e>
	__asm volatile
 8009782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009786:	f383 8811 	msr	BASEPRI, r3
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	603b      	str	r3, [r7, #0]
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop
 8009798:	e7fd      	b.n	8009796 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800979a:	f001 f9ff 	bl	800ab9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800979e:	4b39      	ldr	r3, [pc, #228]	@ (8009884 <xTaskResumeAll+0x118>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3b01      	subs	r3, #1
 80097a4:	4a37      	ldr	r2, [pc, #220]	@ (8009884 <xTaskResumeAll+0x118>)
 80097a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097a8:	4b36      	ldr	r3, [pc, #216]	@ (8009884 <xTaskResumeAll+0x118>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d162      	bne.n	8009876 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097b0:	4b35      	ldr	r3, [pc, #212]	@ (8009888 <xTaskResumeAll+0x11c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d05e      	beq.n	8009876 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097b8:	e02f      	b.n	800981a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ba:	4b34      	ldr	r3, [pc, #208]	@ (800988c <xTaskResumeAll+0x120>)
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3318      	adds	r3, #24
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fe fe20 	bl	800840c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3304      	adds	r3, #4
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fe fe1b 	bl	800840c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097da:	4b2d      	ldr	r3, [pc, #180]	@ (8009890 <xTaskResumeAll+0x124>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d903      	bls.n	80097ea <xTaskResumeAll+0x7e>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009890 <xTaskResumeAll+0x124>)
 80097e8:	6013      	str	r3, [r2, #0]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ee:	4613      	mov	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4a27      	ldr	r2, [pc, #156]	@ (8009894 <xTaskResumeAll+0x128>)
 80097f8:	441a      	add	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	3304      	adds	r3, #4
 80097fe:	4619      	mov	r1, r3
 8009800:	4610      	mov	r0, r2
 8009802:	f7fe fda8 	bl	8008356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800980a:	4b23      	ldr	r3, [pc, #140]	@ (8009898 <xTaskResumeAll+0x12c>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009810:	429a      	cmp	r2, r3
 8009812:	d302      	bcc.n	800981a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009814:	4b21      	ldr	r3, [pc, #132]	@ (800989c <xTaskResumeAll+0x130>)
 8009816:	2201      	movs	r2, #1
 8009818:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800981a:	4b1c      	ldr	r3, [pc, #112]	@ (800988c <xTaskResumeAll+0x120>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1cb      	bne.n	80097ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009828:	f000 fb62 	bl	8009ef0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800982c:	4b1c      	ldr	r3, [pc, #112]	@ (80098a0 <xTaskResumeAll+0x134>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d010      	beq.n	800985a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009838:	f000 f844 	bl	80098c4 <xTaskIncrementTick>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d002      	beq.n	8009848 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009842:	4b16      	ldr	r3, [pc, #88]	@ (800989c <xTaskResumeAll+0x130>)
 8009844:	2201      	movs	r2, #1
 8009846:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	3b01      	subs	r3, #1
 800984c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1f1      	bne.n	8009838 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009854:	4b12      	ldr	r3, [pc, #72]	@ (80098a0 <xTaskResumeAll+0x134>)
 8009856:	2200      	movs	r2, #0
 8009858:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800985a:	4b10      	ldr	r3, [pc, #64]	@ (800989c <xTaskResumeAll+0x130>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d009      	beq.n	8009876 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009862:	2301      	movs	r3, #1
 8009864:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009866:	4b0f      	ldr	r3, [pc, #60]	@ (80098a4 <xTaskResumeAll+0x138>)
 8009868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009876:	f001 f9c1 	bl	800abfc <vPortExitCritical>

	return xAlreadyYielded;
 800987a:	68bb      	ldr	r3, [r7, #8]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20000fe0 	.word	0x20000fe0
 8009888:	20000fb8 	.word	0x20000fb8
 800988c:	20000f78 	.word	0x20000f78
 8009890:	20000fc0 	.word	0x20000fc0
 8009894:	20000ae8 	.word	0x20000ae8
 8009898:	20000ae4 	.word	0x20000ae4
 800989c:	20000fcc 	.word	0x20000fcc
 80098a0:	20000fc8 	.word	0x20000fc8
 80098a4:	e000ed04 	.word	0xe000ed04

080098a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80098ae:	4b04      	ldr	r3, [pc, #16]	@ (80098c0 <xTaskGetTickCount+0x18>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80098b4:	687b      	ldr	r3, [r7, #4]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bc80      	pop	{r7}
 80098be:	4770      	bx	lr
 80098c0:	20000fbc 	.word	0x20000fbc

080098c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098ca:	2300      	movs	r3, #0
 80098cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098ce:	4b4f      	ldr	r3, [pc, #316]	@ (8009a0c <xTaskIncrementTick+0x148>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f040 8090 	bne.w	80099f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098d8:	4b4d      	ldr	r3, [pc, #308]	@ (8009a10 <xTaskIncrementTick+0x14c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	3301      	adds	r3, #1
 80098de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098e0:	4a4b      	ldr	r2, [pc, #300]	@ (8009a10 <xTaskIncrementTick+0x14c>)
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d121      	bne.n	8009930 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80098ec:	4b49      	ldr	r3, [pc, #292]	@ (8009a14 <xTaskIncrementTick+0x150>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00b      	beq.n	800990e <xTaskIncrementTick+0x4a>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	603b      	str	r3, [r7, #0]
}
 8009908:	bf00      	nop
 800990a:	bf00      	nop
 800990c:	e7fd      	b.n	800990a <xTaskIncrementTick+0x46>
 800990e:	4b41      	ldr	r3, [pc, #260]	@ (8009a14 <xTaskIncrementTick+0x150>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	60fb      	str	r3, [r7, #12]
 8009914:	4b40      	ldr	r3, [pc, #256]	@ (8009a18 <xTaskIncrementTick+0x154>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a3e      	ldr	r2, [pc, #248]	@ (8009a14 <xTaskIncrementTick+0x150>)
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	4a3e      	ldr	r2, [pc, #248]	@ (8009a18 <xTaskIncrementTick+0x154>)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6013      	str	r3, [r2, #0]
 8009922:	4b3e      	ldr	r3, [pc, #248]	@ (8009a1c <xTaskIncrementTick+0x158>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	3301      	adds	r3, #1
 8009928:	4a3c      	ldr	r2, [pc, #240]	@ (8009a1c <xTaskIncrementTick+0x158>)
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	f000 fae0 	bl	8009ef0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009930:	4b3b      	ldr	r3, [pc, #236]	@ (8009a20 <xTaskIncrementTick+0x15c>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	429a      	cmp	r2, r3
 8009938:	d349      	bcc.n	80099ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800993a:	4b36      	ldr	r3, [pc, #216]	@ (8009a14 <xTaskIncrementTick+0x150>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d104      	bne.n	800994e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009944:	4b36      	ldr	r3, [pc, #216]	@ (8009a20 <xTaskIncrementTick+0x15c>)
 8009946:	f04f 32ff 	mov.w	r2, #4294967295
 800994a:	601a      	str	r2, [r3, #0]
					break;
 800994c:	e03f      	b.n	80099ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800994e:	4b31      	ldr	r3, [pc, #196]	@ (8009a14 <xTaskIncrementTick+0x150>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	429a      	cmp	r2, r3
 8009964:	d203      	bcs.n	800996e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009966:	4a2e      	ldr	r2, [pc, #184]	@ (8009a20 <xTaskIncrementTick+0x15c>)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800996c:	e02f      	b.n	80099ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	3304      	adds	r3, #4
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe fd4a 	bl	800840c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800997c:	2b00      	cmp	r3, #0
 800997e:	d004      	beq.n	800998a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	3318      	adds	r3, #24
 8009984:	4618      	mov	r0, r3
 8009986:	f7fe fd41 	bl	800840c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800998e:	4b25      	ldr	r3, [pc, #148]	@ (8009a24 <xTaskIncrementTick+0x160>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	429a      	cmp	r2, r3
 8009994:	d903      	bls.n	800999e <xTaskIncrementTick+0xda>
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800999a:	4a22      	ldr	r2, [pc, #136]	@ (8009a24 <xTaskIncrementTick+0x160>)
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4a1f      	ldr	r2, [pc, #124]	@ (8009a28 <xTaskIncrementTick+0x164>)
 80099ac:	441a      	add	r2, r3
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	3304      	adds	r3, #4
 80099b2:	4619      	mov	r1, r3
 80099b4:	4610      	mov	r0, r2
 80099b6:	f7fe fcce 	bl	8008356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099be:	4b1b      	ldr	r3, [pc, #108]	@ (8009a2c <xTaskIncrementTick+0x168>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c4:	429a      	cmp	r2, r3
 80099c6:	d3b8      	bcc.n	800993a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80099c8:	2301      	movs	r3, #1
 80099ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099cc:	e7b5      	b.n	800993a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099ce:	4b17      	ldr	r3, [pc, #92]	@ (8009a2c <xTaskIncrementTick+0x168>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099d4:	4914      	ldr	r1, [pc, #80]	@ (8009a28 <xTaskIncrementTick+0x164>)
 80099d6:	4613      	mov	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	440b      	add	r3, r1
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d901      	bls.n	80099ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80099e6:	2301      	movs	r3, #1
 80099e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099ea:	4b11      	ldr	r3, [pc, #68]	@ (8009a30 <xTaskIncrementTick+0x16c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d007      	beq.n	8009a02 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80099f2:	2301      	movs	r3, #1
 80099f4:	617b      	str	r3, [r7, #20]
 80099f6:	e004      	b.n	8009a02 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80099f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009a34 <xTaskIncrementTick+0x170>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3301      	adds	r3, #1
 80099fe:	4a0d      	ldr	r2, [pc, #52]	@ (8009a34 <xTaskIncrementTick+0x170>)
 8009a00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a02:	697b      	ldr	r3, [r7, #20]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20000fe0 	.word	0x20000fe0
 8009a10:	20000fbc 	.word	0x20000fbc
 8009a14:	20000f70 	.word	0x20000f70
 8009a18:	20000f74 	.word	0x20000f74
 8009a1c:	20000fd0 	.word	0x20000fd0
 8009a20:	20000fd8 	.word	0x20000fd8
 8009a24:	20000fc0 	.word	0x20000fc0
 8009a28:	20000ae8 	.word	0x20000ae8
 8009a2c:	20000ae4 	.word	0x20000ae4
 8009a30:	20000fcc 	.word	0x20000fcc
 8009a34:	20000fc8 	.word	0x20000fc8

08009a38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8009ae8 <vTaskSwitchContext+0xb0>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a46:	4b29      	ldr	r3, [pc, #164]	@ (8009aec <vTaskSwitchContext+0xb4>)
 8009a48:	2201      	movs	r2, #1
 8009a4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a4c:	e047      	b.n	8009ade <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009a4e:	4b27      	ldr	r3, [pc, #156]	@ (8009aec <vTaskSwitchContext+0xb4>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a54:	4b26      	ldr	r3, [pc, #152]	@ (8009af0 <vTaskSwitchContext+0xb8>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	60fb      	str	r3, [r7, #12]
 8009a5a:	e011      	b.n	8009a80 <vTaskSwitchContext+0x48>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10b      	bne.n	8009a7a <vTaskSwitchContext+0x42>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	607b      	str	r3, [r7, #4]
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop
 8009a78:	e7fd      	b.n	8009a76 <vTaskSwitchContext+0x3e>
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	60fb      	str	r3, [r7, #12]
 8009a80:	491c      	ldr	r1, [pc, #112]	@ (8009af4 <vTaskSwitchContext+0xbc>)
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	4613      	mov	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	4413      	add	r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	440b      	add	r3, r1
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d0e3      	beq.n	8009a5c <vTaskSwitchContext+0x24>
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4613      	mov	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	4413      	add	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4a15      	ldr	r2, [pc, #84]	@ (8009af4 <vTaskSwitchContext+0xbc>)
 8009aa0:	4413      	add	r3, r2
 8009aa2:	60bb      	str	r3, [r7, #8]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	605a      	str	r2, [r3, #4]
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d104      	bne.n	8009ac4 <vTaskSwitchContext+0x8c>
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	605a      	str	r2, [r3, #4]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	4a0b      	ldr	r2, [pc, #44]	@ (8009af8 <vTaskSwitchContext+0xc0>)
 8009acc:	6013      	str	r3, [r2, #0]
 8009ace:	4a08      	ldr	r2, [pc, #32]	@ (8009af0 <vTaskSwitchContext+0xb8>)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ad4:	4b08      	ldr	r3, [pc, #32]	@ (8009af8 <vTaskSwitchContext+0xc0>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3354      	adds	r3, #84	@ 0x54
 8009ada:	4a08      	ldr	r2, [pc, #32]	@ (8009afc <vTaskSwitchContext+0xc4>)
 8009adc:	6013      	str	r3, [r2, #0]
}
 8009ade:	bf00      	nop
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr
 8009ae8:	20000fe0 	.word	0x20000fe0
 8009aec:	20000fcc 	.word	0x20000fcc
 8009af0:	20000fc0 	.word	0x20000fc0
 8009af4:	20000ae8 	.word	0x20000ae8
 8009af8:	20000ae4 	.word	0x20000ae4
 8009afc:	2000001c 	.word	0x2000001c

08009b00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10b      	bne.n	8009b28 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	60fb      	str	r3, [r7, #12]
}
 8009b22:	bf00      	nop
 8009b24:	bf00      	nop
 8009b26:	e7fd      	b.n	8009b24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b28:	4b07      	ldr	r3, [pc, #28]	@ (8009b48 <vTaskPlaceOnEventList+0x48>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	3318      	adds	r3, #24
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f7fe fc33 	bl	800839c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b36:	2101      	movs	r1, #1
 8009b38:	6838      	ldr	r0, [r7, #0]
 8009b3a:	f000 fb95 	bl	800a268 <prvAddCurrentTaskToDelayedList>
}
 8009b3e:	bf00      	nop
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20000ae4 	.word	0x20000ae4

08009b4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10b      	bne.n	8009b76 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	617b      	str	r3, [r7, #20]
}
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
 8009b74:	e7fd      	b.n	8009b72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b76:	4b0a      	ldr	r3, [pc, #40]	@ (8009ba0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	3318      	adds	r3, #24
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f7fe fbe9 	bl	8008356 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d002      	beq.n	8009b90 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b90:	6879      	ldr	r1, [r7, #4]
 8009b92:	68b8      	ldr	r0, [r7, #8]
 8009b94:	f000 fb68 	bl	800a268 <prvAddCurrentTaskToDelayedList>
	}
 8009b98:	bf00      	nop
 8009b9a:	3718      	adds	r7, #24
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}
 8009ba0:	20000ae4 	.word	0x20000ae4

08009ba4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10b      	bne.n	8009bd2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	60fb      	str	r3, [r7, #12]
}
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
 8009bd0:	e7fd      	b.n	8009bce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	3318      	adds	r3, #24
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fe fc18 	bl	800840c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8009c54 <xTaskRemoveFromEventList+0xb0>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d11d      	bne.n	8009c20 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	3304      	adds	r3, #4
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fe fc0f 	bl	800840c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bf2:	4b19      	ldr	r3, [pc, #100]	@ (8009c58 <xTaskRemoveFromEventList+0xb4>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d903      	bls.n	8009c02 <xTaskRemoveFromEventList+0x5e>
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bfe:	4a16      	ldr	r2, [pc, #88]	@ (8009c58 <xTaskRemoveFromEventList+0xb4>)
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4a13      	ldr	r2, [pc, #76]	@ (8009c5c <xTaskRemoveFromEventList+0xb8>)
 8009c10:	441a      	add	r2, r3
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	3304      	adds	r3, #4
 8009c16:	4619      	mov	r1, r3
 8009c18:	4610      	mov	r0, r2
 8009c1a:	f7fe fb9c 	bl	8008356 <vListInsertEnd>
 8009c1e:	e005      	b.n	8009c2c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	3318      	adds	r3, #24
 8009c24:	4619      	mov	r1, r3
 8009c26:	480e      	ldr	r0, [pc, #56]	@ (8009c60 <xTaskRemoveFromEventList+0xbc>)
 8009c28:	f7fe fb95 	bl	8008356 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c30:	4b0c      	ldr	r3, [pc, #48]	@ (8009c64 <xTaskRemoveFromEventList+0xc0>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d905      	bls.n	8009c46 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8009c68 <xTaskRemoveFromEventList+0xc4>)
 8009c40:	2201      	movs	r2, #1
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	e001      	b.n	8009c4a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009c46:	2300      	movs	r3, #0
 8009c48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c4a:	697b      	ldr	r3, [r7, #20]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3718      	adds	r7, #24
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	20000fe0 	.word	0x20000fe0
 8009c58:	20000fc0 	.word	0x20000fc0
 8009c5c:	20000ae8 	.word	0x20000ae8
 8009c60:	20000f78 	.word	0x20000f78
 8009c64:	20000ae4 	.word	0x20000ae4
 8009c68:	20000fcc 	.word	0x20000fcc

08009c6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b083      	sub	sp, #12
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c74:	4b06      	ldr	r3, [pc, #24]	@ (8009c90 <vTaskInternalSetTimeOutState+0x24>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c7c:	4b05      	ldr	r3, [pc, #20]	@ (8009c94 <vTaskInternalSetTimeOutState+0x28>)
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	605a      	str	r2, [r3, #4]
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bc80      	pop	{r7}
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	20000fd0 	.word	0x20000fd0
 8009c94:	20000fbc 	.word	0x20000fbc

08009c98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b088      	sub	sp, #32
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10b      	bne.n	8009cc0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	613b      	str	r3, [r7, #16]
}
 8009cba:	bf00      	nop
 8009cbc:	bf00      	nop
 8009cbe:	e7fd      	b.n	8009cbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10b      	bne.n	8009cde <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	60fb      	str	r3, [r7, #12]
}
 8009cd8:	bf00      	nop
 8009cda:	bf00      	nop
 8009cdc:	e7fd      	b.n	8009cda <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009cde:	f000 ff5d 	bl	800ab9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8009d58 <xTaskCheckForTimeOut+0xc0>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfa:	d102      	bne.n	8009d02 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61fb      	str	r3, [r7, #28]
 8009d00:	e023      	b.n	8009d4a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	4b15      	ldr	r3, [pc, #84]	@ (8009d5c <xTaskCheckForTimeOut+0xc4>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d007      	beq.n	8009d1e <xTaskCheckForTimeOut+0x86>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	69ba      	ldr	r2, [r7, #24]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d302      	bcc.n	8009d1e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	61fb      	str	r3, [r7, #28]
 8009d1c:	e015      	b.n	8009d4a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d20b      	bcs.n	8009d40 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	1ad2      	subs	r2, r2, r3
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7ff ff99 	bl	8009c6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	61fb      	str	r3, [r7, #28]
 8009d3e:	e004      	b.n	8009d4a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2200      	movs	r2, #0
 8009d44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d46:	2301      	movs	r3, #1
 8009d48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d4a:	f000 ff57 	bl	800abfc <vPortExitCritical>

	return xReturn;
 8009d4e:	69fb      	ldr	r3, [r7, #28]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3720      	adds	r7, #32
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	20000fbc 	.word	0x20000fbc
 8009d5c:	20000fd0 	.word	0x20000fd0

08009d60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d60:	b480      	push	{r7}
 8009d62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d64:	4b03      	ldr	r3, [pc, #12]	@ (8009d74 <vTaskMissedYield+0x14>)
 8009d66:	2201      	movs	r2, #1
 8009d68:	601a      	str	r2, [r3, #0]
}
 8009d6a:	bf00      	nop
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bc80      	pop	{r7}
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	20000fcc 	.word	0x20000fcc

08009d78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d80:	f000 f852 	bl	8009e28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d84:	4b06      	ldr	r3, [pc, #24]	@ (8009da0 <prvIdleTask+0x28>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d9f9      	bls.n	8009d80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d8c:	4b05      	ldr	r3, [pc, #20]	@ (8009da4 <prvIdleTask+0x2c>)
 8009d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d9c:	e7f0      	b.n	8009d80 <prvIdleTask+0x8>
 8009d9e:	bf00      	nop
 8009da0:	20000ae8 	.word	0x20000ae8
 8009da4:	e000ed04 	.word	0xe000ed04

08009da8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dae:	2300      	movs	r3, #0
 8009db0:	607b      	str	r3, [r7, #4]
 8009db2:	e00c      	b.n	8009dce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	4613      	mov	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4a12      	ldr	r2, [pc, #72]	@ (8009e08 <prvInitialiseTaskLists+0x60>)
 8009dc0:	4413      	add	r3, r2
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe fa9c 	bl	8008300 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	607b      	str	r3, [r7, #4]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b37      	cmp	r3, #55	@ 0x37
 8009dd2:	d9ef      	bls.n	8009db4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009dd4:	480d      	ldr	r0, [pc, #52]	@ (8009e0c <prvInitialiseTaskLists+0x64>)
 8009dd6:	f7fe fa93 	bl	8008300 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009dda:	480d      	ldr	r0, [pc, #52]	@ (8009e10 <prvInitialiseTaskLists+0x68>)
 8009ddc:	f7fe fa90 	bl	8008300 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009de0:	480c      	ldr	r0, [pc, #48]	@ (8009e14 <prvInitialiseTaskLists+0x6c>)
 8009de2:	f7fe fa8d 	bl	8008300 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009de6:	480c      	ldr	r0, [pc, #48]	@ (8009e18 <prvInitialiseTaskLists+0x70>)
 8009de8:	f7fe fa8a 	bl	8008300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009dec:	480b      	ldr	r0, [pc, #44]	@ (8009e1c <prvInitialiseTaskLists+0x74>)
 8009dee:	f7fe fa87 	bl	8008300 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009df2:	4b0b      	ldr	r3, [pc, #44]	@ (8009e20 <prvInitialiseTaskLists+0x78>)
 8009df4:	4a05      	ldr	r2, [pc, #20]	@ (8009e0c <prvInitialiseTaskLists+0x64>)
 8009df6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009df8:	4b0a      	ldr	r3, [pc, #40]	@ (8009e24 <prvInitialiseTaskLists+0x7c>)
 8009dfa:	4a05      	ldr	r2, [pc, #20]	@ (8009e10 <prvInitialiseTaskLists+0x68>)
 8009dfc:	601a      	str	r2, [r3, #0]
}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20000ae8 	.word	0x20000ae8
 8009e0c:	20000f48 	.word	0x20000f48
 8009e10:	20000f5c 	.word	0x20000f5c
 8009e14:	20000f78 	.word	0x20000f78
 8009e18:	20000f8c 	.word	0x20000f8c
 8009e1c:	20000fa4 	.word	0x20000fa4
 8009e20:	20000f70 	.word	0x20000f70
 8009e24:	20000f74 	.word	0x20000f74

08009e28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e2e:	e019      	b.n	8009e64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e30:	f000 feb4 	bl	800ab9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e34:	4b10      	ldr	r3, [pc, #64]	@ (8009e78 <prvCheckTasksWaitingTermination+0x50>)
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3304      	adds	r3, #4
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7fe fae3 	bl	800840c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e46:	4b0d      	ldr	r3, [pc, #52]	@ (8009e7c <prvCheckTasksWaitingTermination+0x54>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8009e7c <prvCheckTasksWaitingTermination+0x54>)
 8009e4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e50:	4b0b      	ldr	r3, [pc, #44]	@ (8009e80 <prvCheckTasksWaitingTermination+0x58>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3b01      	subs	r3, #1
 8009e56:	4a0a      	ldr	r2, [pc, #40]	@ (8009e80 <prvCheckTasksWaitingTermination+0x58>)
 8009e58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e5a:	f000 fecf 	bl	800abfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f810 	bl	8009e84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e64:	4b06      	ldr	r3, [pc, #24]	@ (8009e80 <prvCheckTasksWaitingTermination+0x58>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e1      	bne.n	8009e30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e6c:	bf00      	nop
 8009e6e:	bf00      	nop
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	20000f8c 	.word	0x20000f8c
 8009e7c:	20000fb8 	.word	0x20000fb8
 8009e80:	20000fa0 	.word	0x20000fa0

08009e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	3354      	adds	r3, #84	@ 0x54
 8009e90:	4618      	mov	r0, r3
 8009e92:	f001 fc4f 	bl	800b734 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d108      	bne.n	8009eb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f001 f849 	bl	800af3c <vPortFree>
				vPortFree( pxTCB );
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 f846 	bl	800af3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009eb0:	e019      	b.n	8009ee6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d103      	bne.n	8009ec4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 f83d 	bl	800af3c <vPortFree>
	}
 8009ec2:	e010      	b.n	8009ee6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	d00b      	beq.n	8009ee6 <prvDeleteTCB+0x62>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	60fb      	str	r3, [r7, #12]
}
 8009ee0:	bf00      	nop
 8009ee2:	bf00      	nop
 8009ee4:	e7fd      	b.n	8009ee2 <prvDeleteTCB+0x5e>
	}
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8009f28 <prvResetNextTaskUnblockTime+0x38>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d104      	bne.n	8009f0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009f00:	4b0a      	ldr	r3, [pc, #40]	@ (8009f2c <prvResetNextTaskUnblockTime+0x3c>)
 8009f02:	f04f 32ff 	mov.w	r2, #4294967295
 8009f06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f08:	e008      	b.n	8009f1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f0a:	4b07      	ldr	r3, [pc, #28]	@ (8009f28 <prvResetNextTaskUnblockTime+0x38>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	4a04      	ldr	r2, [pc, #16]	@ (8009f2c <prvResetNextTaskUnblockTime+0x3c>)
 8009f1a:	6013      	str	r3, [r2, #0]
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bc80      	pop	{r7}
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	20000f70 	.word	0x20000f70
 8009f2c:	20000fd8 	.word	0x20000fd8

08009f30 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009f36:	4b04      	ldr	r3, [pc, #16]	@ (8009f48 <xTaskGetCurrentTaskHandle+0x18>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009f3c:	687b      	ldr	r3, [r7, #4]
	}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	370c      	adds	r7, #12
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bc80      	pop	{r7}
 8009f46:	4770      	bx	lr
 8009f48:	20000ae4 	.word	0x20000ae4

08009f4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f52:	4b0b      	ldr	r3, [pc, #44]	@ (8009f80 <xTaskGetSchedulerState+0x34>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d102      	bne.n	8009f60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	607b      	str	r3, [r7, #4]
 8009f5e:	e008      	b.n	8009f72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f60:	4b08      	ldr	r3, [pc, #32]	@ (8009f84 <xTaskGetSchedulerState+0x38>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d102      	bne.n	8009f6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f68:	2302      	movs	r3, #2
 8009f6a:	607b      	str	r3, [r7, #4]
 8009f6c:	e001      	b.n	8009f72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f72:	687b      	ldr	r3, [r7, #4]
	}
 8009f74:	4618      	mov	r0, r3
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bc80      	pop	{r7}
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	20000fc4 	.word	0x20000fc4
 8009f84:	20000fe0 	.word	0x20000fe0

08009f88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f94:	2300      	movs	r3, #0
 8009f96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d051      	beq.n	800a042 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800a04c <xTaskPriorityInherit+0xc4>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d241      	bcs.n	800a030 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	db06      	blt.n	8009fc2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fb4:	4b25      	ldr	r3, [pc, #148]	@ (800a04c <xTaskPriorityInherit+0xc4>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	6959      	ldr	r1, [r3, #20]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fca:	4613      	mov	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4a1f      	ldr	r2, [pc, #124]	@ (800a050 <xTaskPriorityInherit+0xc8>)
 8009fd4:	4413      	add	r3, r2
 8009fd6:	4299      	cmp	r1, r3
 8009fd8:	d122      	bne.n	800a020 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	3304      	adds	r3, #4
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f7fe fa14 	bl	800840c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fe4:	4b19      	ldr	r3, [pc, #100]	@ (800a04c <xTaskPriorityInherit+0xc4>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ff2:	4b18      	ldr	r3, [pc, #96]	@ (800a054 <xTaskPriorityInherit+0xcc>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d903      	bls.n	800a002 <xTaskPriorityInherit+0x7a>
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffe:	4a15      	ldr	r2, [pc, #84]	@ (800a054 <xTaskPriorityInherit+0xcc>)
 800a000:	6013      	str	r3, [r2, #0]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4a10      	ldr	r2, [pc, #64]	@ (800a050 <xTaskPriorityInherit+0xc8>)
 800a010:	441a      	add	r2, r3
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	3304      	adds	r3, #4
 800a016:	4619      	mov	r1, r3
 800a018:	4610      	mov	r0, r2
 800a01a:	f7fe f99c 	bl	8008356 <vListInsertEnd>
 800a01e:	e004      	b.n	800a02a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a020:	4b0a      	ldr	r3, [pc, #40]	@ (800a04c <xTaskPriorityInherit+0xc4>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a02a:	2301      	movs	r3, #1
 800a02c:	60fb      	str	r3, [r7, #12]
 800a02e:	e008      	b.n	800a042 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a034:	4b05      	ldr	r3, [pc, #20]	@ (800a04c <xTaskPriorityInherit+0xc4>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d201      	bcs.n	800a042 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a03e:	2301      	movs	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a042:	68fb      	ldr	r3, [r7, #12]
	}
 800a044:	4618      	mov	r0, r3
 800a046:	3710      	adds	r7, #16
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	20000ae4 	.word	0x20000ae4
 800a050:	20000ae8 	.word	0x20000ae8
 800a054:	20000fc0 	.word	0x20000fc0

0800a058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b086      	sub	sp, #24
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a064:	2300      	movs	r3, #0
 800a066:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d058      	beq.n	800a120 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a06e:	4b2f      	ldr	r3, [pc, #188]	@ (800a12c <xTaskPriorityDisinherit+0xd4>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	429a      	cmp	r2, r3
 800a076:	d00b      	beq.n	800a090 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	60fb      	str	r3, [r7, #12]
}
 800a08a:	bf00      	nop
 800a08c:	bf00      	nop
 800a08e:	e7fd      	b.n	800a08c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10b      	bne.n	800a0b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	60bb      	str	r3, [r7, #8]
}
 800a0aa:	bf00      	nop
 800a0ac:	bf00      	nop
 800a0ae:	e7fd      	b.n	800a0ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0b4:	1e5a      	subs	r2, r3, #1
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d02c      	beq.n	800a120 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d128      	bne.n	800a120 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7fe f99a 	bl	800840c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a130 <xTaskPriorityDisinherit+0xd8>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d903      	bls.n	800a100 <xTaskPriorityDisinherit+0xa8>
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0fc:	4a0c      	ldr	r2, [pc, #48]	@ (800a130 <xTaskPriorityDisinherit+0xd8>)
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a104:	4613      	mov	r3, r2
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4a09      	ldr	r2, [pc, #36]	@ (800a134 <xTaskPriorityDisinherit+0xdc>)
 800a10e:	441a      	add	r2, r3
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	3304      	adds	r3, #4
 800a114:	4619      	mov	r1, r3
 800a116:	4610      	mov	r0, r2
 800a118:	f7fe f91d 	bl	8008356 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a11c:	2301      	movs	r3, #1
 800a11e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a120:	697b      	ldr	r3, [r7, #20]
	}
 800a122:	4618      	mov	r0, r3
 800a124:	3718      	adds	r7, #24
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	20000ae4 	.word	0x20000ae4
 800a130:	20000fc0 	.word	0x20000fc0
 800a134:	20000ae8 	.word	0x20000ae8

0800a138 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b088      	sub	sp, #32
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a146:	2301      	movs	r3, #1
 800a148:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d06c      	beq.n	800a22a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10b      	bne.n	800a170 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	60fb      	str	r3, [r7, #12]
}
 800a16a:	bf00      	nop
 800a16c:	bf00      	nop
 800a16e:	e7fd      	b.n	800a16c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a174:	683a      	ldr	r2, [r7, #0]
 800a176:	429a      	cmp	r2, r3
 800a178:	d902      	bls.n	800a180 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	61fb      	str	r3, [r7, #28]
 800a17e:	e002      	b.n	800a186 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a184:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18a:	69fa      	ldr	r2, [r7, #28]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d04c      	beq.n	800a22a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	429a      	cmp	r2, r3
 800a198:	d147      	bne.n	800a22a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a19a:	4b26      	ldr	r3, [pc, #152]	@ (800a234 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	69ba      	ldr	r2, [r7, #24]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d10b      	bne.n	800a1bc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a1a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a8:	f383 8811 	msr	BASEPRI, r3
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f3bf 8f4f 	dsb	sy
 800a1b4:	60bb      	str	r3, [r7, #8]
}
 800a1b6:	bf00      	nop
 800a1b8:	bf00      	nop
 800a1ba:	e7fd      	b.n	800a1b8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	69fa      	ldr	r2, [r7, #28]
 800a1c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	db04      	blt.n	800a1da <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	6959      	ldr	r1, [r3, #20]
 800a1de:	693a      	ldr	r2, [r7, #16]
 800a1e0:	4613      	mov	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4a13      	ldr	r2, [pc, #76]	@ (800a238 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a1ea:	4413      	add	r3, r2
 800a1ec:	4299      	cmp	r1, r3
 800a1ee:	d11c      	bne.n	800a22a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7fe f909 	bl	800840c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1fe:	4b0f      	ldr	r3, [pc, #60]	@ (800a23c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	429a      	cmp	r2, r3
 800a204:	d903      	bls.n	800a20e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a20a:	4a0c      	ldr	r2, [pc, #48]	@ (800a23c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a212:	4613      	mov	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4a07      	ldr	r2, [pc, #28]	@ (800a238 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a21c:	441a      	add	r2, r3
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	3304      	adds	r3, #4
 800a222:	4619      	mov	r1, r3
 800a224:	4610      	mov	r0, r2
 800a226:	f7fe f896 	bl	8008356 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a22a:	bf00      	nop
 800a22c:	3720      	adds	r7, #32
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	20000ae4 	.word	0x20000ae4
 800a238:	20000ae8 	.word	0x20000ae8
 800a23c:	20000fc0 	.word	0x20000fc0

0800a240 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a244:	4b07      	ldr	r3, [pc, #28]	@ (800a264 <pvTaskIncrementMutexHeldCount+0x24>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d004      	beq.n	800a256 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a24c:	4b05      	ldr	r3, [pc, #20]	@ (800a264 <pvTaskIncrementMutexHeldCount+0x24>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a252:	3201      	adds	r2, #1
 800a254:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a256:	4b03      	ldr	r3, [pc, #12]	@ (800a264 <pvTaskIncrementMutexHeldCount+0x24>)
 800a258:	681b      	ldr	r3, [r3, #0]
	}
 800a25a:	4618      	mov	r0, r3
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bc80      	pop	{r7}
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	20000ae4 	.word	0x20000ae4

0800a268 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a272:	4b21      	ldr	r3, [pc, #132]	@ (800a2f8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a278:	4b20      	ldr	r3, [pc, #128]	@ (800a2fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3304      	adds	r3, #4
 800a27e:	4618      	mov	r0, r3
 800a280:	f7fe f8c4 	bl	800840c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28a:	d10a      	bne.n	800a2a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d007      	beq.n	800a2a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a292:	4b1a      	ldr	r3, [pc, #104]	@ (800a2fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	3304      	adds	r3, #4
 800a298:	4619      	mov	r1, r3
 800a29a:	4819      	ldr	r0, [pc, #100]	@ (800a300 <prvAddCurrentTaskToDelayedList+0x98>)
 800a29c:	f7fe f85b 	bl	8008356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a2a0:	e026      	b.n	800a2f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2aa:	4b14      	ldr	r3, [pc, #80]	@ (800a2fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68ba      	ldr	r2, [r7, #8]
 800a2b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2b2:	68ba      	ldr	r2, [r7, #8]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d209      	bcs.n	800a2ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2ba:	4b12      	ldr	r3, [pc, #72]	@ (800a304 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	4b0f      	ldr	r3, [pc, #60]	@ (800a2fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f7fe f868 	bl	800839c <vListInsert>
}
 800a2cc:	e010      	b.n	800a2f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a308 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a2fc <prvAddCurrentTaskToDelayedList+0x94>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4619      	mov	r1, r3
 800a2da:	4610      	mov	r0, r2
 800a2dc:	f7fe f85e 	bl	800839c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a30c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d202      	bcs.n	800a2f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a2ea:	4a08      	ldr	r2, [pc, #32]	@ (800a30c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	6013      	str	r3, [r2, #0]
}
 800a2f0:	bf00      	nop
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	20000fbc 	.word	0x20000fbc
 800a2fc:	20000ae4 	.word	0x20000ae4
 800a300:	20000fa4 	.word	0x20000fa4
 800a304:	20000f74 	.word	0x20000f74
 800a308:	20000f70 	.word	0x20000f70
 800a30c:	20000fd8 	.word	0x20000fd8

0800a310 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b08a      	sub	sp, #40	@ 0x28
 800a314:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a316:	2300      	movs	r3, #0
 800a318:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a31a:	f000 fb11 	bl	800a940 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a31e:	4b1d      	ldr	r3, [pc, #116]	@ (800a394 <xTimerCreateTimerTask+0x84>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d021      	beq.n	800a36a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a326:	2300      	movs	r3, #0
 800a328:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a32e:	1d3a      	adds	r2, r7, #4
 800a330:	f107 0108 	add.w	r1, r7, #8
 800a334:	f107 030c 	add.w	r3, r7, #12
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fd ffc7 	bl	80082cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a33e:	6879      	ldr	r1, [r7, #4]
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	9202      	str	r2, [sp, #8]
 800a346:	9301      	str	r3, [sp, #4]
 800a348:	2302      	movs	r3, #2
 800a34a:	9300      	str	r3, [sp, #0]
 800a34c:	2300      	movs	r3, #0
 800a34e:	460a      	mov	r2, r1
 800a350:	4911      	ldr	r1, [pc, #68]	@ (800a398 <xTimerCreateTimerTask+0x88>)
 800a352:	4812      	ldr	r0, [pc, #72]	@ (800a39c <xTimerCreateTimerTask+0x8c>)
 800a354:	f7fe ff98 	bl	8009288 <xTaskCreateStatic>
 800a358:	4603      	mov	r3, r0
 800a35a:	4a11      	ldr	r2, [pc, #68]	@ (800a3a0 <xTimerCreateTimerTask+0x90>)
 800a35c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a35e:	4b10      	ldr	r3, [pc, #64]	@ (800a3a0 <xTimerCreateTimerTask+0x90>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a366:	2301      	movs	r3, #1
 800a368:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d10b      	bne.n	800a388 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	613b      	str	r3, [r7, #16]
}
 800a382:	bf00      	nop
 800a384:	bf00      	nop
 800a386:	e7fd      	b.n	800a384 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a388:	697b      	ldr	r3, [r7, #20]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20001014 	.word	0x20001014
 800a398:	0800c30c 	.word	0x0800c30c
 800a39c:	0800a4dd 	.word	0x0800a4dd
 800a3a0:	20001018 	.word	0x20001018

0800a3a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08a      	sub	sp, #40	@ 0x28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d10b      	bne.n	800a3d4 <xTimerGenericCommand+0x30>
	__asm volatile
 800a3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	623b      	str	r3, [r7, #32]
}
 800a3ce:	bf00      	nop
 800a3d0:	bf00      	nop
 800a3d2:	e7fd      	b.n	800a3d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a3d4:	4b19      	ldr	r3, [pc, #100]	@ (800a43c <xTimerGenericCommand+0x98>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d02a      	beq.n	800a432 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	2b05      	cmp	r3, #5
 800a3ec:	dc18      	bgt.n	800a420 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a3ee:	f7ff fdad 	bl	8009f4c <xTaskGetSchedulerState>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d109      	bne.n	800a40c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3f8:	4b10      	ldr	r3, [pc, #64]	@ (800a43c <xTimerGenericCommand+0x98>)
 800a3fa:	6818      	ldr	r0, [r3, #0]
 800a3fc:	f107 0110 	add.w	r1, r7, #16
 800a400:	2300      	movs	r3, #0
 800a402:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a404:	f7fe fa2a 	bl	800885c <xQueueGenericSend>
 800a408:	6278      	str	r0, [r7, #36]	@ 0x24
 800a40a:	e012      	b.n	800a432 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a40c:	4b0b      	ldr	r3, [pc, #44]	@ (800a43c <xTimerGenericCommand+0x98>)
 800a40e:	6818      	ldr	r0, [r3, #0]
 800a410:	f107 0110 	add.w	r1, r7, #16
 800a414:	2300      	movs	r3, #0
 800a416:	2200      	movs	r2, #0
 800a418:	f7fe fa20 	bl	800885c <xQueueGenericSend>
 800a41c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a41e:	e008      	b.n	800a432 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a420:	4b06      	ldr	r3, [pc, #24]	@ (800a43c <xTimerGenericCommand+0x98>)
 800a422:	6818      	ldr	r0, [r3, #0]
 800a424:	f107 0110 	add.w	r1, r7, #16
 800a428:	2300      	movs	r3, #0
 800a42a:	683a      	ldr	r2, [r7, #0]
 800a42c:	f7fe fb18 	bl	8008a60 <xQueueGenericSendFromISR>
 800a430:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a434:	4618      	mov	r0, r3
 800a436:	3728      	adds	r7, #40	@ 0x28
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	20001014 	.word	0x20001014

0800a440 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af02      	add	r7, sp, #8
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a44a:	4b23      	ldr	r3, [pc, #140]	@ (800a4d8 <prvProcessExpiredTimer+0x98>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	3304      	adds	r3, #4
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fd ffd7 	bl	800840c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d023      	beq.n	800a4b4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	699a      	ldr	r2, [r3, #24]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	18d1      	adds	r1, r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	683a      	ldr	r2, [r7, #0]
 800a478:	6978      	ldr	r0, [r7, #20]
 800a47a:	f000 f8d3 	bl	800a624 <prvInsertTimerInActiveList>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d020      	beq.n	800a4c6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a484:	2300      	movs	r3, #0
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	2300      	movs	r3, #0
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	2100      	movs	r1, #0
 800a48e:	6978      	ldr	r0, [r7, #20]
 800a490:	f7ff ff88 	bl	800a3a4 <xTimerGenericCommand>
 800a494:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d114      	bne.n	800a4c6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	60fb      	str	r3, [r7, #12]
}
 800a4ae:	bf00      	nop
 800a4b0:	bf00      	nop
 800a4b2:	e7fd      	b.n	800a4b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a4ba:	f023 0301 	bic.w	r3, r3, #1
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	6978      	ldr	r0, [r7, #20]
 800a4cc:	4798      	blx	r3
}
 800a4ce:	bf00      	nop
 800a4d0:	3718      	adds	r7, #24
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	2000100c 	.word	0x2000100c

0800a4dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4e4:	f107 0308 	add.w	r3, r7, #8
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 f859 	bl	800a5a0 <prvGetNextExpireTime>
 800a4ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f000 f805 	bl	800a504 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a4fa:	f000 f8d5 	bl	800a6a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4fe:	bf00      	nop
 800a500:	e7f0      	b.n	800a4e4 <prvTimerTask+0x8>
	...

0800a504 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a50e:	f7ff f91f 	bl	8009750 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a512:	f107 0308 	add.w	r3, r7, #8
 800a516:	4618      	mov	r0, r3
 800a518:	f000 f864 	bl	800a5e4 <prvSampleTimeNow>
 800a51c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d130      	bne.n	800a586 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10a      	bne.n	800a540 <prvProcessTimerOrBlockTask+0x3c>
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d806      	bhi.n	800a540 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a532:	f7ff f91b 	bl	800976c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a536:	68f9      	ldr	r1, [r7, #12]
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7ff ff81 	bl	800a440 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a53e:	e024      	b.n	800a58a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d008      	beq.n	800a558 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a546:	4b13      	ldr	r3, [pc, #76]	@ (800a594 <prvProcessTimerOrBlockTask+0x90>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d101      	bne.n	800a554 <prvProcessTimerOrBlockTask+0x50>
 800a550:	2301      	movs	r3, #1
 800a552:	e000      	b.n	800a556 <prvProcessTimerOrBlockTask+0x52>
 800a554:	2300      	movs	r3, #0
 800a556:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a558:	4b0f      	ldr	r3, [pc, #60]	@ (800a598 <prvProcessTimerOrBlockTask+0x94>)
 800a55a:	6818      	ldr	r0, [r3, #0]
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	1ad3      	subs	r3, r2, r3
 800a562:	683a      	ldr	r2, [r7, #0]
 800a564:	4619      	mov	r1, r3
 800a566:	f7fe fe5b 	bl	8009220 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a56a:	f7ff f8ff 	bl	800976c <xTaskResumeAll>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10a      	bne.n	800a58a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a574:	4b09      	ldr	r3, [pc, #36]	@ (800a59c <prvProcessTimerOrBlockTask+0x98>)
 800a576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a57a:	601a      	str	r2, [r3, #0]
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	f3bf 8f6f 	isb	sy
}
 800a584:	e001      	b.n	800a58a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a586:	f7ff f8f1 	bl	800976c <xTaskResumeAll>
}
 800a58a:	bf00      	nop
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	20001010 	.word	0x20001010
 800a598:	20001014 	.word	0x20001014
 800a59c:	e000ed04 	.word	0xe000ed04

0800a5a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a5a8:	4b0d      	ldr	r3, [pc, #52]	@ (800a5e0 <prvGetNextExpireTime+0x40>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <prvGetNextExpireTime+0x16>
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	e000      	b.n	800a5b8 <prvGetNextExpireTime+0x18>
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d105      	bne.n	800a5d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5c4:	4b06      	ldr	r3, [pc, #24]	@ (800a5e0 <prvGetNextExpireTime+0x40>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	e001      	b.n	800a5d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bc80      	pop	{r7}
 800a5de:	4770      	bx	lr
 800a5e0:	2000100c 	.word	0x2000100c

0800a5e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a5ec:	f7ff f95c 	bl	80098a8 <xTaskGetTickCount>
 800a5f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a5f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a620 <prvSampleTimeNow+0x3c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d205      	bcs.n	800a608 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a5fc:	f000 f93a 	bl	800a874 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	e002      	b.n	800a60e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a60e:	4a04      	ldr	r2, [pc, #16]	@ (800a620 <prvSampleTimeNow+0x3c>)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a614:	68fb      	ldr	r3, [r7, #12]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
 800a61e:	bf00      	nop
 800a620:	2000101c 	.word	0x2000101c

0800a624 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a632:	2300      	movs	r3, #0
 800a634:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	429a      	cmp	r2, r3
 800a648:	d812      	bhi.n	800a670 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	1ad2      	subs	r2, r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	699b      	ldr	r3, [r3, #24]
 800a654:	429a      	cmp	r2, r3
 800a656:	d302      	bcc.n	800a65e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a658:	2301      	movs	r3, #1
 800a65a:	617b      	str	r3, [r7, #20]
 800a65c:	e01b      	b.n	800a696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a65e:	4b10      	ldr	r3, [pc, #64]	@ (800a6a0 <prvInsertTimerInActiveList+0x7c>)
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	3304      	adds	r3, #4
 800a666:	4619      	mov	r1, r3
 800a668:	4610      	mov	r0, r2
 800a66a:	f7fd fe97 	bl	800839c <vListInsert>
 800a66e:	e012      	b.n	800a696 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	429a      	cmp	r2, r3
 800a676:	d206      	bcs.n	800a686 <prvInsertTimerInActiveList+0x62>
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d302      	bcc.n	800a686 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a680:	2301      	movs	r3, #1
 800a682:	617b      	str	r3, [r7, #20]
 800a684:	e007      	b.n	800a696 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a686:	4b07      	ldr	r3, [pc, #28]	@ (800a6a4 <prvInsertTimerInActiveList+0x80>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	3304      	adds	r3, #4
 800a68e:	4619      	mov	r1, r3
 800a690:	4610      	mov	r0, r2
 800a692:	f7fd fe83 	bl	800839c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a696:	697b      	ldr	r3, [r7, #20]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3718      	adds	r7, #24
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	20001010 	.word	0x20001010
 800a6a4:	2000100c 	.word	0x2000100c

0800a6a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b08e      	sub	sp, #56	@ 0x38
 800a6ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6ae:	e0ce      	b.n	800a84e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	da19      	bge.n	800a6ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a6b6:	1d3b      	adds	r3, r7, #4
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10b      	bne.n	800a6da <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	61fb      	str	r3, [r7, #28]
}
 800a6d4:	bf00      	nop
 800a6d6:	bf00      	nop
 800a6d8:	e7fd      	b.n	800a6d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a6da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6e0:	6850      	ldr	r0, [r2, #4]
 800a6e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6e4:	6892      	ldr	r2, [r2, #8]
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f2c0 80ae 	blt.w	800a84e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d004      	beq.n	800a708 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a700:	3304      	adds	r3, #4
 800a702:	4618      	mov	r0, r3
 800a704:	f7fd fe82 	bl	800840c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a708:	463b      	mov	r3, r7
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7ff ff6a 	bl	800a5e4 <prvSampleTimeNow>
 800a710:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2b09      	cmp	r3, #9
 800a716:	f200 8097 	bhi.w	800a848 <prvProcessReceivedCommands+0x1a0>
 800a71a:	a201      	add	r2, pc, #4	@ (adr r2, 800a720 <prvProcessReceivedCommands+0x78>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a749 	.word	0x0800a749
 800a724:	0800a749 	.word	0x0800a749
 800a728:	0800a749 	.word	0x0800a749
 800a72c:	0800a7bf 	.word	0x0800a7bf
 800a730:	0800a7d3 	.word	0x0800a7d3
 800a734:	0800a81f 	.word	0x0800a81f
 800a738:	0800a749 	.word	0x0800a749
 800a73c:	0800a749 	.word	0x0800a749
 800a740:	0800a7bf 	.word	0x0800a7bf
 800a744:	0800a7d3 	.word	0x0800a7d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a74e:	f043 0301 	orr.w	r3, r3, #1
 800a752:	b2da      	uxtb	r2, r3
 800a754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a756:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	18d1      	adds	r1, r2, r3
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a766:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a768:	f7ff ff5c 	bl	800a624 <prvInsertTimerInActiveList>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d06c      	beq.n	800a84c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a778:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	2b00      	cmp	r3, #0
 800a786:	d061      	beq.n	800a84c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a78c:	699b      	ldr	r3, [r3, #24]
 800a78e:	441a      	add	r2, r3
 800a790:	2300      	movs	r3, #0
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	2300      	movs	r3, #0
 800a796:	2100      	movs	r1, #0
 800a798:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a79a:	f7ff fe03 	bl	800a3a4 <xTimerGenericCommand>
 800a79e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a7a0:	6a3b      	ldr	r3, [r7, #32]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d152      	bne.n	800a84c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7aa:	f383 8811 	msr	BASEPRI, r3
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	61bb      	str	r3, [r7, #24]
}
 800a7b8:	bf00      	nop
 800a7ba:	bf00      	nop
 800a7bc:	e7fd      	b.n	800a7ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7c4:	f023 0301 	bic.w	r3, r3, #1
 800a7c8:	b2da      	uxtb	r2, r3
 800a7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a7d0:	e03d      	b.n	800a84e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7d8:	f043 0301 	orr.w	r3, r3, #1
 800a7dc:	b2da      	uxtb	r2, r3
 800a7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10b      	bne.n	800a80a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	617b      	str	r3, [r7, #20]
}
 800a804:	bf00      	nop
 800a806:	bf00      	nop
 800a808:	e7fd      	b.n	800a806 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80c:	699a      	ldr	r2, [r3, #24]
 800a80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a810:	18d1      	adds	r1, r2, r3
 800a812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a816:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a818:	f7ff ff04 	bl	800a624 <prvInsertTimerInActiveList>
					break;
 800a81c:	e017      	b.n	800a84e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a820:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a824:	f003 0302 	and.w	r3, r3, #2
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d103      	bne.n	800a834 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a82c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a82e:	f000 fb85 	bl	800af3c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a832:	e00c      	b.n	800a84e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a836:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a83a:	f023 0301 	bic.w	r3, r3, #1
 800a83e:	b2da      	uxtb	r2, r3
 800a840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a842:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a846:	e002      	b.n	800a84e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a848:	bf00      	nop
 800a84a:	e000      	b.n	800a84e <prvProcessReceivedCommands+0x1a6>
					break;
 800a84c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a84e:	4b08      	ldr	r3, [pc, #32]	@ (800a870 <prvProcessReceivedCommands+0x1c8>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	1d39      	adds	r1, r7, #4
 800a854:	2200      	movs	r2, #0
 800a856:	4618      	mov	r0, r3
 800a858:	f7fe f9a0 	bl	8008b9c <xQueueReceive>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	f47f af26 	bne.w	800a6b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a864:	bf00      	nop
 800a866:	bf00      	nop
 800a868:	3730      	adds	r7, #48	@ 0x30
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	20001014 	.word	0x20001014

0800a874 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b088      	sub	sp, #32
 800a878:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a87a:	e049      	b.n	800a910 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a87c:	4b2e      	ldr	r3, [pc, #184]	@ (800a938 <prvSwitchTimerLists+0xc4>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a886:	4b2c      	ldr	r3, [pc, #176]	@ (800a938 <prvSwitchTimerLists+0xc4>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	3304      	adds	r3, #4
 800a894:	4618      	mov	r0, r3
 800a896:	f7fd fdb9 	bl	800840c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8a8:	f003 0304 	and.w	r3, r3, #4
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d02f      	beq.n	800a910 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	693a      	ldr	r2, [r7, #16]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d90e      	bls.n	800a8e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	68ba      	ldr	r2, [r7, #8]
 800a8c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a938 <prvSwitchTimerLists+0xc4>)
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4610      	mov	r0, r2
 800a8da:	f7fd fd5f 	bl	800839c <vListInsert>
 800a8de:	e017      	b.n	800a910 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f7ff fd5a 	bl	800a3a4 <xTimerGenericCommand>
 800a8f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10b      	bne.n	800a910 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	603b      	str	r3, [r7, #0]
}
 800a90a:	bf00      	nop
 800a90c:	bf00      	nop
 800a90e:	e7fd      	b.n	800a90c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a910:	4b09      	ldr	r3, [pc, #36]	@ (800a938 <prvSwitchTimerLists+0xc4>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1b0      	bne.n	800a87c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a91a:	4b07      	ldr	r3, [pc, #28]	@ (800a938 <prvSwitchTimerLists+0xc4>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a920:	4b06      	ldr	r3, [pc, #24]	@ (800a93c <prvSwitchTimerLists+0xc8>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a04      	ldr	r2, [pc, #16]	@ (800a938 <prvSwitchTimerLists+0xc4>)
 800a926:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a928:	4a04      	ldr	r2, [pc, #16]	@ (800a93c <prvSwitchTimerLists+0xc8>)
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	6013      	str	r3, [r2, #0]
}
 800a92e:	bf00      	nop
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	2000100c 	.word	0x2000100c
 800a93c:	20001010 	.word	0x20001010

0800a940 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a946:	f000 f929 	bl	800ab9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a94a:	4b15      	ldr	r3, [pc, #84]	@ (800a9a0 <prvCheckForValidListAndQueue+0x60>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d120      	bne.n	800a994 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a952:	4814      	ldr	r0, [pc, #80]	@ (800a9a4 <prvCheckForValidListAndQueue+0x64>)
 800a954:	f7fd fcd4 	bl	8008300 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a958:	4813      	ldr	r0, [pc, #76]	@ (800a9a8 <prvCheckForValidListAndQueue+0x68>)
 800a95a:	f7fd fcd1 	bl	8008300 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a95e:	4b13      	ldr	r3, [pc, #76]	@ (800a9ac <prvCheckForValidListAndQueue+0x6c>)
 800a960:	4a10      	ldr	r2, [pc, #64]	@ (800a9a4 <prvCheckForValidListAndQueue+0x64>)
 800a962:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a964:	4b12      	ldr	r3, [pc, #72]	@ (800a9b0 <prvCheckForValidListAndQueue+0x70>)
 800a966:	4a10      	ldr	r2, [pc, #64]	@ (800a9a8 <prvCheckForValidListAndQueue+0x68>)
 800a968:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a96a:	2300      	movs	r3, #0
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	4b11      	ldr	r3, [pc, #68]	@ (800a9b4 <prvCheckForValidListAndQueue+0x74>)
 800a970:	4a11      	ldr	r2, [pc, #68]	@ (800a9b8 <prvCheckForValidListAndQueue+0x78>)
 800a972:	2110      	movs	r1, #16
 800a974:	200a      	movs	r0, #10
 800a976:	f7fd fddd 	bl	8008534 <xQueueGenericCreateStatic>
 800a97a:	4603      	mov	r3, r0
 800a97c:	4a08      	ldr	r2, [pc, #32]	@ (800a9a0 <prvCheckForValidListAndQueue+0x60>)
 800a97e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a980:	4b07      	ldr	r3, [pc, #28]	@ (800a9a0 <prvCheckForValidListAndQueue+0x60>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d005      	beq.n	800a994 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a988:	4b05      	ldr	r3, [pc, #20]	@ (800a9a0 <prvCheckForValidListAndQueue+0x60>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	490b      	ldr	r1, [pc, #44]	@ (800a9bc <prvCheckForValidListAndQueue+0x7c>)
 800a98e:	4618      	mov	r0, r3
 800a990:	f7fe fc1e 	bl	80091d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a994:	f000 f932 	bl	800abfc <vPortExitCritical>
}
 800a998:	bf00      	nop
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	20001014 	.word	0x20001014
 800a9a4:	20000fe4 	.word	0x20000fe4
 800a9a8:	20000ff8 	.word	0x20000ff8
 800a9ac:	2000100c 	.word	0x2000100c
 800a9b0:	20001010 	.word	0x20001010
 800a9b4:	200010c0 	.word	0x200010c0
 800a9b8:	20001020 	.word	0x20001020
 800a9bc:	0800c314 	.word	0x0800c314

0800a9c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b085      	sub	sp, #20
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	3b04      	subs	r3, #4
 800a9d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a9d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	3b04      	subs	r3, #4
 800a9de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	f023 0201 	bic.w	r2, r3, #1
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3b04      	subs	r3, #4
 800a9ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a9f0:	4a08      	ldr	r2, [pc, #32]	@ (800aa14 <pxPortInitialiseStack+0x54>)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	3b14      	subs	r3, #20
 800a9fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	3b20      	subs	r3, #32
 800aa06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa08:	68fb      	ldr	r3, [r7, #12]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bc80      	pop	{r7}
 800aa12:	4770      	bx	lr
 800aa14:	0800aa19 	.word	0x0800aa19

0800aa18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa22:	4b12      	ldr	r3, [pc, #72]	@ (800aa6c <prvTaskExitError+0x54>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa2a:	d00b      	beq.n	800aa44 <prvTaskExitError+0x2c>
	__asm volatile
 800aa2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	60fb      	str	r3, [r7, #12]
}
 800aa3e:	bf00      	nop
 800aa40:	bf00      	nop
 800aa42:	e7fd      	b.n	800aa40 <prvTaskExitError+0x28>
	__asm volatile
 800aa44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa48:	f383 8811 	msr	BASEPRI, r3
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	60bb      	str	r3, [r7, #8]
}
 800aa56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa58:	bf00      	nop
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d0fc      	beq.n	800aa5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa60:	bf00      	nop
 800aa62:	bf00      	nop
 800aa64:	3714      	adds	r7, #20
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bc80      	pop	{r7}
 800aa6a:	4770      	bx	lr
 800aa6c:	2000000c 	.word	0x2000000c

0800aa70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa70:	4b07      	ldr	r3, [pc, #28]	@ (800aa90 <pxCurrentTCBConst2>)
 800aa72:	6819      	ldr	r1, [r3, #0]
 800aa74:	6808      	ldr	r0, [r1, #0]
 800aa76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800aa7a:	f380 8809 	msr	PSP, r0
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f04f 0000 	mov.w	r0, #0
 800aa86:	f380 8811 	msr	BASEPRI, r0
 800aa8a:	f04e 0e0d 	orr.w	lr, lr, #13
 800aa8e:	4770      	bx	lr

0800aa90 <pxCurrentTCBConst2>:
 800aa90:	20000ae4 	.word	0x20000ae4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa94:	bf00      	nop
 800aa96:	bf00      	nop

0800aa98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800aa98:	4806      	ldr	r0, [pc, #24]	@ (800aab4 <prvPortStartFirstTask+0x1c>)
 800aa9a:	6800      	ldr	r0, [r0, #0]
 800aa9c:	6800      	ldr	r0, [r0, #0]
 800aa9e:	f380 8808 	msr	MSP, r0
 800aaa2:	b662      	cpsie	i
 800aaa4:	b661      	cpsie	f
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	df00      	svc	0
 800aab0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aab2:	bf00      	nop
 800aab4:	e000ed08 	.word	0xe000ed08

0800aab8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aabe:	4b32      	ldr	r3, [pc, #200]	@ (800ab88 <xPortStartScheduler+0xd0>)
 800aac0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	22ff      	movs	r2, #255	@ 0xff
 800aace:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aad8:	78fb      	ldrb	r3, [r7, #3]
 800aada:	b2db      	uxtb	r3, r3
 800aadc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800aae0:	b2da      	uxtb	r2, r3
 800aae2:	4b2a      	ldr	r3, [pc, #168]	@ (800ab8c <xPortStartScheduler+0xd4>)
 800aae4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aae6:	4b2a      	ldr	r3, [pc, #168]	@ (800ab90 <xPortStartScheduler+0xd8>)
 800aae8:	2207      	movs	r2, #7
 800aaea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaec:	e009      	b.n	800ab02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aaee:	4b28      	ldr	r3, [pc, #160]	@ (800ab90 <xPortStartScheduler+0xd8>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	4a26      	ldr	r2, [pc, #152]	@ (800ab90 <xPortStartScheduler+0xd8>)
 800aaf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aaf8:	78fb      	ldrb	r3, [r7, #3]
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	005b      	lsls	r3, r3, #1
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab02:	78fb      	ldrb	r3, [r7, #3]
 800ab04:	b2db      	uxtb	r3, r3
 800ab06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab0a:	2b80      	cmp	r3, #128	@ 0x80
 800ab0c:	d0ef      	beq.n	800aaee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab0e:	4b20      	ldr	r3, [pc, #128]	@ (800ab90 <xPortStartScheduler+0xd8>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f1c3 0307 	rsb	r3, r3, #7
 800ab16:	2b04      	cmp	r3, #4
 800ab18:	d00b      	beq.n	800ab32 <xPortStartScheduler+0x7a>
	__asm volatile
 800ab1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	60bb      	str	r3, [r7, #8]
}
 800ab2c:	bf00      	nop
 800ab2e:	bf00      	nop
 800ab30:	e7fd      	b.n	800ab2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab32:	4b17      	ldr	r3, [pc, #92]	@ (800ab90 <xPortStartScheduler+0xd8>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	021b      	lsls	r3, r3, #8
 800ab38:	4a15      	ldr	r2, [pc, #84]	@ (800ab90 <xPortStartScheduler+0xd8>)
 800ab3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab3c:	4b14      	ldr	r3, [pc, #80]	@ (800ab90 <xPortStartScheduler+0xd8>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ab44:	4a12      	ldr	r2, [pc, #72]	@ (800ab90 <xPortStartScheduler+0xd8>)
 800ab46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	b2da      	uxtb	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab50:	4b10      	ldr	r3, [pc, #64]	@ (800ab94 <xPortStartScheduler+0xdc>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a0f      	ldr	r2, [pc, #60]	@ (800ab94 <xPortStartScheduler+0xdc>)
 800ab56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ab5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ab94 <xPortStartScheduler+0xdc>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a0c      	ldr	r2, [pc, #48]	@ (800ab94 <xPortStartScheduler+0xdc>)
 800ab62:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ab66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab68:	f000 f8b8 	bl	800acdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab98 <xPortStartScheduler+0xe0>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab72:	f7ff ff91 	bl	800aa98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab76:	f7fe ff5f 	bl	8009a38 <vTaskSwitchContext>
	prvTaskExitError();
 800ab7a:	f7ff ff4d 	bl	800aa18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	e000e400 	.word	0xe000e400
 800ab8c:	20001110 	.word	0x20001110
 800ab90:	20001114 	.word	0x20001114
 800ab94:	e000ed20 	.word	0xe000ed20
 800ab98:	2000000c 	.word	0x2000000c

0800ab9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	607b      	str	r3, [r7, #4]
}
 800abb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abb6:	4b0f      	ldr	r3, [pc, #60]	@ (800abf4 <vPortEnterCritical+0x58>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3301      	adds	r3, #1
 800abbc:	4a0d      	ldr	r2, [pc, #52]	@ (800abf4 <vPortEnterCritical+0x58>)
 800abbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abc0:	4b0c      	ldr	r3, [pc, #48]	@ (800abf4 <vPortEnterCritical+0x58>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d110      	bne.n	800abea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abc8:	4b0b      	ldr	r3, [pc, #44]	@ (800abf8 <vPortEnterCritical+0x5c>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d00b      	beq.n	800abea <vPortEnterCritical+0x4e>
	__asm volatile
 800abd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	603b      	str	r3, [r7, #0]
}
 800abe4:	bf00      	nop
 800abe6:	bf00      	nop
 800abe8:	e7fd      	b.n	800abe6 <vPortEnterCritical+0x4a>
	}
}
 800abea:	bf00      	nop
 800abec:	370c      	adds	r7, #12
 800abee:	46bd      	mov	sp, r7
 800abf0:	bc80      	pop	{r7}
 800abf2:	4770      	bx	lr
 800abf4:	2000000c 	.word	0x2000000c
 800abf8:	e000ed04 	.word	0xe000ed04

0800abfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abfc:	b480      	push	{r7}
 800abfe:	b083      	sub	sp, #12
 800ac00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac02:	4b12      	ldr	r3, [pc, #72]	@ (800ac4c <vPortExitCritical+0x50>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d10b      	bne.n	800ac22 <vPortExitCritical+0x26>
	__asm volatile
 800ac0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0e:	f383 8811 	msr	BASEPRI, r3
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	f3bf 8f4f 	dsb	sy
 800ac1a:	607b      	str	r3, [r7, #4]
}
 800ac1c:	bf00      	nop
 800ac1e:	bf00      	nop
 800ac20:	e7fd      	b.n	800ac1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ac22:	4b0a      	ldr	r3, [pc, #40]	@ (800ac4c <vPortExitCritical+0x50>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3b01      	subs	r3, #1
 800ac28:	4a08      	ldr	r2, [pc, #32]	@ (800ac4c <vPortExitCritical+0x50>)
 800ac2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac2c:	4b07      	ldr	r3, [pc, #28]	@ (800ac4c <vPortExitCritical+0x50>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d105      	bne.n	800ac40 <vPortExitCritical+0x44>
 800ac34:	2300      	movs	r3, #0
 800ac36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	f383 8811 	msr	BASEPRI, r3
}
 800ac3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bc80      	pop	{r7}
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	2000000c 	.word	0x2000000c

0800ac50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac50:	f3ef 8009 	mrs	r0, PSP
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	4b0d      	ldr	r3, [pc, #52]	@ (800ac90 <pxCurrentTCBConst>)
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ac60:	6010      	str	r0, [r2, #0]
 800ac62:	e92d 4008 	stmdb	sp!, {r3, lr}
 800ac66:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ac6a:	f380 8811 	msr	BASEPRI, r0
 800ac6e:	f7fe fee3 	bl	8009a38 <vTaskSwitchContext>
 800ac72:	f04f 0000 	mov.w	r0, #0
 800ac76:	f380 8811 	msr	BASEPRI, r0
 800ac7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ac7e:	6819      	ldr	r1, [r3, #0]
 800ac80:	6808      	ldr	r0, [r1, #0]
 800ac82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800ac86:	f380 8809 	msr	PSP, r0
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	4770      	bx	lr

0800ac90 <pxCurrentTCBConst>:
 800ac90:	20000ae4 	.word	0x20000ae4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop

0800ac98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	607b      	str	r3, [r7, #4]
}
 800acb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acb2:	f7fe fe07 	bl	80098c4 <xTaskIncrementTick>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d003      	beq.n	800acc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acbc:	4b06      	ldr	r3, [pc, #24]	@ (800acd8 <xPortSysTickHandler+0x40>)
 800acbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acc2:	601a      	str	r2, [r3, #0]
 800acc4:	2300      	movs	r3, #0
 800acc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	f383 8811 	msr	BASEPRI, r3
}
 800acce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800acd0:	bf00      	nop
 800acd2:	3708      	adds	r7, #8
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	e000ed04 	.word	0xe000ed04

0800acdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ace0:	4b0a      	ldr	r3, [pc, #40]	@ (800ad0c <vPortSetupTimerInterrupt+0x30>)
 800ace2:	2200      	movs	r2, #0
 800ace4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ace6:	4b0a      	ldr	r3, [pc, #40]	@ (800ad10 <vPortSetupTimerInterrupt+0x34>)
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acec:	4b09      	ldr	r3, [pc, #36]	@ (800ad14 <vPortSetupTimerInterrupt+0x38>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a09      	ldr	r2, [pc, #36]	@ (800ad18 <vPortSetupTimerInterrupt+0x3c>)
 800acf2:	fba2 2303 	umull	r2, r3, r2, r3
 800acf6:	099b      	lsrs	r3, r3, #6
 800acf8:	4a08      	ldr	r2, [pc, #32]	@ (800ad1c <vPortSetupTimerInterrupt+0x40>)
 800acfa:	3b01      	subs	r3, #1
 800acfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acfe:	4b03      	ldr	r3, [pc, #12]	@ (800ad0c <vPortSetupTimerInterrupt+0x30>)
 800ad00:	2207      	movs	r2, #7
 800ad02:	601a      	str	r2, [r3, #0]
}
 800ad04:	bf00      	nop
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bc80      	pop	{r7}
 800ad0a:	4770      	bx	lr
 800ad0c:	e000e010 	.word	0xe000e010
 800ad10:	e000e018 	.word	0xe000e018
 800ad14:	20000000 	.word	0x20000000
 800ad18:	10624dd3 	.word	0x10624dd3
 800ad1c:	e000e014 	.word	0xe000e014

0800ad20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad20:	b480      	push	{r7}
 800ad22:	b085      	sub	sp, #20
 800ad24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad26:	f3ef 8305 	mrs	r3, IPSR
 800ad2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2b0f      	cmp	r3, #15
 800ad30:	d915      	bls.n	800ad5e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad32:	4a17      	ldr	r2, [pc, #92]	@ (800ad90 <vPortValidateInterruptPriority+0x70>)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	4413      	add	r3, r2
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad3c:	4b15      	ldr	r3, [pc, #84]	@ (800ad94 <vPortValidateInterruptPriority+0x74>)
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	7afa      	ldrb	r2, [r7, #11]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d20b      	bcs.n	800ad5e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ad46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad4a:	f383 8811 	msr	BASEPRI, r3
 800ad4e:	f3bf 8f6f 	isb	sy
 800ad52:	f3bf 8f4f 	dsb	sy
 800ad56:	607b      	str	r3, [r7, #4]
}
 800ad58:	bf00      	nop
 800ad5a:	bf00      	nop
 800ad5c:	e7fd      	b.n	800ad5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ad98 <vPortValidateInterruptPriority+0x78>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ad66:	4b0d      	ldr	r3, [pc, #52]	@ (800ad9c <vPortValidateInterruptPriority+0x7c>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d90b      	bls.n	800ad86 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	603b      	str	r3, [r7, #0]
}
 800ad80:	bf00      	nop
 800ad82:	bf00      	nop
 800ad84:	e7fd      	b.n	800ad82 <vPortValidateInterruptPriority+0x62>
	}
 800ad86:	bf00      	nop
 800ad88:	3714      	adds	r7, #20
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bc80      	pop	{r7}
 800ad8e:	4770      	bx	lr
 800ad90:	e000e3f0 	.word	0xe000e3f0
 800ad94:	20001110 	.word	0x20001110
 800ad98:	e000ed0c 	.word	0xe000ed0c
 800ad9c:	20001114 	.word	0x20001114

0800ada0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b08a      	sub	sp, #40	@ 0x28
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ada8:	2300      	movs	r3, #0
 800adaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800adac:	f7fe fcd0 	bl	8009750 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800adb0:	4b5c      	ldr	r3, [pc, #368]	@ (800af24 <pvPortMalloc+0x184>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d101      	bne.n	800adbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800adb8:	f000 f924 	bl	800b004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800adbc:	4b5a      	ldr	r3, [pc, #360]	@ (800af28 <pvPortMalloc+0x188>)
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4013      	ands	r3, r2
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	f040 8095 	bne.w	800aef4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d01e      	beq.n	800ae0e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800add0:	2208      	movs	r2, #8
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4413      	add	r3, r2
 800add6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f003 0307 	and.w	r3, r3, #7
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d015      	beq.n	800ae0e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f023 0307 	bic.w	r3, r3, #7
 800ade8:	3308      	adds	r3, #8
 800adea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f003 0307 	and.w	r3, r3, #7
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00b      	beq.n	800ae0e <pvPortMalloc+0x6e>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	617b      	str	r3, [r7, #20]
}
 800ae08:	bf00      	nop
 800ae0a:	bf00      	nop
 800ae0c:	e7fd      	b.n	800ae0a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d06f      	beq.n	800aef4 <pvPortMalloc+0x154>
 800ae14:	4b45      	ldr	r3, [pc, #276]	@ (800af2c <pvPortMalloc+0x18c>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d86a      	bhi.n	800aef4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae1e:	4b44      	ldr	r3, [pc, #272]	@ (800af30 <pvPortMalloc+0x190>)
 800ae20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae22:	4b43      	ldr	r3, [pc, #268]	@ (800af30 <pvPortMalloc+0x190>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae28:	e004      	b.n	800ae34 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d903      	bls.n	800ae46 <pvPortMalloc+0xa6>
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1f1      	bne.n	800ae2a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae46:	4b37      	ldr	r3, [pc, #220]	@ (800af24 <pvPortMalloc+0x184>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d051      	beq.n	800aef4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2208      	movs	r2, #8
 800ae56:	4413      	add	r3, r2
 800ae58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae64:	685a      	ldr	r2, [r3, #4]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	1ad2      	subs	r2, r2, r3
 800ae6a:	2308      	movs	r3, #8
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d920      	bls.n	800aeb4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4413      	add	r3, r2
 800ae78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	f003 0307 	and.w	r3, r3, #7
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00b      	beq.n	800ae9c <pvPortMalloc+0xfc>
	__asm volatile
 800ae84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae88:	f383 8811 	msr	BASEPRI, r3
 800ae8c:	f3bf 8f6f 	isb	sy
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	613b      	str	r3, [r7, #16]
}
 800ae96:	bf00      	nop
 800ae98:	bf00      	nop
 800ae9a:	e7fd      	b.n	800ae98 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9e:	685a      	ldr	r2, [r3, #4]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	1ad2      	subs	r2, r2, r3
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aeae:	69b8      	ldr	r0, [r7, #24]
 800aeb0:	f000 f90a 	bl	800b0c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aeb4:	4b1d      	ldr	r3, [pc, #116]	@ (800af2c <pvPortMalloc+0x18c>)
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	4a1b      	ldr	r2, [pc, #108]	@ (800af2c <pvPortMalloc+0x18c>)
 800aec0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aec2:	4b1a      	ldr	r3, [pc, #104]	@ (800af2c <pvPortMalloc+0x18c>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	4b1b      	ldr	r3, [pc, #108]	@ (800af34 <pvPortMalloc+0x194>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d203      	bcs.n	800aed6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aece:	4b17      	ldr	r3, [pc, #92]	@ (800af2c <pvPortMalloc+0x18c>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a18      	ldr	r2, [pc, #96]	@ (800af34 <pvPortMalloc+0x194>)
 800aed4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed8:	685a      	ldr	r2, [r3, #4]
 800aeda:	4b13      	ldr	r3, [pc, #76]	@ (800af28 <pvPortMalloc+0x188>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	431a      	orrs	r2, r3
 800aee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee6:	2200      	movs	r2, #0
 800aee8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aeea:	4b13      	ldr	r3, [pc, #76]	@ (800af38 <pvPortMalloc+0x198>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3301      	adds	r3, #1
 800aef0:	4a11      	ldr	r2, [pc, #68]	@ (800af38 <pvPortMalloc+0x198>)
 800aef2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aef4:	f7fe fc3a 	bl	800976c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	f003 0307 	and.w	r3, r3, #7
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00b      	beq.n	800af1a <pvPortMalloc+0x17a>
	__asm volatile
 800af02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	60fb      	str	r3, [r7, #12]
}
 800af14:	bf00      	nop
 800af16:	bf00      	nop
 800af18:	e7fd      	b.n	800af16 <pvPortMalloc+0x176>
	return pvReturn;
 800af1a:	69fb      	ldr	r3, [r7, #28]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3728      	adds	r7, #40	@ 0x28
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	20001d20 	.word	0x20001d20
 800af28:	20001d34 	.word	0x20001d34
 800af2c:	20001d24 	.word	0x20001d24
 800af30:	20001d18 	.word	0x20001d18
 800af34:	20001d28 	.word	0x20001d28
 800af38:	20001d2c 	.word	0x20001d2c

0800af3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d04f      	beq.n	800afee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af4e:	2308      	movs	r3, #8
 800af50:	425b      	negs	r3, r3
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	4413      	add	r3, r2
 800af56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	685a      	ldr	r2, [r3, #4]
 800af60:	4b25      	ldr	r3, [pc, #148]	@ (800aff8 <vPortFree+0xbc>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4013      	ands	r3, r2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10b      	bne.n	800af82 <vPortFree+0x46>
	__asm volatile
 800af6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af6e:	f383 8811 	msr	BASEPRI, r3
 800af72:	f3bf 8f6f 	isb	sy
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	60fb      	str	r3, [r7, #12]
}
 800af7c:	bf00      	nop
 800af7e:	bf00      	nop
 800af80:	e7fd      	b.n	800af7e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00b      	beq.n	800afa2 <vPortFree+0x66>
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	60bb      	str	r3, [r7, #8]
}
 800af9c:	bf00      	nop
 800af9e:	bf00      	nop
 800afa0:	e7fd      	b.n	800af9e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	685a      	ldr	r2, [r3, #4]
 800afa6:	4b14      	ldr	r3, [pc, #80]	@ (800aff8 <vPortFree+0xbc>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4013      	ands	r3, r2
 800afac:	2b00      	cmp	r3, #0
 800afae:	d01e      	beq.n	800afee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d11a      	bne.n	800afee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	4b0e      	ldr	r3, [pc, #56]	@ (800aff8 <vPortFree+0xbc>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	43db      	mvns	r3, r3
 800afc2:	401a      	ands	r2, r3
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800afc8:	f7fe fbc2 	bl	8009750 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	685a      	ldr	r2, [r3, #4]
 800afd0:	4b0a      	ldr	r3, [pc, #40]	@ (800affc <vPortFree+0xc0>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4413      	add	r3, r2
 800afd6:	4a09      	ldr	r2, [pc, #36]	@ (800affc <vPortFree+0xc0>)
 800afd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800afda:	6938      	ldr	r0, [r7, #16]
 800afdc:	f000 f874 	bl	800b0c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800afe0:	4b07      	ldr	r3, [pc, #28]	@ (800b000 <vPortFree+0xc4>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3301      	adds	r3, #1
 800afe6:	4a06      	ldr	r2, [pc, #24]	@ (800b000 <vPortFree+0xc4>)
 800afe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800afea:	f7fe fbbf 	bl	800976c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800afee:	bf00      	nop
 800aff0:	3718      	adds	r7, #24
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20001d34 	.word	0x20001d34
 800affc:	20001d24 	.word	0x20001d24
 800b000:	20001d30 	.word	0x20001d30

0800b004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b004:	b480      	push	{r7}
 800b006:	b085      	sub	sp, #20
 800b008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b00a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800b00e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b010:	4b27      	ldr	r3, [pc, #156]	@ (800b0b0 <prvHeapInit+0xac>)
 800b012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f003 0307 	and.w	r3, r3, #7
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00c      	beq.n	800b038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	3307      	adds	r3, #7
 800b022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f023 0307 	bic.w	r3, r3, #7
 800b02a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	4a1f      	ldr	r2, [pc, #124]	@ (800b0b0 <prvHeapInit+0xac>)
 800b034:	4413      	add	r3, r2
 800b036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b03c:	4a1d      	ldr	r2, [pc, #116]	@ (800b0b4 <prvHeapInit+0xb0>)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b042:	4b1c      	ldr	r3, [pc, #112]	@ (800b0b4 <prvHeapInit+0xb0>)
 800b044:	2200      	movs	r2, #0
 800b046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	4413      	add	r3, r2
 800b04e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b050:	2208      	movs	r2, #8
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	1a9b      	subs	r3, r3, r2
 800b056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f023 0307 	bic.w	r3, r3, #7
 800b05e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	4a15      	ldr	r2, [pc, #84]	@ (800b0b8 <prvHeapInit+0xb4>)
 800b064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b066:	4b14      	ldr	r3, [pc, #80]	@ (800b0b8 <prvHeapInit+0xb4>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2200      	movs	r2, #0
 800b06c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b06e:	4b12      	ldr	r3, [pc, #72]	@ (800b0b8 <prvHeapInit+0xb4>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	1ad2      	subs	r2, r2, r3
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b084:	4b0c      	ldr	r3, [pc, #48]	@ (800b0b8 <prvHeapInit+0xb4>)
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	4a0a      	ldr	r2, [pc, #40]	@ (800b0bc <prvHeapInit+0xb8>)
 800b092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	4a09      	ldr	r2, [pc, #36]	@ (800b0c0 <prvHeapInit+0xbc>)
 800b09a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b09c:	4b09      	ldr	r3, [pc, #36]	@ (800b0c4 <prvHeapInit+0xc0>)
 800b09e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b0a2:	601a      	str	r2, [r3, #0]
}
 800b0a4:	bf00      	nop
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bc80      	pop	{r7}
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	20001118 	.word	0x20001118
 800b0b4:	20001d18 	.word	0x20001d18
 800b0b8:	20001d20 	.word	0x20001d20
 800b0bc:	20001d28 	.word	0x20001d28
 800b0c0:	20001d24 	.word	0x20001d24
 800b0c4:	20001d34 	.word	0x20001d34

0800b0c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0d0:	4b27      	ldr	r3, [pc, #156]	@ (800b170 <prvInsertBlockIntoFreeList+0xa8>)
 800b0d2:	60fb      	str	r3, [r7, #12]
 800b0d4:	e002      	b.n	800b0dc <prvInsertBlockIntoFreeList+0x14>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	60fb      	str	r3, [r7, #12]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d8f7      	bhi.n	800b0d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d108      	bne.n	800b10a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	685a      	ldr	r2, [r3, #4]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	441a      	add	r2, r3
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	441a      	add	r2, r3
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d118      	bne.n	800b150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	4b14      	ldr	r3, [pc, #80]	@ (800b174 <prvInsertBlockIntoFreeList+0xac>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	429a      	cmp	r2, r3
 800b128:	d00d      	beq.n	800b146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	685a      	ldr	r2, [r3, #4]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	441a      	add	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	601a      	str	r2, [r3, #0]
 800b144:	e008      	b.n	800b158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b146:	4b0b      	ldr	r3, [pc, #44]	@ (800b174 <prvInsertBlockIntoFreeList+0xac>)
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	601a      	str	r2, [r3, #0]
 800b14e:	e003      	b.n	800b158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d002      	beq.n	800b166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b166:	bf00      	nop
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bc80      	pop	{r7}
 800b16e:	4770      	bx	lr
 800b170:	20001d18 	.word	0x20001d18
 800b174:	20001d20 	.word	0x20001d20

0800b178 <malloc>:
 800b178:	4b02      	ldr	r3, [pc, #8]	@ (800b184 <malloc+0xc>)
 800b17a:	4601      	mov	r1, r0
 800b17c:	6818      	ldr	r0, [r3, #0]
 800b17e:	f000 b82d 	b.w	800b1dc <_malloc_r>
 800b182:	bf00      	nop
 800b184:	2000001c 	.word	0x2000001c

0800b188 <free>:
 800b188:	4b02      	ldr	r3, [pc, #8]	@ (800b194 <free+0xc>)
 800b18a:	4601      	mov	r1, r0
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	f000 bbb1 	b.w	800b8f4 <_free_r>
 800b192:	bf00      	nop
 800b194:	2000001c 	.word	0x2000001c

0800b198 <sbrk_aligned>:
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	4e0f      	ldr	r6, [pc, #60]	@ (800b1d8 <sbrk_aligned+0x40>)
 800b19c:	460c      	mov	r4, r1
 800b19e:	6831      	ldr	r1, [r6, #0]
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	b911      	cbnz	r1, 800b1aa <sbrk_aligned+0x12>
 800b1a4:	f000 fb48 	bl	800b838 <_sbrk_r>
 800b1a8:	6030      	str	r0, [r6, #0]
 800b1aa:	4621      	mov	r1, r4
 800b1ac:	4628      	mov	r0, r5
 800b1ae:	f000 fb43 	bl	800b838 <_sbrk_r>
 800b1b2:	1c43      	adds	r3, r0, #1
 800b1b4:	d103      	bne.n	800b1be <sbrk_aligned+0x26>
 800b1b6:	f04f 34ff 	mov.w	r4, #4294967295
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	bd70      	pop	{r4, r5, r6, pc}
 800b1be:	1cc4      	adds	r4, r0, #3
 800b1c0:	f024 0403 	bic.w	r4, r4, #3
 800b1c4:	42a0      	cmp	r0, r4
 800b1c6:	d0f8      	beq.n	800b1ba <sbrk_aligned+0x22>
 800b1c8:	1a21      	subs	r1, r4, r0
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	f000 fb34 	bl	800b838 <_sbrk_r>
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d1f2      	bne.n	800b1ba <sbrk_aligned+0x22>
 800b1d4:	e7ef      	b.n	800b1b6 <sbrk_aligned+0x1e>
 800b1d6:	bf00      	nop
 800b1d8:	20001d38 	.word	0x20001d38

0800b1dc <_malloc_r>:
 800b1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e0:	1ccd      	adds	r5, r1, #3
 800b1e2:	f025 0503 	bic.w	r5, r5, #3
 800b1e6:	3508      	adds	r5, #8
 800b1e8:	2d0c      	cmp	r5, #12
 800b1ea:	bf38      	it	cc
 800b1ec:	250c      	movcc	r5, #12
 800b1ee:	2d00      	cmp	r5, #0
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	db01      	blt.n	800b1f8 <_malloc_r+0x1c>
 800b1f4:	42a9      	cmp	r1, r5
 800b1f6:	d904      	bls.n	800b202 <_malloc_r+0x26>
 800b1f8:	230c      	movs	r3, #12
 800b1fa:	6033      	str	r3, [r6, #0]
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b202:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b2d8 <_malloc_r+0xfc>
 800b206:	f000 f869 	bl	800b2dc <__malloc_lock>
 800b20a:	f8d8 3000 	ldr.w	r3, [r8]
 800b20e:	461c      	mov	r4, r3
 800b210:	bb44      	cbnz	r4, 800b264 <_malloc_r+0x88>
 800b212:	4629      	mov	r1, r5
 800b214:	4630      	mov	r0, r6
 800b216:	f7ff ffbf 	bl	800b198 <sbrk_aligned>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	4604      	mov	r4, r0
 800b21e:	d158      	bne.n	800b2d2 <_malloc_r+0xf6>
 800b220:	f8d8 4000 	ldr.w	r4, [r8]
 800b224:	4627      	mov	r7, r4
 800b226:	2f00      	cmp	r7, #0
 800b228:	d143      	bne.n	800b2b2 <_malloc_r+0xd6>
 800b22a:	2c00      	cmp	r4, #0
 800b22c:	d04b      	beq.n	800b2c6 <_malloc_r+0xea>
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	4639      	mov	r1, r7
 800b232:	4630      	mov	r0, r6
 800b234:	eb04 0903 	add.w	r9, r4, r3
 800b238:	f000 fafe 	bl	800b838 <_sbrk_r>
 800b23c:	4581      	cmp	r9, r0
 800b23e:	d142      	bne.n	800b2c6 <_malloc_r+0xea>
 800b240:	6821      	ldr	r1, [r4, #0]
 800b242:	4630      	mov	r0, r6
 800b244:	1a6d      	subs	r5, r5, r1
 800b246:	4629      	mov	r1, r5
 800b248:	f7ff ffa6 	bl	800b198 <sbrk_aligned>
 800b24c:	3001      	adds	r0, #1
 800b24e:	d03a      	beq.n	800b2c6 <_malloc_r+0xea>
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	442b      	add	r3, r5
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	f8d8 3000 	ldr.w	r3, [r8]
 800b25a:	685a      	ldr	r2, [r3, #4]
 800b25c:	bb62      	cbnz	r2, 800b2b8 <_malloc_r+0xdc>
 800b25e:	f8c8 7000 	str.w	r7, [r8]
 800b262:	e00f      	b.n	800b284 <_malloc_r+0xa8>
 800b264:	6822      	ldr	r2, [r4, #0]
 800b266:	1b52      	subs	r2, r2, r5
 800b268:	d420      	bmi.n	800b2ac <_malloc_r+0xd0>
 800b26a:	2a0b      	cmp	r2, #11
 800b26c:	d917      	bls.n	800b29e <_malloc_r+0xc2>
 800b26e:	1961      	adds	r1, r4, r5
 800b270:	42a3      	cmp	r3, r4
 800b272:	6025      	str	r5, [r4, #0]
 800b274:	bf18      	it	ne
 800b276:	6059      	strne	r1, [r3, #4]
 800b278:	6863      	ldr	r3, [r4, #4]
 800b27a:	bf08      	it	eq
 800b27c:	f8c8 1000 	streq.w	r1, [r8]
 800b280:	5162      	str	r2, [r4, r5]
 800b282:	604b      	str	r3, [r1, #4]
 800b284:	4630      	mov	r0, r6
 800b286:	f000 f82f 	bl	800b2e8 <__malloc_unlock>
 800b28a:	f104 000b 	add.w	r0, r4, #11
 800b28e:	1d23      	adds	r3, r4, #4
 800b290:	f020 0007 	bic.w	r0, r0, #7
 800b294:	1ac2      	subs	r2, r0, r3
 800b296:	bf1c      	itt	ne
 800b298:	1a1b      	subne	r3, r3, r0
 800b29a:	50a3      	strne	r3, [r4, r2]
 800b29c:	e7af      	b.n	800b1fe <_malloc_r+0x22>
 800b29e:	6862      	ldr	r2, [r4, #4]
 800b2a0:	42a3      	cmp	r3, r4
 800b2a2:	bf0c      	ite	eq
 800b2a4:	f8c8 2000 	streq.w	r2, [r8]
 800b2a8:	605a      	strne	r2, [r3, #4]
 800b2aa:	e7eb      	b.n	800b284 <_malloc_r+0xa8>
 800b2ac:	4623      	mov	r3, r4
 800b2ae:	6864      	ldr	r4, [r4, #4]
 800b2b0:	e7ae      	b.n	800b210 <_malloc_r+0x34>
 800b2b2:	463c      	mov	r4, r7
 800b2b4:	687f      	ldr	r7, [r7, #4]
 800b2b6:	e7b6      	b.n	800b226 <_malloc_r+0x4a>
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	42a3      	cmp	r3, r4
 800b2be:	d1fb      	bne.n	800b2b8 <_malloc_r+0xdc>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	6053      	str	r3, [r2, #4]
 800b2c4:	e7de      	b.n	800b284 <_malloc_r+0xa8>
 800b2c6:	230c      	movs	r3, #12
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	6033      	str	r3, [r6, #0]
 800b2cc:	f000 f80c 	bl	800b2e8 <__malloc_unlock>
 800b2d0:	e794      	b.n	800b1fc <_malloc_r+0x20>
 800b2d2:	6005      	str	r5, [r0, #0]
 800b2d4:	e7d6      	b.n	800b284 <_malloc_r+0xa8>
 800b2d6:	bf00      	nop
 800b2d8:	20001d3c 	.word	0x20001d3c

0800b2dc <__malloc_lock>:
 800b2dc:	4801      	ldr	r0, [pc, #4]	@ (800b2e4 <__malloc_lock+0x8>)
 800b2de:	f000 baf8 	b.w	800b8d2 <__retarget_lock_acquire_recursive>
 800b2e2:	bf00      	nop
 800b2e4:	20001e80 	.word	0x20001e80

0800b2e8 <__malloc_unlock>:
 800b2e8:	4801      	ldr	r0, [pc, #4]	@ (800b2f0 <__malloc_unlock+0x8>)
 800b2ea:	f000 baf3 	b.w	800b8d4 <__retarget_lock_release_recursive>
 800b2ee:	bf00      	nop
 800b2f0:	20001e80 	.word	0x20001e80

0800b2f4 <std>:
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	b510      	push	{r4, lr}
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	e9c0 3300 	strd	r3, r3, [r0]
 800b2fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b302:	6083      	str	r3, [r0, #8]
 800b304:	8181      	strh	r1, [r0, #12]
 800b306:	6643      	str	r3, [r0, #100]	@ 0x64
 800b308:	81c2      	strh	r2, [r0, #14]
 800b30a:	6183      	str	r3, [r0, #24]
 800b30c:	4619      	mov	r1, r3
 800b30e:	2208      	movs	r2, #8
 800b310:	305c      	adds	r0, #92	@ 0x5c
 800b312:	f000 f9f7 	bl	800b704 <memset>
 800b316:	4b0d      	ldr	r3, [pc, #52]	@ (800b34c <std+0x58>)
 800b318:	6224      	str	r4, [r4, #32]
 800b31a:	6263      	str	r3, [r4, #36]	@ 0x24
 800b31c:	4b0c      	ldr	r3, [pc, #48]	@ (800b350 <std+0x5c>)
 800b31e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b320:	4b0c      	ldr	r3, [pc, #48]	@ (800b354 <std+0x60>)
 800b322:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b324:	4b0c      	ldr	r3, [pc, #48]	@ (800b358 <std+0x64>)
 800b326:	6323      	str	r3, [r4, #48]	@ 0x30
 800b328:	4b0c      	ldr	r3, [pc, #48]	@ (800b35c <std+0x68>)
 800b32a:	429c      	cmp	r4, r3
 800b32c:	d006      	beq.n	800b33c <std+0x48>
 800b32e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b332:	4294      	cmp	r4, r2
 800b334:	d002      	beq.n	800b33c <std+0x48>
 800b336:	33d0      	adds	r3, #208	@ 0xd0
 800b338:	429c      	cmp	r4, r3
 800b33a:	d105      	bne.n	800b348 <std+0x54>
 800b33c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b344:	f000 bac4 	b.w	800b8d0 <__retarget_lock_init_recursive>
 800b348:	bd10      	pop	{r4, pc}
 800b34a:	bf00      	nop
 800b34c:	0800b535 	.word	0x0800b535
 800b350:	0800b557 	.word	0x0800b557
 800b354:	0800b58f 	.word	0x0800b58f
 800b358:	0800b5b3 	.word	0x0800b5b3
 800b35c:	20001d40 	.word	0x20001d40

0800b360 <stdio_exit_handler>:
 800b360:	4a02      	ldr	r2, [pc, #8]	@ (800b36c <stdio_exit_handler+0xc>)
 800b362:	4903      	ldr	r1, [pc, #12]	@ (800b370 <stdio_exit_handler+0x10>)
 800b364:	4803      	ldr	r0, [pc, #12]	@ (800b374 <stdio_exit_handler+0x14>)
 800b366:	f000 b869 	b.w	800b43c <_fwalk_sglue>
 800b36a:	bf00      	nop
 800b36c:	20000010 	.word	0x20000010
 800b370:	0800ba85 	.word	0x0800ba85
 800b374:	20000020 	.word	0x20000020

0800b378 <cleanup_stdio>:
 800b378:	6841      	ldr	r1, [r0, #4]
 800b37a:	4b0c      	ldr	r3, [pc, #48]	@ (800b3ac <cleanup_stdio+0x34>)
 800b37c:	b510      	push	{r4, lr}
 800b37e:	4299      	cmp	r1, r3
 800b380:	4604      	mov	r4, r0
 800b382:	d001      	beq.n	800b388 <cleanup_stdio+0x10>
 800b384:	f000 fb7e 	bl	800ba84 <_fflush_r>
 800b388:	68a1      	ldr	r1, [r4, #8]
 800b38a:	4b09      	ldr	r3, [pc, #36]	@ (800b3b0 <cleanup_stdio+0x38>)
 800b38c:	4299      	cmp	r1, r3
 800b38e:	d002      	beq.n	800b396 <cleanup_stdio+0x1e>
 800b390:	4620      	mov	r0, r4
 800b392:	f000 fb77 	bl	800ba84 <_fflush_r>
 800b396:	68e1      	ldr	r1, [r4, #12]
 800b398:	4b06      	ldr	r3, [pc, #24]	@ (800b3b4 <cleanup_stdio+0x3c>)
 800b39a:	4299      	cmp	r1, r3
 800b39c:	d004      	beq.n	800b3a8 <cleanup_stdio+0x30>
 800b39e:	4620      	mov	r0, r4
 800b3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a4:	f000 bb6e 	b.w	800ba84 <_fflush_r>
 800b3a8:	bd10      	pop	{r4, pc}
 800b3aa:	bf00      	nop
 800b3ac:	20001d40 	.word	0x20001d40
 800b3b0:	20001da8 	.word	0x20001da8
 800b3b4:	20001e10 	.word	0x20001e10

0800b3b8 <global_stdio_init.part.0>:
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b3e8 <global_stdio_init.part.0+0x30>)
 800b3bc:	4c0b      	ldr	r4, [pc, #44]	@ (800b3ec <global_stdio_init.part.0+0x34>)
 800b3be:	4a0c      	ldr	r2, [pc, #48]	@ (800b3f0 <global_stdio_init.part.0+0x38>)
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	601a      	str	r2, [r3, #0]
 800b3c4:	2104      	movs	r1, #4
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f7ff ff94 	bl	800b2f4 <std>
 800b3cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	2109      	movs	r1, #9
 800b3d4:	f7ff ff8e 	bl	800b2f4 <std>
 800b3d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b3dc:	2202      	movs	r2, #2
 800b3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3e2:	2112      	movs	r1, #18
 800b3e4:	f7ff bf86 	b.w	800b2f4 <std>
 800b3e8:	20001e78 	.word	0x20001e78
 800b3ec:	20001d40 	.word	0x20001d40
 800b3f0:	0800b361 	.word	0x0800b361

0800b3f4 <__sfp_lock_acquire>:
 800b3f4:	4801      	ldr	r0, [pc, #4]	@ (800b3fc <__sfp_lock_acquire+0x8>)
 800b3f6:	f000 ba6c 	b.w	800b8d2 <__retarget_lock_acquire_recursive>
 800b3fa:	bf00      	nop
 800b3fc:	20001e81 	.word	0x20001e81

0800b400 <__sfp_lock_release>:
 800b400:	4801      	ldr	r0, [pc, #4]	@ (800b408 <__sfp_lock_release+0x8>)
 800b402:	f000 ba67 	b.w	800b8d4 <__retarget_lock_release_recursive>
 800b406:	bf00      	nop
 800b408:	20001e81 	.word	0x20001e81

0800b40c <__sinit>:
 800b40c:	b510      	push	{r4, lr}
 800b40e:	4604      	mov	r4, r0
 800b410:	f7ff fff0 	bl	800b3f4 <__sfp_lock_acquire>
 800b414:	6a23      	ldr	r3, [r4, #32]
 800b416:	b11b      	cbz	r3, 800b420 <__sinit+0x14>
 800b418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b41c:	f7ff bff0 	b.w	800b400 <__sfp_lock_release>
 800b420:	4b04      	ldr	r3, [pc, #16]	@ (800b434 <__sinit+0x28>)
 800b422:	6223      	str	r3, [r4, #32]
 800b424:	4b04      	ldr	r3, [pc, #16]	@ (800b438 <__sinit+0x2c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1f5      	bne.n	800b418 <__sinit+0xc>
 800b42c:	f7ff ffc4 	bl	800b3b8 <global_stdio_init.part.0>
 800b430:	e7f2      	b.n	800b418 <__sinit+0xc>
 800b432:	bf00      	nop
 800b434:	0800b379 	.word	0x0800b379
 800b438:	20001e78 	.word	0x20001e78

0800b43c <_fwalk_sglue>:
 800b43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b440:	4607      	mov	r7, r0
 800b442:	4688      	mov	r8, r1
 800b444:	4614      	mov	r4, r2
 800b446:	2600      	movs	r6, #0
 800b448:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b44c:	f1b9 0901 	subs.w	r9, r9, #1
 800b450:	d505      	bpl.n	800b45e <_fwalk_sglue+0x22>
 800b452:	6824      	ldr	r4, [r4, #0]
 800b454:	2c00      	cmp	r4, #0
 800b456:	d1f7      	bne.n	800b448 <_fwalk_sglue+0xc>
 800b458:	4630      	mov	r0, r6
 800b45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b45e:	89ab      	ldrh	r3, [r5, #12]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d907      	bls.n	800b474 <_fwalk_sglue+0x38>
 800b464:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b468:	3301      	adds	r3, #1
 800b46a:	d003      	beq.n	800b474 <_fwalk_sglue+0x38>
 800b46c:	4629      	mov	r1, r5
 800b46e:	4638      	mov	r0, r7
 800b470:	47c0      	blx	r8
 800b472:	4306      	orrs	r6, r0
 800b474:	3568      	adds	r5, #104	@ 0x68
 800b476:	e7e9      	b.n	800b44c <_fwalk_sglue+0x10>

0800b478 <_puts_r>:
 800b478:	6a03      	ldr	r3, [r0, #32]
 800b47a:	b570      	push	{r4, r5, r6, lr}
 800b47c:	4605      	mov	r5, r0
 800b47e:	460e      	mov	r6, r1
 800b480:	6884      	ldr	r4, [r0, #8]
 800b482:	b90b      	cbnz	r3, 800b488 <_puts_r+0x10>
 800b484:	f7ff ffc2 	bl	800b40c <__sinit>
 800b488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b48a:	07db      	lsls	r3, r3, #31
 800b48c:	d405      	bmi.n	800b49a <_puts_r+0x22>
 800b48e:	89a3      	ldrh	r3, [r4, #12]
 800b490:	0598      	lsls	r0, r3, #22
 800b492:	d402      	bmi.n	800b49a <_puts_r+0x22>
 800b494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b496:	f000 fa1c 	bl	800b8d2 <__retarget_lock_acquire_recursive>
 800b49a:	89a3      	ldrh	r3, [r4, #12]
 800b49c:	0719      	lsls	r1, r3, #28
 800b49e:	d502      	bpl.n	800b4a6 <_puts_r+0x2e>
 800b4a0:	6923      	ldr	r3, [r4, #16]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d135      	bne.n	800b512 <_puts_r+0x9a>
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	f000 f8c5 	bl	800b638 <__swsetup_r>
 800b4ae:	b380      	cbz	r0, 800b512 <_puts_r+0x9a>
 800b4b0:	f04f 35ff 	mov.w	r5, #4294967295
 800b4b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4b6:	07da      	lsls	r2, r3, #31
 800b4b8:	d405      	bmi.n	800b4c6 <_puts_r+0x4e>
 800b4ba:	89a3      	ldrh	r3, [r4, #12]
 800b4bc:	059b      	lsls	r3, r3, #22
 800b4be:	d402      	bmi.n	800b4c6 <_puts_r+0x4e>
 800b4c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4c2:	f000 fa07 	bl	800b8d4 <__retarget_lock_release_recursive>
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	bd70      	pop	{r4, r5, r6, pc}
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	da04      	bge.n	800b4d8 <_puts_r+0x60>
 800b4ce:	69a2      	ldr	r2, [r4, #24]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	dc17      	bgt.n	800b504 <_puts_r+0x8c>
 800b4d4:	290a      	cmp	r1, #10
 800b4d6:	d015      	beq.n	800b504 <_puts_r+0x8c>
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	6022      	str	r2, [r4, #0]
 800b4de:	7019      	strb	r1, [r3, #0]
 800b4e0:	68a3      	ldr	r3, [r4, #8]
 800b4e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	60a3      	str	r3, [r4, #8]
 800b4ea:	2900      	cmp	r1, #0
 800b4ec:	d1ed      	bne.n	800b4ca <_puts_r+0x52>
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	da11      	bge.n	800b516 <_puts_r+0x9e>
 800b4f2:	4622      	mov	r2, r4
 800b4f4:	210a      	movs	r1, #10
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	f000 f85f 	bl	800b5ba <__swbuf_r>
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	d0d7      	beq.n	800b4b0 <_puts_r+0x38>
 800b500:	250a      	movs	r5, #10
 800b502:	e7d7      	b.n	800b4b4 <_puts_r+0x3c>
 800b504:	4622      	mov	r2, r4
 800b506:	4628      	mov	r0, r5
 800b508:	f000 f857 	bl	800b5ba <__swbuf_r>
 800b50c:	3001      	adds	r0, #1
 800b50e:	d1e7      	bne.n	800b4e0 <_puts_r+0x68>
 800b510:	e7ce      	b.n	800b4b0 <_puts_r+0x38>
 800b512:	3e01      	subs	r6, #1
 800b514:	e7e4      	b.n	800b4e0 <_puts_r+0x68>
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	6022      	str	r2, [r4, #0]
 800b51c:	220a      	movs	r2, #10
 800b51e:	701a      	strb	r2, [r3, #0]
 800b520:	e7ee      	b.n	800b500 <_puts_r+0x88>
	...

0800b524 <puts>:
 800b524:	4b02      	ldr	r3, [pc, #8]	@ (800b530 <puts+0xc>)
 800b526:	4601      	mov	r1, r0
 800b528:	6818      	ldr	r0, [r3, #0]
 800b52a:	f7ff bfa5 	b.w	800b478 <_puts_r>
 800b52e:	bf00      	nop
 800b530:	2000001c 	.word	0x2000001c

0800b534 <__sread>:
 800b534:	b510      	push	{r4, lr}
 800b536:	460c      	mov	r4, r1
 800b538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b53c:	f000 f96a 	bl	800b814 <_read_r>
 800b540:	2800      	cmp	r0, #0
 800b542:	bfab      	itete	ge
 800b544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b546:	89a3      	ldrhlt	r3, [r4, #12]
 800b548:	181b      	addge	r3, r3, r0
 800b54a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b54e:	bfac      	ite	ge
 800b550:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b552:	81a3      	strhlt	r3, [r4, #12]
 800b554:	bd10      	pop	{r4, pc}

0800b556 <__swrite>:
 800b556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b55a:	461f      	mov	r7, r3
 800b55c:	898b      	ldrh	r3, [r1, #12]
 800b55e:	4605      	mov	r5, r0
 800b560:	05db      	lsls	r3, r3, #23
 800b562:	460c      	mov	r4, r1
 800b564:	4616      	mov	r6, r2
 800b566:	d505      	bpl.n	800b574 <__swrite+0x1e>
 800b568:	2302      	movs	r3, #2
 800b56a:	2200      	movs	r2, #0
 800b56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b570:	f000 f93e 	bl	800b7f0 <_lseek_r>
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	4632      	mov	r2, r6
 800b578:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b57c:	81a3      	strh	r3, [r4, #12]
 800b57e:	4628      	mov	r0, r5
 800b580:	463b      	mov	r3, r7
 800b582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b58a:	f000 b965 	b.w	800b858 <_write_r>

0800b58e <__sseek>:
 800b58e:	b510      	push	{r4, lr}
 800b590:	460c      	mov	r4, r1
 800b592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b596:	f000 f92b 	bl	800b7f0 <_lseek_r>
 800b59a:	1c43      	adds	r3, r0, #1
 800b59c:	89a3      	ldrh	r3, [r4, #12]
 800b59e:	bf15      	itete	ne
 800b5a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5aa:	81a3      	strheq	r3, [r4, #12]
 800b5ac:	bf18      	it	ne
 800b5ae:	81a3      	strhne	r3, [r4, #12]
 800b5b0:	bd10      	pop	{r4, pc}

0800b5b2 <__sclose>:
 800b5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b6:	f000 b8ad 	b.w	800b714 <_close_r>

0800b5ba <__swbuf_r>:
 800b5ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5bc:	460e      	mov	r6, r1
 800b5be:	4614      	mov	r4, r2
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	b118      	cbz	r0, 800b5cc <__swbuf_r+0x12>
 800b5c4:	6a03      	ldr	r3, [r0, #32]
 800b5c6:	b90b      	cbnz	r3, 800b5cc <__swbuf_r+0x12>
 800b5c8:	f7ff ff20 	bl	800b40c <__sinit>
 800b5cc:	69a3      	ldr	r3, [r4, #24]
 800b5ce:	60a3      	str	r3, [r4, #8]
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	071a      	lsls	r2, r3, #28
 800b5d4:	d501      	bpl.n	800b5da <__swbuf_r+0x20>
 800b5d6:	6923      	ldr	r3, [r4, #16]
 800b5d8:	b943      	cbnz	r3, 800b5ec <__swbuf_r+0x32>
 800b5da:	4621      	mov	r1, r4
 800b5dc:	4628      	mov	r0, r5
 800b5de:	f000 f82b 	bl	800b638 <__swsetup_r>
 800b5e2:	b118      	cbz	r0, 800b5ec <__swbuf_r+0x32>
 800b5e4:	f04f 37ff 	mov.w	r7, #4294967295
 800b5e8:	4638      	mov	r0, r7
 800b5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	6922      	ldr	r2, [r4, #16]
 800b5f0:	b2f6      	uxtb	r6, r6
 800b5f2:	1a98      	subs	r0, r3, r2
 800b5f4:	6963      	ldr	r3, [r4, #20]
 800b5f6:	4637      	mov	r7, r6
 800b5f8:	4283      	cmp	r3, r0
 800b5fa:	dc05      	bgt.n	800b608 <__swbuf_r+0x4e>
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	4628      	mov	r0, r5
 800b600:	f000 fa40 	bl	800ba84 <_fflush_r>
 800b604:	2800      	cmp	r0, #0
 800b606:	d1ed      	bne.n	800b5e4 <__swbuf_r+0x2a>
 800b608:	68a3      	ldr	r3, [r4, #8]
 800b60a:	3b01      	subs	r3, #1
 800b60c:	60a3      	str	r3, [r4, #8]
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	1c5a      	adds	r2, r3, #1
 800b612:	6022      	str	r2, [r4, #0]
 800b614:	701e      	strb	r6, [r3, #0]
 800b616:	6962      	ldr	r2, [r4, #20]
 800b618:	1c43      	adds	r3, r0, #1
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d004      	beq.n	800b628 <__swbuf_r+0x6e>
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	07db      	lsls	r3, r3, #31
 800b622:	d5e1      	bpl.n	800b5e8 <__swbuf_r+0x2e>
 800b624:	2e0a      	cmp	r6, #10
 800b626:	d1df      	bne.n	800b5e8 <__swbuf_r+0x2e>
 800b628:	4621      	mov	r1, r4
 800b62a:	4628      	mov	r0, r5
 800b62c:	f000 fa2a 	bl	800ba84 <_fflush_r>
 800b630:	2800      	cmp	r0, #0
 800b632:	d0d9      	beq.n	800b5e8 <__swbuf_r+0x2e>
 800b634:	e7d6      	b.n	800b5e4 <__swbuf_r+0x2a>
	...

0800b638 <__swsetup_r>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	4b29      	ldr	r3, [pc, #164]	@ (800b6e0 <__swsetup_r+0xa8>)
 800b63c:	4605      	mov	r5, r0
 800b63e:	6818      	ldr	r0, [r3, #0]
 800b640:	460c      	mov	r4, r1
 800b642:	b118      	cbz	r0, 800b64c <__swsetup_r+0x14>
 800b644:	6a03      	ldr	r3, [r0, #32]
 800b646:	b90b      	cbnz	r3, 800b64c <__swsetup_r+0x14>
 800b648:	f7ff fee0 	bl	800b40c <__sinit>
 800b64c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b650:	0719      	lsls	r1, r3, #28
 800b652:	d422      	bmi.n	800b69a <__swsetup_r+0x62>
 800b654:	06da      	lsls	r2, r3, #27
 800b656:	d407      	bmi.n	800b668 <__swsetup_r+0x30>
 800b658:	2209      	movs	r2, #9
 800b65a:	602a      	str	r2, [r5, #0]
 800b65c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b660:	f04f 30ff 	mov.w	r0, #4294967295
 800b664:	81a3      	strh	r3, [r4, #12]
 800b666:	e033      	b.n	800b6d0 <__swsetup_r+0x98>
 800b668:	0758      	lsls	r0, r3, #29
 800b66a:	d512      	bpl.n	800b692 <__swsetup_r+0x5a>
 800b66c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b66e:	b141      	cbz	r1, 800b682 <__swsetup_r+0x4a>
 800b670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b674:	4299      	cmp	r1, r3
 800b676:	d002      	beq.n	800b67e <__swsetup_r+0x46>
 800b678:	4628      	mov	r0, r5
 800b67a:	f000 f93b 	bl	800b8f4 <_free_r>
 800b67e:	2300      	movs	r3, #0
 800b680:	6363      	str	r3, [r4, #52]	@ 0x34
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b688:	81a3      	strh	r3, [r4, #12]
 800b68a:	2300      	movs	r3, #0
 800b68c:	6063      	str	r3, [r4, #4]
 800b68e:	6923      	ldr	r3, [r4, #16]
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	89a3      	ldrh	r3, [r4, #12]
 800b694:	f043 0308 	orr.w	r3, r3, #8
 800b698:	81a3      	strh	r3, [r4, #12]
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	b94b      	cbnz	r3, 800b6b2 <__swsetup_r+0x7a>
 800b69e:	89a3      	ldrh	r3, [r4, #12]
 800b6a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6a8:	d003      	beq.n	800b6b2 <__swsetup_r+0x7a>
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	f000 fa36 	bl	800bb1e <__smakebuf_r>
 800b6b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b6:	f013 0201 	ands.w	r2, r3, #1
 800b6ba:	d00a      	beq.n	800b6d2 <__swsetup_r+0x9a>
 800b6bc:	2200      	movs	r2, #0
 800b6be:	60a2      	str	r2, [r4, #8]
 800b6c0:	6962      	ldr	r2, [r4, #20]
 800b6c2:	4252      	negs	r2, r2
 800b6c4:	61a2      	str	r2, [r4, #24]
 800b6c6:	6922      	ldr	r2, [r4, #16]
 800b6c8:	b942      	cbnz	r2, 800b6dc <__swsetup_r+0xa4>
 800b6ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6ce:	d1c5      	bne.n	800b65c <__swsetup_r+0x24>
 800b6d0:	bd38      	pop	{r3, r4, r5, pc}
 800b6d2:	0799      	lsls	r1, r3, #30
 800b6d4:	bf58      	it	pl
 800b6d6:	6962      	ldrpl	r2, [r4, #20]
 800b6d8:	60a2      	str	r2, [r4, #8]
 800b6da:	e7f4      	b.n	800b6c6 <__swsetup_r+0x8e>
 800b6dc:	2000      	movs	r0, #0
 800b6de:	e7f7      	b.n	800b6d0 <__swsetup_r+0x98>
 800b6e0:	2000001c 	.word	0x2000001c

0800b6e4 <memcmp>:
 800b6e4:	b510      	push	{r4, lr}
 800b6e6:	3901      	subs	r1, #1
 800b6e8:	4402      	add	r2, r0
 800b6ea:	4290      	cmp	r0, r2
 800b6ec:	d101      	bne.n	800b6f2 <memcmp+0xe>
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	e005      	b.n	800b6fe <memcmp+0x1a>
 800b6f2:	7803      	ldrb	r3, [r0, #0]
 800b6f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b6f8:	42a3      	cmp	r3, r4
 800b6fa:	d001      	beq.n	800b700 <memcmp+0x1c>
 800b6fc:	1b18      	subs	r0, r3, r4
 800b6fe:	bd10      	pop	{r4, pc}
 800b700:	3001      	adds	r0, #1
 800b702:	e7f2      	b.n	800b6ea <memcmp+0x6>

0800b704 <memset>:
 800b704:	4603      	mov	r3, r0
 800b706:	4402      	add	r2, r0
 800b708:	4293      	cmp	r3, r2
 800b70a:	d100      	bne.n	800b70e <memset+0xa>
 800b70c:	4770      	bx	lr
 800b70e:	f803 1b01 	strb.w	r1, [r3], #1
 800b712:	e7f9      	b.n	800b708 <memset+0x4>

0800b714 <_close_r>:
 800b714:	b538      	push	{r3, r4, r5, lr}
 800b716:	2300      	movs	r3, #0
 800b718:	4d05      	ldr	r5, [pc, #20]	@ (800b730 <_close_r+0x1c>)
 800b71a:	4604      	mov	r4, r0
 800b71c:	4608      	mov	r0, r1
 800b71e:	602b      	str	r3, [r5, #0]
 800b720:	f7f7 fbe5 	bl	8002eee <_close>
 800b724:	1c43      	adds	r3, r0, #1
 800b726:	d102      	bne.n	800b72e <_close_r+0x1a>
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	b103      	cbz	r3, 800b72e <_close_r+0x1a>
 800b72c:	6023      	str	r3, [r4, #0]
 800b72e:	bd38      	pop	{r3, r4, r5, pc}
 800b730:	20001e7c 	.word	0x20001e7c

0800b734 <_reclaim_reent>:
 800b734:	4b2d      	ldr	r3, [pc, #180]	@ (800b7ec <_reclaim_reent+0xb8>)
 800b736:	b570      	push	{r4, r5, r6, lr}
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4604      	mov	r4, r0
 800b73c:	4283      	cmp	r3, r0
 800b73e:	d053      	beq.n	800b7e8 <_reclaim_reent+0xb4>
 800b740:	69c3      	ldr	r3, [r0, #28]
 800b742:	b31b      	cbz	r3, 800b78c <_reclaim_reent+0x58>
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	b163      	cbz	r3, 800b762 <_reclaim_reent+0x2e>
 800b748:	2500      	movs	r5, #0
 800b74a:	69e3      	ldr	r3, [r4, #28]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	5959      	ldr	r1, [r3, r5]
 800b750:	b9b1      	cbnz	r1, 800b780 <_reclaim_reent+0x4c>
 800b752:	3504      	adds	r5, #4
 800b754:	2d80      	cmp	r5, #128	@ 0x80
 800b756:	d1f8      	bne.n	800b74a <_reclaim_reent+0x16>
 800b758:	69e3      	ldr	r3, [r4, #28]
 800b75a:	4620      	mov	r0, r4
 800b75c:	68d9      	ldr	r1, [r3, #12]
 800b75e:	f000 f8c9 	bl	800b8f4 <_free_r>
 800b762:	69e3      	ldr	r3, [r4, #28]
 800b764:	6819      	ldr	r1, [r3, #0]
 800b766:	b111      	cbz	r1, 800b76e <_reclaim_reent+0x3a>
 800b768:	4620      	mov	r0, r4
 800b76a:	f000 f8c3 	bl	800b8f4 <_free_r>
 800b76e:	69e3      	ldr	r3, [r4, #28]
 800b770:	689d      	ldr	r5, [r3, #8]
 800b772:	b15d      	cbz	r5, 800b78c <_reclaim_reent+0x58>
 800b774:	4629      	mov	r1, r5
 800b776:	4620      	mov	r0, r4
 800b778:	682d      	ldr	r5, [r5, #0]
 800b77a:	f000 f8bb 	bl	800b8f4 <_free_r>
 800b77e:	e7f8      	b.n	800b772 <_reclaim_reent+0x3e>
 800b780:	680e      	ldr	r6, [r1, #0]
 800b782:	4620      	mov	r0, r4
 800b784:	f000 f8b6 	bl	800b8f4 <_free_r>
 800b788:	4631      	mov	r1, r6
 800b78a:	e7e1      	b.n	800b750 <_reclaim_reent+0x1c>
 800b78c:	6961      	ldr	r1, [r4, #20]
 800b78e:	b111      	cbz	r1, 800b796 <_reclaim_reent+0x62>
 800b790:	4620      	mov	r0, r4
 800b792:	f000 f8af 	bl	800b8f4 <_free_r>
 800b796:	69e1      	ldr	r1, [r4, #28]
 800b798:	b111      	cbz	r1, 800b7a0 <_reclaim_reent+0x6c>
 800b79a:	4620      	mov	r0, r4
 800b79c:	f000 f8aa 	bl	800b8f4 <_free_r>
 800b7a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b7a2:	b111      	cbz	r1, 800b7aa <_reclaim_reent+0x76>
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	f000 f8a5 	bl	800b8f4 <_free_r>
 800b7aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7ac:	b111      	cbz	r1, 800b7b4 <_reclaim_reent+0x80>
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	f000 f8a0 	bl	800b8f4 <_free_r>
 800b7b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b7b6:	b111      	cbz	r1, 800b7be <_reclaim_reent+0x8a>
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f000 f89b 	bl	800b8f4 <_free_r>
 800b7be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b7c0:	b111      	cbz	r1, 800b7c8 <_reclaim_reent+0x94>
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f000 f896 	bl	800b8f4 <_free_r>
 800b7c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b7ca:	b111      	cbz	r1, 800b7d2 <_reclaim_reent+0x9e>
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f000 f891 	bl	800b8f4 <_free_r>
 800b7d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b7d4:	b111      	cbz	r1, 800b7dc <_reclaim_reent+0xa8>
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f000 f88c 	bl	800b8f4 <_free_r>
 800b7dc:	6a23      	ldr	r3, [r4, #32]
 800b7de:	b11b      	cbz	r3, 800b7e8 <_reclaim_reent+0xb4>
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b7e6:	4718      	bx	r3
 800b7e8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ea:	bf00      	nop
 800b7ec:	2000001c 	.word	0x2000001c

0800b7f0 <_lseek_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	4608      	mov	r0, r1
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	4d05      	ldr	r5, [pc, #20]	@ (800b810 <_lseek_r+0x20>)
 800b7fc:	602a      	str	r2, [r5, #0]
 800b7fe:	461a      	mov	r2, r3
 800b800:	f7f7 fb99 	bl	8002f36 <_lseek>
 800b804:	1c43      	adds	r3, r0, #1
 800b806:	d102      	bne.n	800b80e <_lseek_r+0x1e>
 800b808:	682b      	ldr	r3, [r5, #0]
 800b80a:	b103      	cbz	r3, 800b80e <_lseek_r+0x1e>
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
 800b810:	20001e7c 	.word	0x20001e7c

0800b814 <_read_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4604      	mov	r4, r0
 800b818:	4608      	mov	r0, r1
 800b81a:	4611      	mov	r1, r2
 800b81c:	2200      	movs	r2, #0
 800b81e:	4d05      	ldr	r5, [pc, #20]	@ (800b834 <_read_r+0x20>)
 800b820:	602a      	str	r2, [r5, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	f7f7 fb2a 	bl	8002e7c <_read>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_read_r+0x1e>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_read_r+0x1e>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	20001e7c 	.word	0x20001e7c

0800b838 <_sbrk_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	2300      	movs	r3, #0
 800b83c:	4d05      	ldr	r5, [pc, #20]	@ (800b854 <_sbrk_r+0x1c>)
 800b83e:	4604      	mov	r4, r0
 800b840:	4608      	mov	r0, r1
 800b842:	602b      	str	r3, [r5, #0]
 800b844:	f7f7 fb84 	bl	8002f50 <_sbrk>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d102      	bne.n	800b852 <_sbrk_r+0x1a>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	b103      	cbz	r3, 800b852 <_sbrk_r+0x1a>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	20001e7c 	.word	0x20001e7c

0800b858 <_write_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	4604      	mov	r4, r0
 800b85c:	4608      	mov	r0, r1
 800b85e:	4611      	mov	r1, r2
 800b860:	2200      	movs	r2, #0
 800b862:	4d05      	ldr	r5, [pc, #20]	@ (800b878 <_write_r+0x20>)
 800b864:	602a      	str	r2, [r5, #0]
 800b866:	461a      	mov	r2, r3
 800b868:	f7f7 fb25 	bl	8002eb6 <_write>
 800b86c:	1c43      	adds	r3, r0, #1
 800b86e:	d102      	bne.n	800b876 <_write_r+0x1e>
 800b870:	682b      	ldr	r3, [r5, #0]
 800b872:	b103      	cbz	r3, 800b876 <_write_r+0x1e>
 800b874:	6023      	str	r3, [r4, #0]
 800b876:	bd38      	pop	{r3, r4, r5, pc}
 800b878:	20001e7c 	.word	0x20001e7c

0800b87c <__errno>:
 800b87c:	4b01      	ldr	r3, [pc, #4]	@ (800b884 <__errno+0x8>)
 800b87e:	6818      	ldr	r0, [r3, #0]
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	2000001c 	.word	0x2000001c

0800b888 <__libc_init_array>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	2600      	movs	r6, #0
 800b88c:	4d0c      	ldr	r5, [pc, #48]	@ (800b8c0 <__libc_init_array+0x38>)
 800b88e:	4c0d      	ldr	r4, [pc, #52]	@ (800b8c4 <__libc_init_array+0x3c>)
 800b890:	1b64      	subs	r4, r4, r5
 800b892:	10a4      	asrs	r4, r4, #2
 800b894:	42a6      	cmp	r6, r4
 800b896:	d109      	bne.n	800b8ac <__libc_init_array+0x24>
 800b898:	f000 fd02 	bl	800c2a0 <_init>
 800b89c:	2600      	movs	r6, #0
 800b89e:	4d0a      	ldr	r5, [pc, #40]	@ (800b8c8 <__libc_init_array+0x40>)
 800b8a0:	4c0a      	ldr	r4, [pc, #40]	@ (800b8cc <__libc_init_array+0x44>)
 800b8a2:	1b64      	subs	r4, r4, r5
 800b8a4:	10a4      	asrs	r4, r4, #2
 800b8a6:	42a6      	cmp	r6, r4
 800b8a8:	d105      	bne.n	800b8b6 <__libc_init_array+0x2e>
 800b8aa:	bd70      	pop	{r4, r5, r6, pc}
 800b8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8b0:	4798      	blx	r3
 800b8b2:	3601      	adds	r6, #1
 800b8b4:	e7ee      	b.n	800b894 <__libc_init_array+0xc>
 800b8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8ba:	4798      	blx	r3
 800b8bc:	3601      	adds	r6, #1
 800b8be:	e7f2      	b.n	800b8a6 <__libc_init_array+0x1e>
 800b8c0:	0800cbf4 	.word	0x0800cbf4
 800b8c4:	0800cbf4 	.word	0x0800cbf4
 800b8c8:	0800cbf4 	.word	0x0800cbf4
 800b8cc:	0800cbf8 	.word	0x0800cbf8

0800b8d0 <__retarget_lock_init_recursive>:
 800b8d0:	4770      	bx	lr

0800b8d2 <__retarget_lock_acquire_recursive>:
 800b8d2:	4770      	bx	lr

0800b8d4 <__retarget_lock_release_recursive>:
 800b8d4:	4770      	bx	lr

0800b8d6 <memcpy>:
 800b8d6:	440a      	add	r2, r1
 800b8d8:	4291      	cmp	r1, r2
 800b8da:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8de:	d100      	bne.n	800b8e2 <memcpy+0xc>
 800b8e0:	4770      	bx	lr
 800b8e2:	b510      	push	{r4, lr}
 800b8e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8e8:	4291      	cmp	r1, r2
 800b8ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8ee:	d1f9      	bne.n	800b8e4 <memcpy+0xe>
 800b8f0:	bd10      	pop	{r4, pc}
	...

0800b8f4 <_free_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	2900      	cmp	r1, #0
 800b8fa:	d040      	beq.n	800b97e <_free_r+0x8a>
 800b8fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b900:	1f0c      	subs	r4, r1, #4
 800b902:	2b00      	cmp	r3, #0
 800b904:	bfb8      	it	lt
 800b906:	18e4      	addlt	r4, r4, r3
 800b908:	f7ff fce8 	bl	800b2dc <__malloc_lock>
 800b90c:	4a1c      	ldr	r2, [pc, #112]	@ (800b980 <_free_r+0x8c>)
 800b90e:	6813      	ldr	r3, [r2, #0]
 800b910:	b933      	cbnz	r3, 800b920 <_free_r+0x2c>
 800b912:	6063      	str	r3, [r4, #4]
 800b914:	6014      	str	r4, [r2, #0]
 800b916:	4628      	mov	r0, r5
 800b918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b91c:	f7ff bce4 	b.w	800b2e8 <__malloc_unlock>
 800b920:	42a3      	cmp	r3, r4
 800b922:	d908      	bls.n	800b936 <_free_r+0x42>
 800b924:	6820      	ldr	r0, [r4, #0]
 800b926:	1821      	adds	r1, r4, r0
 800b928:	428b      	cmp	r3, r1
 800b92a:	bf01      	itttt	eq
 800b92c:	6819      	ldreq	r1, [r3, #0]
 800b92e:	685b      	ldreq	r3, [r3, #4]
 800b930:	1809      	addeq	r1, r1, r0
 800b932:	6021      	streq	r1, [r4, #0]
 800b934:	e7ed      	b.n	800b912 <_free_r+0x1e>
 800b936:	461a      	mov	r2, r3
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	b10b      	cbz	r3, 800b940 <_free_r+0x4c>
 800b93c:	42a3      	cmp	r3, r4
 800b93e:	d9fa      	bls.n	800b936 <_free_r+0x42>
 800b940:	6811      	ldr	r1, [r2, #0]
 800b942:	1850      	adds	r0, r2, r1
 800b944:	42a0      	cmp	r0, r4
 800b946:	d10b      	bne.n	800b960 <_free_r+0x6c>
 800b948:	6820      	ldr	r0, [r4, #0]
 800b94a:	4401      	add	r1, r0
 800b94c:	1850      	adds	r0, r2, r1
 800b94e:	4283      	cmp	r3, r0
 800b950:	6011      	str	r1, [r2, #0]
 800b952:	d1e0      	bne.n	800b916 <_free_r+0x22>
 800b954:	6818      	ldr	r0, [r3, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	4408      	add	r0, r1
 800b95a:	6010      	str	r0, [r2, #0]
 800b95c:	6053      	str	r3, [r2, #4]
 800b95e:	e7da      	b.n	800b916 <_free_r+0x22>
 800b960:	d902      	bls.n	800b968 <_free_r+0x74>
 800b962:	230c      	movs	r3, #12
 800b964:	602b      	str	r3, [r5, #0]
 800b966:	e7d6      	b.n	800b916 <_free_r+0x22>
 800b968:	6820      	ldr	r0, [r4, #0]
 800b96a:	1821      	adds	r1, r4, r0
 800b96c:	428b      	cmp	r3, r1
 800b96e:	bf01      	itttt	eq
 800b970:	6819      	ldreq	r1, [r3, #0]
 800b972:	685b      	ldreq	r3, [r3, #4]
 800b974:	1809      	addeq	r1, r1, r0
 800b976:	6021      	streq	r1, [r4, #0]
 800b978:	6063      	str	r3, [r4, #4]
 800b97a:	6054      	str	r4, [r2, #4]
 800b97c:	e7cb      	b.n	800b916 <_free_r+0x22>
 800b97e:	bd38      	pop	{r3, r4, r5, pc}
 800b980:	20001d3c 	.word	0x20001d3c

0800b984 <__sflush_r>:
 800b984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b98a:	0716      	lsls	r6, r2, #28
 800b98c:	4605      	mov	r5, r0
 800b98e:	460c      	mov	r4, r1
 800b990:	d454      	bmi.n	800ba3c <__sflush_r+0xb8>
 800b992:	684b      	ldr	r3, [r1, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	dc02      	bgt.n	800b99e <__sflush_r+0x1a>
 800b998:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	dd48      	ble.n	800ba30 <__sflush_r+0xac>
 800b99e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9a0:	2e00      	cmp	r6, #0
 800b9a2:	d045      	beq.n	800ba30 <__sflush_r+0xac>
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b9aa:	682f      	ldr	r7, [r5, #0]
 800b9ac:	6a21      	ldr	r1, [r4, #32]
 800b9ae:	602b      	str	r3, [r5, #0]
 800b9b0:	d030      	beq.n	800ba14 <__sflush_r+0x90>
 800b9b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	0759      	lsls	r1, r3, #29
 800b9b8:	d505      	bpl.n	800b9c6 <__sflush_r+0x42>
 800b9ba:	6863      	ldr	r3, [r4, #4]
 800b9bc:	1ad2      	subs	r2, r2, r3
 800b9be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b9c0:	b10b      	cbz	r3, 800b9c6 <__sflush_r+0x42>
 800b9c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b9c4:	1ad2      	subs	r2, r2, r3
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9cc:	6a21      	ldr	r1, [r4, #32]
 800b9ce:	47b0      	blx	r6
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	89a3      	ldrh	r3, [r4, #12]
 800b9d4:	d106      	bne.n	800b9e4 <__sflush_r+0x60>
 800b9d6:	6829      	ldr	r1, [r5, #0]
 800b9d8:	291d      	cmp	r1, #29
 800b9da:	d82b      	bhi.n	800ba34 <__sflush_r+0xb0>
 800b9dc:	4a28      	ldr	r2, [pc, #160]	@ (800ba80 <__sflush_r+0xfc>)
 800b9de:	40ca      	lsrs	r2, r1
 800b9e0:	07d6      	lsls	r6, r2, #31
 800b9e2:	d527      	bpl.n	800ba34 <__sflush_r+0xb0>
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	6062      	str	r2, [r4, #4]
 800b9e8:	6922      	ldr	r2, [r4, #16]
 800b9ea:	04d9      	lsls	r1, r3, #19
 800b9ec:	6022      	str	r2, [r4, #0]
 800b9ee:	d504      	bpl.n	800b9fa <__sflush_r+0x76>
 800b9f0:	1c42      	adds	r2, r0, #1
 800b9f2:	d101      	bne.n	800b9f8 <__sflush_r+0x74>
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	b903      	cbnz	r3, 800b9fa <__sflush_r+0x76>
 800b9f8:	6560      	str	r0, [r4, #84]	@ 0x54
 800b9fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b9fc:	602f      	str	r7, [r5, #0]
 800b9fe:	b1b9      	cbz	r1, 800ba30 <__sflush_r+0xac>
 800ba00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba04:	4299      	cmp	r1, r3
 800ba06:	d002      	beq.n	800ba0e <__sflush_r+0x8a>
 800ba08:	4628      	mov	r0, r5
 800ba0a:	f7ff ff73 	bl	800b8f4 <_free_r>
 800ba0e:	2300      	movs	r3, #0
 800ba10:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba12:	e00d      	b.n	800ba30 <__sflush_r+0xac>
 800ba14:	2301      	movs	r3, #1
 800ba16:	4628      	mov	r0, r5
 800ba18:	47b0      	blx	r6
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	1c50      	adds	r0, r2, #1
 800ba1e:	d1c9      	bne.n	800b9b4 <__sflush_r+0x30>
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d0c6      	beq.n	800b9b4 <__sflush_r+0x30>
 800ba26:	2b1d      	cmp	r3, #29
 800ba28:	d001      	beq.n	800ba2e <__sflush_r+0xaa>
 800ba2a:	2b16      	cmp	r3, #22
 800ba2c:	d11d      	bne.n	800ba6a <__sflush_r+0xe6>
 800ba2e:	602f      	str	r7, [r5, #0]
 800ba30:	2000      	movs	r0, #0
 800ba32:	e021      	b.n	800ba78 <__sflush_r+0xf4>
 800ba34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba38:	b21b      	sxth	r3, r3
 800ba3a:	e01a      	b.n	800ba72 <__sflush_r+0xee>
 800ba3c:	690f      	ldr	r7, [r1, #16]
 800ba3e:	2f00      	cmp	r7, #0
 800ba40:	d0f6      	beq.n	800ba30 <__sflush_r+0xac>
 800ba42:	0793      	lsls	r3, r2, #30
 800ba44:	bf18      	it	ne
 800ba46:	2300      	movne	r3, #0
 800ba48:	680e      	ldr	r6, [r1, #0]
 800ba4a:	bf08      	it	eq
 800ba4c:	694b      	ldreq	r3, [r1, #20]
 800ba4e:	1bf6      	subs	r6, r6, r7
 800ba50:	600f      	str	r7, [r1, #0]
 800ba52:	608b      	str	r3, [r1, #8]
 800ba54:	2e00      	cmp	r6, #0
 800ba56:	ddeb      	ble.n	800ba30 <__sflush_r+0xac>
 800ba58:	4633      	mov	r3, r6
 800ba5a:	463a      	mov	r2, r7
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	6a21      	ldr	r1, [r4, #32]
 800ba60:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ba64:	47e0      	blx	ip
 800ba66:	2800      	cmp	r0, #0
 800ba68:	dc07      	bgt.n	800ba7a <__sflush_r+0xf6>
 800ba6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba72:	f04f 30ff 	mov.w	r0, #4294967295
 800ba76:	81a3      	strh	r3, [r4, #12]
 800ba78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba7a:	4407      	add	r7, r0
 800ba7c:	1a36      	subs	r6, r6, r0
 800ba7e:	e7e9      	b.n	800ba54 <__sflush_r+0xd0>
 800ba80:	20400001 	.word	0x20400001

0800ba84 <_fflush_r>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	690b      	ldr	r3, [r1, #16]
 800ba88:	4605      	mov	r5, r0
 800ba8a:	460c      	mov	r4, r1
 800ba8c:	b913      	cbnz	r3, 800ba94 <_fflush_r+0x10>
 800ba8e:	2500      	movs	r5, #0
 800ba90:	4628      	mov	r0, r5
 800ba92:	bd38      	pop	{r3, r4, r5, pc}
 800ba94:	b118      	cbz	r0, 800ba9e <_fflush_r+0x1a>
 800ba96:	6a03      	ldr	r3, [r0, #32]
 800ba98:	b90b      	cbnz	r3, 800ba9e <_fflush_r+0x1a>
 800ba9a:	f7ff fcb7 	bl	800b40c <__sinit>
 800ba9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d0f3      	beq.n	800ba8e <_fflush_r+0xa>
 800baa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800baa8:	07d0      	lsls	r0, r2, #31
 800baaa:	d404      	bmi.n	800bab6 <_fflush_r+0x32>
 800baac:	0599      	lsls	r1, r3, #22
 800baae:	d402      	bmi.n	800bab6 <_fflush_r+0x32>
 800bab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bab2:	f7ff ff0e 	bl	800b8d2 <__retarget_lock_acquire_recursive>
 800bab6:	4628      	mov	r0, r5
 800bab8:	4621      	mov	r1, r4
 800baba:	f7ff ff63 	bl	800b984 <__sflush_r>
 800babe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bac0:	4605      	mov	r5, r0
 800bac2:	07da      	lsls	r2, r3, #31
 800bac4:	d4e4      	bmi.n	800ba90 <_fflush_r+0xc>
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	059b      	lsls	r3, r3, #22
 800baca:	d4e1      	bmi.n	800ba90 <_fflush_r+0xc>
 800bacc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bace:	f7ff ff01 	bl	800b8d4 <__retarget_lock_release_recursive>
 800bad2:	e7dd      	b.n	800ba90 <_fflush_r+0xc>

0800bad4 <__swhatbuf_r>:
 800bad4:	b570      	push	{r4, r5, r6, lr}
 800bad6:	460c      	mov	r4, r1
 800bad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800badc:	4615      	mov	r5, r2
 800bade:	2900      	cmp	r1, #0
 800bae0:	461e      	mov	r6, r3
 800bae2:	b096      	sub	sp, #88	@ 0x58
 800bae4:	da0c      	bge.n	800bb00 <__swhatbuf_r+0x2c>
 800bae6:	89a3      	ldrh	r3, [r4, #12]
 800bae8:	2100      	movs	r1, #0
 800baea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800baee:	bf14      	ite	ne
 800baf0:	2340      	movne	r3, #64	@ 0x40
 800baf2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800baf6:	2000      	movs	r0, #0
 800baf8:	6031      	str	r1, [r6, #0]
 800bafa:	602b      	str	r3, [r5, #0]
 800bafc:	b016      	add	sp, #88	@ 0x58
 800bafe:	bd70      	pop	{r4, r5, r6, pc}
 800bb00:	466a      	mov	r2, sp
 800bb02:	f000 f849 	bl	800bb98 <_fstat_r>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	dbed      	blt.n	800bae6 <__swhatbuf_r+0x12>
 800bb0a:	9901      	ldr	r1, [sp, #4]
 800bb0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bb10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bb14:	4259      	negs	r1, r3
 800bb16:	4159      	adcs	r1, r3
 800bb18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb1c:	e7eb      	b.n	800baf6 <__swhatbuf_r+0x22>

0800bb1e <__smakebuf_r>:
 800bb1e:	898b      	ldrh	r3, [r1, #12]
 800bb20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb22:	079d      	lsls	r5, r3, #30
 800bb24:	4606      	mov	r6, r0
 800bb26:	460c      	mov	r4, r1
 800bb28:	d507      	bpl.n	800bb3a <__smakebuf_r+0x1c>
 800bb2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bb2e:	6023      	str	r3, [r4, #0]
 800bb30:	6123      	str	r3, [r4, #16]
 800bb32:	2301      	movs	r3, #1
 800bb34:	6163      	str	r3, [r4, #20]
 800bb36:	b003      	add	sp, #12
 800bb38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb3a:	466a      	mov	r2, sp
 800bb3c:	ab01      	add	r3, sp, #4
 800bb3e:	f7ff ffc9 	bl	800bad4 <__swhatbuf_r>
 800bb42:	9f00      	ldr	r7, [sp, #0]
 800bb44:	4605      	mov	r5, r0
 800bb46:	4639      	mov	r1, r7
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f7ff fb47 	bl	800b1dc <_malloc_r>
 800bb4e:	b948      	cbnz	r0, 800bb64 <__smakebuf_r+0x46>
 800bb50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb54:	059a      	lsls	r2, r3, #22
 800bb56:	d4ee      	bmi.n	800bb36 <__smakebuf_r+0x18>
 800bb58:	f023 0303 	bic.w	r3, r3, #3
 800bb5c:	f043 0302 	orr.w	r3, r3, #2
 800bb60:	81a3      	strh	r3, [r4, #12]
 800bb62:	e7e2      	b.n	800bb2a <__smakebuf_r+0xc>
 800bb64:	89a3      	ldrh	r3, [r4, #12]
 800bb66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb6e:	81a3      	strh	r3, [r4, #12]
 800bb70:	9b01      	ldr	r3, [sp, #4]
 800bb72:	6020      	str	r0, [r4, #0]
 800bb74:	b15b      	cbz	r3, 800bb8e <__smakebuf_r+0x70>
 800bb76:	4630      	mov	r0, r6
 800bb78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb7c:	f000 f81e 	bl	800bbbc <_isatty_r>
 800bb80:	b128      	cbz	r0, 800bb8e <__smakebuf_r+0x70>
 800bb82:	89a3      	ldrh	r3, [r4, #12]
 800bb84:	f023 0303 	bic.w	r3, r3, #3
 800bb88:	f043 0301 	orr.w	r3, r3, #1
 800bb8c:	81a3      	strh	r3, [r4, #12]
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	431d      	orrs	r5, r3
 800bb92:	81a5      	strh	r5, [r4, #12]
 800bb94:	e7cf      	b.n	800bb36 <__smakebuf_r+0x18>
	...

0800bb98 <_fstat_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	4d06      	ldr	r5, [pc, #24]	@ (800bbb8 <_fstat_r+0x20>)
 800bb9e:	4604      	mov	r4, r0
 800bba0:	4608      	mov	r0, r1
 800bba2:	4611      	mov	r1, r2
 800bba4:	602b      	str	r3, [r5, #0]
 800bba6:	f7f7 f9ad 	bl	8002f04 <_fstat>
 800bbaa:	1c43      	adds	r3, r0, #1
 800bbac:	d102      	bne.n	800bbb4 <_fstat_r+0x1c>
 800bbae:	682b      	ldr	r3, [r5, #0]
 800bbb0:	b103      	cbz	r3, 800bbb4 <_fstat_r+0x1c>
 800bbb2:	6023      	str	r3, [r4, #0]
 800bbb4:	bd38      	pop	{r3, r4, r5, pc}
 800bbb6:	bf00      	nop
 800bbb8:	20001e7c 	.word	0x20001e7c

0800bbbc <_isatty_r>:
 800bbbc:	b538      	push	{r3, r4, r5, lr}
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	4d05      	ldr	r5, [pc, #20]	@ (800bbd8 <_isatty_r+0x1c>)
 800bbc2:	4604      	mov	r4, r0
 800bbc4:	4608      	mov	r0, r1
 800bbc6:	602b      	str	r3, [r5, #0]
 800bbc8:	f7f7 f9ab 	bl	8002f22 <_isatty>
 800bbcc:	1c43      	adds	r3, r0, #1
 800bbce:	d102      	bne.n	800bbd6 <_isatty_r+0x1a>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	b103      	cbz	r3, 800bbd6 <_isatty_r+0x1a>
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	bd38      	pop	{r3, r4, r5, pc}
 800bbd8:	20001e7c 	.word	0x20001e7c

0800bbdc <atan2>:
 800bbdc:	f000 b8f8 	b.w	800bdd0 <__ieee754_atan2>

0800bbe0 <sqrt>:
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	460f      	mov	r7, r1
 800bbe6:	f000 f81f 	bl	800bc28 <__ieee754_sqrt>
 800bbea:	4632      	mov	r2, r6
 800bbec:	4604      	mov	r4, r0
 800bbee:	460d      	mov	r5, r1
 800bbf0:	463b      	mov	r3, r7
 800bbf2:	4630      	mov	r0, r6
 800bbf4:	4639      	mov	r1, r7
 800bbf6:	f7f4 ff01 	bl	80009fc <__aeabi_dcmpun>
 800bbfa:	b990      	cbnz	r0, 800bc22 <sqrt+0x42>
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	2300      	movs	r3, #0
 800bc00:	4630      	mov	r0, r6
 800bc02:	4639      	mov	r1, r7
 800bc04:	f7f4 fed2 	bl	80009ac <__aeabi_dcmplt>
 800bc08:	b158      	cbz	r0, 800bc22 <sqrt+0x42>
 800bc0a:	f7ff fe37 	bl	800b87c <__errno>
 800bc0e:	2321      	movs	r3, #33	@ 0x21
 800bc10:	2200      	movs	r2, #0
 800bc12:	6003      	str	r3, [r0, #0]
 800bc14:	2300      	movs	r3, #0
 800bc16:	4610      	mov	r0, r2
 800bc18:	4619      	mov	r1, r3
 800bc1a:	f7f4 fd7f 	bl	800071c <__aeabi_ddiv>
 800bc1e:	4604      	mov	r4, r0
 800bc20:	460d      	mov	r5, r1
 800bc22:	4620      	mov	r0, r4
 800bc24:	4629      	mov	r1, r5
 800bc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc28 <__ieee754_sqrt>:
 800bc28:	4a65      	ldr	r2, [pc, #404]	@ (800bdc0 <__ieee754_sqrt+0x198>)
 800bc2a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2e:	438a      	bics	r2, r1
 800bc30:	4606      	mov	r6, r0
 800bc32:	460f      	mov	r7, r1
 800bc34:	460b      	mov	r3, r1
 800bc36:	4604      	mov	r4, r0
 800bc38:	d10e      	bne.n	800bc58 <__ieee754_sqrt+0x30>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	f7f4 fc44 	bl	80004c8 <__aeabi_dmul>
 800bc40:	4602      	mov	r2, r0
 800bc42:	460b      	mov	r3, r1
 800bc44:	4630      	mov	r0, r6
 800bc46:	4639      	mov	r1, r7
 800bc48:	f7f4 fa88 	bl	800015c <__adddf3>
 800bc4c:	4606      	mov	r6, r0
 800bc4e:	460f      	mov	r7, r1
 800bc50:	4630      	mov	r0, r6
 800bc52:	4639      	mov	r1, r7
 800bc54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc58:	2900      	cmp	r1, #0
 800bc5a:	dc0c      	bgt.n	800bc76 <__ieee754_sqrt+0x4e>
 800bc5c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800bc60:	4302      	orrs	r2, r0
 800bc62:	d0f5      	beq.n	800bc50 <__ieee754_sqrt+0x28>
 800bc64:	b189      	cbz	r1, 800bc8a <__ieee754_sqrt+0x62>
 800bc66:	4602      	mov	r2, r0
 800bc68:	f7f4 fa76 	bl	8000158 <__aeabi_dsub>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	460b      	mov	r3, r1
 800bc70:	f7f4 fd54 	bl	800071c <__aeabi_ddiv>
 800bc74:	e7ea      	b.n	800bc4c <__ieee754_sqrt+0x24>
 800bc76:	150a      	asrs	r2, r1, #20
 800bc78:	d115      	bne.n	800bca6 <__ieee754_sqrt+0x7e>
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	e009      	b.n	800bc92 <__ieee754_sqrt+0x6a>
 800bc7e:	0ae3      	lsrs	r3, r4, #11
 800bc80:	3a15      	subs	r2, #21
 800bc82:	0564      	lsls	r4, r4, #21
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d0fa      	beq.n	800bc7e <__ieee754_sqrt+0x56>
 800bc88:	e7f7      	b.n	800bc7a <__ieee754_sqrt+0x52>
 800bc8a:	460a      	mov	r2, r1
 800bc8c:	e7fa      	b.n	800bc84 <__ieee754_sqrt+0x5c>
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	3101      	adds	r1, #1
 800bc92:	02d8      	lsls	r0, r3, #11
 800bc94:	d5fb      	bpl.n	800bc8e <__ieee754_sqrt+0x66>
 800bc96:	1e48      	subs	r0, r1, #1
 800bc98:	1a12      	subs	r2, r2, r0
 800bc9a:	f1c1 0020 	rsb	r0, r1, #32
 800bc9e:	fa24 f000 	lsr.w	r0, r4, r0
 800bca2:	4303      	orrs	r3, r0
 800bca4:	408c      	lsls	r4, r1
 800bca6:	2700      	movs	r7, #0
 800bca8:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800bcac:	2116      	movs	r1, #22
 800bcae:	07d2      	lsls	r2, r2, #31
 800bcb0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800bcb4:	463a      	mov	r2, r7
 800bcb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bcbe:	bf5c      	itt	pl
 800bcc0:	005b      	lslpl	r3, r3, #1
 800bcc2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800bcc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bcca:	bf58      	it	pl
 800bccc:	0064      	lslpl	r4, r4, #1
 800bcce:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800bcd2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bcd6:	0064      	lsls	r4, r4, #1
 800bcd8:	1815      	adds	r5, r2, r0
 800bcda:	429d      	cmp	r5, r3
 800bcdc:	bfde      	ittt	le
 800bcde:	182a      	addle	r2, r5, r0
 800bce0:	1b5b      	suble	r3, r3, r5
 800bce2:	183f      	addle	r7, r7, r0
 800bce4:	0fe5      	lsrs	r5, r4, #31
 800bce6:	3901      	subs	r1, #1
 800bce8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800bcec:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800bcf0:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800bcf4:	d1f0      	bne.n	800bcd8 <__ieee754_sqrt+0xb0>
 800bcf6:	460d      	mov	r5, r1
 800bcf8:	2620      	movs	r6, #32
 800bcfa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	eb00 0c01 	add.w	ip, r0, r1
 800bd04:	dc02      	bgt.n	800bd0c <__ieee754_sqrt+0xe4>
 800bd06:	d113      	bne.n	800bd30 <__ieee754_sqrt+0x108>
 800bd08:	45a4      	cmp	ip, r4
 800bd0a:	d811      	bhi.n	800bd30 <__ieee754_sqrt+0x108>
 800bd0c:	f1bc 0f00 	cmp.w	ip, #0
 800bd10:	eb0c 0100 	add.w	r1, ip, r0
 800bd14:	da3e      	bge.n	800bd94 <__ieee754_sqrt+0x16c>
 800bd16:	2900      	cmp	r1, #0
 800bd18:	db3c      	blt.n	800bd94 <__ieee754_sqrt+0x16c>
 800bd1a:	f102 0e01 	add.w	lr, r2, #1
 800bd1e:	1a9b      	subs	r3, r3, r2
 800bd20:	4672      	mov	r2, lr
 800bd22:	45a4      	cmp	ip, r4
 800bd24:	bf88      	it	hi
 800bd26:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bd2a:	eba4 040c 	sub.w	r4, r4, ip
 800bd2e:	4405      	add	r5, r0
 800bd30:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800bd34:	3e01      	subs	r6, #1
 800bd36:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800bd3a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800bd3e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800bd42:	d1dc      	bne.n	800bcfe <__ieee754_sqrt+0xd6>
 800bd44:	431c      	orrs	r4, r3
 800bd46:	d01a      	beq.n	800bd7e <__ieee754_sqrt+0x156>
 800bd48:	4c1e      	ldr	r4, [pc, #120]	@ (800bdc4 <__ieee754_sqrt+0x19c>)
 800bd4a:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800bdc8 <__ieee754_sqrt+0x1a0>
 800bd4e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bd52:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bd56:	f7f4 f9ff 	bl	8000158 <__aeabi_dsub>
 800bd5a:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800bd5e:	4602      	mov	r2, r0
 800bd60:	460b      	mov	r3, r1
 800bd62:	4650      	mov	r0, sl
 800bd64:	4659      	mov	r1, fp
 800bd66:	f7f4 fe2b 	bl	80009c0 <__aeabi_dcmple>
 800bd6a:	b140      	cbz	r0, 800bd7e <__ieee754_sqrt+0x156>
 800bd6c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bd70:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bd74:	f1b5 3fff 	cmp.w	r5, #4294967295
 800bd78:	d10e      	bne.n	800bd98 <__ieee754_sqrt+0x170>
 800bd7a:	4635      	mov	r5, r6
 800bd7c:	3701      	adds	r7, #1
 800bd7e:	107b      	asrs	r3, r7, #1
 800bd80:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800bd84:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800bd88:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800bd8c:	086b      	lsrs	r3, r5, #1
 800bd8e:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800bd92:	e75b      	b.n	800bc4c <__ieee754_sqrt+0x24>
 800bd94:	4696      	mov	lr, r2
 800bd96:	e7c2      	b.n	800bd1e <__ieee754_sqrt+0xf6>
 800bd98:	f7f4 f9e0 	bl	800015c <__adddf3>
 800bd9c:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800bda0:	4602      	mov	r2, r0
 800bda2:	460b      	mov	r3, r1
 800bda4:	4650      	mov	r0, sl
 800bda6:	4659      	mov	r1, fp
 800bda8:	f7f4 fe00 	bl	80009ac <__aeabi_dcmplt>
 800bdac:	b120      	cbz	r0, 800bdb8 <__ieee754_sqrt+0x190>
 800bdae:	1cab      	adds	r3, r5, #2
 800bdb0:	bf08      	it	eq
 800bdb2:	3701      	addeq	r7, #1
 800bdb4:	3502      	adds	r5, #2
 800bdb6:	e7e2      	b.n	800bd7e <__ieee754_sqrt+0x156>
 800bdb8:	1c6b      	adds	r3, r5, #1
 800bdba:	f023 0501 	bic.w	r5, r3, #1
 800bdbe:	e7de      	b.n	800bd7e <__ieee754_sqrt+0x156>
 800bdc0:	7ff00000 	.word	0x7ff00000
 800bdc4:	0800c3f0 	.word	0x0800c3f0
 800bdc8:	0800c3e8 	.word	0x0800c3e8
 800bdcc:	00000000 	.word	0x00000000

0800bdd0 <__ieee754_atan2>:
 800bdd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd4:	4617      	mov	r7, r2
 800bdd6:	4690      	mov	r8, r2
 800bdd8:	4699      	mov	r9, r3
 800bdda:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bdde:	427b      	negs	r3, r7
 800bde0:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800bf68 <__ieee754_atan2+0x198>
 800bde4:	433b      	orrs	r3, r7
 800bde6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bdea:	4553      	cmp	r3, sl
 800bdec:	4604      	mov	r4, r0
 800bdee:	460d      	mov	r5, r1
 800bdf0:	d809      	bhi.n	800be06 <__ieee754_atan2+0x36>
 800bdf2:	4246      	negs	r6, r0
 800bdf4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bdf8:	4306      	orrs	r6, r0
 800bdfa:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800bdfe:	4556      	cmp	r6, sl
 800be00:	468e      	mov	lr, r1
 800be02:	4683      	mov	fp, r0
 800be04:	d908      	bls.n	800be18 <__ieee754_atan2+0x48>
 800be06:	4642      	mov	r2, r8
 800be08:	464b      	mov	r3, r9
 800be0a:	4620      	mov	r0, r4
 800be0c:	4629      	mov	r1, r5
 800be0e:	f7f4 f9a5 	bl	800015c <__adddf3>
 800be12:	4604      	mov	r4, r0
 800be14:	460d      	mov	r5, r1
 800be16:	e016      	b.n	800be46 <__ieee754_atan2+0x76>
 800be18:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800be1c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800be20:	433e      	orrs	r6, r7
 800be22:	d103      	bne.n	800be2c <__ieee754_atan2+0x5c>
 800be24:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be28:	f000 b8a6 	b.w	800bf78 <atan>
 800be2c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800be30:	f006 0602 	and.w	r6, r6, #2
 800be34:	ea53 0b0b 	orrs.w	fp, r3, fp
 800be38:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800be3c:	d107      	bne.n	800be4e <__ieee754_atan2+0x7e>
 800be3e:	2e02      	cmp	r6, #2
 800be40:	d064      	beq.n	800bf0c <__ieee754_atan2+0x13c>
 800be42:	2e03      	cmp	r6, #3
 800be44:	d066      	beq.n	800bf14 <__ieee754_atan2+0x144>
 800be46:	4620      	mov	r0, r4
 800be48:	4629      	mov	r1, r5
 800be4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4e:	4317      	orrs	r7, r2
 800be50:	d106      	bne.n	800be60 <__ieee754_atan2+0x90>
 800be52:	f1be 0f00 	cmp.w	lr, #0
 800be56:	db68      	blt.n	800bf2a <__ieee754_atan2+0x15a>
 800be58:	a537      	add	r5, pc, #220	@ (adr r5, 800bf38 <__ieee754_atan2+0x168>)
 800be5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800be5e:	e7f2      	b.n	800be46 <__ieee754_atan2+0x76>
 800be60:	4552      	cmp	r2, sl
 800be62:	d10f      	bne.n	800be84 <__ieee754_atan2+0xb4>
 800be64:	4293      	cmp	r3, r2
 800be66:	f106 36ff 	add.w	r6, r6, #4294967295
 800be6a:	d107      	bne.n	800be7c <__ieee754_atan2+0xac>
 800be6c:	2e02      	cmp	r6, #2
 800be6e:	d855      	bhi.n	800bf1c <__ieee754_atan2+0x14c>
 800be70:	4b3e      	ldr	r3, [pc, #248]	@ (800bf6c <__ieee754_atan2+0x19c>)
 800be72:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be76:	e9d3 4500 	ldrd	r4, r5, [r3]
 800be7a:	e7e4      	b.n	800be46 <__ieee754_atan2+0x76>
 800be7c:	2e02      	cmp	r6, #2
 800be7e:	d851      	bhi.n	800bf24 <__ieee754_atan2+0x154>
 800be80:	4b3b      	ldr	r3, [pc, #236]	@ (800bf70 <__ieee754_atan2+0x1a0>)
 800be82:	e7f6      	b.n	800be72 <__ieee754_atan2+0xa2>
 800be84:	4553      	cmp	r3, sl
 800be86:	d0e4      	beq.n	800be52 <__ieee754_atan2+0x82>
 800be88:	1a9b      	subs	r3, r3, r2
 800be8a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800be8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800be92:	da21      	bge.n	800bed8 <__ieee754_atan2+0x108>
 800be94:	f1b9 0f00 	cmp.w	r9, #0
 800be98:	da01      	bge.n	800be9e <__ieee754_atan2+0xce>
 800be9a:	323c      	adds	r2, #60	@ 0x3c
 800be9c:	db20      	blt.n	800bee0 <__ieee754_atan2+0x110>
 800be9e:	4642      	mov	r2, r8
 800bea0:	464b      	mov	r3, r9
 800bea2:	4620      	mov	r0, r4
 800bea4:	4629      	mov	r1, r5
 800bea6:	f7f4 fc39 	bl	800071c <__aeabi_ddiv>
 800beaa:	f000 f9f5 	bl	800c298 <fabs>
 800beae:	f000 f863 	bl	800bf78 <atan>
 800beb2:	4604      	mov	r4, r0
 800beb4:	460d      	mov	r5, r1
 800beb6:	2e01      	cmp	r6, #1
 800beb8:	d015      	beq.n	800bee6 <__ieee754_atan2+0x116>
 800beba:	2e02      	cmp	r6, #2
 800bebc:	d017      	beq.n	800beee <__ieee754_atan2+0x11e>
 800bebe:	2e00      	cmp	r6, #0
 800bec0:	d0c1      	beq.n	800be46 <__ieee754_atan2+0x76>
 800bec2:	a31f      	add	r3, pc, #124	@ (adr r3, 800bf40 <__ieee754_atan2+0x170>)
 800bec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec8:	4620      	mov	r0, r4
 800beca:	4629      	mov	r1, r5
 800becc:	f7f4 f944 	bl	8000158 <__aeabi_dsub>
 800bed0:	a31d      	add	r3, pc, #116	@ (adr r3, 800bf48 <__ieee754_atan2+0x178>)
 800bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed6:	e016      	b.n	800bf06 <__ieee754_atan2+0x136>
 800bed8:	a517      	add	r5, pc, #92	@ (adr r5, 800bf38 <__ieee754_atan2+0x168>)
 800beda:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bede:	e7ea      	b.n	800beb6 <__ieee754_atan2+0xe6>
 800bee0:	2400      	movs	r4, #0
 800bee2:	2500      	movs	r5, #0
 800bee4:	e7e7      	b.n	800beb6 <__ieee754_atan2+0xe6>
 800bee6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800beea:	461d      	mov	r5, r3
 800beec:	e7ab      	b.n	800be46 <__ieee754_atan2+0x76>
 800beee:	a314      	add	r3, pc, #80	@ (adr r3, 800bf40 <__ieee754_atan2+0x170>)
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	4620      	mov	r0, r4
 800bef6:	4629      	mov	r1, r5
 800bef8:	f7f4 f92e 	bl	8000158 <__aeabi_dsub>
 800befc:	4602      	mov	r2, r0
 800befe:	460b      	mov	r3, r1
 800bf00:	a111      	add	r1, pc, #68	@ (adr r1, 800bf48 <__ieee754_atan2+0x178>)
 800bf02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bf06:	f7f4 f927 	bl	8000158 <__aeabi_dsub>
 800bf0a:	e782      	b.n	800be12 <__ieee754_atan2+0x42>
 800bf0c:	a50e      	add	r5, pc, #56	@ (adr r5, 800bf48 <__ieee754_atan2+0x178>)
 800bf0e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf12:	e798      	b.n	800be46 <__ieee754_atan2+0x76>
 800bf14:	a50e      	add	r5, pc, #56	@ (adr r5, 800bf50 <__ieee754_atan2+0x180>)
 800bf16:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf1a:	e794      	b.n	800be46 <__ieee754_atan2+0x76>
 800bf1c:	a50e      	add	r5, pc, #56	@ (adr r5, 800bf58 <__ieee754_atan2+0x188>)
 800bf1e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf22:	e790      	b.n	800be46 <__ieee754_atan2+0x76>
 800bf24:	2400      	movs	r4, #0
 800bf26:	2500      	movs	r5, #0
 800bf28:	e78d      	b.n	800be46 <__ieee754_atan2+0x76>
 800bf2a:	a50d      	add	r5, pc, #52	@ (adr r5, 800bf60 <__ieee754_atan2+0x190>)
 800bf2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bf30:	e789      	b.n	800be46 <__ieee754_atan2+0x76>
 800bf32:	bf00      	nop
 800bf34:	f3af 8000 	nop.w
 800bf38:	54442d18 	.word	0x54442d18
 800bf3c:	3ff921fb 	.word	0x3ff921fb
 800bf40:	33145c07 	.word	0x33145c07
 800bf44:	3ca1a626 	.word	0x3ca1a626
 800bf48:	54442d18 	.word	0x54442d18
 800bf4c:	400921fb 	.word	0x400921fb
 800bf50:	54442d18 	.word	0x54442d18
 800bf54:	c00921fb 	.word	0xc00921fb
 800bf58:	54442d18 	.word	0x54442d18
 800bf5c:	3fe921fb 	.word	0x3fe921fb
 800bf60:	54442d18 	.word	0x54442d18
 800bf64:	bff921fb 	.word	0xbff921fb
 800bf68:	7ff00000 	.word	0x7ff00000
 800bf6c:	0800c410 	.word	0x0800c410
 800bf70:	0800c3f8 	.word	0x0800c3f8
 800bf74:	00000000 	.word	0x00000000

0800bf78 <atan>:
 800bf78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	4bbc      	ldr	r3, [pc, #752]	@ (800c270 <atan+0x2f8>)
 800bf7e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800bf82:	429e      	cmp	r6, r3
 800bf84:	4604      	mov	r4, r0
 800bf86:	460d      	mov	r5, r1
 800bf88:	468b      	mov	fp, r1
 800bf8a:	d918      	bls.n	800bfbe <atan+0x46>
 800bf8c:	4bb9      	ldr	r3, [pc, #740]	@ (800c274 <atan+0x2fc>)
 800bf8e:	429e      	cmp	r6, r3
 800bf90:	d801      	bhi.n	800bf96 <atan+0x1e>
 800bf92:	d109      	bne.n	800bfa8 <atan+0x30>
 800bf94:	b140      	cbz	r0, 800bfa8 <atan+0x30>
 800bf96:	4622      	mov	r2, r4
 800bf98:	462b      	mov	r3, r5
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	f7f4 f8dd 	bl	800015c <__adddf3>
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	460d      	mov	r5, r1
 800bfa6:	e006      	b.n	800bfb6 <atan+0x3e>
 800bfa8:	f1bb 0f00 	cmp.w	fp, #0
 800bfac:	f340 8123 	ble.w	800c1f6 <atan+0x27e>
 800bfb0:	a593      	add	r5, pc, #588	@ (adr r5, 800c200 <atan+0x288>)
 800bfb2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	4629      	mov	r1, r5
 800bfba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfbe:	4bae      	ldr	r3, [pc, #696]	@ (800c278 <atan+0x300>)
 800bfc0:	429e      	cmp	r6, r3
 800bfc2:	d811      	bhi.n	800bfe8 <atan+0x70>
 800bfc4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800bfc8:	429e      	cmp	r6, r3
 800bfca:	d80a      	bhi.n	800bfe2 <atan+0x6a>
 800bfcc:	a38e      	add	r3, pc, #568	@ (adr r3, 800c208 <atan+0x290>)
 800bfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd2:	f7f4 f8c3 	bl	800015c <__adddf3>
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	4ba8      	ldr	r3, [pc, #672]	@ (800c27c <atan+0x304>)
 800bfda:	f7f4 fd05 	bl	80009e8 <__aeabi_dcmpgt>
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d1e9      	bne.n	800bfb6 <atan+0x3e>
 800bfe2:	f04f 3aff 	mov.w	sl, #4294967295
 800bfe6:	e027      	b.n	800c038 <atan+0xc0>
 800bfe8:	f000 f956 	bl	800c298 <fabs>
 800bfec:	4ba4      	ldr	r3, [pc, #656]	@ (800c280 <atan+0x308>)
 800bfee:	4604      	mov	r4, r0
 800bff0:	429e      	cmp	r6, r3
 800bff2:	460d      	mov	r5, r1
 800bff4:	f200 80b8 	bhi.w	800c168 <atan+0x1f0>
 800bff8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800bffc:	429e      	cmp	r6, r3
 800bffe:	f200 809c 	bhi.w	800c13a <atan+0x1c2>
 800c002:	4602      	mov	r2, r0
 800c004:	460b      	mov	r3, r1
 800c006:	f7f4 f8a9 	bl	800015c <__adddf3>
 800c00a:	2200      	movs	r2, #0
 800c00c:	4b9b      	ldr	r3, [pc, #620]	@ (800c27c <atan+0x304>)
 800c00e:	f7f4 f8a3 	bl	8000158 <__aeabi_dsub>
 800c012:	2200      	movs	r2, #0
 800c014:	4606      	mov	r6, r0
 800c016:	460f      	mov	r7, r1
 800c018:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c01c:	4620      	mov	r0, r4
 800c01e:	4629      	mov	r1, r5
 800c020:	f7f4 f89c 	bl	800015c <__adddf3>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	4630      	mov	r0, r6
 800c02a:	4639      	mov	r1, r7
 800c02c:	f7f4 fb76 	bl	800071c <__aeabi_ddiv>
 800c030:	f04f 0a00 	mov.w	sl, #0
 800c034:	4604      	mov	r4, r0
 800c036:	460d      	mov	r5, r1
 800c038:	4622      	mov	r2, r4
 800c03a:	462b      	mov	r3, r5
 800c03c:	4620      	mov	r0, r4
 800c03e:	4629      	mov	r1, r5
 800c040:	f7f4 fa42 	bl	80004c8 <__aeabi_dmul>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	4680      	mov	r8, r0
 800c04a:	4689      	mov	r9, r1
 800c04c:	f7f4 fa3c 	bl	80004c8 <__aeabi_dmul>
 800c050:	a36f      	add	r3, pc, #444	@ (adr r3, 800c210 <atan+0x298>)
 800c052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c056:	4606      	mov	r6, r0
 800c058:	460f      	mov	r7, r1
 800c05a:	f7f4 fa35 	bl	80004c8 <__aeabi_dmul>
 800c05e:	a36e      	add	r3, pc, #440	@ (adr r3, 800c218 <atan+0x2a0>)
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	f7f4 f87a 	bl	800015c <__adddf3>
 800c068:	4632      	mov	r2, r6
 800c06a:	463b      	mov	r3, r7
 800c06c:	f7f4 fa2c 	bl	80004c8 <__aeabi_dmul>
 800c070:	a36b      	add	r3, pc, #428	@ (adr r3, 800c220 <atan+0x2a8>)
 800c072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c076:	f7f4 f871 	bl	800015c <__adddf3>
 800c07a:	4632      	mov	r2, r6
 800c07c:	463b      	mov	r3, r7
 800c07e:	f7f4 fa23 	bl	80004c8 <__aeabi_dmul>
 800c082:	a369      	add	r3, pc, #420	@ (adr r3, 800c228 <atan+0x2b0>)
 800c084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c088:	f7f4 f868 	bl	800015c <__adddf3>
 800c08c:	4632      	mov	r2, r6
 800c08e:	463b      	mov	r3, r7
 800c090:	f7f4 fa1a 	bl	80004c8 <__aeabi_dmul>
 800c094:	a366      	add	r3, pc, #408	@ (adr r3, 800c230 <atan+0x2b8>)
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	f7f4 f85f 	bl	800015c <__adddf3>
 800c09e:	4632      	mov	r2, r6
 800c0a0:	463b      	mov	r3, r7
 800c0a2:	f7f4 fa11 	bl	80004c8 <__aeabi_dmul>
 800c0a6:	a364      	add	r3, pc, #400	@ (adr r3, 800c238 <atan+0x2c0>)
 800c0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ac:	f7f4 f856 	bl	800015c <__adddf3>
 800c0b0:	4642      	mov	r2, r8
 800c0b2:	464b      	mov	r3, r9
 800c0b4:	f7f4 fa08 	bl	80004c8 <__aeabi_dmul>
 800c0b8:	a361      	add	r3, pc, #388	@ (adr r3, 800c240 <atan+0x2c8>)
 800c0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0be:	4680      	mov	r8, r0
 800c0c0:	4689      	mov	r9, r1
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	4639      	mov	r1, r7
 800c0c6:	f7f4 f9ff 	bl	80004c8 <__aeabi_dmul>
 800c0ca:	a35f      	add	r3, pc, #380	@ (adr r3, 800c248 <atan+0x2d0>)
 800c0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0d0:	f7f4 f842 	bl	8000158 <__aeabi_dsub>
 800c0d4:	4632      	mov	r2, r6
 800c0d6:	463b      	mov	r3, r7
 800c0d8:	f7f4 f9f6 	bl	80004c8 <__aeabi_dmul>
 800c0dc:	a35c      	add	r3, pc, #368	@ (adr r3, 800c250 <atan+0x2d8>)
 800c0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e2:	f7f4 f839 	bl	8000158 <__aeabi_dsub>
 800c0e6:	4632      	mov	r2, r6
 800c0e8:	463b      	mov	r3, r7
 800c0ea:	f7f4 f9ed 	bl	80004c8 <__aeabi_dmul>
 800c0ee:	a35a      	add	r3, pc, #360	@ (adr r3, 800c258 <atan+0x2e0>)
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	f7f4 f830 	bl	8000158 <__aeabi_dsub>
 800c0f8:	4632      	mov	r2, r6
 800c0fa:	463b      	mov	r3, r7
 800c0fc:	f7f4 f9e4 	bl	80004c8 <__aeabi_dmul>
 800c100:	a357      	add	r3, pc, #348	@ (adr r3, 800c260 <atan+0x2e8>)
 800c102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c106:	f7f4 f827 	bl	8000158 <__aeabi_dsub>
 800c10a:	4632      	mov	r2, r6
 800c10c:	463b      	mov	r3, r7
 800c10e:	f7f4 f9db 	bl	80004c8 <__aeabi_dmul>
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	4640      	mov	r0, r8
 800c118:	4649      	mov	r1, r9
 800c11a:	f7f4 f81f 	bl	800015c <__adddf3>
 800c11e:	4622      	mov	r2, r4
 800c120:	462b      	mov	r3, r5
 800c122:	f7f4 f9d1 	bl	80004c8 <__aeabi_dmul>
 800c126:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c12a:	4602      	mov	r2, r0
 800c12c:	460b      	mov	r3, r1
 800c12e:	d144      	bne.n	800c1ba <atan+0x242>
 800c130:	4620      	mov	r0, r4
 800c132:	4629      	mov	r1, r5
 800c134:	f7f4 f810 	bl	8000158 <__aeabi_dsub>
 800c138:	e733      	b.n	800bfa2 <atan+0x2a>
 800c13a:	2200      	movs	r2, #0
 800c13c:	4b4f      	ldr	r3, [pc, #316]	@ (800c27c <atan+0x304>)
 800c13e:	f7f4 f80b 	bl	8000158 <__aeabi_dsub>
 800c142:	2200      	movs	r2, #0
 800c144:	4606      	mov	r6, r0
 800c146:	460f      	mov	r7, r1
 800c148:	4620      	mov	r0, r4
 800c14a:	4629      	mov	r1, r5
 800c14c:	4b4b      	ldr	r3, [pc, #300]	@ (800c27c <atan+0x304>)
 800c14e:	f7f4 f805 	bl	800015c <__adddf3>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	4630      	mov	r0, r6
 800c158:	4639      	mov	r1, r7
 800c15a:	f7f4 fadf 	bl	800071c <__aeabi_ddiv>
 800c15e:	f04f 0a01 	mov.w	sl, #1
 800c162:	4604      	mov	r4, r0
 800c164:	460d      	mov	r5, r1
 800c166:	e767      	b.n	800c038 <atan+0xc0>
 800c168:	4b46      	ldr	r3, [pc, #280]	@ (800c284 <atan+0x30c>)
 800c16a:	429e      	cmp	r6, r3
 800c16c:	d21a      	bcs.n	800c1a4 <atan+0x22c>
 800c16e:	2200      	movs	r2, #0
 800c170:	4b45      	ldr	r3, [pc, #276]	@ (800c288 <atan+0x310>)
 800c172:	f7f3 fff1 	bl	8000158 <__aeabi_dsub>
 800c176:	2200      	movs	r2, #0
 800c178:	4606      	mov	r6, r0
 800c17a:	460f      	mov	r7, r1
 800c17c:	4620      	mov	r0, r4
 800c17e:	4629      	mov	r1, r5
 800c180:	4b41      	ldr	r3, [pc, #260]	@ (800c288 <atan+0x310>)
 800c182:	f7f4 f9a1 	bl	80004c8 <__aeabi_dmul>
 800c186:	2200      	movs	r2, #0
 800c188:	4b3c      	ldr	r3, [pc, #240]	@ (800c27c <atan+0x304>)
 800c18a:	f7f3 ffe7 	bl	800015c <__adddf3>
 800c18e:	4602      	mov	r2, r0
 800c190:	460b      	mov	r3, r1
 800c192:	4630      	mov	r0, r6
 800c194:	4639      	mov	r1, r7
 800c196:	f7f4 fac1 	bl	800071c <__aeabi_ddiv>
 800c19a:	f04f 0a02 	mov.w	sl, #2
 800c19e:	4604      	mov	r4, r0
 800c1a0:	460d      	mov	r5, r1
 800c1a2:	e749      	b.n	800c038 <atan+0xc0>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	4938      	ldr	r1, [pc, #224]	@ (800c28c <atan+0x314>)
 800c1ac:	f7f4 fab6 	bl	800071c <__aeabi_ddiv>
 800c1b0:	f04f 0a03 	mov.w	sl, #3
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	460d      	mov	r5, r1
 800c1b8:	e73e      	b.n	800c038 <atan+0xc0>
 800c1ba:	4b35      	ldr	r3, [pc, #212]	@ (800c290 <atan+0x318>)
 800c1bc:	4e35      	ldr	r6, [pc, #212]	@ (800c294 <atan+0x31c>)
 800c1be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	f7f3 ffc7 	bl	8000158 <__aeabi_dsub>
 800c1ca:	4622      	mov	r2, r4
 800c1cc:	462b      	mov	r3, r5
 800c1ce:	f7f3 ffc3 	bl	8000158 <__aeabi_dsub>
 800c1d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	460b      	mov	r3, r1
 800c1da:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c1de:	f7f3 ffbb 	bl	8000158 <__aeabi_dsub>
 800c1e2:	f1bb 0f00 	cmp.w	fp, #0
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	460d      	mov	r5, r1
 800c1ea:	f6bf aee4 	bge.w	800bfb6 <atan+0x3e>
 800c1ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c1f2:	461d      	mov	r5, r3
 800c1f4:	e6df      	b.n	800bfb6 <atan+0x3e>
 800c1f6:	a51c      	add	r5, pc, #112	@ (adr r5, 800c268 <atan+0x2f0>)
 800c1f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c1fc:	e6db      	b.n	800bfb6 <atan+0x3e>
 800c1fe:	bf00      	nop
 800c200:	54442d18 	.word	0x54442d18
 800c204:	3ff921fb 	.word	0x3ff921fb
 800c208:	8800759c 	.word	0x8800759c
 800c20c:	7e37e43c 	.word	0x7e37e43c
 800c210:	e322da11 	.word	0xe322da11
 800c214:	3f90ad3a 	.word	0x3f90ad3a
 800c218:	24760deb 	.word	0x24760deb
 800c21c:	3fa97b4b 	.word	0x3fa97b4b
 800c220:	a0d03d51 	.word	0xa0d03d51
 800c224:	3fb10d66 	.word	0x3fb10d66
 800c228:	c54c206e 	.word	0xc54c206e
 800c22c:	3fb745cd 	.word	0x3fb745cd
 800c230:	920083ff 	.word	0x920083ff
 800c234:	3fc24924 	.word	0x3fc24924
 800c238:	5555550d 	.word	0x5555550d
 800c23c:	3fd55555 	.word	0x3fd55555
 800c240:	2c6a6c2f 	.word	0x2c6a6c2f
 800c244:	bfa2b444 	.word	0xbfa2b444
 800c248:	52defd9a 	.word	0x52defd9a
 800c24c:	3fadde2d 	.word	0x3fadde2d
 800c250:	af749a6d 	.word	0xaf749a6d
 800c254:	3fb3b0f2 	.word	0x3fb3b0f2
 800c258:	fe231671 	.word	0xfe231671
 800c25c:	3fbc71c6 	.word	0x3fbc71c6
 800c260:	9998ebc4 	.word	0x9998ebc4
 800c264:	3fc99999 	.word	0x3fc99999
 800c268:	54442d18 	.word	0x54442d18
 800c26c:	bff921fb 	.word	0xbff921fb
 800c270:	440fffff 	.word	0x440fffff
 800c274:	7ff00000 	.word	0x7ff00000
 800c278:	3fdbffff 	.word	0x3fdbffff
 800c27c:	3ff00000 	.word	0x3ff00000
 800c280:	3ff2ffff 	.word	0x3ff2ffff
 800c284:	40038000 	.word	0x40038000
 800c288:	3ff80000 	.word	0x3ff80000
 800c28c:	bff00000 	.word	0xbff00000
 800c290:	0800c428 	.word	0x0800c428
 800c294:	0800c448 	.word	0x0800c448

0800c298 <fabs>:
 800c298:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c29c:	4619      	mov	r1, r3
 800c29e:	4770      	bx	lr

0800c2a0 <_init>:
 800c2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a2:	bf00      	nop
 800c2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2a6:	bc08      	pop	{r3}
 800c2a8:	469e      	mov	lr, r3
 800c2aa:	4770      	bx	lr

0800c2ac <_fini>:
 800c2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ae:	bf00      	nop
 800c2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2b2:	bc08      	pop	{r3}
 800c2b4:	469e      	mov	lr, r3
 800c2b6:	4770      	bx	lr
