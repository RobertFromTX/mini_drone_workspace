
drone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9b8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800bac8  0800bac8  0000cac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .flash        00000789  0800bc78  0800bc78  0000cc78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000003  0800c401  0800c401  0000d401  2**0
                  ALLOC, READONLY
  5 .ARM          00000000  0800c404  0800c404  0000e06c  2**0
                  CONTENTS, READONLY
  6 .preinit_array 00000000  0800c404  0800c404  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800c404  0800c404  0000d404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800c408  0800c408  0000d408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000006c  20000000  0800c40c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001e18  2000006c  0800c478  0000e06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e84  0800c478  0000ee84  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018eaa  00000000  00000000  0000e095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d7  00000000  00000000  00026f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0002a818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011a3  00000000  00000000  0002bec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004ad3  00000000  00000000  0002d06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ef9  00000000  00000000  00031b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099926  00000000  00000000  0004aa37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e435d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ad4  00000000  00000000  000e43a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  000eae74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bab0 	.word	0x0800bab0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	0800bab0 	.word	0x0800bab0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001076:	f001 ff11 	bl	8002e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107a:	f000 f92b 	bl	80012d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107e:	f000 fac5 	bl	800160c <MX_GPIO_Init>
  MX_DMA_Init();
 8001082:	f000 fa9d 	bl	80015c0 <MX_DMA_Init>
  MX_I2C2_Init();
 8001086:	f000 f967 	bl	8001358 <MX_I2C2_Init>
  MX_TIM1_Init();
 800108a:	f000 f995 	bl	80013b8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800108e:	f000 fa17 	bl	80014c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	//timer 1 used for measuring duty cycle of incoming PWM signal of throttle and yaw from receiver.
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK) //CH1 and CH2 used for throttle. CH1 detects rising edge, CH2 detects falling edge
 8001092:	2100      	movs	r1, #0
 8001094:	4876      	ldr	r0, [pc, #472]	@ (8001270 <main+0x200>)
 8001096:	f005 fdb9 	bl	8006c0c <HAL_TIM_IC_Start_IT>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <main+0x34>
	{
	    Error_Handler();  // Error starting input capture for channel 1
 80010a0:	f000 fd64 	bl	8001b6c <Error_Handler>
	}
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK)
 80010a4:	2104      	movs	r1, #4
 80010a6:	4872      	ldr	r0, [pc, #456]	@ (8001270 <main+0x200>)
 80010a8:	f005 fdb0 	bl	8006c0c <HAL_TIM_IC_Start_IT>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <main+0x46>
	{
	    Error_Handler();  // Error starting input capture for channel 2
 80010b2:	f000 fd5b 	bl	8001b6c <Error_Handler>
	}
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3) != HAL_OK) //CH3 and CH4 for yaw. CH3 detects rising edge, CH4 detects falling edge
 80010b6:	2108      	movs	r1, #8
 80010b8:	486d      	ldr	r0, [pc, #436]	@ (8001270 <main+0x200>)
 80010ba:	f005 fda7 	bl	8006c0c <HAL_TIM_IC_Start_IT>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <main+0x58>
	{
	    Error_Handler();  // Error starting input capture for channel 3
 80010c4:	f000 fd52 	bl	8001b6c <Error_Handler>
	}
	if (HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 80010c8:	210c      	movs	r1, #12
 80010ca:	4869      	ldr	r0, [pc, #420]	@ (8001270 <main+0x200>)
 80010cc:	f005 fd9e 	bl	8006c0c <HAL_TIM_IC_Start_IT>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <main+0x6a>
	{
	    Error_Handler();  // Error starting input capture for channel 4
 80010d6:	f000 fd49 	bl	8001b6c <Error_Handler>
	}

	if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK) //CH1 and CH2 used for pitch. CH1 detects rising edge, CH2 detects falling edge
 80010da:	2100      	movs	r1, #0
 80010dc:	4865      	ldr	r0, [pc, #404]	@ (8001274 <main+0x204>)
 80010de:	f005 fd95 	bl	8006c0c <HAL_TIM_IC_Start_IT>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <main+0x7c>
	{
	    Error_Handler();  // Error starting input capture for channel 1
 80010e8:	f000 fd40 	bl	8001b6c <Error_Handler>
	}
	if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2) != HAL_OK)
 80010ec:	2104      	movs	r1, #4
 80010ee:	4861      	ldr	r0, [pc, #388]	@ (8001274 <main+0x204>)
 80010f0:	f005 fd8c 	bl	8006c0c <HAL_TIM_IC_Start_IT>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <main+0x8e>
	{
	    Error_Handler();  // Error starting input capture for channel 2
 80010fa:	f000 fd37 	bl	8001b6c <Error_Handler>
	}
	if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3) != HAL_OK) //CH3 and CH4 for roll. CH3 detects rising edge, CH4 detects falling edge
 80010fe:	2108      	movs	r1, #8
 8001100:	485c      	ldr	r0, [pc, #368]	@ (8001274 <main+0x204>)
 8001102:	f005 fd83 	bl	8006c0c <HAL_TIM_IC_Start_IT>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <main+0xa0>
	{
	    Error_Handler();  // Error starting input capture for channel 3
 800110c:	f000 fd2e 	bl	8001b6c <Error_Handler>
	}
	if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8001110:	210c      	movs	r1, #12
 8001112:	4858      	ldr	r0, [pc, #352]	@ (8001274 <main+0x204>)
 8001114:	f005 fd7a 	bl	8006c0c <HAL_TIM_IC_Start_IT>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <main+0xb2>
	{
	    Error_Handler();  // Error starting input capture for channel 4
 800111e:	f000 fd25 	bl	8001b6c <Error_Handler>
	//HAL i2c notes:
	//address of MPU6050 device is 1101000, but we shift it to left because the transmit and receive functions require that. So we are left with 0xD0
	//Argument to right of MPU6050_ADDR_LSL1 is the register address, see the register description in onenote.
	uint8_t reg_addr[1];
	/* We compute the MSB and LSB parts of the memory address */
	reg_addr[0] = (uint8_t) (0x6A);
 8001122:	236a      	movs	r3, #106	@ 0x6a
 8001124:	713b      	strb	r3, [r7, #4]

	//delay for init functions to see if it stops glitch of i2c transmission never completing
	HAL_Delay(1000);
 8001126:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800112a:	f001 fee9 	bl	8002f00 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800112e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001132:	4851      	ldr	r0, [pc, #324]	@ (8001278 <main+0x208>)
 8001134:	f002 fbf6 	bl	8003924 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001138:	2064      	movs	r0, #100	@ 0x64
 800113a:	f001 fee1 	bl	8002f00 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800113e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001142:	484d      	ldr	r0, [pc, #308]	@ (8001278 <main+0x208>)
 8001144:	f002 fbee 	bl	8003924 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001148:	2064      	movs	r0, #100	@ 0x64
 800114a:	f001 fed9 	bl	8002f00 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800114e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001152:	4849      	ldr	r0, [pc, #292]	@ (8001278 <main+0x208>)
 8001154:	f002 fbe6 	bl	8003924 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001158:	2064      	movs	r0, #100	@ 0x64
 800115a:	f001 fed1 	bl	8002f00 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800115e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001162:	4845      	ldr	r0, [pc, #276]	@ (8001278 <main+0x208>)
 8001164:	f002 fbde 	bl	8003924 <HAL_GPIO_TogglePin>

	//test if transmission works
	HAL_StatusTypeDef returnValue = HAL_I2C_Master_Transmit_DMA(&hi2c2, MPU6050_ADDR_LSL1, reg_addr, 1);
 8001168:	1d3a      	adds	r2, r7, #4
 800116a:	2301      	movs	r3, #1
 800116c:	21d0      	movs	r1, #208	@ 0xd0
 800116e:	4843      	ldr	r0, [pc, #268]	@ (800127c <main+0x20c>)
 8001170:	f002 fd62 	bl	8003c38 <HAL_I2C_Master_Transmit_DMA>
 8001174:	4603      	mov	r3, r0
 8001176:	71fb      	strb	r3, [r7, #7]
	while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY);
 8001178:	bf00      	nop
 800117a:	4840      	ldr	r0, [pc, #256]	@ (800127c <main+0x20c>)
 800117c:	f003 fc7b 	bl	8004a76 <HAL_I2C_GetState>
 8001180:	4603      	mov	r3, r0
 8001182:	2b20      	cmp	r3, #32
 8001184:	d1f9      	bne.n	800117a <main+0x10a>
	if (returnValue != HAL_OK)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <main+0x120>
	{
		Error_Handler();
 800118c:	f000 fcee 	bl	8001b6c <Error_Handler>
	}
	if (__HAL_DMA_GET_FLAG(&hdma_i2c1_tx, (0x00000002U)))
 8001190:	4b3b      	ldr	r3, [pc, #236]	@ (8001280 <main+0x210>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <main+0x132>
	{ // Transfer error
		printf("DMA Transfer Error\n");
 800119c:	4839      	ldr	r0, [pc, #228]	@ (8001284 <main+0x214>)
 800119e:	f009 fdc9 	bl	800ad34 <puts>
		// Handle error here
	}
	HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80011a2:	4839      	ldr	r0, [pc, #228]	@ (8001288 <main+0x218>)
 80011a4:	f002 f8e2 	bl	800336c <HAL_DMA_IRQHandler>
	while (!i2c_TX_done);
 80011a8:	bf00      	nop
 80011aa:	4b38      	ldr	r3, [pc, #224]	@ (800128c <main+0x21c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0fb      	beq.n	80011aa <main+0x13a>
	i2c_TX_done = 0;
 80011b2:	4b36      	ldr	r3, [pc, #216]	@ (800128c <main+0x21c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
	// mpu6050_init(&hi2c2); //write to registers in mpu6050 to configure initial settings
	// moved to private variables to see values of attributes in structs in debug mode easier
	//	mpu6050_sensor_data sensor_data_1;
	//	kalman_filter filter1;

	mpu6050_init_dmp(&hi2c2); //initialize mpu6050 to use dmp
 80011b8:	4830      	ldr	r0, [pc, #192]	@ (800127c <main+0x20c>)
 80011ba:	f000 fe11 	bl	8001de0 <mpu6050_init_dmp>

	setDMPEnabled(&hi2c2, true); //enable the dmp
 80011be:	2101      	movs	r1, #1
 80011c0:	482e      	ldr	r0, [pc, #184]	@ (800127c <main+0x20c>)
 80011c2:	f001 f8cc 	bl	800235e <setDMPEnabled>


	packetSize = 42; //FIXME, use this: packetSize = mpu.dmpGetFIFOPacketSize();
 80011c6:	4b32      	ldr	r3, [pc, #200]	@ (8001290 <main+0x220>)
 80011c8:	222a      	movs	r2, #42	@ 0x2a
 80011ca:	801a      	strh	r2, [r3, #0]

	//define starting position
	sensor_data_init(&sensor_data_1); //likely not necessary
 80011cc:	4831      	ldr	r0, [pc, #196]	@ (8001294 <main+0x224>)
 80011ce:	f000 fdf1 	bl	8001db4 <sensor_data_init>

	fifoCount = getFIFOCount(&hi2c2);
 80011d2:	482a      	ldr	r0, [pc, #168]	@ (800127c <main+0x20c>)
 80011d4:	f001 f8d6 	bl	8002384 <getFIFOCount>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001298 <main+0x228>)
 80011de:	801a      	strh	r2, [r3, #0]
	fifoCount = getFIFOCount(&hi2c2);
 80011e0:	4826      	ldr	r0, [pc, #152]	@ (800127c <main+0x20c>)
 80011e2:	f001 f8cf 	bl	8002384 <getFIFOCount>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001298 <main+0x228>)
 80011ec:	801a      	strh	r2, [r3, #0]
	resetFIFO(&hi2c2);
 80011ee:	4823      	ldr	r0, [pc, #140]	@ (800127c <main+0x20c>)
 80011f0:	f001 f8e6 	bl	80023c0 <resetFIFO>
	fifoCount = getFIFOCount(&hi2c2);
 80011f4:	4821      	ldr	r0, [pc, #132]	@ (800127c <main+0x20c>)
 80011f6:	f001 f8c5 	bl	8002384 <getFIFOCount>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b26      	ldr	r3, [pc, #152]	@ (8001298 <main+0x228>)
 8001200:	801a      	strh	r2, [r3, #0]
	fifoCount = getFIFOCount(&hi2c2);
 8001202:	481e      	ldr	r0, [pc, #120]	@ (800127c <main+0x20c>)
 8001204:	f001 f8be 	bl	8002384 <getFIFOCount>
 8001208:	4603      	mov	r3, r0
 800120a:	461a      	mov	r2, r3
 800120c:	4b22      	ldr	r3, [pc, #136]	@ (8001298 <main+0x228>)
 800120e:	801a      	strh	r2, [r3, #0]

	resetFIFO(&hi2c2);
 8001210:	481a      	ldr	r0, [pc, #104]	@ (800127c <main+0x20c>)
 8001212:	f001 f8d5 	bl	80023c0 <resetFIFO>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001216:	f006 fa45 	bl	80076a4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of xMutex */
  xMutexHandle = osMutexNew(&xMutex_attributes);
 800121a:	4820      	ldr	r0, [pc, #128]	@ (800129c <main+0x22c>)
 800121c:	f006 fb37 	bl	800788e <osMutexNew>
 8001220:	4603      	mov	r3, r0
 8001222:	4a1f      	ldr	r2, [pc, #124]	@ (80012a0 <main+0x230>)
 8001224:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001226:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <main+0x234>)
 8001228:	2100      	movs	r1, #0
 800122a:	481f      	ldr	r0, [pc, #124]	@ (80012a8 <main+0x238>)
 800122c:	f006 fa82 	bl	8007734 <osThreadNew>
 8001230:	4603      	mov	r3, r0
 8001232:	4a1e      	ldr	r2, [pc, #120]	@ (80012ac <main+0x23c>)
 8001234:	6013      	str	r3, [r2, #0]

  /* creation of PIDTask */
  PIDTaskHandle = osThreadNew(updatePID, NULL, &PIDTask_attributes);
 8001236:	4a1e      	ldr	r2, [pc, #120]	@ (80012b0 <main+0x240>)
 8001238:	2100      	movs	r1, #0
 800123a:	481e      	ldr	r0, [pc, #120]	@ (80012b4 <main+0x244>)
 800123c:	f006 fa7a 	bl	8007734 <osThreadNew>
 8001240:	4603      	mov	r3, r0
 8001242:	4a1d      	ldr	r2, [pc, #116]	@ (80012b8 <main+0x248>)
 8001244:	6013      	str	r3, [r2, #0]

  /* creation of orientationTask */
  orientationTaskHandle = osThreadNew(getOrientation, NULL, &orientationTask_attributes);
 8001246:	4a1d      	ldr	r2, [pc, #116]	@ (80012bc <main+0x24c>)
 8001248:	2100      	movs	r1, #0
 800124a:	481d      	ldr	r0, [pc, #116]	@ (80012c0 <main+0x250>)
 800124c:	f006 fa72 	bl	8007734 <osThreadNew>
 8001250:	4603      	mov	r3, r0
 8001252:	4a1c      	ldr	r2, [pc, #112]	@ (80012c4 <main+0x254>)
 8001254:	6013      	str	r3, [r2, #0]

  /* creation of inputsTask */
  inputsTaskHandle = osThreadNew(getInputs, NULL, &inputsTask_attributes);
 8001256:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <main+0x258>)
 8001258:	2100      	movs	r1, #0
 800125a:	481c      	ldr	r0, [pc, #112]	@ (80012cc <main+0x25c>)
 800125c:	f006 fa6a 	bl	8007734 <osThreadNew>
 8001260:	4603      	mov	r3, r0
 8001262:	4a1b      	ldr	r2, [pc, #108]	@ (80012d0 <main+0x260>)
 8001264:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001266:	f006 fa3f 	bl	80076e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800126a:	bf00      	nop
 800126c:	e7fd      	b.n	800126a <main+0x1fa>
 800126e:	bf00      	nop
 8001270:	20000164 	.word	0x20000164
 8001274:	200001ac 	.word	0x200001ac
 8001278:	40011000 	.word	0x40011000
 800127c:	20000088 	.word	0x20000088
 8001280:	40020000 	.word	0x40020000
 8001284:	0800bb00 	.word	0x0800bb00
 8001288:	200000dc 	.word	0x200000dc
 800128c:	200002e1 	.word	0x200002e1
 8001290:	20000238 	.word	0x20000238
 8001294:	20000208 	.word	0x20000208
 8001298:	2000023a 	.word	0x2000023a
 800129c:	0800bbbc 	.word	0x0800bbbc
 80012a0:	20000204 	.word	0x20000204
 80012a4:	0800bb2c 	.word	0x0800bb2c
 80012a8:	080019f9 	.word	0x080019f9
 80012ac:	200001f4 	.word	0x200001f4
 80012b0:	0800bb50 	.word	0x0800bb50
 80012b4:	08001a09 	.word	0x08001a09
 80012b8:	200001f8 	.word	0x200001f8
 80012bc:	0800bb74 	.word	0x0800bb74
 80012c0:	08001a19 	.word	0x08001a19
 80012c4:	200001fc 	.word	0x200001fc
 80012c8:	0800bb98 	.word	0x0800bb98
 80012cc:	08001b39 	.word	0x08001b39
 80012d0:	20000200 	.word	0x20000200

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b090      	sub	sp, #64	@ 0x40
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0318 	add.w	r3, r7, #24
 80012de:	2228      	movs	r2, #40	@ 0x28
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f009 fe16 	bl	800af14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fe:	2310      	movs	r3, #16
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001302:	2302      	movs	r3, #2
 8001304:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001306:	2300      	movs	r3, #0
 8001308:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800130a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800130e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4618      	mov	r0, r3
 8001316:	f004 ff53 	bl	80061c0 <HAL_RCC_OscConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001320:	f000 fc24 	bl	8001b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001324:	230f      	movs	r3, #15
 8001326:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001328:	2302      	movs	r3, #2
 800132a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2102      	movs	r1, #2
 800133e:	4618      	mov	r0, r3
 8001340:	f005 f9c0 	bl	80066c4 <HAL_RCC_ClockConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800134a:	f000 fc0f 	bl	8001b6c <Error_Handler>
  }
}
 800134e:	bf00      	nop
 8001350:	3740      	adds	r7, #64	@ 0x40
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800135c:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <MX_I2C2_Init+0x54>)
 800135e:	4a14      	ldr	r2, [pc, #80]	@ (80013b0 <MX_I2C2_Init+0x58>)
 8001360:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001364:	4a13      	ldr	r2, [pc, #76]	@ (80013b4 <MX_I2C2_Init+0x5c>)
 8001366:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <MX_I2C2_Init+0x54>)
 800136a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800136e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001370:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001378:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800137c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001384:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <MX_I2C2_Init+0x54>)
 800138c:	2200      	movs	r2, #0
 800138e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	@ (80013ac <MX_I2C2_Init+0x54>)
 8001398:	f002 faf6 	bl	8003988 <HAL_I2C_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 80013a2:	f000 fbe3 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000088 	.word	0x20000088
 80013b0:	40005800 	.word	0x40005800
 80013b4:	00061a80 	.word	0x00061a80

080013b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d4:	4b38      	ldr	r3, [pc, #224]	@ (80014b8 <MX_TIM1_Init+0x100>)
 80013d6:	4a39      	ldr	r2, [pc, #228]	@ (80014bc <MX_TIM1_Init+0x104>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 80013da:	4b37      	ldr	r3, [pc, #220]	@ (80014b8 <MX_TIM1_Init+0x100>)
 80013dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b35      	ldr	r3, [pc, #212]	@ (80014b8 <MX_TIM1_Init+0x100>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013e8:	4b33      	ldr	r3, [pc, #204]	@ (80014b8 <MX_TIM1_Init+0x100>)
 80013ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b31      	ldr	r3, [pc, #196]	@ (80014b8 <MX_TIM1_Init+0x100>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f6:	4b30      	ldr	r3, [pc, #192]	@ (80014b8 <MX_TIM1_Init+0x100>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b2e      	ldr	r3, [pc, #184]	@ (80014b8 <MX_TIM1_Init+0x100>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001402:	482d      	ldr	r0, [pc, #180]	@ (80014b8 <MX_TIM1_Init+0x100>)
 8001404:	f005 fbb2 	bl	8006b6c <HAL_TIM_IC_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800140e:	f000 fbad 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	4619      	mov	r1, r3
 8001420:	4825      	ldr	r0, [pc, #148]	@ (80014b8 <MX_TIM1_Init+0x100>)
 8001422:	f006 f88b 	bl	800753c <HAL_TIMEx_MasterConfigSynchronization>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800142c:	f000 fb9e 	bl	8001b6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001430:	2300      	movs	r3, #0
 8001432:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001434:	2301      	movs	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	4619      	mov	r1, r3
 8001446:	481c      	ldr	r0, [pc, #112]	@ (80014b8 <MX_TIM1_Init+0x100>)
 8001448:	f005 fddc 	bl	8007004 <HAL_TIM_IC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001452:	f000 fb8b 	bl	8001b6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001456:	2302      	movs	r3, #2
 8001458:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800145a:	2302      	movs	r3, #2
 800145c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800145e:	463b      	mov	r3, r7
 8001460:	2204      	movs	r2, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4814      	ldr	r0, [pc, #80]	@ (80014b8 <MX_TIM1_Init+0x100>)
 8001466:	f005 fdcd 	bl	8007004 <HAL_TIM_IC_ConfigChannel>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001470:	f000 fb7c 	bl	8001b6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001474:	2300      	movs	r3, #0
 8001476:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001478:	2301      	movs	r3, #1
 800147a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800147c:	463b      	mov	r3, r7
 800147e:	2208      	movs	r2, #8
 8001480:	4619      	mov	r1, r3
 8001482:	480d      	ldr	r0, [pc, #52]	@ (80014b8 <MX_TIM1_Init+0x100>)
 8001484:	f005 fdbe 	bl	8007004 <HAL_TIM_IC_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800148e:	f000 fb6d 	bl	8001b6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001492:	2302      	movs	r3, #2
 8001494:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001496:	2302      	movs	r3, #2
 8001498:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	220c      	movs	r2, #12
 800149e:	4619      	mov	r1, r3
 80014a0:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_TIM1_Init+0x100>)
 80014a2:	f005 fdaf 	bl	8007004 <HAL_TIM_IC_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80014ac:	f000 fb5e 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014b0:	bf00      	nop
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000164 	.word	0x20000164
 80014bc:	40012c00 	.word	0x40012c00

080014c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014d0:	463b      	mov	r3, r7
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014dc:	4b37      	ldr	r3, [pc, #220]	@ (80015bc <MX_TIM2_Init+0xfc>)
 80014de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 80014e4:	4b35      	ldr	r3, [pc, #212]	@ (80015bc <MX_TIM2_Init+0xfc>)
 80014e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b33      	ldr	r3, [pc, #204]	@ (80015bc <MX_TIM2_Init+0xfc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014f2:	4b32      	ldr	r3, [pc, #200]	@ (80015bc <MX_TIM2_Init+0xfc>)
 80014f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fa:	4b30      	ldr	r3, [pc, #192]	@ (80015bc <MX_TIM2_Init+0xfc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001500:	4b2e      	ldr	r3, [pc, #184]	@ (80015bc <MX_TIM2_Init+0xfc>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001506:	482d      	ldr	r0, [pc, #180]	@ (80015bc <MX_TIM2_Init+0xfc>)
 8001508:	f005 fb30 	bl	8006b6c <HAL_TIM_IC_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001512:	f000 fb2b 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	4619      	mov	r1, r3
 8001524:	4825      	ldr	r0, [pc, #148]	@ (80015bc <MX_TIM2_Init+0xfc>)
 8001526:	f006 f809 	bl	800753c <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001530:	f000 fb1c 	bl	8001b6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001534:	2300      	movs	r3, #0
 8001536:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001538:	2301      	movs	r3, #1
 800153a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001544:	463b      	mov	r3, r7
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	481c      	ldr	r0, [pc, #112]	@ (80015bc <MX_TIM2_Init+0xfc>)
 800154c:	f005 fd5a 	bl	8007004 <HAL_TIM_IC_ConfigChannel>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001556:	f000 fb09 	bl	8001b6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800155a:	2302      	movs	r3, #2
 800155c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800155e:	2302      	movs	r3, #2
 8001560:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	2204      	movs	r2, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4814      	ldr	r0, [pc, #80]	@ (80015bc <MX_TIM2_Init+0xfc>)
 800156a:	f005 fd4b 	bl	8007004 <HAL_TIM_IC_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001574:	f000 fafa 	bl	8001b6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001578:	2300      	movs	r3, #0
 800157a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800157c:	2301      	movs	r3, #1
 800157e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001580:	463b      	mov	r3, r7
 8001582:	2208      	movs	r2, #8
 8001584:	4619      	mov	r1, r3
 8001586:	480d      	ldr	r0, [pc, #52]	@ (80015bc <MX_TIM2_Init+0xfc>)
 8001588:	f005 fd3c 	bl	8007004 <HAL_TIM_IC_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001592:	f000 faeb 	bl	8001b6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001596:	2302      	movs	r3, #2
 8001598:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800159a:	2302      	movs	r3, #2
 800159c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800159e:	463b      	mov	r3, r7
 80015a0:	220c      	movs	r2, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_TIM2_Init+0xfc>)
 80015a6:	f005 fd2d 	bl	8007004 <HAL_TIM_IC_ConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 80015b0:	f000 fadc 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200001ac 	.word	0x200001ac

080015c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <MX_DMA_Init+0x48>)
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001608 <MX_DMA_Init+0x48>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6153      	str	r3, [r2, #20]
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <MX_DMA_Init+0x48>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2105      	movs	r1, #5
 80015e2:	200e      	movs	r0, #14
 80015e4:	f001 fd65 	bl	80030b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80015e8:	200e      	movs	r0, #14
 80015ea:	f001 fd7e 	bl	80030ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2105      	movs	r1, #5
 80015f2:	200f      	movs	r0, #15
 80015f4:	f001 fd5d 	bl	80030b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015f8:	200f      	movs	r0, #15
 80015fa:	f001 fd76 	bl	80030ea <HAL_NVIC_EnableIRQ>

}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000

0800160c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001620:	4b28      	ldr	r3, [pc, #160]	@ (80016c4 <MX_GPIO_Init+0xb8>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a27      	ldr	r2, [pc, #156]	@ (80016c4 <MX_GPIO_Init+0xb8>)
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b25      	ldr	r3, [pc, #148]	@ (80016c4 <MX_GPIO_Init+0xb8>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	4b22      	ldr	r3, [pc, #136]	@ (80016c4 <MX_GPIO_Init+0xb8>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a21      	ldr	r2, [pc, #132]	@ (80016c4 <MX_GPIO_Init+0xb8>)
 800163e:	f043 0304 	orr.w	r3, r3, #4
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <MX_GPIO_Init+0xb8>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <MX_GPIO_Init+0xb8>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a1b      	ldr	r2, [pc, #108]	@ (80016c4 <MX_GPIO_Init+0xb8>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <MX_GPIO_Init+0xb8>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001668:	2200      	movs	r2, #0
 800166a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800166e:	4816      	ldr	r0, [pc, #88]	@ (80016c8 <MX_GPIO_Init+0xbc>)
 8001670:	f002 f940 	bl	80038f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001674:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167a:	2301      	movs	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2302      	movs	r3, #2
 8001684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	4619      	mov	r1, r3
 800168c:	480e      	ldr	r0, [pc, #56]	@ (80016c8 <MX_GPIO_Init+0xbc>)
 800168e:	f001 ffad 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001692:	2302      	movs	r3, #2
 8001694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <MX_GPIO_Init+0xc0>)
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	4619      	mov	r1, r3
 80016a4:	480a      	ldr	r0, [pc, #40]	@ (80016d0 <MX_GPIO_Init+0xc4>)
 80016a6:	f001 ffa1 	bl	80035ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2105      	movs	r1, #5
 80016ae:	2007      	movs	r0, #7
 80016b0:	f001 fcff 	bl	80030b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80016b4:	2007      	movs	r0, #7
 80016b6:	f001 fd18 	bl	80030ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016ba:	bf00      	nop
 80016bc:	3720      	adds	r7, #32
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40011000 	.word	0x40011000
 80016cc:	10110000 	.word	0x10110000
 80016d0:	40010c00 	.word	0x40010c00

080016d4 <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 4 */
//i2c callback functions, remember i2c interface is in mpu6050_lib.c
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	i2c_TX_done = 1; //defined in mpu6050_lib.c
 80016dc:	4b03      	ldr	r3, [pc, #12]	@ (80016ec <HAL_I2C_MasterTxCpltCallback+0x18>)
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	200002e1 	.word	0x200002e1

080016f0 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
	i2c_RX_done = 1; //defined in mpu6050_lib.c
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <HAL_I2C_MasterRxCpltCallback+0x18>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	200002e0 	.word	0x200002e0

0800170c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
	orientation_data_ready = 1; //defined in mpu6050_lib.c
 8001716:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	200002e2 	.word	0x200002e2

0800172c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) //PWM duty cycle calculations, called when timer detects rising and falling edges
{ //most code based off of f303k8 TIM_InputCapture example from 1.11.15 firmware package, some is based off of chapter 11.3.5 of mastering stm32 book.
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a8c      	ldr	r2, [pc, #560]	@ (800196c <HAL_TIM_IC_CaptureCallback+0x240>)
 800173a:	4293      	cmp	r3, r2
 800173c:	f040 8095 	bne.w	800186a <HAL_TIM_IC_CaptureCallback+0x13e>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7f1b      	ldrb	r3, [r3, #28]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d10f      	bne.n	8001768 <HAL_TIM_IC_CaptureCallback+0x3c>
		{
			if(throttleCaptureIndex == 0)
 8001748:	4b89      	ldr	r3, [pc, #548]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x244>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f040 8146 	bne.w	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
			{
				throttleInputCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001752:	2100      	movs	r1, #0
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f005 fcf1 	bl	800713c <HAL_TIM_ReadCapturedValue>
 800175a:	4603      	mov	r3, r0
 800175c:	4a85      	ldr	r2, [pc, #532]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x248>)
 800175e:	6013      	str	r3, [r2, #0]
				throttleCaptureIndex = 1;
 8001760:	4b83      	ldr	r3, [pc, #524]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001762:	2201      	movs	r2, #1
 8001764:	801a      	strh	r2, [r3, #0]
				rollCaptureIndex = 0;
			}
		}
	}

}
 8001766:	e13a      	b.n	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7f1b      	ldrb	r3, [r3, #28]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d131      	bne.n	80017d4 <HAL_TIM_IC_CaptureCallback+0xa8>
			if(throttleCaptureIndex == 1)
 8001770:	4b7f      	ldr	r3, [pc, #508]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	f040 8132 	bne.w	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
				throttleInputCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800177a:	2104      	movs	r1, #4
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f005 fcdd 	bl	800713c <HAL_TIM_ReadCapturedValue>
 8001782:	4603      	mov	r3, r0
 8001784:	4a7c      	ldr	r2, [pc, #496]	@ (8001978 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001786:	6013      	str	r3, [r2, #0]
				if(throttleInputCaptureValue2 > throttleInputCaptureValue1)
 8001788:	4b7b      	ldr	r3, [pc, #492]	@ (8001978 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b79      	ldr	r3, [pc, #484]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x248>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d907      	bls.n	80017a4 <HAL_TIM_IC_CaptureCallback+0x78>
					throttleDiffCapture = throttleInputCaptureValue2 - throttleInputCaptureValue1;
 8001794:	4b78      	ldr	r3, [pc, #480]	@ (8001978 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b76      	ldr	r3, [pc, #472]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x248>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	4a77      	ldr	r2, [pc, #476]	@ (800197c <HAL_TIM_IC_CaptureCallback+0x250>)
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e013      	b.n	80017cc <HAL_TIM_IC_CaptureCallback+0xa0>
				} else if(throttleInputCaptureValue2 < throttleInputCaptureValue1)
 80017a4:	4b74      	ldr	r3, [pc, #464]	@ (8001978 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b72      	ldr	r3, [pc, #456]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x248>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d20b      	bcs.n	80017c8 <HAL_TIM_IC_CaptureCallback+0x9c>
					throttleDiffCapture = (htim->Instance->ARR - throttleInputCaptureValue1) + throttleInputCaptureValue2;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0x248>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	1ad2      	subs	r2, r2, r3
 80017bc:	4b6e      	ldr	r3, [pc, #440]	@ (8001978 <HAL_TIM_IC_CaptureCallback+0x24c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	4a6e      	ldr	r2, [pc, #440]	@ (800197c <HAL_TIM_IC_CaptureCallback+0x250>)
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e001      	b.n	80017cc <HAL_TIM_IC_CaptureCallback+0xa0>
					Error_Handler();
 80017c8:	f000 f9d0 	bl	8001b6c <Error_Handler>
				throttleCaptureIndex = 0;
 80017cc:	4b68      	ldr	r3, [pc, #416]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0x244>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	801a      	strh	r2, [r3, #0]
}
 80017d2:	e104      	b.n	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7f1b      	ldrb	r3, [r3, #28]
 80017d8:	2b04      	cmp	r3, #4
 80017da:	d10f      	bne.n	80017fc <HAL_TIM_IC_CaptureCallback+0xd0>
			if(yawCaptureIndex == 0)
 80017dc:	4b68      	ldr	r3, [pc, #416]	@ (8001980 <HAL_TIM_IC_CaptureCallback+0x254>)
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f040 80fc 	bne.w	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
				yawInputCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80017e6:	2108      	movs	r1, #8
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f005 fca7 	bl	800713c <HAL_TIM_ReadCapturedValue>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a64      	ldr	r2, [pc, #400]	@ (8001984 <HAL_TIM_IC_CaptureCallback+0x258>)
 80017f2:	6013      	str	r3, [r2, #0]
				yawCaptureIndex = 1;
 80017f4:	4b62      	ldr	r3, [pc, #392]	@ (8001980 <HAL_TIM_IC_CaptureCallback+0x254>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	801a      	strh	r2, [r3, #0]
}
 80017fa:	e0f0      	b.n	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7f1b      	ldrb	r3, [r3, #28]
 8001800:	2b08      	cmp	r3, #8
 8001802:	f040 80ec 	bne.w	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
			if(yawCaptureIndex == 1)
 8001806:	4b5e      	ldr	r3, [pc, #376]	@ (8001980 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	f040 80e7 	bne.w	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
				yawInputCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001810:	210c      	movs	r1, #12
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f005 fc92 	bl	800713c <HAL_TIM_ReadCapturedValue>
 8001818:	4603      	mov	r3, r0
 800181a:	4a5b      	ldr	r2, [pc, #364]	@ (8001988 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800181c:	6013      	str	r3, [r2, #0]
				if(yawInputCaptureValue2 > yawInputCaptureValue1)
 800181e:	4b5a      	ldr	r3, [pc, #360]	@ (8001988 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b58      	ldr	r3, [pc, #352]	@ (8001984 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d907      	bls.n	800183a <HAL_TIM_IC_CaptureCallback+0x10e>
					yawDiffCapture = yawInputCaptureValue2 - yawInputCaptureValue1;
 800182a:	4b57      	ldr	r3, [pc, #348]	@ (8001988 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4b55      	ldr	r3, [pc, #340]	@ (8001984 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	4a55      	ldr	r2, [pc, #340]	@ (800198c <HAL_TIM_IC_CaptureCallback+0x260>)
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	e013      	b.n	8001862 <HAL_TIM_IC_CaptureCallback+0x136>
				} else if(yawInputCaptureValue2 < yawInputCaptureValue1)
 800183a:	4b53      	ldr	r3, [pc, #332]	@ (8001988 <HAL_TIM_IC_CaptureCallback+0x25c>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4b51      	ldr	r3, [pc, #324]	@ (8001984 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d20b      	bcs.n	800185e <HAL_TIM_IC_CaptureCallback+0x132>
					yawDiffCapture = (htim->Instance->ARR - yawInputCaptureValue1) + yawInputCaptureValue2;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800184c:	4b4d      	ldr	r3, [pc, #308]	@ (8001984 <HAL_TIM_IC_CaptureCallback+0x258>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	1ad2      	subs	r2, r2, r3
 8001852:	4b4d      	ldr	r3, [pc, #308]	@ (8001988 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4413      	add	r3, r2
 8001858:	4a4c      	ldr	r2, [pc, #304]	@ (800198c <HAL_TIM_IC_CaptureCallback+0x260>)
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	e001      	b.n	8001862 <HAL_TIM_IC_CaptureCallback+0x136>
					Error_Handler();
 800185e:	f000 f985 	bl	8001b6c <Error_Handler>
				yawCaptureIndex = 0;
 8001862:	4b47      	ldr	r3, [pc, #284]	@ (8001980 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001864:	2200      	movs	r2, #0
 8001866:	801a      	strh	r2, [r3, #0]
}
 8001868:	e0b9      	b.n	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
	} else if (htim->Instance == TIM2)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001872:	f040 80b4 	bne.w	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7f1b      	ldrb	r3, [r3, #28]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d10f      	bne.n	800189e <HAL_TIM_IC_CaptureCallback+0x172>
			if(pitchCaptureIndex == 0)
 800187e:	4b44      	ldr	r3, [pc, #272]	@ (8001990 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f040 80ab 	bne.w	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
				pitchInputCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001888:	2100      	movs	r1, #0
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f005 fc56 	bl	800713c <HAL_TIM_ReadCapturedValue>
 8001890:	4603      	mov	r3, r0
 8001892:	4a40      	ldr	r2, [pc, #256]	@ (8001994 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001894:	6013      	str	r3, [r2, #0]
				pitchCaptureIndex = 1;
 8001896:	4b3e      	ldr	r3, [pc, #248]	@ (8001990 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001898:	2201      	movs	r2, #1
 800189a:	801a      	strh	r2, [r3, #0]
}
 800189c:	e09f      	b.n	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7f1b      	ldrb	r3, [r3, #28]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d131      	bne.n	800190a <HAL_TIM_IC_CaptureCallback+0x1de>
			if(pitchCaptureIndex == 1)
 80018a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001990 <HAL_TIM_IC_CaptureCallback+0x264>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	f040 8097 	bne.w	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
				pitchInputCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80018b0:	2104      	movs	r1, #4
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f005 fc42 	bl	800713c <HAL_TIM_ReadCapturedValue>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a37      	ldr	r2, [pc, #220]	@ (8001998 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80018bc:	6013      	str	r3, [r2, #0]
				if(pitchInputCaptureValue2 > pitchInputCaptureValue1)
 80018be:	4b36      	ldr	r3, [pc, #216]	@ (8001998 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	4b34      	ldr	r3, [pc, #208]	@ (8001994 <HAL_TIM_IC_CaptureCallback+0x268>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d907      	bls.n	80018da <HAL_TIM_IC_CaptureCallback+0x1ae>
					pitchDiffCapture = pitchInputCaptureValue2 - pitchInputCaptureValue1;
 80018ca:	4b33      	ldr	r3, [pc, #204]	@ (8001998 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4b31      	ldr	r3, [pc, #196]	@ (8001994 <HAL_TIM_IC_CaptureCallback+0x268>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	4a31      	ldr	r2, [pc, #196]	@ (800199c <HAL_TIM_IC_CaptureCallback+0x270>)
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e013      	b.n	8001902 <HAL_TIM_IC_CaptureCallback+0x1d6>
				} else if(pitchInputCaptureValue2 < pitchInputCaptureValue1)
 80018da:	4b2f      	ldr	r3, [pc, #188]	@ (8001998 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b2d      	ldr	r3, [pc, #180]	@ (8001994 <HAL_TIM_IC_CaptureCallback+0x268>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d20b      	bcs.n	80018fe <HAL_TIM_IC_CaptureCallback+0x1d2>
					pitchDiffCapture = (htim->Instance->ARR - pitchInputCaptureValue1) + pitchInputCaptureValue2;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018ec:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <HAL_TIM_IC_CaptureCallback+0x268>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1ad2      	subs	r2, r2, r3
 80018f2:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <HAL_TIM_IC_CaptureCallback+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a28      	ldr	r2, [pc, #160]	@ (800199c <HAL_TIM_IC_CaptureCallback+0x270>)
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	e001      	b.n	8001902 <HAL_TIM_IC_CaptureCallback+0x1d6>
					Error_Handler();
 80018fe:	f000 f935 	bl	8001b6c <Error_Handler>
				pitchCaptureIndex = 0;
 8001902:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001904:	2200      	movs	r2, #0
 8001906:	801a      	strh	r2, [r3, #0]
}
 8001908:	e069      	b.n	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7f1b      	ldrb	r3, [r3, #28]
 800190e:	2b04      	cmp	r3, #4
 8001910:	d10e      	bne.n	8001930 <HAL_TIM_IC_CaptureCallback+0x204>
			if(rollCaptureIndex == 0)
 8001912:	4b23      	ldr	r3, [pc, #140]	@ (80019a0 <HAL_TIM_IC_CaptureCallback+0x274>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d161      	bne.n	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
				rollInputCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800191a:	2108      	movs	r1, #8
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f005 fc0d 	bl	800713c <HAL_TIM_ReadCapturedValue>
 8001922:	4603      	mov	r3, r0
 8001924:	4a1f      	ldr	r2, [pc, #124]	@ (80019a4 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001926:	6013      	str	r3, [r2, #0]
				rollCaptureIndex = 1;
 8001928:	4b1d      	ldr	r3, [pc, #116]	@ (80019a0 <HAL_TIM_IC_CaptureCallback+0x274>)
 800192a:	2201      	movs	r2, #1
 800192c:	801a      	strh	r2, [r3, #0]
}
 800192e:	e056      	b.n	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
		} else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7f1b      	ldrb	r3, [r3, #28]
 8001934:	2b08      	cmp	r3, #8
 8001936:	d152      	bne.n	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
			if(rollCaptureIndex == 1)
 8001938:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <HAL_TIM_IC_CaptureCallback+0x274>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d14e      	bne.n	80019de <HAL_TIM_IC_CaptureCallback+0x2b2>
				rollInputCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001940:	210c      	movs	r1, #12
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f005 fbfa 	bl	800713c <HAL_TIM_ReadCapturedValue>
 8001948:	4603      	mov	r3, r0
 800194a:	4a17      	ldr	r2, [pc, #92]	@ (80019a8 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800194c:	6013      	str	r3, [r2, #0]
				if(rollInputCaptureValue2 > rollInputCaptureValue1)
 800194e:	4b16      	ldr	r3, [pc, #88]	@ (80019a8 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d92a      	bls.n	80019b0 <HAL_TIM_IC_CaptureCallback+0x284>
					rollDiffCapture = rollInputCaptureValue2 - rollInputCaptureValue1;
 800195a:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <HAL_TIM_IC_CaptureCallback+0x27c>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	4a11      	ldr	r2, [pc, #68]	@ (80019ac <HAL_TIM_IC_CaptureCallback+0x280>)
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e036      	b.n	80019d8 <HAL_TIM_IC_CaptureCallback+0x2ac>
 800196a:	bf00      	nop
 800196c:	40012c00 	.word	0x40012c00
 8001970:	200002a8 	.word	0x200002a8
 8001974:	200002b0 	.word	0x200002b0
 8001978:	200002b4 	.word	0x200002b4
 800197c:	200002b8 	.word	0x200002b8
 8001980:	200002aa 	.word	0x200002aa
 8001984:	200002bc 	.word	0x200002bc
 8001988:	200002c0 	.word	0x200002c0
 800198c:	200002c4 	.word	0x200002c4
 8001990:	200002ac 	.word	0x200002ac
 8001994:	200002c8 	.word	0x200002c8
 8001998:	200002cc 	.word	0x200002cc
 800199c:	200002d0 	.word	0x200002d0
 80019a0:	200002ae 	.word	0x200002ae
 80019a4:	200002d4 	.word	0x200002d4
 80019a8:	200002d8 	.word	0x200002d8
 80019ac:	200002dc 	.word	0x200002dc
				} else if(rollInputCaptureValue2 < rollInputCaptureValue1)
 80019b0:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d20b      	bcs.n	80019d4 <HAL_TIM_IC_CaptureCallback+0x2a8>
					rollDiffCapture = (htim->Instance->ARR - rollInputCaptureValue1) + rollInputCaptureValue2;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_TIM_IC_CaptureCallback+0x2c0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	1ad2      	subs	r2, r2, r3
 80019c8:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <HAL_TIM_IC_CaptureCallback+0x2bc>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4413      	add	r3, r2
 80019ce:	4a08      	ldr	r2, [pc, #32]	@ (80019f0 <HAL_TIM_IC_CaptureCallback+0x2c4>)
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e001      	b.n	80019d8 <HAL_TIM_IC_CaptureCallback+0x2ac>
					Error_Handler();
 80019d4:	f000 f8ca 	bl	8001b6c <Error_Handler>
				rollCaptureIndex = 0;
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_TIM_IC_CaptureCallback+0x2c8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	801a      	strh	r2, [r3, #0]
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200002d8 	.word	0x200002d8
 80019ec:	200002d4 	.word	0x200002d4
 80019f0:	200002dc 	.word	0x200002dc
 80019f4:	200002ae 	.word	0x200002ae

080019f8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f005 ff29 	bl	8007858 <osDelay>
 8001a06:	e7fb      	b.n	8001a00 <StartDefaultTask+0x8>

08001a08 <updatePID>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_updatePID */
void updatePID(void *argument)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updatePID */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001a10:	2001      	movs	r0, #1
 8001a12:	f005 ff21 	bl	8007858 <osDelay>
 8001a16:	e7fb      	b.n	8001a10 <updatePID+0x8>

08001a18 <getOrientation>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_getOrientation */
void getOrientation(void *argument)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;)
	{
		//credits: https://github.com/Pluscrafter/i2cdevlib/blob/master/STM32_HAL/Nucleo-144F722ZE/Src/main.cpp

		while(!orientation_data_ready); //wait until external interrupt fires to get data when it is freshly ready
 8001a20:	bf00      	nop
 8001a22:	4b3b      	ldr	r3, [pc, #236]	@ (8001b10 <getOrientation+0xf8>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0fb      	beq.n	8001a22 <getOrientation+0xa>
		if (osMutexAcquire(xMutexHandle, osWaitForever) == osOK) //try to aquire mutex
 8001a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b14 <getOrientation+0xfc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a32:	4618      	mov	r0, r3
 8001a34:	f005 ffb1 	bl	800799a <osMutexAcquire>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d15c      	bne.n	8001af8 <getOrientation+0xe0>
		{
			fifoCount = getFIFOCount(&hi2c2);
 8001a3e:	4836      	ldr	r0, [pc, #216]	@ (8001b18 <getOrientation+0x100>)
 8001a40:	f000 fca0 	bl	8002384 <getFIFOCount>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b34      	ldr	r3, [pc, #208]	@ (8001b1c <getOrientation+0x104>)
 8001a4a:	801a      	strh	r2, [r3, #0]
			while (fifoCount < packetSize)
 8001a4c:	e006      	b.n	8001a5c <getOrientation+0x44>
			{
				//insert here your code
				fifoCount = getFIFOCount(&hi2c2);
 8001a4e:	4832      	ldr	r0, [pc, #200]	@ (8001b18 <getOrientation+0x100>)
 8001a50:	f000 fc98 	bl	8002384 <getFIFOCount>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b30      	ldr	r3, [pc, #192]	@ (8001b1c <getOrientation+0x104>)
 8001a5a:	801a      	strh	r2, [r3, #0]
			while (fifoCount < packetSize)
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b1c <getOrientation+0x104>)
 8001a5e:	881a      	ldrh	r2, [r3, #0]
 8001a60:	4b2f      	ldr	r3, [pc, #188]	@ (8001b20 <getOrientation+0x108>)
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d3f2      	bcc.n	8001a4e <getOrientation+0x36>
			}
			if (fifoCount >= 1024)
 8001a68:	4b2c      	ldr	r3, [pc, #176]	@ (8001b1c <getOrientation+0x104>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a70:	d303      	bcc.n	8001a7a <getOrientation+0x62>
			{
				resetFIFO(&hi2c2);
 8001a72:	4829      	ldr	r0, [pc, #164]	@ (8001b18 <getOrientation+0x100>)
 8001a74:	f000 fca4 	bl	80023c0 <resetFIFO>
 8001a78:	e039      	b.n	8001aee <getOrientation+0xd6>
				//Serial.println(F("FIFO overflow!"));
			}
			else
			{
				if (fifoCount % packetSize != 0)
 8001a7a:	4b28      	ldr	r3, [pc, #160]	@ (8001b1c <getOrientation+0x104>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	4a28      	ldr	r2, [pc, #160]	@ (8001b20 <getOrientation+0x108>)
 8001a80:	8812      	ldrh	r2, [r2, #0]
 8001a82:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a86:	fb01 f202 	mul.w	r2, r1, r2
 8001a8a:	1a9b      	subs	r3, r3, r2
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01a      	beq.n	8001ac8 <getOrientation+0xb0>
				{
					resetFIFO(&hi2c2);
 8001a92:	4821      	ldr	r0, [pc, #132]	@ (8001b18 <getOrientation+0x100>)
 8001a94:	f000 fc94 	bl	80023c0 <resetFIFO>
					fifoCount = getFIFOCount(&hi2c2);
 8001a98:	481f      	ldr	r0, [pc, #124]	@ (8001b18 <getOrientation+0x100>)
 8001a9a:	f000 fc73 	bl	8002384 <getFIFOCount>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b1c <getOrientation+0x104>)
 8001aa4:	801a      	strh	r2, [r3, #0]
 8001aa6:	e022      	b.n	8001aee <getOrientation+0xd6>
				else
				{
					while (fifoCount >= packetSize)
					{

						getFIFOBytes(&hi2c2, fifoBuffer, packetSize);
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <getOrientation+0x108>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
 8001ab0:	491c      	ldr	r1, [pc, #112]	@ (8001b24 <getOrientation+0x10c>)
 8001ab2:	4819      	ldr	r0, [pc, #100]	@ (8001b18 <getOrientation+0x100>)
 8001ab4:	f000 fc94 	bl	80023e0 <getFIFOBytes>
						fifoCount -= packetSize;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	@ (8001b1c <getOrientation+0x104>)
 8001aba:	881a      	ldrh	r2, [r3, #0]
 8001abc:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <getOrientation+0x108>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <getOrientation+0x104>)
 8001ac6:	801a      	strh	r2, [r3, #0]
					while (fifoCount >= packetSize)
 8001ac8:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <getOrientation+0x104>)
 8001aca:	881a      	ldrh	r2, [r3, #0]
 8001acc:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <getOrientation+0x108>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d2e9      	bcs.n	8001aa8 <getOrientation+0x90>

					}
					dmpGetQuaternionQuatStruct(&q, fifoBuffer);
 8001ad4:	4913      	ldr	r1, [pc, #76]	@ (8001b24 <getOrientation+0x10c>)
 8001ad6:	4814      	ldr	r0, [pc, #80]	@ (8001b28 <getOrientation+0x110>)
 8001ad8:	f000 fcec 	bl	80024b4 <dmpGetQuaternionQuatStruct>
					dmpGetGravity(&gravity, &q);
 8001adc:	4912      	ldr	r1, [pc, #72]	@ (8001b28 <getOrientation+0x110>)
 8001ade:	4813      	ldr	r0, [pc, #76]	@ (8001b2c <getOrientation+0x114>)
 8001ae0:	f000 fd3b 	bl	800255a <dmpGetGravity>
					dmpGetYawPitchRoll(ypr, &q, &gravity);
 8001ae4:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <getOrientation+0x114>)
 8001ae6:	4910      	ldr	r1, [pc, #64]	@ (8001b28 <getOrientation+0x110>)
 8001ae8:	4811      	ldr	r0, [pc, #68]	@ (8001b30 <getOrientation+0x118>)
 8001aea:	f000 fdb9 	bl	8002660 <dmpGetYawPitchRoll>
				}
			}
			a++;
 8001aee:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <getOrientation+0x11c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	3301      	adds	r3, #1
 8001af4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b34 <getOrientation+0x11c>)
 8001af6:	6013      	str	r3, [r2, #0]

		}
		osMutexRelease(xMutexHandle);
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <getOrientation+0xfc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f005 ff97 	bl	8007a30 <osMutexRelease>
		HAL_Delay(20);
 8001b02:	2014      	movs	r0, #20
 8001b04:	f001 f9fc 	bl	8002f00 <HAL_Delay>
		orientation_data_ready = 0;
 8001b08:	4b01      	ldr	r3, [pc, #4]	@ (8001b10 <getOrientation+0xf8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
		while(!orientation_data_ready); //wait until external interrupt fires to get data when it is freshly ready
 8001b0e:	e787      	b.n	8001a20 <getOrientation+0x8>
 8001b10:	200002e2 	.word	0x200002e2
 8001b14:	20000204 	.word	0x20000204
 8001b18:	20000088 	.word	0x20000088
 8001b1c:	2000023a 	.word	0x2000023a
 8001b20:	20000238 	.word	0x20000238
 8001b24:	20000240 	.word	0x20000240
 8001b28:	20000280 	.word	0x20000280
 8001b2c:	20000290 	.word	0x20000290
 8001b30:	2000029c 	.word	0x2000029c
 8001b34:	2000023c 	.word	0x2000023c

08001b38 <getInputs>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_getInputs */
void getInputs(void *argument)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getInputs */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f005 fe89 	bl	8007858 <osDelay>
 8001b46:	e7fb      	b.n	8001b40 <getInputs+0x8>

08001b48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a04      	ldr	r2, [pc, #16]	@ (8001b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d101      	bne.n	8001b5e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001b5a:	f001 f9b5 	bl	8002ec8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40000800 	.word	0x40000800

08001b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b70:	b672      	cpsid	i
}
 8001b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <Error_Handler+0x8>

08001b78 <i2c_Read_Accelerometer>:
#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default
#endif

//pData is buffer to put read contents into, len is bytes to read from mpu6050
HAL_StatusTypeDef i2c_Read_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t *pData, uint16_t len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	817b      	strh	r3, [r7, #10]
 8001b86:	4613      	mov	r3, r2
 8001b88:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef returnValue;
	uint8_t reg_addr[1];

	/* We compute the MSB and LSB parts of the memory address */
	reg_addr[0] = (uint8_t) (regAddress);
 8001b8a:	7a7b      	ldrb	r3, [r7, #9]
 8001b8c:	753b      	strb	r3, [r7, #20]

	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY);
 8001b8e:	bf00      	nop
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f002 ff70 	bl	8004a76 <HAL_I2C_GetState>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	d1f9      	bne.n	8001b90 <i2c_Read_Accelerometer+0x18>
	/* First we send the memory location address where start reading data */
	returnValue = HAL_I2C_Master_Seq_Transmit_DMA(hi2c, DevAddress, reg_addr, 1, I2C_FIRST_FRAME);
 8001b9c:	f107 0214 	add.w	r2, r7, #20
 8001ba0:	8979      	ldrh	r1, [r7, #10]
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f002 fa97 	bl	80040dc <HAL_I2C_Master_Seq_Transmit_DMA>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	75fb      	strb	r3, [r7, #23]
	//	while (!i2c_TX_done);
	//	i2c_TX_done = 0;
	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY);
 8001bb2:	bf00      	nop
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f002 ff5e 	bl	8004a76 <HAL_I2C_GetState>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b20      	cmp	r3, #32
 8001bbe:	d1f9      	bne.n	8001bb4 <i2c_Read_Accelerometer+0x3c>
	/* Next we can retrieve the data from EEPROM */
	returnValue = HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, len, I2C_LAST_FRAME);	//get data we requested and place it in pData buffer
 8001bc0:	8c3b      	ldrh	r3, [r7, #32]
 8001bc2:	8979      	ldrh	r1, [r7, #10]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	9200      	str	r2, [sp, #0]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f002 fbe4 	bl	8004398 <HAL_I2C_Master_Seq_Receive_DMA>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	75fb      	strb	r3, [r7, #23]
	while (!i2c_RX_done);
 8001bd4:	bf00      	nop
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c10 <i2c_Read_Accelerometer+0x98>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0fb      	beq.n	8001bd6 <i2c_Read_Accelerometer+0x5e>
	i2c_RX_done = 0;
 8001bde:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <i2c_Read_Accelerometer+0x98>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]

	//for some reason after doing the receive function, the I2C2's CR1 (control register 1) goes from 0x401 to 0x201. This then causes issues
	//when trying to do the next transmit. As a result, I'm manually making sure the correct bits are turned on and off.
	//This seems to only be an issue on the STM32F103C8T6
	hi2c->Instance->CR1 &= ~I2C_CR1_STOP;	//make sure stop bit is turned off (bit 9)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001bf2:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 |= I2C_CR1_ACK;	//turn on acknowledge bit (bit 10)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c02:	601a      	str	r2, [r3, #0]
	return returnValue;
 8001c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200002e0 	.word	0x200002e0

08001c14 <i2c_Write_Accelerometer>:

HAL_StatusTypeDef i2c_Write_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t *pData, uint16_t len)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	817b      	strh	r3, [r7, #10]
 8001c22:	4613      	mov	r3, r2
 8001c24:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef returnValue;
	uint8_t *data;

	data = (uint8_t*) malloc(sizeof(uint8_t) * (1 + len));
 8001c26:	8c3b      	ldrh	r3, [r7, #32]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f008 feac 	bl	800a988 <malloc>
 8001c30:	4603      	mov	r3, r0
 8001c32:	617b      	str	r3, [r7, #20]
	/*We compute the MSB and LSB parts of the memory address*/
	data[0] = (uint8_t) (regAddress);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	7a7a      	ldrb	r2, [r7, #9]
 8001c38:	701a      	strb	r2, [r3, #0]

	/*And copy the content of the pData array in the temporary buffer*/
	memcpy(data + 1, pData, len);	//inserts data one slot after the register address
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	8c3a      	ldrh	r2, [r7, #32]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f009 fa4f 	bl	800b0e6 <memcpy>

	/*We are now ready to transfer the buffer over the I2C bus*/
	returnValue = HAL_I2C_Master_Transmit_DMA(hi2c, DevAddress, data, len + 1);
 8001c48:	8c3b      	ldrh	r3, [r7, #32]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	8979      	ldrh	r1, [r7, #10]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f001 fff0 	bl	8003c38 <HAL_I2C_Master_Transmit_DMA>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	74fb      	strb	r3, [r7, #19]
	while (!i2c_TX_done);
 8001c5c:	bf00      	nop
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <i2c_Write_Accelerometer+0x80>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0fb      	beq.n	8001c5e <i2c_Write_Accelerometer+0x4a>
	i2c_TX_done = 0;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <i2c_Write_Accelerometer+0x80>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
	//free(data); //originally freed data here, but causes glitches and wrong data would be sent to dmp
	/*We wait until the Accelerometer effectively stores data*/
	while (HAL_I2C_IsDeviceReady(hi2c, DevAddress, 1, HAL_MAX_DELAY) != HAL_OK);	//peripheral can only accept the transmission once it finishes doing what it does
 8001c6c:	bf00      	nop
 8001c6e:	8979      	ldrh	r1, [r7, #10]
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
 8001c74:	2201      	movs	r2, #1
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f002 f902 	bl	8003e80 <HAL_I2C_IsDeviceReady>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f5      	bne.n	8001c6e <i2c_Write_Accelerometer+0x5a>

	free(data); // free data at end
 8001c82:	6978      	ldr	r0, [r7, #20]
 8001c84:	f008 fe88 	bl	800a998 <free>

	return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200002e1 	.word	0x200002e1

08001c98 <setBit>:
HAL_StatusTypeDef setBit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t bitNum, uint8_t data)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	807b      	strh	r3, [r7, #2]
 8001caa:	460b      	mov	r3, r1
 8001cac:	707b      	strb	r3, [r7, #1]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	703b      	strb	r3, [r7, #0]
	uint8_t buffer;
	i2c_Read_Accelerometer(hi2c, DevAddress, regAddress, &buffer, 1);
 8001cb2:	f107 030e 	add.w	r3, r7, #14
 8001cb6:	787a      	ldrb	r2, [r7, #1]
 8001cb8:	8879      	ldrh	r1, [r7, #2]
 8001cba:	2001      	movs	r0, #1
 8001cbc:	9000      	str	r0, [sp, #0]
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ff5a 	bl	8001b78 <i2c_Read_Accelerometer>
	buffer = (data != 0) ? (buffer | (1 << bitNum)) : (buffer & ~(1 << bitNum));	//bit mask to only change one bit of the register
 8001cc4:	7e3b      	ldrb	r3, [r7, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00a      	beq.n	8001ce0 <setBit+0x48>
 8001cca:	783b      	ldrb	r3, [r7, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	b25a      	sxtb	r2, r3
 8001cd4:	7bbb      	ldrb	r3, [r7, #14]
 8001cd6:	b25b      	sxtb	r3, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b25b      	sxtb	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	e00b      	b.n	8001cf8 <setBit+0x60>
 8001ce0:	783b      	ldrb	r3, [r7, #0]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	b25b      	sxtb	r3, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	b25a      	sxtb	r2, r3
 8001cee:	7bbb      	ldrb	r3, [r7, #14]
 8001cf0:	b25b      	sxtb	r3, r3
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	b25b      	sxtb	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = i2c_Write_Accelerometer(hi2c, DevAddress, regAddress, (uint8_t*) &buffer, 1);	//write the updated register
 8001cfa:	f107 030e 	add.w	r3, r7, #14
 8001cfe:	787a      	ldrb	r2, [r7, #1]
 8001d00:	8879      	ldrh	r1, [r7, #2]
 8001d02:	2001      	movs	r0, #1
 8001d04:	9000      	str	r0, [sp, #0]
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ff84 	bl	8001c14 <i2c_Write_Accelerometer>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	73fb      	strb	r3, [r7, #15]
	return status;
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <setBits>:
HAL_StatusTypeDef setBits(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t bitStart, uint8_t length, uint8_t data)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af02      	add	r7, sp, #8
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	4608      	mov	r0, r1
 8001d24:	4611      	mov	r1, r2
 8001d26:	461a      	mov	r2, r3
 8001d28:	4603      	mov	r3, r0
 8001d2a:	807b      	strh	r3, [r7, #2]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	707b      	strb	r3, [r7, #1]
 8001d30:	4613      	mov	r3, r2
 8001d32:	703b      	strb	r3, [r7, #0]
	// 00011100 mask byte
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value
	uint8_t buffer;
	i2c_Read_Accelerometer(hi2c, DevAddress, regAddress, &buffer, 1);
 8001d34:	f107 030d 	add.w	r3, r7, #13
 8001d38:	787a      	ldrb	r2, [r7, #1]
 8001d3a:	8879      	ldrh	r1, [r7, #2]
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	9000      	str	r0, [sp, #0]
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff19 	bl	8001b78 <i2c_Read_Accelerometer>
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001d46:	7e3b      	ldrb	r3, [r7, #24]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	1e5a      	subs	r2, r3, #1
 8001d50:	7839      	ldrb	r1, [r7, #0]
 8001d52:	7e3b      	ldrb	r3, [r7, #24]
 8001d54:	1acb      	subs	r3, r1, r3
 8001d56:	3301      	adds	r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	73fb      	strb	r3, [r7, #15]
	data <<= (bitStart - length + 1); // shift data into correct position
 8001d5e:	7f3a      	ldrb	r2, [r7, #28]
 8001d60:	7839      	ldrb	r1, [r7, #0]
 8001d62:	7e3b      	ldrb	r3, [r7, #24]
 8001d64:	1acb      	subs	r3, r1, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	773b      	strb	r3, [r7, #28]
	data &= mask; // zero all non-important bits in data
 8001d6e:	7f3a      	ldrb	r2, [r7, #28]
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	4013      	ands	r3, r2
 8001d74:	773b      	strb	r3, [r7, #28]
	buffer &= ~(mask); // zero all important bits in existing byte
 8001d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	b25a      	sxtb	r2, r3
 8001d7e:	7b7b      	ldrb	r3, [r7, #13]
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	4013      	ands	r3, r2
 8001d84:	b25b      	sxtb	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	737b      	strb	r3, [r7, #13]
	buffer |= data; // combine data with existing byte
 8001d8a:	7b7a      	ldrb	r2, [r7, #13]
 8001d8c:	7f3b      	ldrb	r3, [r7, #28]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = i2c_Write_Accelerometer(hi2c, DevAddress, regAddress, (uint8_t*) &buffer, 1);	//write the updated register
 8001d94:	f107 030d 	add.w	r3, r7, #13
 8001d98:	787a      	ldrb	r2, [r7, #1]
 8001d9a:	8879      	ldrh	r1, [r7, #2]
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	9000      	str	r0, [sp, #0]
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff37 	bl	8001c14 <i2c_Write_Accelerometer>
 8001da6:	4603      	mov	r3, r0
 8001da8:	73bb      	strb	r3, [r7, #14]
	return status;
 8001daa:	7bbb      	ldrb	r3, [r7, #14]

}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <sensor_data_init>:
	sensor_data->gyro_y = (sensor_data->gyro_y_buf[0] << 8) | sensor_data->gyro_y_buf[1];
	sensor_data->gyro_z = (sensor_data->gyro_z_buf[0] << 8) | sensor_data->gyro_z_buf[1];
}

void sensor_data_init(mpu6050_sensor_data *sensor_data)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	//initialize values that will be calculated later anyways, probably not necessary to do
	sensor_data->yaw = 0;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
	sensor_data->pitch = 0;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	61da      	str	r2, [r3, #28]
	sensor_data->roll = 0;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
	...

08001de0 <mpu6050_init_dmp>:

//MPU6050 code with DMP, credits: https://github.com/jrowberg/i2cdevlib/blob/master/Arduino/MPU6050/MPU6050_6Axis_MotionApps20.cpp#L272, MPU6050_6Axis_MotionApps20::dmpInitialize()
//code was built for arduino, so I'm porting it to stm32
void mpu6050_init_dmp(I2C_HandleTypeDef *hi2c) //combines mpu.initialize and mpu.dmpInitialize
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08a      	sub	sp, #40	@ 0x28
 8001de4:	af04      	add	r7, sp, #16
 8001de6:	6078      	str	r0, [r7, #4]
	 * after start-up). This function also sets both the accelerometer and the gyroscope
	 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
	 * the clock source to use the X Gyro for reference, which is slightly better than
	 * the default internal clock source.
	 */
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
 8001de8:	2301      	movs	r3, #1
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	2303      	movs	r3, #3
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	2302      	movs	r3, #2
 8001df2:	226b      	movs	r2, #107	@ 0x6b
 8001df4:	21d0      	movs	r1, #208	@ 0xd0
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff ff8f 	bl	8001d1a <setBits>
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS_250);
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	2302      	movs	r3, #2
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2304      	movs	r3, #4
 8001e06:	221b      	movs	r2, #27
 8001e08:	21d0      	movs	r1, #208	@ 0xd0
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ff85 	bl	8001d1a <setBits>
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_GYRO_FS_250);
 8001e10:	2300      	movs	r3, #0
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	2302      	movs	r3, #2
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	2304      	movs	r3, #4
 8001e1a:	221c      	movs	r2, #28
 8001e1c:	21d0      	movs	r1, #208	@ 0xd0
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ff7b 	bl	8001d1a <setBits>
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, false);
 8001e24:	2300      	movs	r3, #0
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2306      	movs	r3, #6
 8001e2a:	226b      	movs	r2, #107	@ 0x6b
 8001e2c:	21d0      	movs	r1, #208	@ 0xd0
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff32 	bl	8001c98 <setBit>

	//dmpInitialize()
	uint8_t command = 0x00;
 8001e34:	2300      	movs	r3, #0
 8001e36:	75bb      	strb	r3, [r7, #22]

	//reset the MPU6050
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);	//Device reset bit: When set to 1, this bit resets all internal registers to their default values.  The bit automatically clears to 0 once the reset is done.
 8001e38:	2301      	movs	r3, #1
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2307      	movs	r3, #7
 8001e3e:	226b      	movs	r2, #107	@ 0x6b
 8001e40:	21d0      	movs	r1, #208	@ 0xd0
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ff28 	bl	8001c98 <setBit>
	HAL_Delay(30); //wait a little
 8001e48:	201e      	movs	r0, #30
 8001e4a:	f001 f859 	bl	8002f00 <HAL_Delay>

	//turn off sleep mode to power cycle mpu6050
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, false);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2306      	movs	r3, #6
 8001e54:	226b      	movs	r2, #107	@ 0x6b
 8001e56:	21d0      	movs	r1, #208	@ 0xd0
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff1d 	bl	8001c98 <setBit>

	// get MPU hardware revision
	setMemoryBank(hi2c, 0x10, true, true); //memory bank 2, prefetch enabled, userbank enabled
 8001e5e:	2301      	movs	r3, #1
 8001e60:	2201      	movs	r2, #1
 8001e62:	2110      	movs	r1, #16
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f91d 	bl	80020a4 <setMemoryBank>
	setMemoryStartAddress(hi2c, 0x06);
 8001e6a:	2106      	movs	r1, #6
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f947 	bl	8002100 <setMemoryStartAddress>
	//DEBUG_PRINTLN(F("Checking hardware revision..."));
	//DEBUG_PRINT(F("Revision @ user[16][6] = "));
	//DEBUG_PRINTLN(readMemoryByte());
	uint8_t temp_buf = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	757b      	strb	r3, [r7, #21]
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_R_W, &temp_buf, 1); //read contents in MPU6050_RA_MEM_R_W register
 8001e76:	f107 0315 	add.w	r3, r7, #21
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	9200      	str	r2, [sp, #0]
 8001e7e:	226f      	movs	r2, #111	@ 0x6f
 8001e80:	21d0      	movs	r1, #208	@ 0xd0
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fe78 	bl	8001b78 <i2c_Read_Accelerometer>
	//DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
	setMemoryBank(hi2c, 0, false, false); //memory bank 0, prefetch disabled, userbank disabled
 8001e88:	2300      	movs	r3, #0
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f908 	bl	80020a4 <setMemoryBank>

	// check OTP bank valid, want the first bit of temp_OTP_valid to be 1
	uint8_t temp_OTP_valid = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	75fb      	strb	r3, [r7, #23]
	temp_OTP_valid = getOTPBankValid(hi2c);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f943 	bl	8002124 <getOTPBankValid>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75fb      	strb	r3, [r7, #23]

	// setup weird slave stuff (?)
	//	DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
	command = 0x7F; //the address
 8001ea2:	237f      	movs	r3, #127	@ 0x7f
 8001ea4:	75bb      	strb	r3, [r7, #22]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_I2C_SLV0_ADDR , (uint8_t*) &command, 1);
 8001ea6:	f107 0316 	add.w	r3, r7, #22
 8001eaa:	2201      	movs	r2, #1
 8001eac:	9200      	str	r2, [sp, #0]
 8001eae:	2225      	movs	r2, #37	@ 0x25
 8001eb0:	21d0      	movs	r1, #208	@ 0xd0
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff feae 	bl	8001c14 <i2c_Write_Accelerometer>
	//	DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, false);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2305      	movs	r3, #5
 8001ebe:	226a      	movs	r2, #106	@ 0x6a
 8001ec0:	21d0      	movs	r1, #208	@ 0xd0
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fee8 	bl	8001c98 <setBit>
	//	DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
	command = 0x68;
 8001ec8:	2368      	movs	r3, #104	@ 0x68
 8001eca:	75bb      	strb	r3, [r7, #22]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_I2C_SLV0_ADDR , (uint8_t*) &command, 1);
 8001ecc:	f107 0316 	add.w	r3, r7, #22
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	9200      	str	r2, [sp, #0]
 8001ed4:	2225      	movs	r2, #37	@ 0x25
 8001ed6:	21d0      	movs	r1, #208	@ 0xd0
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff fe9b 	bl	8001c14 <i2c_Write_Accelerometer>
	//	DEBUG_PRINTLN(F("Resetting I2C Master control..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8001ede:	2301      	movs	r3, #1
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	226a      	movs	r2, #106	@ 0x6a
 8001ee6:	21d0      	movs	r1, #208	@ 0xd0
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fed5 	bl	8001c98 <setBit>
	HAL_Delay(20);
 8001eee:	2014      	movs	r0, #20
 8001ef0:	f001 f806 	bl	8002f00 <HAL_Delay>
	//	DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_ZGYRO);
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	2303      	movs	r3, #3
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2302      	movs	r3, #2
 8001efe:	226b      	movs	r2, #107	@ 0x6b
 8001f00:	21d0      	movs	r1, #208	@ 0xd0
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ff09 	bl	8001d1a <setBits>

	//Setting DMP and FIFO_OFLOW interrupts enabled
	setIntEnabled(hi2c, 1 << MPU6050_INTERRUPT_FIFO_OFLOW_BIT | 1 << MPU6050_INTERRUPT_DMP_INT_BIT); 	// 1<<4 | 1 << 1
 8001f08:	2112      	movs	r1, #18
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f91e 	bl	800214c <setIntEnabled>

	//Setting sample rate to 200Hz, since we are using DLPF, 1KHz/(4+1) = 200Hz
	command = 0x04;	//divide by sample rate divider + 1
 8001f10:	2304      	movs	r3, #4
 8001f12:	75bb      	strb	r3, [r7, #22]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_SMPLRT_DIV, (uint8_t*) &command, 1);	// adjust sample rate divider
 8001f14:	f107 0316 	add.w	r3, r7, #22
 8001f18:	2201      	movs	r2, #1
 8001f1a:	9200      	str	r2, [sp, #0]
 8001f1c:	2219      	movs	r2, #25
 8001f1e:	21d0      	movs	r1, #208	@ 0xd0
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fe77 	bl	8001c14 <i2c_Write_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_SMPLRT_DIV, (uint8_t*) receive_buffer, 1);	//check sample rate divider contents
 8001f26:	2301      	movs	r3, #1
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8002098 <mpu6050_init_dmp+0x2b8>)
 8001f2c:	2219      	movs	r2, #25
 8001f2e:	21d0      	movs	r1, #208	@ 0xd0
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff fe21 	bl	8001b78 <i2c_Read_Accelerometer>

	//DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, MPU6050_EXT_SYNC_TEMP_OUT_L);
 8001f36:	2301      	movs	r3, #1
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2305      	movs	r3, #5
 8001f40:	221a      	movs	r2, #26
 8001f42:	21d0      	movs	r1, #208	@ 0xd0
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fee8 	bl	8001d1a <setBits>

	//Setting DLPF bandwidth to 42Hz
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	2303      	movs	r3, #3
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2302      	movs	r3, #2
 8001f54:	221a      	movs	r2, #26
 8001f56:	21d0      	movs	r1, #208	@ 0xd0
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fede 	bl	8001d1a <setBits>

	//Setting gyro sensitivity to +/- 2000 deg/sec FIXME set to 1000 deg/sec later
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS_2000);
 8001f5e:	2303      	movs	r3, #3
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	2302      	movs	r3, #2
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	2304      	movs	r3, #4
 8001f68:	221b      	movs	r2, #27
 8001f6a:	21d0      	movs	r1, #208	@ 0xd0
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff fed4 	bl	8001d1a <setBits>

	// load DMP code into memory banks
	//DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
	//DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
	//DEBUG_PRINTLN(F(" bytes)"));
	if (!writeProgMemoryBlock(hi2c, dmpMemory, MPU6050_DMP_CODE_SIZE, 0, 0, true))
 8001f72:	2301      	movs	r3, #1
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	2300      	movs	r3, #0
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f240 7289 	movw	r2, #1929	@ 0x789
 8001f80:	4946      	ldr	r1, [pc, #280]	@ (800209c <mpu6050_init_dmp+0x2bc>)
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f9ce 	bl	8002324 <writeProgMemoryBlock>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f083 0301 	eor.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d17c      	bne.n	800208e <mpu6050_init_dmp+0x2ae>
		return 1; // Failed
	//DEBUG_PRINTLN(F("Success! DMP code written and verified."));

	// Set the FIFO Rate Divisor int the DMP Firmware Memory
	unsigned char dmpUpdate[] = {0x00, MPU6050_DMP_FIFO_RATE_DIVISOR};
 8001f94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f98:	823b      	strh	r3, [r7, #16]
	writeMemoryBlock(hi2c, dmpUpdate, 0x02, 0x02, 0x16, true, false); // Lets write the dmpUpdate data to the Firmware image, we have 2 bytes to write in bank 0x02 with the Offset 0x16
 8001f9a:	f107 0110 	add.w	r1, r7, #16
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9302      	str	r3, [sp, #8]
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	2316      	movs	r3, #22
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2302      	movs	r3, #2
 8001fac:	2202      	movs	r2, #2
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8de 	bl	8002170 <writeMemoryBlock>

	//write start address MSB into register
	uint8_t config = 0x03;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_DMP_CFG_1, (uint8_t*) &config, 1); //setDMPConfig1(0x03);
 8001fb8:	f107 030f 	add.w	r3, r7, #15
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	9200      	str	r2, [sp, #0]
 8001fc0:	2270      	movs	r2, #112	@ 0x70
 8001fc2:	21d0      	movs	r1, #208	@ 0xd0
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff fe25 	bl	8001c14 <i2c_Write_Accelerometer>

	//write start address LSB into register
	config = 0x00;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_DMP_CFG_2, (uint8_t*) &config, 1); //	setDMPConfig2(0x00);
 8001fce:	f107 030f 	add.w	r3, r7, #15
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	9200      	str	r2, [sp, #0]
 8001fd6:	2271      	movs	r2, #113	@ 0x71
 8001fd8:	21d0      	movs	r1, #208	@ 0xd0
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff fe1a 	bl	8001c14 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, false); //	setOTPBankValid(false);
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	21d0      	movs	r1, #208	@ 0xd0
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fe54 	bl	8001c98 <setBit>

	//DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
	uint8_t threshold = 2;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	73bb      	strb	r3, [r7, #14]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MOT_THR, (uint8_t*) &threshold, 1); //setMotionDetectionThreshold(2);
 8001ff4:	f107 030e 	add.w	r3, r7, #14
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	9200      	str	r2, [sp, #0]
 8001ffc:	221f      	movs	r2, #31
 8001ffe:	21d0      	movs	r1, #208	@ 0xd0
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff fe07 	bl	8001c14 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
	threshold = 156;
 8002006:	239c      	movs	r3, #156	@ 0x9c
 8002008:	73bb      	strb	r3, [r7, #14]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_ZRMOT_THR, (uint8_t*) &threshold, 1); //	setZeroMotionDetectionThreshold(156);
 800200a:	f107 030e 	add.w	r3, r7, #14
 800200e:	2201      	movs	r2, #1
 8002010:	9200      	str	r2, [sp, #0]
 8002012:	2221      	movs	r2, #33	@ 0x21
 8002014:	21d0      	movs	r1, #208	@ 0xd0
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff fdfc 	bl	8001c14 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
	uint8_t duration = 80;
 800201c:	2350      	movs	r3, #80	@ 0x50
 800201e:	737b      	strb	r3, [r7, #13]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MOT_DUR, (uint8_t*) &duration, 1); //	setMotionDetectionDuration(80);
 8002020:	f107 030d 	add.w	r3, r7, #13
 8002024:	2201      	movs	r2, #1
 8002026:	9200      	str	r2, [sp, #0]
 8002028:	2220      	movs	r2, #32
 800202a:	21d0      	movs	r1, #208	@ 0xd0
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fdf1 	bl	8001c14 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
	duration = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	737b      	strb	r3, [r7, #13]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_ZRMOT_DUR, (uint8_t*) &duration, 1); //	setZeroMotionDetectionDuration(0);
 8002036:	f107 030d 	add.w	r3, r7, #13
 800203a:	2201      	movs	r2, #1
 800203c:	9200      	str	r2, [sp, #0]
 800203e:	2222      	movs	r2, #34	@ 0x22
 8002040:	21d0      	movs	r1, #208	@ 0xd0
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fde6 	bl	8001c14 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Enabling FIFO..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, true); //	setFIFOEnabled(true);
 8002048:	2301      	movs	r3, #1
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2306      	movs	r3, #6
 800204e:	226a      	movs	r2, #106	@ 0x6a
 8002050:	21d0      	movs	r1, #208	@ 0xd0
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fe20 	bl	8001c98 <setBit>

	//	DEBUG_PRINTLN(F("Resetting DMP..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true); //	resetDMP();
 8002058:	2301      	movs	r3, #1
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2303      	movs	r3, #3
 800205e:	226a      	movs	r2, #106	@ 0x6a
 8002060:	21d0      	movs	r1, #208	@ 0xd0
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fe18 	bl	8001c98 <setBit>

	//	DEBUG_PRINTLN(F("DMP is good to go! Finally."));
	//
	//	DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
	setDMPEnabled(hi2c, false);
 8002068:	2100      	movs	r1, #0
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f977 	bl	800235e <setDMPEnabled>
	//
	//	DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
	dmpPacketSize = 42;
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <mpu6050_init_dmp+0x2c0>)
 8002072:	222a      	movs	r2, #42	@ 0x2a
 8002074:	801a      	strh	r2, [r3, #0]
	//
	//	DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
	resetFIFO(hi2c);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f9a2 	bl	80023c0 <resetFIFO>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_INT_STATUS, (uint8_t*) receive_buffer, 1);	//	getIntStatus();
 800207c:	2301      	movs	r3, #1
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <mpu6050_init_dmp+0x2b8>)
 8002082:	223a      	movs	r2, #58	@ 0x3a
 8002084:	21d0      	movs	r1, #208	@ 0xd0
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fd76 	bl	8001b78 <i2c_Read_Accelerometer>

	return 0;
 800208c:	e000      	b.n	8002090 <mpu6050_init_dmp+0x2b0>
		return 1; // Failed
 800208e:	bf00      	nop
}
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200002e4 	.word	0x200002e4
 800209c:	0800bc78 	.word	0x0800bc78
 80020a0:	200002f8 	.word	0x200002f8

080020a4 <setMemoryBank>:

void setMemoryBank(I2C_HandleTypeDef *hi2c, uint8_t bank, bool prefetchEnabled, bool userBank)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af02      	add	r7, sp, #8
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	4608      	mov	r0, r1
 80020ae:	4611      	mov	r1, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	70fb      	strb	r3, [r7, #3]
 80020b6:	460b      	mov	r3, r1
 80020b8:	70bb      	strb	r3, [r7, #2]
 80020ba:	4613      	mov	r3, r2
 80020bc:	707b      	strb	r3, [r7, #1]
	bank &= 0x1F;
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	70fb      	strb	r3, [r7, #3]
	if (userBank)
 80020c8:	787b      	ldrb	r3, [r7, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d004      	beq.n	80020d8 <setMemoryBank+0x34>
		bank |= 0x20;
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	f043 0320 	orr.w	r3, r3, #32
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	70fb      	strb	r3, [r7, #3]
	if (prefetchEnabled)
 80020d8:	78bb      	ldrb	r3, [r7, #2]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d004      	beq.n	80020e8 <setMemoryBank+0x44>
		bank |= 0x40;
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	70fb      	strb	r3, [r7, #3]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_BANK_SEL, (uint8_t*) &bank, 1); //write to BANK_SEL = 0x6D register (not in register map documentation)
 80020e8:	1cfb      	adds	r3, r7, #3
 80020ea:	2201      	movs	r2, #1
 80020ec:	9200      	str	r2, [sp, #0]
 80020ee:	226d      	movs	r2, #109	@ 0x6d
 80020f0:	21d0      	movs	r1, #208	@ 0xd0
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff fd8e 	bl	8001c14 <i2c_Write_Accelerometer>

}
 80020f8:	bf00      	nop
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <setMemoryStartAddress>:
void setMemoryStartAddress(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af02      	add	r7, sp, #8
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	70fb      	strb	r3, [r7, #3]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_START_ADDR, (uint8_t*) &address, 1); //MPU6050_RA_MEM_START_ADDR = 0x6E, write the start address to this register
 800210c:	1cfb      	adds	r3, r7, #3
 800210e:	2201      	movs	r2, #1
 8002110:	9200      	str	r2, [sp, #0]
 8002112:	226e      	movs	r2, #110	@ 0x6e
 8002114:	21d0      	movs	r1, #208	@ 0xd0
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fd7c 	bl	8001c14 <i2c_Write_Accelerometer>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <getOTPBankValid>:
uint8_t getOTPBankValid(I2C_HandleTypeDef *hi2c)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af02      	add	r7, sp, #8
 800212a:	6078      	str	r0, [r7, #4]
	uint8_t temp_buf = 0; //bit 0 is MPU6050_TC_OTP_BNK_VLD_BIT, which is what we need to confirm if OTP bank is valid
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_XG_OFFS_TC, &temp_buf, 1); //MPU6050_RA_XG_OFFS_TC = 0x00
 8002130:	f107 030f 	add.w	r3, r7, #15
 8002134:	2201      	movs	r2, #1
 8002136:	9200      	str	r2, [sp, #0]
 8002138:	2200      	movs	r2, #0
 800213a:	21d0      	movs	r1, #208	@ 0xd0
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fd1b 	bl	8001b78 <i2c_Read_Accelerometer>

	return temp_buf;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <setIntEnabled>:
void setIntEnabled(I2C_HandleTypeDef *hi2c, uint8_t enabled)
{ //call this function to choose which interrupts are enabled
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af02      	add	r7, sp, #8
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_INT_ENABLE, (uint8_t*) &enabled, 1);
 8002158:	1cfb      	adds	r3, r7, #3
 800215a:	2201      	movs	r2, #1
 800215c:	9200      	str	r2, [sp, #0]
 800215e:	2238      	movs	r2, #56	@ 0x38
 8002160:	21d0      	movs	r1, #208	@ 0xd0
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff fd56 	bl	8001c14 <i2c_Write_Accelerometer>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <writeMemoryBlock>:
bool writeMemoryBlock(I2C_HandleTypeDef *hi2c, const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	@ 0x28
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	4611      	mov	r1, r2
 800217c:	461a      	mov	r2, r3
 800217e:	460b      	mov	r3, r1
 8002180:	80fb      	strh	r3, [r7, #6]
 8002182:	4613      	mov	r3, r2
 8002184:	717b      	strb	r3, [r7, #5]
	setMemoryBank(hi2c, bank, false, false);
 8002186:	7979      	ldrb	r1, [r7, #5]
 8002188:	2300      	movs	r3, #0
 800218a:	2200      	movs	r2, #0
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f7ff ff89 	bl	80020a4 <setMemoryBank>
	setMemoryStartAddress(hi2c, address);
 8002192:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002196:	4619      	mov	r1, r3
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f7ff ffb1 	bl	8002100 <setMemoryStartAddress>
	uint8_t chunkSize;
	uint8_t *verifyBuffer = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
	uint8_t *progBuffer = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
	uint16_t i;
	uint8_t j;
	if (verify)
 80021a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d004      	beq.n	80021b8 <writeMemoryBlock+0x48>
		verifyBuffer = (uint8_t*) malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80021ae:	2010      	movs	r0, #16
 80021b0:	f008 fbea 	bl	800a988 <malloc>
 80021b4:	4603      	mov	r3, r0
 80021b6:	61bb      	str	r3, [r7, #24]
	if (useProgMem)
 80021b8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <writeMemoryBlock+0x5a>
		progBuffer = (uint8_t*) malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 80021c0:	2010      	movs	r0, #16
 80021c2:	f008 fbe1 	bl	800a988 <malloc>
 80021c6:	4603      	mov	r3, r0
 80021c8:	617b      	str	r3, [r7, #20]
	for (i = 0; i < dataSize;)
 80021ca:	2300      	movs	r3, #0
 80021cc:	827b      	strh	r3, [r7, #18]
 80021ce:	e091      	b.n	80022f4 <writeMemoryBlock+0x184>
	{
		// determine correct chunk size according to bank position and data size
		chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 80021d0:	2310      	movs	r3, #16
 80021d2:	77fb      	strb	r3, [r7, #31]

		// make sure we don't go past the data size
		if (i + chunkSize > dataSize)
 80021d4:	8a7a      	ldrh	r2, [r7, #18]
 80021d6:	7ffb      	ldrb	r3, [r7, #31]
 80021d8:	441a      	add	r2, r3
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	429a      	cmp	r2, r3
 80021de:	dd05      	ble.n	80021ec <writeMemoryBlock+0x7c>
			chunkSize = dataSize - i;
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	8a7b      	ldrh	r3, [r7, #18]
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	77fb      	strb	r3, [r7, #31]

		// make sure this chunk doesn't go past the bank boundary (256 bytes)
		if (chunkSize > 256 - address)
 80021ec:	7ffa      	ldrb	r2, [r7, #31]
 80021ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021f2:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80021f6:	429a      	cmp	r2, r3
 80021f8:	dd03      	ble.n	8002202 <writeMemoryBlock+0x92>
			chunkSize = 256 - address;
 80021fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021fe:	425b      	negs	r3, r3
 8002200:	77fb      	strb	r3, [r7, #31]

		if (useProgMem)
 8002202:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002206:	2b00      	cmp	r3, #0
 8002208:	d014      	beq.n	8002234 <writeMemoryBlock+0xc4>
		{
			// write the chunk of data as specified
			for (j = 0; j < chunkSize; j++)
 800220a:	2300      	movs	r3, #0
 800220c:	747b      	strb	r3, [r7, #17]
 800220e:	e00c      	b.n	800222a <writeMemoryBlock+0xba>
				progBuffer[j] = pgm_read_byte(data + i + j);
 8002210:	8a7a      	ldrh	r2, [r7, #18]
 8002212:	7c7b      	ldrb	r3, [r7, #17]
 8002214:	4413      	add	r3, r2
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	441a      	add	r2, r3
 800221a:	7c7b      	ldrb	r3, [r7, #17]
 800221c:	6979      	ldr	r1, [r7, #20]
 800221e:	440b      	add	r3, r1
 8002220:	7812      	ldrb	r2, [r2, #0]
 8002222:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < chunkSize; j++)
 8002224:	7c7b      	ldrb	r3, [r7, #17]
 8002226:	3301      	adds	r3, #1
 8002228:	747b      	strb	r3, [r7, #17]
 800222a:	7c7a      	ldrb	r2, [r7, #17]
 800222c:	7ffb      	ldrb	r3, [r7, #31]
 800222e:	429a      	cmp	r2, r3
 8002230:	d3ee      	bcc.n	8002210 <writeMemoryBlock+0xa0>
 8002232:	e003      	b.n	800223c <writeMemoryBlock+0xcc>
		}
		else
		{
			// write the chunk of data as specified
			progBuffer = (uint8_t*) data + i;
 8002234:	8a7b      	ldrh	r3, [r7, #18]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	4413      	add	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
		}

		i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_R_W, (uint8_t*) progBuffer, chunkSize);
 800223c:	7ffb      	ldrb	r3, [r7, #31]
 800223e:	b29b      	uxth	r3, r3
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	226f      	movs	r2, #111	@ 0x6f
 8002246:	21d0      	movs	r1, #208	@ 0xd0
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f7ff fce3 	bl	8001c14 <i2c_Write_Accelerometer>

		// verify data if needed
		if (verify && verifyBuffer)
 800224e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d02c      	beq.n	80022b0 <writeMemoryBlock+0x140>
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d029      	beq.n	80022b0 <writeMemoryBlock+0x140>
		{
			setMemoryBank(hi2c, bank, false, false);
 800225c:	7979      	ldrb	r1, [r7, #5]
 800225e:	2300      	movs	r3, #0
 8002260:	2200      	movs	r2, #0
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f7ff ff1e 	bl	80020a4 <setMemoryBank>
			setMemoryStartAddress(hi2c, address);
 8002268:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800226c:	4619      	mov	r1, r3
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f7ff ff46 	bl	8002100 <setMemoryStartAddress>
			i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_R_W, (uint8_t*) verifyBuffer, chunkSize);
 8002274:	7ffb      	ldrb	r3, [r7, #31]
 8002276:	b29b      	uxth	r3, r3
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	226f      	movs	r2, #111	@ 0x6f
 800227e:	21d0      	movs	r1, #208	@ 0xd0
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f7ff fc79 	bl	8001b78 <i2c_Read_Accelerometer>
			if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0)
 8002286:	7ffb      	ldrb	r3, [r7, #31]
 8002288:	461a      	mov	r2, r3
 800228a:	69b9      	ldr	r1, [r7, #24]
 800228c:	6978      	ldr	r0, [r7, #20]
 800228e:	f008 fe31 	bl	800aef4 <memcmp>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00b      	beq.n	80022b0 <writeMemoryBlock+0x140>
				 Serial.print(" 0x");
				 if (verifyBuffer[i + j] < 16) Serial.print("0");
				 Serial.print(verifyBuffer[i + j], HEX);
				 }
				 Serial.print("\n");*/
				free(verifyBuffer);
 8002298:	69b8      	ldr	r0, [r7, #24]
 800229a:	f008 fb7d 	bl	800a998 <free>
				if (useProgMem)
 800229e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <writeMemoryBlock+0x13c>
					free(progBuffer);
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f008 fb76 	bl	800a998 <free>
				return false; // uh oh.
 80022ac:	2300      	movs	r3, #0
 80022ae:	e035      	b.n	800231c <writeMemoryBlock+0x1ac>
			}
		}

		// increase byte index by [chunkSize]
		i += chunkSize;
 80022b0:	7ffb      	ldrb	r3, [r7, #31]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	8a7b      	ldrh	r3, [r7, #18]
 80022b6:	4413      	add	r3, r2
 80022b8:	827b      	strh	r3, [r7, #18]

		// uint8_t automatically wraps to 0 at 256
		address += chunkSize;
 80022ba:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80022be:	7ffb      	ldrb	r3, [r7, #31]
 80022c0:	4413      	add	r3, r2
 80022c2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

		// if we aren't done, update bank (if necessary) and address
		if (i < dataSize)
 80022c6:	8a7a      	ldrh	r2, [r7, #18]
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d212      	bcs.n	80022f4 <writeMemoryBlock+0x184>
		{
			if (address == 0)
 80022ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d102      	bne.n	80022dc <writeMemoryBlock+0x16c>
				bank++;
 80022d6:	797b      	ldrb	r3, [r7, #5]
 80022d8:	3301      	adds	r3, #1
 80022da:	717b      	strb	r3, [r7, #5]
			setMemoryBank(hi2c, bank, false, false);
 80022dc:	7979      	ldrb	r1, [r7, #5]
 80022de:	2300      	movs	r3, #0
 80022e0:	2200      	movs	r2, #0
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff fede 	bl	80020a4 <setMemoryBank>
			setMemoryStartAddress(hi2c, address);
 80022e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022ec:	4619      	mov	r1, r3
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff ff06 	bl	8002100 <setMemoryStartAddress>
	for (i = 0; i < dataSize;)
 80022f4:	8a7a      	ldrh	r2, [r7, #18]
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	f4ff af69 	bcc.w	80021d0 <writeMemoryBlock+0x60>
		}
	}
	if (verify)
 80022fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <writeMemoryBlock+0x19c>
		free(verifyBuffer);
 8002306:	69b8      	ldr	r0, [r7, #24]
 8002308:	f008 fb46 	bl	800a998 <free>
	if (useProgMem)
 800230c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <writeMemoryBlock+0x1aa>
		free(progBuffer);
 8002314:	6978      	ldr	r0, [r7, #20]
 8002316:	f008 fb3f 	bl	800a998 <free>
	return true;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <writeProgMemoryBlock>:

bool writeProgMemoryBlock(I2C_HandleTypeDef *hi2c, const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af04      	add	r7, sp, #16
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	4611      	mov	r1, r2
 8002330:	461a      	mov	r2, r3
 8002332:	460b      	mov	r3, r1
 8002334:	80fb      	strh	r3, [r7, #6]
 8002336:	4613      	mov	r3, r2
 8002338:	717b      	strb	r3, [r7, #5]
	return writeMemoryBlock(hi2c, data, dataSize, bank, address, verify, true);
 800233a:	7979      	ldrb	r1, [r7, #5]
 800233c:	88fa      	ldrh	r2, [r7, #6]
 800233e:	2301      	movs	r3, #1
 8002340:	9302      	str	r3, [sp, #8]
 8002342:	7f3b      	ldrb	r3, [r7, #28]
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	7e3b      	ldrb	r3, [r7, #24]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	460b      	mov	r3, r1
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7ff ff0e 	bl	8002170 <writeMemoryBlock>
 8002354:	4603      	mov	r3, r0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <setDMPEnabled>:

void setDMPEnabled(I2C_HandleTypeDef *hi2c, bool enabled)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af02      	add	r7, sp, #8
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	70fb      	strb	r3, [r7, #3]
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled); //	resetDMP();
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2307      	movs	r3, #7
 8002370:	226a      	movs	r2, #106	@ 0x6a
 8002372:	21d0      	movs	r1, #208	@ 0xd0
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff fc8f 	bl	8001c98 <setBit>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <getFIFOCount>:
//    getFIFOBytes(data, length); //Get 1 packet
//    return 1;
//}

uint16_t getFIFOCount(I2C_HandleTypeDef *hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af02      	add	r7, sp, #8
 800238a:	6078      	str	r0, [r7, #4]
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_FIFO_COUNTH, (uint8_t*) receive_buffer, 2);
 800238c:	2302      	movs	r3, #2
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <getFIFOCount+0x38>)
 8002392:	2272      	movs	r2, #114	@ 0x72
 8002394:	21d0      	movs	r1, #208	@ 0xd0
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff fbee 	bl	8001b78 <i2c_Read_Accelerometer>
	return (((uint16_t) receive_buffer[0]) << 8) | receive_buffer[1];
 800239c:	4b07      	ldr	r3, [pc, #28]	@ (80023bc <getFIFOCount+0x38>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <getFIFOCount+0x38>)
 80023a8:	785b      	ldrb	r3, [r3, #1]
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	4313      	orrs	r3, r2
 80023ae:	b21b      	sxth	r3, r3
 80023b0:	b29b      	uxth	r3, r3
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200002e4 	.word	0x200002e4

080023c0 <resetFIFO>:

void resetFIFO(I2C_HandleTypeDef *hi2c)
{ //reset FIFO when it overflows to make sure the data is synchronized.
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	6078      	str	r0, [r7, #4]
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 80023c8:	2301      	movs	r3, #1
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2302      	movs	r3, #2
 80023ce:	226a      	movs	r2, #106	@ 0x6a
 80023d0:	21d0      	movs	r1, #208	@ 0xd0
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fc60 	bl	8001c98 <setBit>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <getFIFOBytes>:

void getFIFOBytes(I2C_HandleTypeDef *hi2c, uint8_t *data, uint8_t length)
{ //read Bytes from FIFO
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	4613      	mov	r3, r2
 80023ec:	71fb      	strb	r3, [r7, #7]
	if (length > 0)
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <getFIFOBytes+0x28>
	{
		i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_FIFO_R_W, (uint8_t*) data, length);
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2274      	movs	r2, #116	@ 0x74
 80023fe:	21d0      	movs	r1, #208	@ 0xd0
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f7ff fbb9 	bl	8001b78 <i2c_Read_Accelerometer>
	}
	else
	{
		*data = 0;
	}
}
 8002406:	e002      	b.n	800240e <getFIFOBytes+0x2e>
		*data = 0;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <dmpGetQuaternion>:

uint8_t dmpGetQuaternion(int16_t *data, const uint8_t *packet)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
	// TODO: accommodate different arrangements of sent data (ONLY default supported now)
	if (packet == 0)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <dmpGetQuaternion+0x16>
	{
		packet = dmpPacketBuffer;
 8002428:	4b21      	ldr	r3, [pc, #132]	@ (80024b0 <dmpGetQuaternion+0x98>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	603b      	str	r3, [r7, #0]
	}
	data[0] = ((packet[0] << 8) | packet[1]);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b21b      	sxth	r3, r3
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	b21a      	sxth	r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	b21b      	sxth	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b21a      	sxth	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	801a      	strh	r2, [r3, #0]
	data[1] = ((packet[4] << 8) | packet[5]);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	3304      	adds	r3, #4
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	b21b      	sxth	r3, r3
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	b219      	sxth	r1, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	3305      	adds	r3, #5
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b21a      	sxth	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3302      	adds	r3, #2
 8002460:	430a      	orrs	r2, r1
 8002462:	b212      	sxth	r2, r2
 8002464:	801a      	strh	r2, [r3, #0]
	data[2] = ((packet[8] << 8) | packet[9]);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	3308      	adds	r3, #8
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b21b      	sxth	r3, r3
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	b219      	sxth	r1, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	3309      	adds	r3, #9
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b21a      	sxth	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3304      	adds	r3, #4
 800247e:	430a      	orrs	r2, r1
 8002480:	b212      	sxth	r2, r2
 8002482:	801a      	strh	r2, [r3, #0]
	data[3] = ((packet[12] << 8) | packet[13]);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	330c      	adds	r3, #12
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	b21b      	sxth	r3, r3
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	b219      	sxth	r1, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	330d      	adds	r3, #13
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b21a      	sxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3306      	adds	r3, #6
 800249c:	430a      	orrs	r2, r1
 800249e:	b212      	sxth	r2, r2
 80024a0:	801a      	strh	r2, [r3, #0]
	return 0;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	200002fc 	.word	0x200002fc

080024b4 <dmpGetQuaternionQuatStruct>:

uint8_t dmpGetQuaternionQuatStruct(Quaternion *q, const uint8_t *packet)
{ //returns data in struct format, which is more organized than dmpGetQuaternion
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
	// TODO: accommodate different arrangements of sent data (ONLY default supported now)
	int16_t qI[4];
	uint8_t status = dmpGetQuaternion(qI, packet);
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	6839      	ldr	r1, [r7, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ffa7 	bl	8002418 <dmpGetQuaternion>
 80024ca:	4603      	mov	r3, r0
 80024cc:	75fb      	strb	r3, [r7, #23]
	if (status == 0)
 80024ce:	7dfb      	ldrb	r3, [r7, #23]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d13d      	bne.n	8002550 <dmpGetQuaternionQuatStruct+0x9c>
	{
		q->w = (float) qI[0] / 16384.0f;
 80024d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fbaf 	bl	8000c3c <__aeabi_i2f>
 80024de:	4603      	mov	r3, r0
 80024e0:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fcb1 	bl	8000e4c <__aeabi_fdiv>
 80024ea:	4603      	mov	r3, r0
 80024ec:	461a      	mov	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	601a      	str	r2, [r3, #0]
		q->x = (float) qI[1] / 16384.0f;
 80024f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fba0 	bl	8000c3c <__aeabi_i2f>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fca2 	bl	8000e4c <__aeabi_fdiv>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	605a      	str	r2, [r3, #4]
		q->y = (float) qI[2] / 16384.0f;
 8002510:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fb91 	bl	8000c3c <__aeabi_i2f>
 800251a:	4603      	mov	r3, r0
 800251c:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe fc93 	bl	8000e4c <__aeabi_fdiv>
 8002526:	4603      	mov	r3, r0
 8002528:	461a      	mov	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	609a      	str	r2, [r3, #8]
		q->z = (float) qI[3] / 16384.0f;
 800252e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fb82 	bl	8000c3c <__aeabi_i2f>
 8002538:	4603      	mov	r3, r0
 800253a:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe fc84 	bl	8000e4c <__aeabi_fdiv>
 8002544:	4603      	mov	r3, r0
 8002546:	461a      	mov	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	60da      	str	r2, [r3, #12]
		return 0;
 800254c:	2300      	movs	r3, #0
 800254e:	e000      	b.n	8002552 <dmpGetQuaternionQuatStruct+0x9e>
	}
	return status; // int16 return value, indicates error if this line is reached
 8002550:	7dfb      	ldrb	r3, [r7, #23]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <dmpGetGravity>:
uint8_t dmpGetGravity(VectorFloat *v, Quaternion *q) {
 800255a:	b590      	push	{r4, r7, lr}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
    v -> x = 2 * (q -> x*q -> z - q -> w*q -> y);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4619      	mov	r1, r3
 800256e:	4610      	mov	r0, r2
 8002570:	f7fe fbb8 	bl	8000ce4 <__aeabi_fmul>
 8002574:	4603      	mov	r3, r0
 8002576:	461c      	mov	r4, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4619      	mov	r1, r3
 8002582:	4610      	mov	r0, r2
 8002584:	f7fe fbae 	bl	8000ce4 <__aeabi_fmul>
 8002588:	4603      	mov	r3, r0
 800258a:	4619      	mov	r1, r3
 800258c:	4620      	mov	r0, r4
 800258e:	f7fe fa9f 	bl	8000ad0 <__aeabi_fsub>
 8002592:	4603      	mov	r3, r0
 8002594:	4619      	mov	r1, r3
 8002596:	4618      	mov	r0, r3
 8002598:	f7fe fa9c 	bl	8000ad4 <__addsf3>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	601a      	str	r2, [r3, #0]
    v -> y = 2 * (q -> w*q -> x + q -> y*q -> z);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f7fe fb98 	bl	8000ce4 <__aeabi_fmul>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461c      	mov	r4, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f7fe fb8e 	bl	8000ce4 <__aeabi_fmul>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4619      	mov	r1, r3
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7fe fa81 	bl	8000ad4 <__addsf3>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4619      	mov	r1, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fa7c 	bl	8000ad4 <__addsf3>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	605a      	str	r2, [r3, #4]
    v -> z = q -> w*q -> w - q -> x*q -> x - q -> y*q -> y + q -> z*q -> z;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	4610      	mov	r0, r2
 80025f0:	f7fe fb78 	bl	8000ce4 <__aeabi_fmul>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461c      	mov	r4, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4619      	mov	r1, r3
 8002602:	4610      	mov	r0, r2
 8002604:	f7fe fb6e 	bl	8000ce4 <__aeabi_fmul>
 8002608:	4603      	mov	r3, r0
 800260a:	4619      	mov	r1, r3
 800260c:	4620      	mov	r0, r4
 800260e:	f7fe fa5f 	bl	8000ad0 <__aeabi_fsub>
 8002612:	4603      	mov	r3, r0
 8002614:	461c      	mov	r4, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f7fe fb5f 	bl	8000ce4 <__aeabi_fmul>
 8002626:	4603      	mov	r3, r0
 8002628:	4619      	mov	r1, r3
 800262a:	4620      	mov	r0, r4
 800262c:	f7fe fa50 	bl	8000ad0 <__aeabi_fsub>
 8002630:	4603      	mov	r3, r0
 8002632:	461c      	mov	r4, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	4619      	mov	r1, r3
 800263e:	4610      	mov	r0, r2
 8002640:	f7fe fb50 	bl	8000ce4 <__aeabi_fmul>
 8002644:	4603      	mov	r3, r0
 8002646:	4619      	mov	r1, r3
 8002648:	4620      	mov	r0, r4
 800264a:	f7fe fa43 	bl	8000ad4 <__addsf3>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	609a      	str	r2, [r3, #8]
    return 0;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bd90      	pop	{r4, r7, pc}

08002660 <dmpGetYawPitchRoll>:
uint8_t dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {
 8002660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
    // yaw: (about Z axis)
    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4619      	mov	r1, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fa2e 	bl	8000ad4 <__addsf3>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4619      	mov	r1, r3
 8002682:	4610      	mov	r0, r2
 8002684:	f7fe fb2e 	bl	8000ce4 <__aeabi_fmul>
 8002688:	4603      	mov	r3, r0
 800268a:	461c      	mov	r4, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4619      	mov	r1, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fa1e 	bl	8000ad4 <__addsf3>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4619      	mov	r1, r3
 80026a2:	4610      	mov	r0, r2
 80026a4:	f7fe fb1e 	bl	8000ce4 <__aeabi_fmul>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4619      	mov	r1, r3
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7fe fa0f 	bl	8000ad0 <__aeabi_fsub>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd feaf 	bl	8000418 <__aeabi_f2d>
 80026ba:	4604      	mov	r4, r0
 80026bc:	460d      	mov	r5, r1
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fa05 	bl	8000ad4 <__addsf3>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f7fe fb05 	bl	8000ce4 <__aeabi_fmul>
 80026da:	4603      	mov	r3, r0
 80026dc:	461e      	mov	r6, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4619      	mov	r1, r3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe f9f5 	bl	8000ad4 <__addsf3>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4619      	mov	r1, r3
 80026f4:	4610      	mov	r0, r2
 80026f6:	f7fe faf5 	bl	8000ce4 <__aeabi_fmul>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4619      	mov	r1, r3
 80026fe:	4630      	mov	r0, r6
 8002700:	f7fe f9e8 	bl	8000ad4 <__addsf3>
 8002704:	4603      	mov	r3, r0
 8002706:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe f9e0 	bl	8000ad0 <__aeabi_fsub>
 8002710:	4603      	mov	r3, r0
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd fe80 	bl	8000418 <__aeabi_f2d>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4620      	mov	r0, r4
 800271e:	4629      	mov	r1, r5
 8002720:	f008 fe64 	bl	800b3ec <atan2>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	f7fe f97c 	bl	8000a28 <__aeabi_d2f>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	601a      	str	r2, [r3, #0]
    // pitch: (nose up/down, about Y axis)
    data[1] = atan2(gravity -> x , sqrt(gravity -> y*gravity -> y + gravity -> z*gravity -> z));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4618      	mov	r0, r3
 800273c:	f7fd fe6c 	bl	8000418 <__aeabi_f2d>
 8002740:	4604      	mov	r4, r0
 8002742:	460d      	mov	r5, r1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	4619      	mov	r1, r3
 800274e:	4610      	mov	r0, r2
 8002750:	f7fe fac8 	bl	8000ce4 <__aeabi_fmul>
 8002754:	4603      	mov	r3, r0
 8002756:	461e      	mov	r6, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f7fe fabe 	bl	8000ce4 <__aeabi_fmul>
 8002768:	4603      	mov	r3, r0
 800276a:	4619      	mov	r1, r3
 800276c:	4630      	mov	r0, r6
 800276e:	f7fe f9b1 	bl	8000ad4 <__addsf3>
 8002772:	4603      	mov	r3, r0
 8002774:	4618      	mov	r0, r3
 8002776:	f7fd fe4f 	bl	8000418 <__aeabi_f2d>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f008 fe35 	bl	800b3f0 <sqrt>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4620      	mov	r0, r4
 800278c:	4629      	mov	r1, r5
 800278e:	f008 fe2d 	bl	800b3ec <atan2>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	68f9      	ldr	r1, [r7, #12]
 8002798:	1d0c      	adds	r4, r1, #4
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	f7fe f943 	bl	8000a28 <__aeabi_d2f>
 80027a2:	4603      	mov	r3, r0
 80027a4:	6023      	str	r3, [r4, #0]
    // roll: (tilt left/right, about X axis)
    data[2] = atan2(gravity -> y , gravity -> z);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd fe34 	bl	8000418 <__aeabi_f2d>
 80027b0:	4604      	mov	r4, r0
 80027b2:	460d      	mov	r5, r1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fe2d 	bl	8000418 <__aeabi_f2d>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4620      	mov	r0, r4
 80027c4:	4629      	mov	r1, r5
 80027c6:	f008 fe11 	bl	800b3ec <atan2>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	68f9      	ldr	r1, [r7, #12]
 80027d0:	f101 0408 	add.w	r4, r1, #8
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	f7fe f926 	bl	8000a28 <__aeabi_d2f>
 80027dc:	4603      	mov	r3, r0
 80027de:	6023      	str	r3, [r4, #0]
    if (gravity -> z < 0) {
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fc19 	bl	8001020 <__aeabi_fcmplt>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d039      	beq.n	8002868 <dmpGetYawPitchRoll+0x208>
        if(data[1] > 0) {
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3304      	adds	r3, #4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f04f 0100 	mov.w	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fc2c 	bl	800105c <__aeabi_fcmpgt>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d017      	beq.n	800283a <dmpGetYawPitchRoll+0x1da>
            data[1] = PI - data[1];
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3304      	adds	r3, #4
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fe01 	bl	8000418 <__aeabi_f2d>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	a117      	add	r1, pc, #92	@ (adr r1, 8002878 <dmpGetYawPitchRoll+0x218>)
 800281c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002820:	f7fd fc9a 	bl	8000158 <__aeabi_dsub>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1d1c      	adds	r4, r3, #4
 8002830:	f7fe f8fa 	bl	8000a28 <__aeabi_d2f>
 8002834:	4603      	mov	r3, r0
 8002836:	6023      	str	r3, [r4, #0]
 8002838:	e016      	b.n	8002868 <dmpGetYawPitchRoll+0x208>
        } else {
            data[1] = -PI - data[1];
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3304      	adds	r3, #4
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fd fde9 	bl	8000418 <__aeabi_f2d>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	a10d      	add	r1, pc, #52	@ (adr r1, 8002880 <dmpGetYawPitchRoll+0x220>)
 800284c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002850:	f7fd fc82 	bl	8000158 <__aeabi_dsub>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1d1c      	adds	r4, r3, #4
 8002860:	f7fe f8e2 	bl	8000a28 <__aeabi_d2f>
 8002864:	4603      	mov	r3, r0
 8002866:	6023      	str	r3, [r4, #0]
        }
    }
    return 0;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002872:	bf00      	nop
 8002874:	f3af 8000 	nop.w
 8002878:	54442eea 	.word	0x54442eea
 800287c:	400921fb 	.word	0x400921fb
 8002880:	54442eea 	.word	0x54442eea
 8002884:	c00921fb 	.word	0xc00921fb

08002888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800288e:	4b18      	ldr	r3, [pc, #96]	@ (80028f0 <HAL_MspInit+0x68>)
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	4a17      	ldr	r2, [pc, #92]	@ (80028f0 <HAL_MspInit+0x68>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6193      	str	r3, [r2, #24]
 800289a:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <HAL_MspInit+0x68>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
 80028a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <HAL_MspInit+0x68>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4a11      	ldr	r2, [pc, #68]	@ (80028f0 <HAL_MspInit+0x68>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	61d3      	str	r3, [r2, #28]
 80028b2:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <HAL_MspInit+0x68>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	210f      	movs	r1, #15
 80028c2:	f06f 0001 	mvn.w	r0, #1
 80028c6:	f000 fbf4 	bl	80030b2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028ca:	4b0a      	ldr	r3, [pc, #40]	@ (80028f4 <HAL_MspInit+0x6c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	4a04      	ldr	r2, [pc, #16]	@ (80028f4 <HAL_MspInit+0x6c>)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40010000 	.word	0x40010000

080028f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 0310 	add.w	r3, r7, #16
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a41      	ldr	r2, [pc, #260]	@ (8002a18 <HAL_I2C_MspInit+0x120>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d17a      	bne.n	8002a0e <HAL_I2C_MspInit+0x116>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002918:	4b40      	ldr	r3, [pc, #256]	@ (8002a1c <HAL_I2C_MspInit+0x124>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a3f      	ldr	r2, [pc, #252]	@ (8002a1c <HAL_I2C_MspInit+0x124>)
 800291e:	f043 0308 	orr.w	r3, r3, #8
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b3d      	ldr	r3, [pc, #244]	@ (8002a1c <HAL_I2C_MspInit+0x124>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002930:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002934:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002936:	2312      	movs	r3, #18
 8002938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4619      	mov	r1, r3
 8002944:	4836      	ldr	r0, [pc, #216]	@ (8002a20 <HAL_I2C_MspInit+0x128>)
 8002946:	f000 fe51 	bl	80035ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800294a:	4b34      	ldr	r3, [pc, #208]	@ (8002a1c <HAL_I2C_MspInit+0x124>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	4a33      	ldr	r2, [pc, #204]	@ (8002a1c <HAL_I2C_MspInit+0x124>)
 8002950:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002954:	61d3      	str	r3, [r2, #28]
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_I2C_MspInit+0x124>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800295e:	60bb      	str	r3, [r7, #8]
 8002960:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8002962:	4b30      	ldr	r3, [pc, #192]	@ (8002a24 <HAL_I2C_MspInit+0x12c>)
 8002964:	4a30      	ldr	r2, [pc, #192]	@ (8002a28 <HAL_I2C_MspInit+0x130>)
 8002966:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002968:	4b2e      	ldr	r3, [pc, #184]	@ (8002a24 <HAL_I2C_MspInit+0x12c>)
 800296a:	2210      	movs	r2, #16
 800296c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800296e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a24 <HAL_I2C_MspInit+0x12c>)
 8002970:	2200      	movs	r2, #0
 8002972:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002974:	4b2b      	ldr	r3, [pc, #172]	@ (8002a24 <HAL_I2C_MspInit+0x12c>)
 8002976:	2280      	movs	r2, #128	@ 0x80
 8002978:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800297a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <HAL_I2C_MspInit+0x12c>)
 800297c:	2200      	movs	r2, #0
 800297e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002980:	4b28      	ldr	r3, [pc, #160]	@ (8002a24 <HAL_I2C_MspInit+0x12c>)
 8002982:	2200      	movs	r2, #0
 8002984:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002986:	4b27      	ldr	r3, [pc, #156]	@ (8002a24 <HAL_I2C_MspInit+0x12c>)
 8002988:	2200      	movs	r2, #0
 800298a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800298c:	4b25      	ldr	r3, [pc, #148]	@ (8002a24 <HAL_I2C_MspInit+0x12c>)
 800298e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002992:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002994:	4823      	ldr	r0, [pc, #140]	@ (8002a24 <HAL_I2C_MspInit+0x12c>)
 8002996:	f000 fbb7 	bl	8003108 <HAL_DMA_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 80029a0:	f7ff f8e4 	bl	8001b6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a24 <HAL_I2C_MspInit+0x12c>)
 80029a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80029aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002a24 <HAL_I2C_MspInit+0x12c>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80029b0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a2c <HAL_I2C_MspInit+0x134>)
 80029b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002a30 <HAL_I2C_MspInit+0x138>)
 80029b4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029b6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <HAL_I2C_MspInit+0x134>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029bc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a2c <HAL_I2C_MspInit+0x134>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029c2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <HAL_I2C_MspInit+0x134>)
 80029c4:	2280      	movs	r2, #128	@ 0x80
 80029c6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029c8:	4b18      	ldr	r3, [pc, #96]	@ (8002a2c <HAL_I2C_MspInit+0x134>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029ce:	4b17      	ldr	r3, [pc, #92]	@ (8002a2c <HAL_I2C_MspInit+0x134>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80029d4:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <HAL_I2C_MspInit+0x134>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80029da:	4b14      	ldr	r3, [pc, #80]	@ (8002a2c <HAL_I2C_MspInit+0x134>)
 80029dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80029e2:	4812      	ldr	r0, [pc, #72]	@ (8002a2c <HAL_I2C_MspInit+0x134>)
 80029e4:	f000 fb90 	bl	8003108 <HAL_DMA_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 80029ee:	f7ff f8bd 	bl	8001b6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a0d      	ldr	r2, [pc, #52]	@ (8002a2c <HAL_I2C_MspInit+0x134>)
 80029f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80029f8:	4a0c      	ldr	r2, [pc, #48]	@ (8002a2c <HAL_I2C_MspInit+0x134>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2105      	movs	r1, #5
 8002a02:	2021      	movs	r0, #33	@ 0x21
 8002a04:	f000 fb55 	bl	80030b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002a08:	2021      	movs	r0, #33	@ 0x21
 8002a0a:	f000 fb6e 	bl	80030ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002a0e:	bf00      	nop
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40005800 	.word	0x40005800
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40010c00 	.word	0x40010c00
 8002a24:	200000dc 	.word	0x200000dc
 8002a28:	40020044 	.word	0x40020044
 8002a2c:	20000120 	.word	0x20000120
 8002a30:	40020058 	.word	0x40020058

08002a34 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	@ 0x28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 0318 	add.w	r3, r7, #24
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a37      	ldr	r2, [pc, #220]	@ (8002b2c <HAL_TIM_IC_MspInit+0xf8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d135      	bne.n	8002ac0 <HAL_TIM_IC_MspInit+0x8c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a54:	4b36      	ldr	r3, [pc, #216]	@ (8002b30 <HAL_TIM_IC_MspInit+0xfc>)
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	4a35      	ldr	r2, [pc, #212]	@ (8002b30 <HAL_TIM_IC_MspInit+0xfc>)
 8002a5a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a5e:	6193      	str	r3, [r2, #24]
 8002a60:	4b33      	ldr	r3, [pc, #204]	@ (8002b30 <HAL_TIM_IC_MspInit+0xfc>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6c:	4b30      	ldr	r3, [pc, #192]	@ (8002b30 <HAL_TIM_IC_MspInit+0xfc>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	4a2f      	ldr	r2, [pc, #188]	@ (8002b30 <HAL_TIM_IC_MspInit+0xfc>)
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	6193      	str	r3, [r2, #24]
 8002a78:	4b2d      	ldr	r3, [pc, #180]	@ (8002b30 <HAL_TIM_IC_MspInit+0xfc>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002a84:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a92:	f107 0318 	add.w	r3, r7, #24
 8002a96:	4619      	mov	r1, r3
 8002a98:	4826      	ldr	r0, [pc, #152]	@ (8002b34 <HAL_TIM_IC_MspInit+0x100>)
 8002a9a:	f000 fda7 	bl	80035ec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2105      	movs	r1, #5
 8002aa2:	2019      	movs	r0, #25
 8002aa4:	f000 fb05 	bl	80030b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002aa8:	2019      	movs	r0, #25
 8002aaa:	f000 fb1e 	bl	80030ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2105      	movs	r1, #5
 8002ab2:	201b      	movs	r0, #27
 8002ab4:	f000 fafd 	bl	80030b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002ab8:	201b      	movs	r0, #27
 8002aba:	f000 fb16 	bl	80030ea <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002abe:	e030      	b.n	8002b22 <HAL_TIM_IC_MspInit+0xee>
  else if(htim_ic->Instance==TIM2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac8:	d12b      	bne.n	8002b22 <HAL_TIM_IC_MspInit+0xee>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aca:	4b19      	ldr	r3, [pc, #100]	@ (8002b30 <HAL_TIM_IC_MspInit+0xfc>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	4a18      	ldr	r2, [pc, #96]	@ (8002b30 <HAL_TIM_IC_MspInit+0xfc>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	61d3      	str	r3, [r2, #28]
 8002ad6:	4b16      	ldr	r3, [pc, #88]	@ (8002b30 <HAL_TIM_IC_MspInit+0xfc>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <HAL_TIM_IC_MspInit+0xfc>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	4a12      	ldr	r2, [pc, #72]	@ (8002b30 <HAL_TIM_IC_MspInit+0xfc>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	6193      	str	r3, [r2, #24]
 8002aee:	4b10      	ldr	r3, [pc, #64]	@ (8002b30 <HAL_TIM_IC_MspInit+0xfc>)
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8002afa:	2305      	movs	r3, #5
 8002afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b06:	f107 0318 	add.w	r3, r7, #24
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4809      	ldr	r0, [pc, #36]	@ (8002b34 <HAL_TIM_IC_MspInit+0x100>)
 8002b0e:	f000 fd6d 	bl	80035ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002b12:	2200      	movs	r2, #0
 8002b14:	2105      	movs	r1, #5
 8002b16:	201c      	movs	r0, #28
 8002b18:	f000 facb 	bl	80030b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b1c:	201c      	movs	r0, #28
 8002b1e:	f000 fae4 	bl	80030ea <HAL_NVIC_EnableIRQ>
}
 8002b22:	bf00      	nop
 8002b24:	3728      	adds	r7, #40	@ 0x28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40010800 	.word	0x40010800

08002b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b08e      	sub	sp, #56	@ 0x38
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002b4e:	4b34      	ldr	r3, [pc, #208]	@ (8002c20 <HAL_InitTick+0xe8>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	4a33      	ldr	r2, [pc, #204]	@ (8002c20 <HAL_InitTick+0xe8>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	61d3      	str	r3, [r2, #28]
 8002b5a:	4b31      	ldr	r3, [pc, #196]	@ (8002c20 <HAL_InitTick+0xe8>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b66:	f107 0210 	add.w	r2, r7, #16
 8002b6a:	f107 0314 	add.w	r3, r7, #20
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f003 ff03 	bl	800697c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d103      	bne.n	8002b88 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002b80:	f003 fee8 	bl	8006954 <HAL_RCC_GetPCLK1Freq>
 8002b84:	6378      	str	r0, [r7, #52]	@ 0x34
 8002b86:	e004      	b.n	8002b92 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002b88:	f003 fee4 	bl	8006954 <HAL_RCC_GetPCLK1Freq>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b94:	4a23      	ldr	r2, [pc, #140]	@ (8002c24 <HAL_InitTick+0xec>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	0c9b      	lsrs	r3, r3, #18
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002ba0:	4b21      	ldr	r3, [pc, #132]	@ (8002c28 <HAL_InitTick+0xf0>)
 8002ba2:	4a22      	ldr	r2, [pc, #136]	@ (8002c2c <HAL_InitTick+0xf4>)
 8002ba4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002ba6:	4b20      	ldr	r3, [pc, #128]	@ (8002c28 <HAL_InitTick+0xf0>)
 8002ba8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002bac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002bae:	4a1e      	ldr	r2, [pc, #120]	@ (8002c28 <HAL_InitTick+0xf0>)
 8002bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c28 <HAL_InitTick+0xf0>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bba:	4b1b      	ldr	r3, [pc, #108]	@ (8002c28 <HAL_InitTick+0xf0>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc0:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <HAL_InitTick+0xf0>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002bc6:	4818      	ldr	r0, [pc, #96]	@ (8002c28 <HAL_InitTick+0xf0>)
 8002bc8:	f003 ff26 	bl	8006a18 <HAL_TIM_Base_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11b      	bne.n	8002c12 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002bda:	4813      	ldr	r0, [pc, #76]	@ (8002c28 <HAL_InitTick+0xf0>)
 8002bdc:	f003 ff74 	bl	8006ac8 <HAL_TIM_Base_Start_IT>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002be6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d111      	bne.n	8002c12 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bee:	201e      	movs	r0, #30
 8002bf0:	f000 fa7b 	bl	80030ea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	d808      	bhi.n	8002c0c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	201e      	movs	r0, #30
 8002c00:	f000 fa57 	bl	80030b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c04:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <HAL_InitTick+0xf8>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	e002      	b.n	8002c12 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c12:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3738      	adds	r7, #56	@ 0x38
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000
 8002c24:	431bde83 	.word	0x431bde83
 8002c28:	20000300 	.word	0x20000300
 8002c2c:	40000800 	.word	0x40000800
 8002c30:	20000004 	.word	0x20000004

08002c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <NMI_Handler+0x4>

08002c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c40:	bf00      	nop
 8002c42:	e7fd      	b.n	8002c40 <HardFault_Handler+0x4>

08002c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <MemManage_Handler+0x4>

08002c4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c50:	bf00      	nop
 8002c52:	e7fd      	b.n	8002c50 <BusFault_Handler+0x4>

08002c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c58:	bf00      	nop
 8002c5a:	e7fd      	b.n	8002c58 <UsageFault_Handler+0x4>

08002c5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002c6c:	2002      	movs	r0, #2
 8002c6e:	f000 fe73 	bl	8003958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002c7c:	4802      	ldr	r0, [pc, #8]	@ (8002c88 <DMA1_Channel4_IRQHandler+0x10>)
 8002c7e:	f000 fb75 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200000dc 	.word	0x200000dc

08002c8c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002c90:	4802      	ldr	r0, [pc, #8]	@ (8002c9c <DMA1_Channel5_IRQHandler+0x10>)
 8002c92:	f000 fb6b 	bl	800336c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000120 	.word	0x20000120

08002ca0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ca4:	4802      	ldr	r0, [pc, #8]	@ (8002cb0 <TIM1_UP_IRQHandler+0x10>)
 8002ca6:	f004 f8bd 	bl	8006e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000164 	.word	0x20000164

08002cb4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002cb8:	4802      	ldr	r0, [pc, #8]	@ (8002cc4 <TIM1_CC_IRQHandler+0x10>)
 8002cba:	f004 f8b3 	bl	8006e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000164 	.word	0x20000164

08002cc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ccc:	4802      	ldr	r0, [pc, #8]	@ (8002cd8 <TIM2_IRQHandler+0x10>)
 8002cce:	f004 f8a9 	bl	8006e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200001ac 	.word	0x200001ac

08002cdc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ce0:	4802      	ldr	r0, [pc, #8]	@ (8002cec <TIM4_IRQHandler+0x10>)
 8002ce2:	f004 f89f 	bl	8006e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000300 	.word	0x20000300

08002cf0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002cf4:	4802      	ldr	r0, [pc, #8]	@ (8002d00 <I2C2_EV_IRQHandler+0x10>)
 8002cf6:	f001 fd01 	bl	80046fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000088 	.word	0x20000088

08002d04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	e00a      	b.n	8002d2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d16:	f3af 8000 	nop.w
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	60ba      	str	r2, [r7, #8]
 8002d22:	b2ca      	uxtb	r2, r1
 8002d24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	dbf0      	blt.n	8002d16 <_read+0x12>
  }

  return len;
 8002d34:	687b      	ldr	r3, [r7, #4]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	e009      	b.n	8002d64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	60ba      	str	r2, [r7, #8]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	dbf1      	blt.n	8002d50 <_write+0x12>
  }
  return len;
 8002d6c:	687b      	ldr	r3, [r7, #4]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <_close>:

int _close(int file)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d9c:	605a      	str	r2, [r3, #4]
  return 0;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <_isatty>:

int _isatty(int file)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	60f8      	str	r0, [r7, #12]
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
	...

08002dd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de0:	4a14      	ldr	r2, [pc, #80]	@ (8002e34 <_sbrk+0x5c>)
 8002de2:	4b15      	ldr	r3, [pc, #84]	@ (8002e38 <_sbrk+0x60>)
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dec:	4b13      	ldr	r3, [pc, #76]	@ (8002e3c <_sbrk+0x64>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002df4:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <_sbrk+0x64>)
 8002df6:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <_sbrk+0x68>)
 8002df8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dfa:	4b10      	ldr	r3, [pc, #64]	@ (8002e3c <_sbrk+0x64>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d207      	bcs.n	8002e18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e08:	f008 f940 	bl	800b08c <__errno>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	220c      	movs	r2, #12
 8002e10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	e009      	b.n	8002e2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e18:	4b08      	ldr	r3, [pc, #32]	@ (8002e3c <_sbrk+0x64>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e1e:	4b07      	ldr	r3, [pc, #28]	@ (8002e3c <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	4a05      	ldr	r2, [pc, #20]	@ (8002e3c <_sbrk+0x64>)
 8002e28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20005000 	.word	0x20005000
 8002e38:	00000400 	.word	0x00000400
 8002e3c:	20000348 	.word	0x20000348
 8002e40:	20001e88 	.word	0x20001e88

08002e44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr

08002e50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e50:	f7ff fff8 	bl	8002e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e54:	480b      	ldr	r0, [pc, #44]	@ (8002e84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002e56:	490c      	ldr	r1, [pc, #48]	@ (8002e88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002e58:	4a0c      	ldr	r2, [pc, #48]	@ (8002e8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8002e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e5c:	e002      	b.n	8002e64 <LoopCopyDataInit>

08002e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e62:	3304      	adds	r3, #4

08002e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e68:	d3f9      	bcc.n	8002e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e6a:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002e6c:	4c09      	ldr	r4, [pc, #36]	@ (8002e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e70:	e001      	b.n	8002e76 <LoopFillZerobss>

08002e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e74:	3204      	adds	r2, #4

08002e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e78:	d3fb      	bcc.n	8002e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e7a:	f008 f90d 	bl	800b098 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e7e:	f7fe f8f7 	bl	8001070 <main>
  bx lr
 8002e82:	4770      	bx	lr
  ldr r0, =_sdata
 8002e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e88:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002e8c:	0800c40c 	.word	0x0800c40c
  ldr r2, =_sbss
 8002e90:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002e94:	20001e84 	.word	0x20001e84

08002e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e98:	e7fe      	b.n	8002e98 <ADC1_2_IRQHandler>
	...

08002e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ea0:	4b08      	ldr	r3, [pc, #32]	@ (8002ec4 <HAL_Init+0x28>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a07      	ldr	r2, [pc, #28]	@ (8002ec4 <HAL_Init+0x28>)
 8002ea6:	f043 0310 	orr.w	r3, r3, #16
 8002eaa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eac:	2003      	movs	r0, #3
 8002eae:	f000 f8f5 	bl	800309c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eb2:	200f      	movs	r0, #15
 8002eb4:	f7ff fe40 	bl	8002b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eb8:	f7ff fce6 	bl	8002888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40022000 	.word	0x40022000

08002ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ecc:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <HAL_IncTick+0x1c>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b05      	ldr	r3, [pc, #20]	@ (8002ee8 <HAL_IncTick+0x20>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	4a03      	ldr	r2, [pc, #12]	@ (8002ee8 <HAL_IncTick+0x20>)
 8002eda:	6013      	str	r3, [r2, #0]
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	20000008 	.word	0x20000008
 8002ee8:	2000034c 	.word	0x2000034c

08002eec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef0:	4b02      	ldr	r3, [pc, #8]	@ (8002efc <HAL_GetTick+0x10>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	2000034c 	.word	0x2000034c

08002f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f08:	f7ff fff0 	bl	8002eec <HAL_GetTick>
 8002f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d005      	beq.n	8002f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <HAL_Delay+0x44>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f26:	bf00      	nop
 8002f28:	f7ff ffe0 	bl	8002eec <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d8f7      	bhi.n	8002f28 <HAL_Delay+0x28>
  {
  }
}
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000008 	.word	0x20000008

08002f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f58:	4b0c      	ldr	r3, [pc, #48]	@ (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f64:	4013      	ands	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f7a:	4a04      	ldr	r2, [pc, #16]	@ (8002f8c <__NVIC_SetPriorityGrouping+0x44>)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	60d3      	str	r3, [r2, #12]
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f94:	4b04      	ldr	r3, [pc, #16]	@ (8002fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	0a1b      	lsrs	r3, r3, #8
 8002f9a:	f003 0307 	and.w	r3, r3, #7
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	db0b      	blt.n	8002fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	f003 021f 	and.w	r2, r3, #31
 8002fc4:	4906      	ldr	r1, [pc, #24]	@ (8002fe0 <__NVIC_EnableIRQ+0x34>)
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	2001      	movs	r0, #1
 8002fce:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	e000e100 	.word	0xe000e100

08002fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	4603      	mov	r3, r0
 8002fec:	6039      	str	r1, [r7, #0]
 8002fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	db0a      	blt.n	800300e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	490c      	ldr	r1, [pc, #48]	@ (8003030 <__NVIC_SetPriority+0x4c>)
 8002ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003002:	0112      	lsls	r2, r2, #4
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	440b      	add	r3, r1
 8003008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800300c:	e00a      	b.n	8003024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4908      	ldr	r1, [pc, #32]	@ (8003034 <__NVIC_SetPriority+0x50>)
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	f003 030f 	and.w	r3, r3, #15
 800301a:	3b04      	subs	r3, #4
 800301c:	0112      	lsls	r2, r2, #4
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	440b      	add	r3, r1
 8003022:	761a      	strb	r2, [r3, #24]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	bc80      	pop	{r7}
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000e100 	.word	0xe000e100
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	@ 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f1c3 0307 	rsb	r3, r3, #7
 8003052:	2b04      	cmp	r3, #4
 8003054:	bf28      	it	cs
 8003056:	2304      	movcs	r3, #4
 8003058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3304      	adds	r3, #4
 800305e:	2b06      	cmp	r3, #6
 8003060:	d902      	bls.n	8003068 <NVIC_EncodePriority+0x30>
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3b03      	subs	r3, #3
 8003066:	e000      	b.n	800306a <NVIC_EncodePriority+0x32>
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800306c:	f04f 32ff 	mov.w	r2, #4294967295
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43da      	mvns	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	401a      	ands	r2, r3
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003080:	f04f 31ff 	mov.w	r1, #4294967295
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	43d9      	mvns	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003090:	4313      	orrs	r3, r2
         );
}
 8003092:	4618      	mov	r0, r3
 8003094:	3724      	adds	r7, #36	@ 0x24
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff ff4f 	bl	8002f48 <__NVIC_SetPriorityGrouping>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b086      	sub	sp, #24
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030c4:	f7ff ff64 	bl	8002f90 <__NVIC_GetPriorityGrouping>
 80030c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	6978      	ldr	r0, [r7, #20]
 80030d0:	f7ff ffb2 	bl	8003038 <NVIC_EncodePriority>
 80030d4:	4602      	mov	r2, r0
 80030d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff81 	bl	8002fe4 <__NVIC_SetPriority>
}
 80030e2:	bf00      	nop
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	4603      	mov	r3, r0
 80030f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff57 	bl	8002fac <__NVIC_EnableIRQ>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e043      	b.n	80031a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	4b22      	ldr	r3, [pc, #136]	@ (80031b0 <HAL_DMA_Init+0xa8>)
 8003126:	4413      	add	r3, r2
 8003128:	4a22      	ldr	r2, [pc, #136]	@ (80031b4 <HAL_DMA_Init+0xac>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	009a      	lsls	r2, r3, #2
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1f      	ldr	r2, [pc, #124]	@ (80031b8 <HAL_DMA_Init+0xb0>)
 800313a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003152:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003156:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003160:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003178:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	bffdfff8 	.word	0xbffdfff8
 80031b4:	cccccccd 	.word	0xcccccccd
 80031b8:	40020000 	.word	0x40020000

080031bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_DMA_Start_IT+0x20>
 80031d8:	2302      	movs	r3, #2
 80031da:	e04b      	b.n	8003274 <HAL_DMA_Start_IT+0xb8>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d13a      	bne.n	8003266 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2202      	movs	r2, #2
 80031f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f9bc 	bl	8003592 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 020e 	orr.w	r2, r2, #14
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e00f      	b.n	8003254 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0204 	bic.w	r2, r2, #4
 8003242:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 020a 	orr.w	r2, r2, #10
 8003252:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e005      	b.n	8003272 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800326e:	2302      	movs	r3, #2
 8003270:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003272:	7dfb      	ldrb	r3, [r7, #23]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d005      	beq.n	80032a0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2204      	movs	r2, #4
 8003298:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	73fb      	strb	r3, [r7, #15]
 800329e:	e051      	b.n	8003344 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 020e 	bic.w	r2, r2, #14
 80032ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a22      	ldr	r2, [pc, #136]	@ (8003350 <HAL_DMA_Abort_IT+0xd4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d029      	beq.n	800331e <HAL_DMA_Abort_IT+0xa2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a21      	ldr	r2, [pc, #132]	@ (8003354 <HAL_DMA_Abort_IT+0xd8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <HAL_DMA_Abort_IT+0x9e>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003358 <HAL_DMA_Abort_IT+0xdc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d01a      	beq.n	8003314 <HAL_DMA_Abort_IT+0x98>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1e      	ldr	r2, [pc, #120]	@ (800335c <HAL_DMA_Abort_IT+0xe0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d012      	beq.n	800330e <HAL_DMA_Abort_IT+0x92>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003360 <HAL_DMA_Abort_IT+0xe4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00a      	beq.n	8003308 <HAL_DMA_Abort_IT+0x8c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003364 <HAL_DMA_Abort_IT+0xe8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d102      	bne.n	8003302 <HAL_DMA_Abort_IT+0x86>
 80032fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003300:	e00e      	b.n	8003320 <HAL_DMA_Abort_IT+0xa4>
 8003302:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003306:	e00b      	b.n	8003320 <HAL_DMA_Abort_IT+0xa4>
 8003308:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800330c:	e008      	b.n	8003320 <HAL_DMA_Abort_IT+0xa4>
 800330e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003312:	e005      	b.n	8003320 <HAL_DMA_Abort_IT+0xa4>
 8003314:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003318:	e002      	b.n	8003320 <HAL_DMA_Abort_IT+0xa4>
 800331a:	2310      	movs	r3, #16
 800331c:	e000      	b.n	8003320 <HAL_DMA_Abort_IT+0xa4>
 800331e:	2301      	movs	r3, #1
 8003320:	4a11      	ldr	r2, [pc, #68]	@ (8003368 <HAL_DMA_Abort_IT+0xec>)
 8003322:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
    } 
  }
  return status;
 8003344:	7bfb      	ldrb	r3, [r7, #15]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40020008 	.word	0x40020008
 8003354:	4002001c 	.word	0x4002001c
 8003358:	40020030 	.word	0x40020030
 800335c:	40020044 	.word	0x40020044
 8003360:	40020058 	.word	0x40020058
 8003364:	4002006c 	.word	0x4002006c
 8003368:	40020000 	.word	0x40020000

0800336c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	2204      	movs	r2, #4
 800338a:	409a      	lsls	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d04f      	beq.n	8003434 <HAL_DMA_IRQHandler+0xc8>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d04a      	beq.n	8003434 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0204 	bic.w	r2, r2, #4
 80033ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a66      	ldr	r2, [pc, #408]	@ (800355c <HAL_DMA_IRQHandler+0x1f0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d029      	beq.n	800341a <HAL_DMA_IRQHandler+0xae>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a65      	ldr	r2, [pc, #404]	@ (8003560 <HAL_DMA_IRQHandler+0x1f4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <HAL_DMA_IRQHandler+0xaa>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a63      	ldr	r2, [pc, #396]	@ (8003564 <HAL_DMA_IRQHandler+0x1f8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01a      	beq.n	8003410 <HAL_DMA_IRQHandler+0xa4>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a62      	ldr	r2, [pc, #392]	@ (8003568 <HAL_DMA_IRQHandler+0x1fc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d012      	beq.n	800340a <HAL_DMA_IRQHandler+0x9e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a60      	ldr	r2, [pc, #384]	@ (800356c <HAL_DMA_IRQHandler+0x200>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00a      	beq.n	8003404 <HAL_DMA_IRQHandler+0x98>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a5f      	ldr	r2, [pc, #380]	@ (8003570 <HAL_DMA_IRQHandler+0x204>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d102      	bne.n	80033fe <HAL_DMA_IRQHandler+0x92>
 80033f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033fc:	e00e      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 80033fe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003402:	e00b      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 8003404:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003408:	e008      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 800340a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800340e:	e005      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 8003410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003414:	e002      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 8003416:	2340      	movs	r3, #64	@ 0x40
 8003418:	e000      	b.n	800341c <HAL_DMA_IRQHandler+0xb0>
 800341a:	2304      	movs	r3, #4
 800341c:	4a55      	ldr	r2, [pc, #340]	@ (8003574 <HAL_DMA_IRQHandler+0x208>)
 800341e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8094 	beq.w	8003552 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003432:	e08e      	b.n	8003552 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	2202      	movs	r2, #2
 800343a:	409a      	lsls	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d056      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x186>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d051      	beq.n	80034f2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10b      	bne.n	8003474 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 020a 	bic.w	r2, r2, #10
 800346a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a38      	ldr	r2, [pc, #224]	@ (800355c <HAL_DMA_IRQHandler+0x1f0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d029      	beq.n	80034d2 <HAL_DMA_IRQHandler+0x166>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a37      	ldr	r2, [pc, #220]	@ (8003560 <HAL_DMA_IRQHandler+0x1f4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d022      	beq.n	80034ce <HAL_DMA_IRQHandler+0x162>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a35      	ldr	r2, [pc, #212]	@ (8003564 <HAL_DMA_IRQHandler+0x1f8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01a      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x15c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a34      	ldr	r2, [pc, #208]	@ (8003568 <HAL_DMA_IRQHandler+0x1fc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d012      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x156>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a32      	ldr	r2, [pc, #200]	@ (800356c <HAL_DMA_IRQHandler+0x200>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00a      	beq.n	80034bc <HAL_DMA_IRQHandler+0x150>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a31      	ldr	r2, [pc, #196]	@ (8003570 <HAL_DMA_IRQHandler+0x204>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d102      	bne.n	80034b6 <HAL_DMA_IRQHandler+0x14a>
 80034b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80034b4:	e00e      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034ba:	e00b      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034c0:	e008      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034c6:	e005      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034cc:	e002      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034ce:	2320      	movs	r3, #32
 80034d0:	e000      	b.n	80034d4 <HAL_DMA_IRQHandler+0x168>
 80034d2:	2302      	movs	r3, #2
 80034d4:	4a27      	ldr	r2, [pc, #156]	@ (8003574 <HAL_DMA_IRQHandler+0x208>)
 80034d6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d034      	beq.n	8003552 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034f0:	e02f      	b.n	8003552 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	2208      	movs	r2, #8
 80034f8:	409a      	lsls	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4013      	ands	r3, r2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d028      	beq.n	8003554 <HAL_DMA_IRQHandler+0x1e8>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d023      	beq.n	8003554 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 020e 	bic.w	r2, r2, #14
 800351a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003524:	2101      	movs	r1, #1
 8003526:	fa01 f202 	lsl.w	r2, r1, r2
 800352a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	2b00      	cmp	r3, #0
 8003548:	d004      	beq.n	8003554 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	4798      	blx	r3
    }
  }
  return;
 8003552:	bf00      	nop
 8003554:	bf00      	nop
}
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40020008 	.word	0x40020008
 8003560:	4002001c 	.word	0x4002001c
 8003564:	40020030 	.word	0x40020030
 8003568:	40020044 	.word	0x40020044
 800356c:	40020058 	.word	0x40020058
 8003570:	4002006c 	.word	0x4002006c
 8003574:	40020000 	.word	0x40020000

08003578 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003586:	b2db      	uxtb	r3, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr

08003592 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	2101      	movs	r1, #1
 80035aa:	fa01 f202 	lsl.w	r2, r1, r2
 80035ae:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d108      	bne.n	80035d2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80035d0:	e007      	b.n	80035e2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	60da      	str	r2, [r3, #12]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr

080035ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b08b      	sub	sp, #44	@ 0x2c
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035f6:	2300      	movs	r3, #0
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035fe:	e169      	b.n	80038d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003600:	2201      	movs	r2, #1
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	4013      	ands	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	429a      	cmp	r2, r3
 800361a:	f040 8158 	bne.w	80038ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4a9a      	ldr	r2, [pc, #616]	@ (800388c <HAL_GPIO_Init+0x2a0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d05e      	beq.n	80036e6 <HAL_GPIO_Init+0xfa>
 8003628:	4a98      	ldr	r2, [pc, #608]	@ (800388c <HAL_GPIO_Init+0x2a0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d875      	bhi.n	800371a <HAL_GPIO_Init+0x12e>
 800362e:	4a98      	ldr	r2, [pc, #608]	@ (8003890 <HAL_GPIO_Init+0x2a4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d058      	beq.n	80036e6 <HAL_GPIO_Init+0xfa>
 8003634:	4a96      	ldr	r2, [pc, #600]	@ (8003890 <HAL_GPIO_Init+0x2a4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d86f      	bhi.n	800371a <HAL_GPIO_Init+0x12e>
 800363a:	4a96      	ldr	r2, [pc, #600]	@ (8003894 <HAL_GPIO_Init+0x2a8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d052      	beq.n	80036e6 <HAL_GPIO_Init+0xfa>
 8003640:	4a94      	ldr	r2, [pc, #592]	@ (8003894 <HAL_GPIO_Init+0x2a8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d869      	bhi.n	800371a <HAL_GPIO_Init+0x12e>
 8003646:	4a94      	ldr	r2, [pc, #592]	@ (8003898 <HAL_GPIO_Init+0x2ac>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d04c      	beq.n	80036e6 <HAL_GPIO_Init+0xfa>
 800364c:	4a92      	ldr	r2, [pc, #584]	@ (8003898 <HAL_GPIO_Init+0x2ac>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d863      	bhi.n	800371a <HAL_GPIO_Init+0x12e>
 8003652:	4a92      	ldr	r2, [pc, #584]	@ (800389c <HAL_GPIO_Init+0x2b0>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d046      	beq.n	80036e6 <HAL_GPIO_Init+0xfa>
 8003658:	4a90      	ldr	r2, [pc, #576]	@ (800389c <HAL_GPIO_Init+0x2b0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d85d      	bhi.n	800371a <HAL_GPIO_Init+0x12e>
 800365e:	2b12      	cmp	r3, #18
 8003660:	d82a      	bhi.n	80036b8 <HAL_GPIO_Init+0xcc>
 8003662:	2b12      	cmp	r3, #18
 8003664:	d859      	bhi.n	800371a <HAL_GPIO_Init+0x12e>
 8003666:	a201      	add	r2, pc, #4	@ (adr r2, 800366c <HAL_GPIO_Init+0x80>)
 8003668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366c:	080036e7 	.word	0x080036e7
 8003670:	080036c1 	.word	0x080036c1
 8003674:	080036d3 	.word	0x080036d3
 8003678:	08003715 	.word	0x08003715
 800367c:	0800371b 	.word	0x0800371b
 8003680:	0800371b 	.word	0x0800371b
 8003684:	0800371b 	.word	0x0800371b
 8003688:	0800371b 	.word	0x0800371b
 800368c:	0800371b 	.word	0x0800371b
 8003690:	0800371b 	.word	0x0800371b
 8003694:	0800371b 	.word	0x0800371b
 8003698:	0800371b 	.word	0x0800371b
 800369c:	0800371b 	.word	0x0800371b
 80036a0:	0800371b 	.word	0x0800371b
 80036a4:	0800371b 	.word	0x0800371b
 80036a8:	0800371b 	.word	0x0800371b
 80036ac:	0800371b 	.word	0x0800371b
 80036b0:	080036c9 	.word	0x080036c9
 80036b4:	080036dd 	.word	0x080036dd
 80036b8:	4a79      	ldr	r2, [pc, #484]	@ (80038a0 <HAL_GPIO_Init+0x2b4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036be:	e02c      	b.n	800371a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	623b      	str	r3, [r7, #32]
          break;
 80036c6:	e029      	b.n	800371c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	3304      	adds	r3, #4
 80036ce:	623b      	str	r3, [r7, #32]
          break;
 80036d0:	e024      	b.n	800371c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	3308      	adds	r3, #8
 80036d8:	623b      	str	r3, [r7, #32]
          break;
 80036da:	e01f      	b.n	800371c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	330c      	adds	r3, #12
 80036e2:	623b      	str	r3, [r7, #32]
          break;
 80036e4:	e01a      	b.n	800371c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80036ee:	2304      	movs	r3, #4
 80036f0:	623b      	str	r3, [r7, #32]
          break;
 80036f2:	e013      	b.n	800371c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80036fc:	2308      	movs	r3, #8
 80036fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	611a      	str	r2, [r3, #16]
          break;
 8003706:	e009      	b.n	800371c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003708:	2308      	movs	r3, #8
 800370a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69fa      	ldr	r2, [r7, #28]
 8003710:	615a      	str	r2, [r3, #20]
          break;
 8003712:	e003      	b.n	800371c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003714:	2300      	movs	r3, #0
 8003716:	623b      	str	r3, [r7, #32]
          break;
 8003718:	e000      	b.n	800371c <HAL_GPIO_Init+0x130>
          break;
 800371a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2bff      	cmp	r3, #255	@ 0xff
 8003720:	d801      	bhi.n	8003726 <HAL_GPIO_Init+0x13a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	e001      	b.n	800372a <HAL_GPIO_Init+0x13e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3304      	adds	r3, #4
 800372a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2bff      	cmp	r3, #255	@ 0xff
 8003730:	d802      	bhi.n	8003738 <HAL_GPIO_Init+0x14c>
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	e002      	b.n	800373e <HAL_GPIO_Init+0x152>
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	3b08      	subs	r3, #8
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	210f      	movs	r1, #15
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	401a      	ands	r2, r3
 8003750:	6a39      	ldr	r1, [r7, #32]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	431a      	orrs	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80b1 	beq.w	80038ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800376c:	4b4d      	ldr	r3, [pc, #308]	@ (80038a4 <HAL_GPIO_Init+0x2b8>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	4a4c      	ldr	r2, [pc, #304]	@ (80038a4 <HAL_GPIO_Init+0x2b8>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	6193      	str	r3, [r2, #24]
 8003778:	4b4a      	ldr	r3, [pc, #296]	@ (80038a4 <HAL_GPIO_Init+0x2b8>)
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003784:	4a48      	ldr	r2, [pc, #288]	@ (80038a8 <HAL_GPIO_Init+0x2bc>)
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	089b      	lsrs	r3, r3, #2
 800378a:	3302      	adds	r3, #2
 800378c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003790:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	220f      	movs	r2, #15
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43db      	mvns	r3, r3
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	4013      	ands	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a40      	ldr	r2, [pc, #256]	@ (80038ac <HAL_GPIO_Init+0x2c0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d013      	beq.n	80037d8 <HAL_GPIO_Init+0x1ec>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a3f      	ldr	r2, [pc, #252]	@ (80038b0 <HAL_GPIO_Init+0x2c4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00d      	beq.n	80037d4 <HAL_GPIO_Init+0x1e8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a3e      	ldr	r2, [pc, #248]	@ (80038b4 <HAL_GPIO_Init+0x2c8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d007      	beq.n	80037d0 <HAL_GPIO_Init+0x1e4>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a3d      	ldr	r2, [pc, #244]	@ (80038b8 <HAL_GPIO_Init+0x2cc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d101      	bne.n	80037cc <HAL_GPIO_Init+0x1e0>
 80037c8:	2303      	movs	r3, #3
 80037ca:	e006      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037cc:	2304      	movs	r3, #4
 80037ce:	e004      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e002      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037d8:	2300      	movs	r3, #0
 80037da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037dc:	f002 0203 	and.w	r2, r2, #3
 80037e0:	0092      	lsls	r2, r2, #2
 80037e2:	4093      	lsls	r3, r2
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80037ea:	492f      	ldr	r1, [pc, #188]	@ (80038a8 <HAL_GPIO_Init+0x2bc>)
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	3302      	adds	r3, #2
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d006      	beq.n	8003812 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003804:	4b2d      	ldr	r3, [pc, #180]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	492c      	ldr	r1, [pc, #176]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	4313      	orrs	r3, r2
 800380e:	608b      	str	r3, [r1, #8]
 8003810:	e006      	b.n	8003820 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003812:	4b2a      	ldr	r3, [pc, #168]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	43db      	mvns	r3, r3
 800381a:	4928      	ldr	r1, [pc, #160]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 800381c:	4013      	ands	r3, r2
 800381e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d006      	beq.n	800383a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800382c:	4b23      	ldr	r3, [pc, #140]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	4922      	ldr	r1, [pc, #136]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	4313      	orrs	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
 8003838:	e006      	b.n	8003848 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800383a:	4b20      	ldr	r3, [pc, #128]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	43db      	mvns	r3, r3
 8003842:	491e      	ldr	r1, [pc, #120]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 8003844:	4013      	ands	r3, r2
 8003846:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d006      	beq.n	8003862 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003854:	4b19      	ldr	r3, [pc, #100]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	4918      	ldr	r1, [pc, #96]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
 8003860:	e006      	b.n	8003870 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003862:	4b16      	ldr	r3, [pc, #88]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	43db      	mvns	r3, r3
 800386a:	4914      	ldr	r1, [pc, #80]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 800386c:	4013      	ands	r3, r2
 800386e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d021      	beq.n	80038c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800387c:	4b0f      	ldr	r3, [pc, #60]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	490e      	ldr	r1, [pc, #56]	@ (80038bc <HAL_GPIO_Init+0x2d0>)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	600b      	str	r3, [r1, #0]
 8003888:	e021      	b.n	80038ce <HAL_GPIO_Init+0x2e2>
 800388a:	bf00      	nop
 800388c:	10320000 	.word	0x10320000
 8003890:	10310000 	.word	0x10310000
 8003894:	10220000 	.word	0x10220000
 8003898:	10210000 	.word	0x10210000
 800389c:	10120000 	.word	0x10120000
 80038a0:	10110000 	.word	0x10110000
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40010000 	.word	0x40010000
 80038ac:	40010800 	.word	0x40010800
 80038b0:	40010c00 	.word	0x40010c00
 80038b4:	40011000 	.word	0x40011000
 80038b8:	40011400 	.word	0x40011400
 80038bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038c0:	4b0b      	ldr	r3, [pc, #44]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	43db      	mvns	r3, r3
 80038c8:	4909      	ldr	r1, [pc, #36]	@ (80038f0 <HAL_GPIO_Init+0x304>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	3301      	adds	r3, #1
 80038d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	fa22 f303 	lsr.w	r3, r2, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f47f ae8e 	bne.w	8003600 <HAL_GPIO_Init+0x14>
  }
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	372c      	adds	r7, #44	@ 0x2c
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr
 80038f0:	40010400 	.word	0x40010400

080038f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	807b      	strh	r3, [r7, #2]
 8003900:	4613      	mov	r3, r2
 8003902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003904:	787b      	ldrb	r3, [r7, #1]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003910:	e003      	b.n	800391a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003912:	887b      	ldrh	r3, [r7, #2]
 8003914:	041a      	lsls	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr

08003924 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003936:	887a      	ldrh	r2, [r7, #2]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4013      	ands	r3, r2
 800393c:	041a      	lsls	r2, r3, #16
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	43d9      	mvns	r1, r3
 8003942:	887b      	ldrh	r3, [r7, #2]
 8003944:	400b      	ands	r3, r1
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	611a      	str	r2, [r3, #16]
}
 800394c:	bf00      	nop
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
	...

08003958 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003962:	4b08      	ldr	r3, [pc, #32]	@ (8003984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d006      	beq.n	800397c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800396e:	4a05      	ldr	r2, [pc, #20]	@ (8003984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003970:	88fb      	ldrh	r3, [r7, #6]
 8003972:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fd fec8 	bl	800170c <HAL_GPIO_EXTI_Callback>
  }
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40010400 	.word	0x40010400

08003988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e12b      	b.n	8003bf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fe ffa2 	bl	80028f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2224      	movs	r2, #36	@ 0x24
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039ec:	f002 ffb2 	bl	8006954 <HAL_RCC_GetPCLK1Freq>
 80039f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4a81      	ldr	r2, [pc, #516]	@ (8003bfc <HAL_I2C_Init+0x274>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d807      	bhi.n	8003a0c <HAL_I2C_Init+0x84>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4a80      	ldr	r2, [pc, #512]	@ (8003c00 <HAL_I2C_Init+0x278>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	bf94      	ite	ls
 8003a04:	2301      	movls	r3, #1
 8003a06:	2300      	movhi	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	e006      	b.n	8003a1a <HAL_I2C_Init+0x92>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4a7d      	ldr	r2, [pc, #500]	@ (8003c04 <HAL_I2C_Init+0x27c>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	bf94      	ite	ls
 8003a14:	2301      	movls	r3, #1
 8003a16:	2300      	movhi	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e0e7      	b.n	8003bf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a78      	ldr	r2, [pc, #480]	@ (8003c08 <HAL_I2C_Init+0x280>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	0c9b      	lsrs	r3, r3, #18
 8003a2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a6a      	ldr	r2, [pc, #424]	@ (8003bfc <HAL_I2C_Init+0x274>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d802      	bhi.n	8003a5c <HAL_I2C_Init+0xd4>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	e009      	b.n	8003a70 <HAL_I2C_Init+0xe8>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	4a69      	ldr	r2, [pc, #420]	@ (8003c0c <HAL_I2C_Init+0x284>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	099b      	lsrs	r3, r3, #6
 8003a6e:	3301      	adds	r3, #1
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	495c      	ldr	r1, [pc, #368]	@ (8003bfc <HAL_I2C_Init+0x274>)
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	d819      	bhi.n	8003ac4 <HAL_I2C_Init+0x13c>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1e59      	subs	r1, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a9e:	1c59      	adds	r1, r3, #1
 8003aa0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003aa4:	400b      	ands	r3, r1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_I2C_Init+0x138>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	1e59      	subs	r1, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003abe:	e051      	b.n	8003b64 <HAL_I2C_Init+0x1dc>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	e04f      	b.n	8003b64 <HAL_I2C_Init+0x1dc>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d111      	bne.n	8003af0 <HAL_I2C_Init+0x168>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1e58      	subs	r0, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6859      	ldr	r1, [r3, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	440b      	add	r3, r1
 8003ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf0c      	ite	eq
 8003ae8:	2301      	moveq	r3, #1
 8003aea:	2300      	movne	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e012      	b.n	8003b16 <HAL_I2C_Init+0x18e>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1e58      	subs	r0, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6859      	ldr	r1, [r3, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	0099      	lsls	r1, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b06:	3301      	adds	r3, #1
 8003b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf0c      	ite	eq
 8003b10:	2301      	moveq	r3, #1
 8003b12:	2300      	movne	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Init+0x196>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e022      	b.n	8003b64 <HAL_I2C_Init+0x1dc>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10e      	bne.n	8003b44 <HAL_I2C_Init+0x1bc>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1e58      	subs	r0, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	440b      	add	r3, r1
 8003b34:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b38:	3301      	adds	r3, #1
 8003b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b42:	e00f      	b.n	8003b64 <HAL_I2C_Init+0x1dc>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1e58      	subs	r0, r3, #1
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6859      	ldr	r1, [r3, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	0099      	lsls	r1, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	6809      	ldr	r1, [r1, #0]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69da      	ldr	r2, [r3, #28]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6911      	ldr	r1, [r2, #16]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68d2      	ldr	r2, [r2, #12]
 8003b9e:	4311      	orrs	r1, r2
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695a      	ldr	r2, [r3, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	000186a0 	.word	0x000186a0
 8003c00:	001e847f 	.word	0x001e847f
 8003c04:	003d08ff 	.word	0x003d08ff
 8003c08:	431bde83 	.word	0x431bde83
 8003c0c:	10624dd3 	.word	0x10624dd3

08003c10 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c22:	2b80      	cmp	r3, #128	@ 0x80
 8003c24:	d103      	bne.n	8003c2e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	611a      	str	r2, [r3, #16]
  }
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	461a      	mov	r2, r3
 8003c44:	460b      	mov	r3, r1
 8003c46:	817b      	strh	r3, [r7, #10]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	f040 8101 	bne.w	8003e60 <HAL_I2C_Master_Transmit_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c5e:	4b83      	ldr	r3, [pc, #524]	@ (8003e6c <HAL_I2C_Master_Transmit_DMA+0x234>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	08db      	lsrs	r3, r3, #3
 8003c64:	4a82      	ldr	r2, [pc, #520]	@ (8003e70 <HAL_I2C_Master_Transmit_DMA+0x238>)
 8003c66:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6a:	0a1a      	lsrs	r2, r3, #8
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009a      	lsls	r2, r3, #2
 8003c74:	4413      	add	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d112      	bne.n	8003caa <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e0db      	b.n	8003e62 <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d0df      	beq.n	8003c78 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_I2C_Master_Transmit_DMA+0x8e>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e0cd      	b.n	8003e62 <HAL_I2C_Master_Transmit_DMA+0x22a>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d007      	beq.n	8003cec <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2221      	movs	r2, #33	@ 0x21
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2210      	movs	r2, #16
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	893a      	ldrh	r2, [r7, #8]
 8003d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4a52      	ldr	r2, [pc, #328]	@ (8003e74 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8003d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003d2e:	897a      	ldrh	r2, [r7, #10]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d073      	beq.n	8003e24 <HAL_I2C_Master_Transmit_DMA+0x1ec>
    {
      if (hi2c->hdmatx != NULL)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d022      	beq.n	8003d8a <HAL_I2C_Master_Transmit_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d48:	4a4b      	ldr	r2, [pc, #300]	@ (8003e78 <HAL_I2C_Master_Transmit_DMA+0x240>)
 8003d4a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d50:	4a4a      	ldr	r2, [pc, #296]	@ (8003e7c <HAL_I2C_Master_Transmit_DMA+0x244>)
 8003d52:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d58:	2200      	movs	r2, #0
 8003d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d60:	2200      	movs	r2, #0
 8003d62:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3310      	adds	r3, #16
 8003d74:	461a      	mov	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7a:	f7ff fa1f 	bl	80031bc <HAL_DMA_Start_IT>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d139      	bne.n	8003dfc <HAL_I2C_Master_Transmit_DMA+0x1c4>
 8003d88:	e013      	b.n	8003db2 <HAL_I2C_Master_Transmit_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e057      	b.n	8003e62 <HAL_I2C_Master_Transmit_DMA+0x22a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003dc8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dd8:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003de8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	e02f      	b.n	8003e5c <HAL_I2C_Master_Transmit_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	f043 0210 	orr.w	r2, r3, #16
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e01e      	b.n	8003e62 <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e32:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e42:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8003e5a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <HAL_I2C_Master_Transmit_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000000 	.word	0x20000000
 8003e70:	14f8b589 	.word	0x14f8b589
 8003e74:	ffff0000 	.word	0xffff0000
 8003e78:	08005cb9 	.word	0x08005cb9
 8003e7c:	08005e77 	.word	0x08005e77

08003e80 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08a      	sub	sp, #40	@ 0x28
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	603b      	str	r3, [r7, #0]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003e90:	f7ff f82c 	bl	8002eec <HAL_GetTick>
 8003e94:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b20      	cmp	r3, #32
 8003ea4:	f040 8111 	bne.w	80040ca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	2319      	movs	r3, #25
 8003eae:	2201      	movs	r2, #1
 8003eb0:	4988      	ldr	r1, [pc, #544]	@ (80040d4 <HAL_I2C_IsDeviceReady+0x254>)
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f002 f8be 	bl	8006034 <I2C_WaitOnFlagUntilTimeout>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d001      	beq.n	8003ec2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e104      	b.n	80040cc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_I2C_IsDeviceReady+0x50>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e0fd      	b.n	80040cc <HAL_I2C_IsDeviceReady+0x24c>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d007      	beq.n	8003ef6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2224      	movs	r2, #36	@ 0x24
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4a70      	ldr	r2, [pc, #448]	@ (80040d8 <HAL_I2C_IsDeviceReady+0x258>)
 8003f18:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f28:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f002 f87c 	bl	8006034 <I2C_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f50:	d103      	bne.n	8003f5a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f58:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e0b6      	b.n	80040cc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f5e:	897b      	ldrh	r3, [r7, #10]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f6c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f6e:	f7fe ffbd 	bl	8002eec <HAL_GetTick>
 8003f72:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	bf0c      	ite	eq
 8003f82:	2301      	moveq	r3, #1
 8003f84:	2300      	movne	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f98:	bf0c      	ite	eq
 8003f9a:	2301      	moveq	r3, #1
 8003f9c:	2300      	movne	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fa2:	e025      	b.n	8003ff0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fa4:	f7fe ffa2 	bl	8002eec <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d302      	bcc.n	8003fba <HAL_I2C_IsDeviceReady+0x13a>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d103      	bne.n	8003fc2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	22a0      	movs	r2, #160	@ 0xa0
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	bf0c      	ite	eq
 8003fd0:	2301      	moveq	r3, #1
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ffa:	d005      	beq.n	8004008 <HAL_I2C_IsDeviceReady+0x188>
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <HAL_I2C_IsDeviceReady+0x188>
 8004002:	7dbb      	ldrb	r3, [r7, #22]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0cd      	beq.n	8003fa4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d129      	bne.n	8004072 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800402c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402e:	2300      	movs	r3, #0
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2319      	movs	r3, #25
 800404a:	2201      	movs	r2, #1
 800404c:	4921      	ldr	r1, [pc, #132]	@ (80040d4 <HAL_I2C_IsDeviceReady+0x254>)
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f001 fff0 	bl	8006034 <I2C_WaitOnFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e036      	b.n	80040cc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	e02c      	b.n	80040cc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004080:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800408a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2319      	movs	r3, #25
 8004092:	2201      	movs	r2, #1
 8004094:	490f      	ldr	r1, [pc, #60]	@ (80040d4 <HAL_I2C_IsDeviceReady+0x254>)
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f001 ffcc 	bl	8006034 <I2C_WaitOnFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e012      	b.n	80040cc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	3301      	adds	r3, #1
 80040aa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	f4ff af32 	bcc.w	8003f1a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
  }
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3720      	adds	r7, #32
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	00100002 	.word	0x00100002
 80040d8:	ffff0000 	.word	0xffff0000

080040dc <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	461a      	mov	r2, r3
 80040e8:	460b      	mov	r3, r1
 80040ea:	817b      	strh	r3, [r7, #10]
 80040ec:	4613      	mov	r3, r2
 80040ee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b20      	cmp	r3, #32
 8004102:	f040 813c 	bne.w	800437e <HAL_I2C_Master_Seq_Transmit_DMA+0x2a2>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004114:	d005      	beq.n	8004122 <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 8004116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004118:	2b08      	cmp	r3, #8
 800411a:	d002      	beq.n	8004122 <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800411c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411e:	2b01      	cmp	r3, #1
 8004120:	d12c      	bne.n	800417c <HAL_I2C_Master_Seq_Transmit_DMA+0xa0>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004122:	4b99      	ldr	r3, [pc, #612]	@ (8004388 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	08db      	lsrs	r3, r3, #3
 8004128:	4a98      	ldr	r2, [pc, #608]	@ (800438c <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	0a1a      	lsrs	r2, r3, #8
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009a      	lsls	r2, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	3b01      	subs	r3, #1
 8004140:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d112      	bne.n	800416e <HAL_I2C_Master_Seq_Transmit_DMA+0x92>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004162:	f043 0220 	orr.w	r2, r3, #32
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 800416a:	2302      	movs	r3, #2
 800416c:	e108      	b.n	8004380 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b02      	cmp	r3, #2
 800417a:	d0df      	beq.n	800413c <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_I2C_Master_Seq_Transmit_DMA+0xae>
 8004186:	2302      	movs	r3, #2
 8004188:	e0fa      	b.n	8004380 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b01      	cmp	r3, #1
 800419e:	d007      	beq.n	80041b0 <HAL_I2C_Master_Seq_Transmit_DMA+0xd4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f042 0201 	orr.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2221      	movs	r2, #33	@ 0x21
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2210      	movs	r2, #16
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	893a      	ldrh	r2, [r7, #8]
 80041e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80041f2:	897a      	ldrh	r2, [r7, #10]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fc:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004202:	2b00      	cmp	r3, #0
 8004204:	f000 808d 	beq.w	8004322 <HAL_I2C_Master_Seq_Transmit_DMA+0x246>
    {
      if (hi2c->hdmatx != NULL)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420c:	2b00      	cmp	r3, #0
 800420e:	d022      	beq.n	8004256 <HAL_I2C_Master_Seq_Transmit_DMA+0x17a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004214:	4a5e      	ldr	r2, [pc, #376]	@ (8004390 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421c:	4a5d      	ldr	r2, [pc, #372]	@ (8004394 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004224:	2200      	movs	r2, #0
 8004226:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800422c:	2200      	movs	r2, #0
 800422e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	4619      	mov	r1, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3310      	adds	r3, #16
 8004240:	461a      	mov	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004246:	f7fe ffb9 	bl	80031bc <HAL_DMA_Start_IT>
 800424a:	4603      	mov	r3, r0
 800424c:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800424e:	7ffb      	ldrb	r3, [r7, #31]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d152      	bne.n	80042fa <HAL_I2C_Master_Seq_Transmit_DMA+0x21e>
 8004254:	e013      	b.n	800427e <HAL_I2C_Master_Seq_Transmit_DMA+0x1a2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e080      	b.n	8004380 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800428c:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b11      	cmp	r3, #17
 8004292:	d10c      	bne.n	80042ae <HAL_I2C_Master_Seq_Transmit_DMA+0x1d2>
 8004294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004296:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800429a:	d003      	beq.n	80042a4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1c8>
 800429c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80042a2:	d101      	bne.n	80042a8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1cc>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <HAL_I2C_Master_Seq_Transmit_DMA+0x1ce>
 80042a8:	2300      	movs	r3, #0
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d107      	bne.n	80042be <HAL_I2C_Master_Seq_Transmit_DMA+0x1e2>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042bc:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 80042c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d005      	beq.n	80042d8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 80042cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ce:	2b20      	cmp	r3, #32
 80042d0:	d002      	beq.n	80042d8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 80042d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d107      	bne.n	80042e8 <HAL_I2C_Master_Seq_Transmit_DMA+0x20c>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042e6:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80042f6:	605a      	str	r2, [r3, #4]
 80042f8:	e03f      	b.n	800437a <HAL_I2C_Master_Seq_Transmit_DMA+0x29e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430e:	f043 0210 	orr.w	r2, r3, #16
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e02e      	b.n	8004380 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004330:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b11      	cmp	r3, #17
 8004336:	d10c      	bne.n	8004352 <HAL_I2C_Master_Seq_Transmit_DMA+0x276>
 8004338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800433e:	d003      	beq.n	8004348 <HAL_I2C_Master_Seq_Transmit_DMA+0x26c>
 8004340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004342:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004346:	d101      	bne.n	800434c <HAL_I2C_Master_Seq_Transmit_DMA+0x270>
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <HAL_I2C_Master_Seq_Transmit_DMA+0x272>
 800434c:	2300      	movs	r3, #0
 800434e:	2b01      	cmp	r3, #1
 8004350:	d107      	bne.n	8004362 <HAL_I2C_Master_Seq_Transmit_DMA+0x286>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004360:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004378:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3720      	adds	r7, #32
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000000 	.word	0x20000000
 800438c:	14f8b589 	.word	0x14f8b589
 8004390:	08005cb9 	.word	0x08005cb9
 8004394:	08005e77 	.word	0x08005e77

08004398 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	461a      	mov	r2, r3
 80043a4:	460b      	mov	r3, r1
 80043a6:	817b      	strh	r3, [r7, #10]
 80043a8:	4613      	mov	r3, r2
 80043aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043b4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80043b8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	f040 8195 	bne.w	80046f2 <HAL_I2C_Master_Seq_Receive_DMA+0x35a>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043d6:	d005      	beq.n	80043e4 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 80043d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d002      	beq.n	80043e4 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 80043de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d12c      	bne.n	800443e <HAL_I2C_Master_Seq_Receive_DMA+0xa6>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80043e4:	4b8d      	ldr	r3, [pc, #564]	@ (800461c <HAL_I2C_Master_Seq_Receive_DMA+0x284>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	08db      	lsrs	r3, r3, #3
 80043ea:	4a8d      	ldr	r2, [pc, #564]	@ (8004620 <HAL_I2C_Master_Seq_Receive_DMA+0x288>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	0a1a      	lsrs	r2, r3, #8
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009a      	lsls	r2, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	3b01      	subs	r3, #1
 8004402:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d112      	bne.n	8004430 <HAL_I2C_Master_Seq_Receive_DMA+0x98>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	f043 0220 	orr.w	r2, r3, #32
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
 800442e:	e161      	b.n	80046f4 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b02      	cmp	r3, #2
 800443c:	d0df      	beq.n	80043fe <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_I2C_Master_Seq_Receive_DMA+0xb4>
 8004448:	2302      	movs	r3, #2
 800444a:	e153      	b.n	80046f4 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b01      	cmp	r3, #1
 8004460:	d007      	beq.n	8004472 <HAL_I2C_Master_Seq_Receive_DMA+0xda>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f042 0201 	orr.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004480:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004490:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2222      	movs	r2, #34	@ 0x22
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2210      	movs	r2, #16
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	893a      	ldrh	r2, [r7, #8]
 80044b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80044c4:	897a      	ldrh	r2, [r7, #10]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80de 	beq.w	8004696 <HAL_I2C_Master_Seq_Receive_DMA+0x2fe>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d12a      	bne.n	800453a <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
 80044e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e6:	2b20      	cmp	r3, #32
 80044e8:	d002      	beq.n	80044f0 <HAL_I2C_Master_Seq_Receive_DMA+0x158>
 80044ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d124      	bne.n	800453a <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2b12      	cmp	r3, #18
 80044f4:	d118      	bne.n	8004528 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004504:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004514:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004524:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8004526:	e022      	b.n	800456e <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004536:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8004538:	e019      	b.n	800456e <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004548:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	2b20      	cmp	r3, #32
 800454e:	d006      	beq.n	800455e <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 8004550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004552:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004556:	d002      	beq.n	800455e <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 8004558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455a:	2b10      	cmp	r3, #16
 800455c:	d107      	bne.n	800456e <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800456c:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004572:	2b00      	cmp	r3, #0
 8004574:	d022      	beq.n	80045bc <HAL_I2C_Master_Seq_Receive_DMA+0x224>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457a:	4a2a      	ldr	r2, [pc, #168]	@ (8004624 <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 800457c:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004582:	4a29      	ldr	r2, [pc, #164]	@ (8004628 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 8004584:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458a:	2200      	movs	r2, #0
 800458c:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004592:	2200      	movs	r2, #0
 8004594:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3310      	adds	r3, #16
 80045a0:	4619      	mov	r1, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	461a      	mov	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ac:	f7fe fe06 	bl	80031bc <HAL_DMA_Start_IT>
 80045b0:	4603      	mov	r3, r0
 80045b2:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 80045b4:	7efb      	ldrb	r3, [r7, #27]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d159      	bne.n	800466e <HAL_I2C_Master_Seq_Receive_DMA+0x2d6>
 80045ba:	e013      	b.n	80045e4 <HAL_I2C_Master_Seq_Receive_DMA+0x24c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e087      	b.n	80046f4 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2b12      	cmp	r3, #18
 80045e8:	d10c      	bne.n	8004604 <HAL_I2C_Master_Seq_Receive_DMA+0x26c>
 80045ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ec:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80045f0:	d003      	beq.n	80045fa <HAL_I2C_Master_Seq_Receive_DMA+0x262>
 80045f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80045f8:	d101      	bne.n	80045fe <HAL_I2C_Master_Seq_Receive_DMA+0x266>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <HAL_I2C_Master_Seq_Receive_DMA+0x268>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b01      	cmp	r3, #1
 8004602:	d113      	bne.n	800462c <HAL_I2C_Master_Seq_Receive_DMA+0x294>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004612:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 8004614:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	e00a      	b.n	8004632 <HAL_I2C_Master_Seq_Receive_DMA+0x29a>
 800461c:	20000000 	.word	0x20000000
 8004620:	14f8b589 	.word	0x14f8b589
 8004624:	08005cb9 	.word	0x08005cb9
 8004628:	08005e77 	.word	0x08005e77
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 800462c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004630:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800463a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463c:	2b04      	cmp	r3, #4
 800463e:	d005      	beq.n	800464c <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	2b20      	cmp	r3, #32
 8004644:	d002      	beq.n	800464c <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 8004646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004648:	2b10      	cmp	r3, #16
 800464a:	d107      	bne.n	800465c <HAL_I2C_Master_Seq_Receive_DMA+0x2c4>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800465a:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6859      	ldr	r1, [r3, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	430a      	orrs	r2, r1
 800466a:	605a      	str	r2, [r3, #4]
 800466c:	e03f      	b.n	80046ee <HAL_I2C_Master_Seq_Receive_DMA+0x356>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	f043 0210 	orr.w	r2, r3, #16
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e02e      	b.n	80046f4 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046a4:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b12      	cmp	r3, #18
 80046aa:	d10c      	bne.n	80046c6 <HAL_I2C_Master_Seq_Receive_DMA+0x32e>
 80046ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ae:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80046b2:	d003      	beq.n	80046bc <HAL_I2C_Master_Seq_Receive_DMA+0x324>
 80046b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80046ba:	d101      	bne.n	80046c0 <HAL_I2C_Master_Seq_Receive_DMA+0x328>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_I2C_Master_Seq_Receive_DMA+0x32a>
 80046c0:	2300      	movs	r3, #0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d107      	bne.n	80046d6 <HAL_I2C_Master_Seq_Receive_DMA+0x33e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046d4:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6859      	ldr	r1, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e000      	b.n	80046f4 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
  }
  else
  {
    return HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
  }
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004714:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800471c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004724:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b10      	cmp	r3, #16
 800472a:	d003      	beq.n	8004734 <HAL_I2C_EV_IRQHandler+0x38>
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b40      	cmp	r3, #64	@ 0x40
 8004730:	f040 80c1 	bne.w	80048b6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10d      	bne.n	800476a <HAL_I2C_EV_IRQHandler+0x6e>
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004754:	d003      	beq.n	800475e <HAL_I2C_EV_IRQHandler+0x62>
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800475c:	d101      	bne.n	8004762 <HAL_I2C_EV_IRQHandler+0x66>
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <HAL_I2C_EV_IRQHandler+0x68>
 8004762:	2300      	movs	r3, #0
 8004764:	2b01      	cmp	r3, #1
 8004766:	f000 8132 	beq.w	80049ce <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00c      	beq.n	800478e <HAL_I2C_EV_IRQHandler+0x92>
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	0a5b      	lsrs	r3, r3, #9
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d006      	beq.n	800478e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 fd03 	bl	800618c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fce5 	bl	8005156 <I2C_Master_SB>
 800478c:	e092      	b.n	80048b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	08db      	lsrs	r3, r3, #3
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_I2C_EV_IRQHandler+0xb2>
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	0a5b      	lsrs	r3, r3, #9
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fd5a 	bl	8005260 <I2C_Master_ADD10>
 80047ac:	e082      	b.n	80048b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d009      	beq.n	80047ce <HAL_I2C_EV_IRQHandler+0xd2>
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	0a5b      	lsrs	r3, r3, #9
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fd73 	bl	80052b2 <I2C_Master_ADDR>
 80047cc:	e072      	b.n	80048b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	089b      	lsrs	r3, r3, #2
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d03b      	beq.n	8004852 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047e8:	f000 80f3 	beq.w	80049d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	09db      	lsrs	r3, r3, #7
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00f      	beq.n	8004818 <HAL_I2C_EV_IRQHandler+0x11c>
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	0a9b      	lsrs	r3, r3, #10
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <HAL_I2C_EV_IRQHandler+0x11c>
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	089b      	lsrs	r3, r3, #2
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d103      	bne.n	8004818 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f93d 	bl	8004a90 <I2C_MasterTransmit_TXE>
 8004816:	e04d      	b.n	80048b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	089b      	lsrs	r3, r3, #2
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80d6 	beq.w	80049d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	0a5b      	lsrs	r3, r3, #9
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80cf 	beq.w	80049d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004834:	7bbb      	ldrb	r3, [r7, #14]
 8004836:	2b21      	cmp	r3, #33	@ 0x21
 8004838:	d103      	bne.n	8004842 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f9c4 	bl	8004bc8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004840:	e0c7      	b.n	80049d2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	2b40      	cmp	r3, #64	@ 0x40
 8004846:	f040 80c4 	bne.w	80049d2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa32 	bl	8004cb4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004850:	e0bf      	b.n	80049d2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800485c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004860:	f000 80b7 	beq.w	80049d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	099b      	lsrs	r3, r3, #6
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00f      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0x194>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	0a9b      	lsrs	r3, r3, #10
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d009      	beq.n	8004890 <HAL_I2C_EV_IRQHandler+0x194>
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 faab 	bl	8004de4 <I2C_MasterReceive_RXNE>
 800488e:	e011      	b.n	80048b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	089b      	lsrs	r3, r3, #2
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 809a 	beq.w	80049d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	0a5b      	lsrs	r3, r3, #9
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 8093 	beq.w	80049d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 fb61 	bl	8004f74 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b2:	e08e      	b.n	80049d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80048b4:	e08d      	b.n	80049d2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	e007      	b.n	80048d8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d012      	beq.n	800490a <HAL_I2C_EV_IRQHandler+0x20e>
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	0a5b      	lsrs	r3, r3, #9
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00c      	beq.n	800490a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004900:	69b9      	ldr	r1, [r7, #24]
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 ff2c 	bl	8005760 <I2C_Slave_ADDR>
 8004908:	e066      	b.n	80049d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <HAL_I2C_EV_IRQHandler+0x22e>
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	0a5b      	lsrs	r3, r3, #9
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 ff66 	bl	80057f4 <I2C_Slave_STOPF>
 8004928:	e056      	b.n	80049d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800492a:	7bbb      	ldrb	r3, [r7, #14]
 800492c:	2b21      	cmp	r3, #33	@ 0x21
 800492e:	d002      	beq.n	8004936 <HAL_I2C_EV_IRQHandler+0x23a>
 8004930:	7bbb      	ldrb	r3, [r7, #14]
 8004932:	2b29      	cmp	r3, #41	@ 0x29
 8004934:	d125      	bne.n	8004982 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	09db      	lsrs	r3, r3, #7
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00f      	beq.n	8004962 <HAL_I2C_EV_IRQHandler+0x266>
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	0a9b      	lsrs	r3, r3, #10
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_I2C_EV_IRQHandler+0x266>
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	089b      	lsrs	r3, r3, #2
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d103      	bne.n	8004962 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fe44 	bl	80055e8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004960:	e039      	b.n	80049d6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	089b      	lsrs	r3, r3, #2
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d033      	beq.n	80049d6 <HAL_I2C_EV_IRQHandler+0x2da>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	0a5b      	lsrs	r3, r3, #9
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02d      	beq.n	80049d6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fe71 	bl	8005662 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004980:	e029      	b.n	80049d6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	099b      	lsrs	r3, r3, #6
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00f      	beq.n	80049ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	0a9b      	lsrs	r3, r3, #10
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	089b      	lsrs	r3, r3, #2
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fe7b 	bl	80056a2 <I2C_SlaveReceive_RXNE>
 80049ac:	e014      	b.n	80049d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	089b      	lsrs	r3, r3, #2
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00e      	beq.n	80049d8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	0a5b      	lsrs	r3, r3, #9
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d008      	beq.n	80049d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fea9 	bl	800571e <I2C_SlaveReceive_BTF>
 80049cc:	e004      	b.n	80049d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80049ce:	bf00      	nop
 80049d0:	e002      	b.n	80049d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049d2:	bf00      	nop
 80049d4:	e000      	b.n	80049d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049d6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80049d8:	3720      	adds	r7, #32
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bc80      	pop	{r7}
 8004a00:	4770      	bx	lr

08004a02 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	70fb      	strb	r3, [r7, #3]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bc80      	pop	{r7}
 8004a2c:	4770      	bx	lr

08004a2e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr

08004a40 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr

08004a52 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr

08004a76 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a84:	b2db      	uxtb	r3, r3
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bc80      	pop	{r7}
 8004a8e:	4770      	bx	lr

08004a90 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aa6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aac:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d150      	bne.n	8004b58 <I2C_MasterTransmit_TXE+0xc8>
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2b21      	cmp	r3, #33	@ 0x21
 8004aba:	d14d      	bne.n	8004b58 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d01d      	beq.n	8004afe <I2C_MasterTransmit_TXE+0x6e>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d01a      	beq.n	8004afe <I2C_MasterTransmit_TXE+0x6e>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ace:	d016      	beq.n	8004afe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ade:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2211      	movs	r2, #17
 8004ae4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fc fdec 	bl	80016d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004afc:	e060      	b.n	8004bc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b0c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b1c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b40      	cmp	r3, #64	@ 0x40
 8004b36:	d107      	bne.n	8004b48 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff74 	bl	8004a2e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b46:	e03b      	b.n	8004bc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f7fc fdbf 	bl	80016d4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b56:	e033      	b.n	8004bc0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004b58:	7bfb      	ldrb	r3, [r7, #15]
 8004b5a:	2b21      	cmp	r3, #33	@ 0x21
 8004b5c:	d005      	beq.n	8004b6a <I2C_MasterTransmit_TXE+0xda>
 8004b5e:	7bbb      	ldrb	r3, [r7, #14]
 8004b60:	2b40      	cmp	r3, #64	@ 0x40
 8004b62:	d12d      	bne.n	8004bc0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	2b22      	cmp	r3, #34	@ 0x22
 8004b68:	d12a      	bne.n	8004bc0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d108      	bne.n	8004b86 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b82:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b84:	e01c      	b.n	8004bc0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b40      	cmp	r3, #64	@ 0x40
 8004b90:	d103      	bne.n	8004b9a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f88e 	bl	8004cb4 <I2C_MemoryTransmit_TXE_BTF>
}
 8004b98:	e012      	b.n	8004bc0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	781a      	ldrb	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004bbe:	e7ff      	b.n	8004bc0 <I2C_MasterTransmit_TXE+0x130>
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b21      	cmp	r3, #33	@ 0x21
 8004be0:	d164      	bne.n	8004cac <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d012      	beq.n	8004c12 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf0:	781a      	ldrb	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004c10:	e04c      	b.n	8004cac <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d01d      	beq.n	8004c54 <I2C_MasterTransmit_BTF+0x8c>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b20      	cmp	r3, #32
 8004c1c:	d01a      	beq.n	8004c54 <I2C_MasterTransmit_BTF+0x8c>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c24:	d016      	beq.n	8004c54 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c34:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2211      	movs	r2, #17
 8004c3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f7fc fd41 	bl	80016d4 <HAL_I2C_MasterTxCpltCallback>
}
 8004c52:	e02b      	b.n	8004cac <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c62:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c72:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b40      	cmp	r3, #64	@ 0x40
 8004c8c:	d107      	bne.n	8004c9e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff fec9 	bl	8004a2e <HAL_I2C_MemTxCpltCallback>
}
 8004c9c:	e006      	b.n	8004cac <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fc fd14 	bl	80016d4 <HAL_I2C_MasterTxCpltCallback>
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cc2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d11d      	bne.n	8004d08 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d10b      	bne.n	8004cec <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ce4:	1c9a      	adds	r2, r3, #2
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004cea:	e077      	b.n	8004ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	121b      	asrs	r3, r3, #8
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d06:	e069      	b.n	8004ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d10b      	bne.n	8004d28 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d26:	e059      	b.n	8004ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d152      	bne.n	8004dd6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b22      	cmp	r3, #34	@ 0x22
 8004d34:	d10d      	bne.n	8004d52 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d44:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d50:	e044      	b.n	8004ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d015      	beq.n	8004d88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	2b21      	cmp	r3, #33	@ 0x21
 8004d60:	d112      	bne.n	8004d88 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d66:	781a      	ldrb	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004d86:	e029      	b.n	8004ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d124      	bne.n	8004ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	2b21      	cmp	r3, #33	@ 0x21
 8004d96:	d121      	bne.n	8004ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004da6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004db6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fe2d 	bl	8004a2e <HAL_I2C_MemTxCpltCallback>
}
 8004dd4:	e002      	b.n	8004ddc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fe ff1a 	bl	8003c10 <I2C_Flush_DR>
}
 8004ddc:	bf00      	nop
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b22      	cmp	r3, #34	@ 0x22
 8004df6:	f040 80b9 	bne.w	8004f6c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfe:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d921      	bls.n	8004e52 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	f040 8096 	bne.w	8004f6c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e4e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004e50:	e08c      	b.n	8004f6c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d07f      	beq.n	8004f5a <I2C_MasterReceive_RXNE+0x176>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d002      	beq.n	8004e66 <I2C_MasterReceive_RXNE+0x82>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d179      	bne.n	8004f5a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f001 f95e 	bl	8006128 <I2C_WaitOnSTOPRequestThroughIT>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d14c      	bne.n	8004f0c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e80:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e90:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b40      	cmp	r3, #64	@ 0x40
 8004eca:	d10a      	bne.n	8004ee2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff fdb0 	bl	8004a40 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ee0:	e044      	b.n	8004f6c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	d002      	beq.n	8004ef6 <I2C_MasterReceive_RXNE+0x112>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b20      	cmp	r3, #32
 8004ef4:	d103      	bne.n	8004efe <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	@ 0x30
 8004efc:	e002      	b.n	8004f04 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2212      	movs	r2, #18
 8004f02:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7fc fbf3 	bl	80016f0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f0a:	e02f      	b.n	8004f6c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f1a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff fd7d 	bl	8004a52 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f58:	e008      	b.n	8004f6c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f68:	605a      	str	r2, [r3, #4]
}
 8004f6a:	e7ff      	b.n	8004f6c <I2C_MasterReceive_RXNE+0x188>
 8004f6c:	bf00      	nop
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f80:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d11b      	bne.n	8004fc4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f9a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004fc2:	e0c4      	b.n	800514e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d129      	bne.n	8005022 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fdc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d00a      	beq.n	8004ffa <I2C_MasterReceive_BTF+0x86>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d007      	beq.n	8004ffa <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ff8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005020:	e095      	b.n	800514e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d17d      	bne.n	8005128 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d002      	beq.n	8005038 <I2C_MasterReceive_BTF+0xc4>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b10      	cmp	r3, #16
 8005036:	d108      	bne.n	800504a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e016      	b.n	8005078 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b04      	cmp	r3, #4
 800504e:	d002      	beq.n	8005056 <I2C_MasterReceive_BTF+0xe2>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d108      	bne.n	8005068 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	e007      	b.n	8005078 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005076:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29a      	uxth	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80050d2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b40      	cmp	r3, #64	@ 0x40
 80050e6:	d10a      	bne.n	80050fe <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff fca2 	bl	8004a40 <HAL_I2C_MemRxCpltCallback>
}
 80050fc:	e027      	b.n	800514e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b08      	cmp	r3, #8
 800510a:	d002      	beq.n	8005112 <I2C_MasterReceive_BTF+0x19e>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b20      	cmp	r3, #32
 8005110:	d103      	bne.n	800511a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	@ 0x30
 8005118:	e002      	b.n	8005120 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2212      	movs	r2, #18
 800511e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7fc fae5 	bl	80016f0 <HAL_I2C_MasterRxCpltCallback>
}
 8005126:	e012      	b.n	800514e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800514e:	bf00      	nop
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b40      	cmp	r3, #64	@ 0x40
 8005168:	d117      	bne.n	800519a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800516e:	2b00      	cmp	r3, #0
 8005170:	d109      	bne.n	8005186 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005176:	b2db      	uxtb	r3, r3
 8005178:	461a      	mov	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005182:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005184:	e067      	b.n	8005256 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518a:	b2db      	uxtb	r3, r3
 800518c:	f043 0301 	orr.w	r3, r3, #1
 8005190:	b2da      	uxtb	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	611a      	str	r2, [r3, #16]
}
 8005198:	e05d      	b.n	8005256 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051a2:	d133      	bne.n	800520c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b21      	cmp	r3, #33	@ 0x21
 80051ae:	d109      	bne.n	80051c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051c0:	611a      	str	r2, [r3, #16]
 80051c2:	e008      	b.n	80051d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f043 0301 	orr.w	r3, r3, #1
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d004      	beq.n	80051e8 <I2C_Master_SB+0x92>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d108      	bne.n	80051fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d032      	beq.n	8005256 <I2C_Master_SB+0x100>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d02d      	beq.n	8005256 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005208:	605a      	str	r2, [r3, #4]
}
 800520a:	e024      	b.n	8005256 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10e      	bne.n	8005232 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005218:	b29b      	uxth	r3, r3
 800521a:	11db      	asrs	r3, r3, #7
 800521c:	b2db      	uxtb	r3, r3
 800521e:	f003 0306 	and.w	r3, r3, #6
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f063 030f 	orn	r3, r3, #15
 8005228:	b2da      	uxtb	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	611a      	str	r2, [r3, #16]
}
 8005230:	e011      	b.n	8005256 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005236:	2b01      	cmp	r3, #1
 8005238:	d10d      	bne.n	8005256 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523e:	b29b      	uxth	r3, r3
 8005240:	11db      	asrs	r3, r3, #7
 8005242:	b2db      	uxtb	r3, r3
 8005244:	f003 0306 	and.w	r3, r3, #6
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f063 030e 	orn	r3, r3, #14
 800524e:	b2da      	uxtb	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	611a      	str	r2, [r3, #16]
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526c:	b2da      	uxtb	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005278:	2b00      	cmp	r3, #0
 800527a:	d004      	beq.n	8005286 <I2C_Master_ADD10+0x26>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005282:	2b00      	cmp	r3, #0
 8005284:	d108      	bne.n	8005298 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00c      	beq.n	80052a8 <I2C_Master_ADD10+0x48>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052a6:	605a      	str	r2, [r3, #4]
  }
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b091      	sub	sp, #68	@ 0x44
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ce:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b22      	cmp	r3, #34	@ 0x22
 80052da:	f040 8174 	bne.w	80055c6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10f      	bne.n	8005306 <I2C_Master_ADDR+0x54>
 80052e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80052ea:	2b40      	cmp	r3, #64	@ 0x40
 80052ec:	d10b      	bne.n	8005306 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052ee:	2300      	movs	r3, #0
 80052f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	633b      	str	r3, [r7, #48]	@ 0x30
 8005302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005304:	e16b      	b.n	80055de <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800530a:	2b00      	cmp	r3, #0
 800530c:	d11d      	bne.n	800534a <I2C_Master_ADDR+0x98>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005316:	d118      	bne.n	800534a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005318:	2300      	movs	r3, #0
 800531a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800533c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	651a      	str	r2, [r3, #80]	@ 0x50
 8005348:	e149      	b.n	80055de <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d113      	bne.n	800537c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005354:	2300      	movs	r3, #0
 8005356:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005368:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	e120      	b.n	80055be <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	f040 808a 	bne.w	800549c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800538e:	d137      	bne.n	8005400 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800539e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053ae:	d113      	bne.n	80053d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c0:	2300      	movs	r3, #0
 80053c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	e0f2      	b.n	80055be <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d8:	2300      	movs	r3, #0
 80053da:	623b      	str	r3, [r7, #32]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	623b      	str	r3, [r7, #32]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	623b      	str	r3, [r7, #32]
 80053ec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	e0de      	b.n	80055be <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005402:	2b08      	cmp	r3, #8
 8005404:	d02e      	beq.n	8005464 <I2C_Master_ADDR+0x1b2>
 8005406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005408:	2b20      	cmp	r3, #32
 800540a:	d02b      	beq.n	8005464 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800540c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540e:	2b12      	cmp	r3, #18
 8005410:	d102      	bne.n	8005418 <I2C_Master_ADDR+0x166>
 8005412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005414:	2b01      	cmp	r3, #1
 8005416:	d125      	bne.n	8005464 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541a:	2b04      	cmp	r3, #4
 800541c:	d00e      	beq.n	800543c <I2C_Master_ADDR+0x18a>
 800541e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005420:	2b02      	cmp	r3, #2
 8005422:	d00b      	beq.n	800543c <I2C_Master_ADDR+0x18a>
 8005424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005426:	2b10      	cmp	r3, #16
 8005428:	d008      	beq.n	800543c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	e007      	b.n	800544c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800544a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544c:	2300      	movs	r3, #0
 800544e:	61fb      	str	r3, [r7, #28]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	61fb      	str	r3, [r7, #28]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	61fb      	str	r3, [r7, #28]
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	e0ac      	b.n	80055be <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005472:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	61bb      	str	r3, [r7, #24]
 8005488:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	e090      	b.n	80055be <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d158      	bne.n	8005558 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d021      	beq.n	80054f0 <I2C_Master_ADDR+0x23e>
 80054ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d01e      	beq.n	80054f0 <I2C_Master_ADDR+0x23e>
 80054b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d01b      	beq.n	80054f0 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054c6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	e012      	b.n	8005516 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054fe:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	613b      	str	r3, [r7, #16]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005524:	d14b      	bne.n	80055be <I2C_Master_ADDR+0x30c>
 8005526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005528:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800552c:	d00b      	beq.n	8005546 <I2C_Master_ADDR+0x294>
 800552e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005530:	2b01      	cmp	r3, #1
 8005532:	d008      	beq.n	8005546 <I2C_Master_ADDR+0x294>
 8005534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005536:	2b08      	cmp	r3, #8
 8005538:	d005      	beq.n	8005546 <I2C_Master_ADDR+0x294>
 800553a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553c:	2b10      	cmp	r3, #16
 800553e:	d002      	beq.n	8005546 <I2C_Master_ADDR+0x294>
 8005540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005542:	2b20      	cmp	r3, #32
 8005544:	d13b      	bne.n	80055be <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005554:	605a      	str	r2, [r3, #4]
 8005556:	e032      	b.n	80055be <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005566:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005572:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005576:	d117      	bne.n	80055a8 <I2C_Master_ADDR+0x2f6>
 8005578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800557e:	d00b      	beq.n	8005598 <I2C_Master_ADDR+0x2e6>
 8005580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005582:	2b01      	cmp	r3, #1
 8005584:	d008      	beq.n	8005598 <I2C_Master_ADDR+0x2e6>
 8005586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005588:	2b08      	cmp	r3, #8
 800558a:	d005      	beq.n	8005598 <I2C_Master_ADDR+0x2e6>
 800558c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558e:	2b10      	cmp	r3, #16
 8005590:	d002      	beq.n	8005598 <I2C_Master_ADDR+0x2e6>
 8005592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005594:	2b20      	cmp	r3, #32
 8005596:	d107      	bne.n	80055a8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055a6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	60fb      	str	r3, [r7, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80055c4:	e00b      	b.n	80055de <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c6:	2300      	movs	r3, #0
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	68bb      	ldr	r3, [r7, #8]
}
 80055dc:	e7ff      	b.n	80055de <I2C_Master_ADDR+0x32c>
 80055de:	bf00      	nop
 80055e0:	3744      	adds	r7, #68	@ 0x44
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr

080055e8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d02b      	beq.n	800565a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	781a      	ldrb	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d114      	bne.n	800565a <I2C_SlaveTransmit_TXE+0x72>
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	2b29      	cmp	r3, #41	@ 0x29
 8005634:	d111      	bne.n	800565a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005644:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2221      	movs	r2, #33	@ 0x21
 800564a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2228      	movs	r2, #40	@ 0x28
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff f9c2 	bl	80049de <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800565a:	bf00      	nop
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800566e:	b29b      	uxth	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d011      	beq.n	8005698 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005678:	781a      	ldrb	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d02c      	beq.n	8005716 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d114      	bne.n	8005716 <I2C_SlaveReceive_RXNE+0x74>
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80056f0:	d111      	bne.n	8005716 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005700:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2222      	movs	r2, #34	@ 0x22
 8005706:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2228      	movs	r2, #40	@ 0x28
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff f96d 	bl	80049f0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d012      	beq.n	8005756 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800573a:	b2d2      	uxtb	r2, r2
 800573c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr

08005760 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005774:	b2db      	uxtb	r3, r3
 8005776:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800577a:	2b28      	cmp	r3, #40	@ 0x28
 800577c:	d127      	bne.n	80057ce <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800578c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	089b      	lsrs	r3, r3, #2
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	09db      	lsrs	r3, r3, #7
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	81bb      	strh	r3, [r7, #12]
 80057b0:	e002      	b.n	80057b8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80057c0:	89ba      	ldrh	r2, [r7, #12]
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff f91b 	bl	8004a02 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80057cc:	e00e      	b.n	80057ec <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ce:	2300      	movs	r3, #0
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	60bb      	str	r3, [r7, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	60bb      	str	r3, [r7, #8]
 80057e2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80057ec:	bf00      	nop
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005802:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005812:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005814:	2300      	movs	r3, #0
 8005816:	60bb      	str	r3, [r7, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	60bb      	str	r3, [r7, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005840:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800584c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005850:	d172      	bne.n	8005938 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	2b22      	cmp	r3, #34	@ 0x22
 8005856:	d002      	beq.n	800585e <I2C_Slave_STOPF+0x6a>
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b2a      	cmp	r3, #42	@ 0x2a
 800585c:	d135      	bne.n	80058ca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	b29a      	uxth	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587a:	f043 0204 	orr.w	r2, r3, #4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005890:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005896:	4618      	mov	r0, r3
 8005898:	f7fd fe6e 	bl	8003578 <HAL_DMA_GetState>
 800589c:	4603      	mov	r3, r0
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d049      	beq.n	8005936 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a6:	4a69      	ldr	r2, [pc, #420]	@ (8005a4c <I2C_Slave_STOPF+0x258>)
 80058a8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fd fce4 	bl	800327c <HAL_DMA_Abort_IT>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d03d      	beq.n	8005936 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80058c4:	4610      	mov	r0, r2
 80058c6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058c8:	e035      	b.n	8005936 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058dc:	b29b      	uxth	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d005      	beq.n	80058ee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e6:	f043 0204 	orr.w	r2, r3, #4
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685a      	ldr	r2, [r3, #4]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005902:	4618      	mov	r0, r3
 8005904:	f7fd fe38 	bl	8003578 <HAL_DMA_GetState>
 8005908:	4603      	mov	r3, r0
 800590a:	2b01      	cmp	r3, #1
 800590c:	d014      	beq.n	8005938 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005912:	4a4e      	ldr	r2, [pc, #312]	@ (8005a4c <I2C_Slave_STOPF+0x258>)
 8005914:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591a:	4618      	mov	r0, r3
 800591c:	f7fd fcae 	bl	800327c <HAL_DMA_Abort_IT>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d008      	beq.n	8005938 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800592a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005930:	4610      	mov	r0, r2
 8005932:	4798      	blx	r3
 8005934:	e000      	b.n	8005938 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005936:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d03e      	beq.n	80059c0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b04      	cmp	r3, #4
 800594e:	d112      	bne.n	8005976 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005980:	2b40      	cmp	r3, #64	@ 0x40
 8005982:	d112      	bne.n	80059aa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b8:	f043 0204 	orr.w	r2, r3, #4
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f843 	bl	8005a54 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80059ce:	e039      	b.n	8005a44 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80059d4:	d109      	bne.n	80059ea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2228      	movs	r2, #40	@ 0x28
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff f803 	bl	80049f0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b28      	cmp	r3, #40	@ 0x28
 80059f4:	d111      	bne.n	8005a1a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a15      	ldr	r2, [pc, #84]	@ (8005a50 <I2C_Slave_STOPF+0x25c>)
 80059fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff f802 	bl	8004a1c <HAL_I2C_ListenCpltCallback>
}
 8005a18:	e014      	b.n	8005a44 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1e:	2b22      	cmp	r3, #34	@ 0x22
 8005a20:	d002      	beq.n	8005a28 <I2C_Slave_STOPF+0x234>
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	2b22      	cmp	r3, #34	@ 0x22
 8005a26:	d10d      	bne.n	8005a44 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fe ffd6 	bl	80049f0 <HAL_I2C_SlaveRxCpltCallback>
}
 8005a44:	bf00      	nop
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	08005ee5 	.word	0x08005ee5
 8005a50:	ffff0000 	.word	0xffff0000

08005a54 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a62:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a6a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a6c:	7bbb      	ldrb	r3, [r7, #14]
 8005a6e:	2b10      	cmp	r3, #16
 8005a70:	d002      	beq.n	8005a78 <I2C_ITError+0x24>
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	2b40      	cmp	r3, #64	@ 0x40
 8005a76:	d10a      	bne.n	8005a8e <I2C_ITError+0x3a>
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
 8005a7a:	2b22      	cmp	r3, #34	@ 0x22
 8005a7c:	d107      	bne.n	8005a8e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a8c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a94:	2b28      	cmp	r3, #40	@ 0x28
 8005a96:	d107      	bne.n	8005aa8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2228      	movs	r2, #40	@ 0x28
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005aa6:	e015      	b.n	8005ad4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ab6:	d00a      	beq.n	8005ace <I2C_ITError+0x7a>
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	2b60      	cmp	r3, #96	@ 0x60
 8005abc:	d007      	beq.n	8005ace <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ade:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ae2:	d162      	bne.n	8005baa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005af2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d020      	beq.n	8005b44 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b06:	4a6a      	ldr	r2, [pc, #424]	@ (8005cb0 <I2C_ITError+0x25c>)
 8005b08:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fd fbb4 	bl	800327c <HAL_DMA_Abort_IT>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 8089 	beq.w	8005c2e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f022 0201 	bic.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b3e:	4610      	mov	r0, r2
 8005b40:	4798      	blx	r3
 8005b42:	e074      	b.n	8005c2e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b48:	4a59      	ldr	r2, [pc, #356]	@ (8005cb0 <I2C_ITError+0x25c>)
 8005b4a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fd fb93 	bl	800327c <HAL_DMA_Abort_IT>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d068      	beq.n	8005c2e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b66:	2b40      	cmp	r3, #64	@ 0x40
 8005b68:	d10b      	bne.n	8005b82 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0201 	bic.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4798      	blx	r3
 8005ba8:	e041      	b.n	8005c2e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b60      	cmp	r3, #96	@ 0x60
 8005bb4:	d125      	bne.n	8005c02 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bce:	2b40      	cmp	r3, #64	@ 0x40
 8005bd0:	d10b      	bne.n	8005bea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0201 	bic.w	r2, r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7fe ff32 	bl	8004a64 <HAL_I2C_AbortCpltCallback>
 8005c00:	e015      	b.n	8005c2e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0c:	2b40      	cmp	r3, #64	@ 0x40
 8005c0e:	d10b      	bne.n	8005c28 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7fe ff12 	bl	8004a52 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c32:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10e      	bne.n	8005c5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d109      	bne.n	8005c5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d007      	beq.n	8005c6c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c6a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c72:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d113      	bne.n	8005ca8 <I2C_ITError+0x254>
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	2b28      	cmp	r3, #40	@ 0x28
 8005c84:	d110      	bne.n	8005ca8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a0a      	ldr	r2, [pc, #40]	@ (8005cb4 <I2C_ITError+0x260>)
 8005c8a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fe feba 	bl	8004a1c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ca8:	bf00      	nop
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	08005ee5 	.word	0x08005ee5
 8005cb4:	ffff0000 	.word	0xffff0000

08005cb8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ccc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cd4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005cea:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d08:	2200      	movs	r2, #0
 8005d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005d0c:	7cfb      	ldrb	r3, [r7, #19]
 8005d0e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005d12:	2b21      	cmp	r3, #33	@ 0x21
 8005d14:	d007      	beq.n	8005d26 <I2C_DMAXferCplt+0x6e>
 8005d16:	7cfb      	ldrb	r3, [r7, #19]
 8005d18:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005d1c:	2b22      	cmp	r3, #34	@ 0x22
 8005d1e:	d131      	bne.n	8005d84 <I2C_DMAXferCplt+0xcc>
 8005d20:	7cbb      	ldrb	r3, [r7, #18]
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d12e      	bne.n	8005d84 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d34:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005d3c:	7cfb      	ldrb	r3, [r7, #19]
 8005d3e:	2b29      	cmp	r3, #41	@ 0x29
 8005d40:	d10a      	bne.n	8005d58 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2221      	movs	r2, #33	@ 0x21
 8005d46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2228      	movs	r2, #40	@ 0x28
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d50:	6978      	ldr	r0, [r7, #20]
 8005d52:	f7fe fe44 	bl	80049de <HAL_I2C_SlaveTxCpltCallback>
 8005d56:	e00c      	b.n	8005d72 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005d58:	7cfb      	ldrb	r3, [r7, #19]
 8005d5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d5c:	d109      	bne.n	8005d72 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2222      	movs	r2, #34	@ 0x22
 8005d62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	2228      	movs	r2, #40	@ 0x28
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d6c:	6978      	ldr	r0, [r7, #20]
 8005d6e:	f7fe fe3f 	bl	80049f0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005d80:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005d82:	e074      	b.n	8005e6e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d06e      	beq.n	8005e6e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d107      	bne.n	8005daa <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005da8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005db8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005dc0:	d009      	beq.n	8005dd6 <I2C_DMAXferCplt+0x11e>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d006      	beq.n	8005dd6 <I2C_DMAXferCplt+0x11e>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005dce:	d002      	beq.n	8005dd6 <I2C_DMAXferCplt+0x11e>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b20      	cmp	r3, #32
 8005dd4:	d107      	bne.n	8005de6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005de4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005df4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e04:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005e14:	6978      	ldr	r0, [r7, #20]
 8005e16:	f7fe fe1c 	bl	8004a52 <HAL_I2C_ErrorCallback>
}
 8005e1a:	e028      	b.n	8005e6e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	2220      	movs	r2, #32
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b40      	cmp	r3, #64	@ 0x40
 8005e2e:	d10a      	bne.n	8005e46 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005e3e:	6978      	ldr	r0, [r7, #20]
 8005e40:	f7fe fdfe 	bl	8004a40 <HAL_I2C_MemRxCpltCallback>
}
 8005e44:	e013      	b.n	8005e6e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d002      	beq.n	8005e5a <I2C_DMAXferCplt+0x1a2>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d103      	bne.n	8005e62 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e60:	e002      	b.n	8005e68 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2212      	movs	r2, #18
 8005e66:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005e68:	6978      	ldr	r0, [r7, #20]
 8005e6a:	f7fb fc41 	bl	80016f0 <HAL_I2C_MasterRxCpltCallback>
}
 8005e6e:	bf00      	nop
 8005e70:	3718      	adds	r7, #24
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e90:	2200      	movs	r2, #0
 8005e92:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eb2:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ece:	f043 0210 	orr.w	r2, r3, #16
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f7fe fdbb 	bl	8004a52 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005efc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005efe:	4b4b      	ldr	r3, [pc, #300]	@ (800602c <I2C_DMAAbort+0x148>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	08db      	lsrs	r3, r3, #3
 8005f04:	4a4a      	ldr	r2, [pc, #296]	@ (8006030 <I2C_DMAAbort+0x14c>)
 8005f06:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0a:	0a1a      	lsrs	r2, r3, #8
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	00da      	lsls	r2, r3, #3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	f043 0220 	orr.w	r2, r3, #32
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005f2a:	e00a      	b.n	8005f42 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f40:	d0ea      	beq.n	8005f18 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f4e:	2200      	movs	r2, #0
 8005f50:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5e:	2200      	movs	r2, #0
 8005f60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f70:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2200      	movs	r2, #0
 8005f76:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f84:	2200      	movs	r2, #0
 8005f86:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f94:	2200      	movs	r2, #0
 8005f96:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b60      	cmp	r3, #96	@ 0x60
 8005fb2:	d10e      	bne.n	8005fd2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005fca:	6978      	ldr	r0, [r7, #20]
 8005fcc:	f7fe fd4a 	bl	8004a64 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005fd0:	e027      	b.n	8006022 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fd2:	7cfb      	ldrb	r3, [r7, #19]
 8005fd4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fd8:	2b28      	cmp	r3, #40	@ 0x28
 8005fda:	d117      	bne.n	800600c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ffa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2200      	movs	r2, #0
 8006000:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2228      	movs	r2, #40	@ 0x28
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800600a:	e007      	b.n	800601c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800601c:	6978      	ldr	r0, [r7, #20]
 800601e:	f7fe fd18 	bl	8004a52 <HAL_I2C_ErrorCallback>
}
 8006022:	bf00      	nop
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000000 	.word	0x20000000
 8006030:	14f8b589 	.word	0x14f8b589

08006034 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	603b      	str	r3, [r7, #0]
 8006040:	4613      	mov	r3, r2
 8006042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006044:	e048      	b.n	80060d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604c:	d044      	beq.n	80060d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604e:	f7fc ff4d 	bl	8002eec <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d302      	bcc.n	8006064 <I2C_WaitOnFlagUntilTimeout+0x30>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d139      	bne.n	80060d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	0c1b      	lsrs	r3, r3, #16
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b01      	cmp	r3, #1
 800606c:	d10d      	bne.n	800608a <I2C_WaitOnFlagUntilTimeout+0x56>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	43da      	mvns	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4013      	ands	r3, r2
 800607a:	b29b      	uxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	bf0c      	ite	eq
 8006080:	2301      	moveq	r3, #1
 8006082:	2300      	movne	r3, #0
 8006084:	b2db      	uxtb	r3, r3
 8006086:	461a      	mov	r2, r3
 8006088:	e00c      	b.n	80060a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	43da      	mvns	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4013      	ands	r3, r2
 8006096:	b29b      	uxth	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	bf0c      	ite	eq
 800609c:	2301      	moveq	r3, #1
 800609e:	2300      	movne	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d116      	bne.n	80060d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c4:	f043 0220 	orr.w	r2, r3, #32
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e023      	b.n	8006120 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	0c1b      	lsrs	r3, r3, #16
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d10d      	bne.n	80060fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	43da      	mvns	r2, r3
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4013      	ands	r3, r2
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	bf0c      	ite	eq
 80060f4:	2301      	moveq	r3, #1
 80060f6:	2300      	movne	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	e00c      	b.n	8006118 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	43da      	mvns	r2, r3
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	4013      	ands	r3, r2
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	bf0c      	ite	eq
 8006110:	2301      	moveq	r3, #1
 8006112:	2300      	movne	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	461a      	mov	r2, r3
 8006118:	79fb      	ldrb	r3, [r7, #7]
 800611a:	429a      	cmp	r2, r3
 800611c:	d093      	beq.n	8006046 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006134:	4b13      	ldr	r3, [pc, #76]	@ (8006184 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	08db      	lsrs	r3, r3, #3
 800613a:	4a13      	ldr	r2, [pc, #76]	@ (8006188 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800613c:	fba2 2303 	umull	r2, r3, r2, r3
 8006140:	0a1a      	lsrs	r2, r3, #8
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3b01      	subs	r3, #1
 800614e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d107      	bne.n	8006166 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615a:	f043 0220 	orr.w	r2, r3, #32
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e008      	b.n	8006178 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006174:	d0e9      	beq.n	800614a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	bc80      	pop	{r7}
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	20000000 	.word	0x20000000
 8006188:	14f8b589 	.word	0x14f8b589

0800618c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006198:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800619c:	d103      	bne.n	80061a6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80061a4:	e007      	b.n	80061b6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80061ae:	d102      	bne.n	80061b6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2208      	movs	r2, #8
 80061b4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e272      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8087 	beq.w	80062ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061e0:	4b92      	ldr	r3, [pc, #584]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f003 030c 	and.w	r3, r3, #12
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d00c      	beq.n	8006206 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061ec:	4b8f      	ldr	r3, [pc, #572]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f003 030c 	and.w	r3, r3, #12
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d112      	bne.n	800621e <HAL_RCC_OscConfig+0x5e>
 80061f8:	4b8c      	ldr	r3, [pc, #560]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006204:	d10b      	bne.n	800621e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006206:	4b89      	ldr	r3, [pc, #548]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d06c      	beq.n	80062ec <HAL_RCC_OscConfig+0x12c>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d168      	bne.n	80062ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e24c      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006226:	d106      	bne.n	8006236 <HAL_RCC_OscConfig+0x76>
 8006228:	4b80      	ldr	r3, [pc, #512]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a7f      	ldr	r2, [pc, #508]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 800622e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	e02e      	b.n	8006294 <HAL_RCC_OscConfig+0xd4>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10c      	bne.n	8006258 <HAL_RCC_OscConfig+0x98>
 800623e:	4b7b      	ldr	r3, [pc, #492]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a7a      	ldr	r2, [pc, #488]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006244:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	4b78      	ldr	r3, [pc, #480]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a77      	ldr	r2, [pc, #476]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006250:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	e01d      	b.n	8006294 <HAL_RCC_OscConfig+0xd4>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006260:	d10c      	bne.n	800627c <HAL_RCC_OscConfig+0xbc>
 8006262:	4b72      	ldr	r3, [pc, #456]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a71      	ldr	r2, [pc, #452]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006268:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	4b6f      	ldr	r3, [pc, #444]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a6e      	ldr	r2, [pc, #440]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e00b      	b.n	8006294 <HAL_RCC_OscConfig+0xd4>
 800627c:	4b6b      	ldr	r3, [pc, #428]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a6a      	ldr	r2, [pc, #424]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006282:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	4b68      	ldr	r3, [pc, #416]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a67      	ldr	r2, [pc, #412]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 800628e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006292:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d013      	beq.n	80062c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800629c:	f7fc fe26 	bl	8002eec <HAL_GetTick>
 80062a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062a4:	f7fc fe22 	bl	8002eec <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b64      	cmp	r3, #100	@ 0x64
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e200      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b6:	4b5d      	ldr	r3, [pc, #372]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0f0      	beq.n	80062a4 <HAL_RCC_OscConfig+0xe4>
 80062c2:	e014      	b.n	80062ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c4:	f7fc fe12 	bl	8002eec <HAL_GetTick>
 80062c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062cc:	f7fc fe0e 	bl	8002eec <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b64      	cmp	r3, #100	@ 0x64
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e1ec      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062de:	4b53      	ldr	r3, [pc, #332]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1f0      	bne.n	80062cc <HAL_RCC_OscConfig+0x10c>
 80062ea:	e000      	b.n	80062ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d063      	beq.n	80063c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062fa:	4b4c      	ldr	r3, [pc, #304]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f003 030c 	and.w	r3, r3, #12
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006306:	4b49      	ldr	r3, [pc, #292]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f003 030c 	and.w	r3, r3, #12
 800630e:	2b08      	cmp	r3, #8
 8006310:	d11c      	bne.n	800634c <HAL_RCC_OscConfig+0x18c>
 8006312:	4b46      	ldr	r3, [pc, #280]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d116      	bne.n	800634c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800631e:	4b43      	ldr	r3, [pc, #268]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d005      	beq.n	8006336 <HAL_RCC_OscConfig+0x176>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d001      	beq.n	8006336 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e1c0      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006336:	4b3d      	ldr	r3, [pc, #244]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	4939      	ldr	r1, [pc, #228]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006346:	4313      	orrs	r3, r2
 8006348:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800634a:	e03a      	b.n	80063c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d020      	beq.n	8006396 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006354:	4b36      	ldr	r3, [pc, #216]	@ (8006430 <HAL_RCC_OscConfig+0x270>)
 8006356:	2201      	movs	r2, #1
 8006358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635a:	f7fc fdc7 	bl	8002eec <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006362:	f7fc fdc3 	bl	8002eec <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e1a1      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006374:	4b2d      	ldr	r3, [pc, #180]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0f0      	beq.n	8006362 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006380:	4b2a      	ldr	r3, [pc, #168]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	4927      	ldr	r1, [pc, #156]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 8006390:	4313      	orrs	r3, r2
 8006392:	600b      	str	r3, [r1, #0]
 8006394:	e015      	b.n	80063c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006396:	4b26      	ldr	r3, [pc, #152]	@ (8006430 <HAL_RCC_OscConfig+0x270>)
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800639c:	f7fc fda6 	bl	8002eec <HAL_GetTick>
 80063a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063a2:	e008      	b.n	80063b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063a4:	f7fc fda2 	bl	8002eec <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e180      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063b6:	4b1d      	ldr	r3, [pc, #116]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1f0      	bne.n	80063a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d03a      	beq.n	8006444 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d019      	beq.n	800640a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063d6:	4b17      	ldr	r3, [pc, #92]	@ (8006434 <HAL_RCC_OscConfig+0x274>)
 80063d8:	2201      	movs	r2, #1
 80063da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063dc:	f7fc fd86 	bl	8002eec <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063e4:	f7fc fd82 	bl	8002eec <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e160      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063f6:	4b0d      	ldr	r3, [pc, #52]	@ (800642c <HAL_RCC_OscConfig+0x26c>)
 80063f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0f0      	beq.n	80063e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006402:	2001      	movs	r0, #1
 8006404:	f000 faea 	bl	80069dc <RCC_Delay>
 8006408:	e01c      	b.n	8006444 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800640a:	4b0a      	ldr	r3, [pc, #40]	@ (8006434 <HAL_RCC_OscConfig+0x274>)
 800640c:	2200      	movs	r2, #0
 800640e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006410:	f7fc fd6c 	bl	8002eec <HAL_GetTick>
 8006414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006416:	e00f      	b.n	8006438 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006418:	f7fc fd68 	bl	8002eec <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d908      	bls.n	8006438 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e146      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
 800642a:	bf00      	nop
 800642c:	40021000 	.word	0x40021000
 8006430:	42420000 	.word	0x42420000
 8006434:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006438:	4b92      	ldr	r3, [pc, #584]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 800643a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e9      	bne.n	8006418 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80a6 	beq.w	800659e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006452:	2300      	movs	r3, #0
 8006454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006456:	4b8b      	ldr	r3, [pc, #556]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10d      	bne.n	800647e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006462:	4b88      	ldr	r3, [pc, #544]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	4a87      	ldr	r2, [pc, #540]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800646c:	61d3      	str	r3, [r2, #28]
 800646e:	4b85      	ldr	r3, [pc, #532]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006476:	60bb      	str	r3, [r7, #8]
 8006478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800647a:	2301      	movs	r3, #1
 800647c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800647e:	4b82      	ldr	r3, [pc, #520]	@ (8006688 <HAL_RCC_OscConfig+0x4c8>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d118      	bne.n	80064bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800648a:	4b7f      	ldr	r3, [pc, #508]	@ (8006688 <HAL_RCC_OscConfig+0x4c8>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a7e      	ldr	r2, [pc, #504]	@ (8006688 <HAL_RCC_OscConfig+0x4c8>)
 8006490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006496:	f7fc fd29 	bl	8002eec <HAL_GetTick>
 800649a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800649c:	e008      	b.n	80064b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800649e:	f7fc fd25 	bl	8002eec <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b64      	cmp	r3, #100	@ 0x64
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e103      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b0:	4b75      	ldr	r3, [pc, #468]	@ (8006688 <HAL_RCC_OscConfig+0x4c8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0f0      	beq.n	800649e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d106      	bne.n	80064d2 <HAL_RCC_OscConfig+0x312>
 80064c4:	4b6f      	ldr	r3, [pc, #444]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	4a6e      	ldr	r2, [pc, #440]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 80064ca:	f043 0301 	orr.w	r3, r3, #1
 80064ce:	6213      	str	r3, [r2, #32]
 80064d0:	e02d      	b.n	800652e <HAL_RCC_OscConfig+0x36e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10c      	bne.n	80064f4 <HAL_RCC_OscConfig+0x334>
 80064da:	4b6a      	ldr	r3, [pc, #424]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	4a69      	ldr	r2, [pc, #420]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 80064e0:	f023 0301 	bic.w	r3, r3, #1
 80064e4:	6213      	str	r3, [r2, #32]
 80064e6:	4b67      	ldr	r3, [pc, #412]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	4a66      	ldr	r2, [pc, #408]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 80064ec:	f023 0304 	bic.w	r3, r3, #4
 80064f0:	6213      	str	r3, [r2, #32]
 80064f2:	e01c      	b.n	800652e <HAL_RCC_OscConfig+0x36e>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	2b05      	cmp	r3, #5
 80064fa:	d10c      	bne.n	8006516 <HAL_RCC_OscConfig+0x356>
 80064fc:	4b61      	ldr	r3, [pc, #388]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	4a60      	ldr	r2, [pc, #384]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006502:	f043 0304 	orr.w	r3, r3, #4
 8006506:	6213      	str	r3, [r2, #32]
 8006508:	4b5e      	ldr	r3, [pc, #376]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	4a5d      	ldr	r2, [pc, #372]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 800650e:	f043 0301 	orr.w	r3, r3, #1
 8006512:	6213      	str	r3, [r2, #32]
 8006514:	e00b      	b.n	800652e <HAL_RCC_OscConfig+0x36e>
 8006516:	4b5b      	ldr	r3, [pc, #364]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	4a5a      	ldr	r2, [pc, #360]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	6213      	str	r3, [r2, #32]
 8006522:	4b58      	ldr	r3, [pc, #352]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	4a57      	ldr	r2, [pc, #348]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006528:	f023 0304 	bic.w	r3, r3, #4
 800652c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d015      	beq.n	8006562 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006536:	f7fc fcd9 	bl	8002eec <HAL_GetTick>
 800653a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800653c:	e00a      	b.n	8006554 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800653e:	f7fc fcd5 	bl	8002eec <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800654c:	4293      	cmp	r3, r2
 800654e:	d901      	bls.n	8006554 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e0b1      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006554:	4b4b      	ldr	r3, [pc, #300]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0ee      	beq.n	800653e <HAL_RCC_OscConfig+0x37e>
 8006560:	e014      	b.n	800658c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006562:	f7fc fcc3 	bl	8002eec <HAL_GetTick>
 8006566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006568:	e00a      	b.n	8006580 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800656a:	f7fc fcbf 	bl	8002eec <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006578:	4293      	cmp	r3, r2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e09b      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006580:	4b40      	ldr	r3, [pc, #256]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1ee      	bne.n	800656a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800658c:	7dfb      	ldrb	r3, [r7, #23]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d105      	bne.n	800659e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006592:	4b3c      	ldr	r3, [pc, #240]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006594:	69db      	ldr	r3, [r3, #28]
 8006596:	4a3b      	ldr	r2, [pc, #236]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800659c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 8087 	beq.w	80066b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065a8:	4b36      	ldr	r3, [pc, #216]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f003 030c 	and.w	r3, r3, #12
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d061      	beq.n	8006678 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	69db      	ldr	r3, [r3, #28]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d146      	bne.n	800664a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065bc:	4b33      	ldr	r3, [pc, #204]	@ (800668c <HAL_RCC_OscConfig+0x4cc>)
 80065be:	2200      	movs	r2, #0
 80065c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065c2:	f7fc fc93 	bl	8002eec <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065ca:	f7fc fc8f 	bl	8002eec <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e06d      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065dc:	4b29      	ldr	r3, [pc, #164]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1f0      	bne.n	80065ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065f0:	d108      	bne.n	8006604 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80065f2:	4b24      	ldr	r3, [pc, #144]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	4921      	ldr	r1, [pc, #132]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006600:	4313      	orrs	r3, r2
 8006602:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006604:	4b1f      	ldr	r3, [pc, #124]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a19      	ldr	r1, [r3, #32]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006614:	430b      	orrs	r3, r1
 8006616:	491b      	ldr	r1, [pc, #108]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 8006618:	4313      	orrs	r3, r2
 800661a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800661c:	4b1b      	ldr	r3, [pc, #108]	@ (800668c <HAL_RCC_OscConfig+0x4cc>)
 800661e:	2201      	movs	r2, #1
 8006620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006622:	f7fc fc63 	bl	8002eec <HAL_GetTick>
 8006626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006628:	e008      	b.n	800663c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800662a:	f7fc fc5f 	bl	8002eec <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e03d      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800663c:	4b11      	ldr	r3, [pc, #68]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d0f0      	beq.n	800662a <HAL_RCC_OscConfig+0x46a>
 8006648:	e035      	b.n	80066b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800664a:	4b10      	ldr	r3, [pc, #64]	@ (800668c <HAL_RCC_OscConfig+0x4cc>)
 800664c:	2200      	movs	r2, #0
 800664e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006650:	f7fc fc4c 	bl	8002eec <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006658:	f7fc fc48 	bl	8002eec <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e026      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800666a:	4b06      	ldr	r3, [pc, #24]	@ (8006684 <HAL_RCC_OscConfig+0x4c4>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f0      	bne.n	8006658 <HAL_RCC_OscConfig+0x498>
 8006676:	e01e      	b.n	80066b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e019      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
 8006684:	40021000 	.word	0x40021000
 8006688:	40007000 	.word	0x40007000
 800668c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006690:	4b0b      	ldr	r3, [pc, #44]	@ (80066c0 <HAL_RCC_OscConfig+0x500>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d106      	bne.n	80066b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d001      	beq.n	80066b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e000      	b.n	80066b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40021000 	.word	0x40021000

080066c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0d0      	b.n	800687a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066d8:	4b6a      	ldr	r3, [pc, #424]	@ (8006884 <HAL_RCC_ClockConfig+0x1c0>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d910      	bls.n	8006708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e6:	4b67      	ldr	r3, [pc, #412]	@ (8006884 <HAL_RCC_ClockConfig+0x1c0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f023 0207 	bic.w	r2, r3, #7
 80066ee:	4965      	ldr	r1, [pc, #404]	@ (8006884 <HAL_RCC_ClockConfig+0x1c0>)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f6:	4b63      	ldr	r3, [pc, #396]	@ (8006884 <HAL_RCC_ClockConfig+0x1c0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d001      	beq.n	8006708 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e0b8      	b.n	800687a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d020      	beq.n	8006756 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006720:	4b59      	ldr	r3, [pc, #356]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	4a58      	ldr	r2, [pc, #352]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 8006726:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800672a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006738:	4b53      	ldr	r3, [pc, #332]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	4a52      	ldr	r2, [pc, #328]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 800673e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006742:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006744:	4b50      	ldr	r3, [pc, #320]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	494d      	ldr	r1, [pc, #308]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 8006752:	4313      	orrs	r3, r2
 8006754:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d040      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d107      	bne.n	800677a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800676a:	4b47      	ldr	r3, [pc, #284]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d115      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e07f      	b.n	800687a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b02      	cmp	r3, #2
 8006780:	d107      	bne.n	8006792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006782:	4b41      	ldr	r3, [pc, #260]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d109      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e073      	b.n	800687a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006792:	4b3d      	ldr	r3, [pc, #244]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e06b      	b.n	800687a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067a2:	4b39      	ldr	r3, [pc, #228]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f023 0203 	bic.w	r2, r3, #3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	4936      	ldr	r1, [pc, #216]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067b4:	f7fc fb9a 	bl	8002eec <HAL_GetTick>
 80067b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ba:	e00a      	b.n	80067d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067bc:	f7fc fb96 	bl	8002eec <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e053      	b.n	800687a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f003 020c 	and.w	r2, r3, #12
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d1eb      	bne.n	80067bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067e4:	4b27      	ldr	r3, [pc, #156]	@ (8006884 <HAL_RCC_ClockConfig+0x1c0>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d210      	bcs.n	8006814 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067f2:	4b24      	ldr	r3, [pc, #144]	@ (8006884 <HAL_RCC_ClockConfig+0x1c0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f023 0207 	bic.w	r2, r3, #7
 80067fa:	4922      	ldr	r1, [pc, #136]	@ (8006884 <HAL_RCC_ClockConfig+0x1c0>)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	4313      	orrs	r3, r2
 8006800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006802:	4b20      	ldr	r3, [pc, #128]	@ (8006884 <HAL_RCC_ClockConfig+0x1c0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d001      	beq.n	8006814 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e032      	b.n	800687a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006820:	4b19      	ldr	r3, [pc, #100]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	4916      	ldr	r1, [pc, #88]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 800682e:	4313      	orrs	r3, r2
 8006830:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800683e:	4b12      	ldr	r3, [pc, #72]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	490e      	ldr	r1, [pc, #56]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 800684e:	4313      	orrs	r3, r2
 8006850:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006852:	f000 f821 	bl	8006898 <HAL_RCC_GetSysClockFreq>
 8006856:	4602      	mov	r2, r0
 8006858:	4b0b      	ldr	r3, [pc, #44]	@ (8006888 <HAL_RCC_ClockConfig+0x1c4>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	091b      	lsrs	r3, r3, #4
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	490a      	ldr	r1, [pc, #40]	@ (800688c <HAL_RCC_ClockConfig+0x1c8>)
 8006864:	5ccb      	ldrb	r3, [r1, r3]
 8006866:	fa22 f303 	lsr.w	r3, r2, r3
 800686a:	4a09      	ldr	r2, [pc, #36]	@ (8006890 <HAL_RCC_ClockConfig+0x1cc>)
 800686c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800686e:	4b09      	ldr	r3, [pc, #36]	@ (8006894 <HAL_RCC_ClockConfig+0x1d0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f7fc f960 	bl	8002b38 <HAL_InitTick>

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	40022000 	.word	0x40022000
 8006888:	40021000 	.word	0x40021000
 800688c:	0800bbcc 	.word	0x0800bbcc
 8006890:	20000000 	.word	0x20000000
 8006894:	20000004 	.word	0x20000004

08006898 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	2300      	movs	r3, #0
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	2300      	movs	r3, #0
 80068ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80068b2:	4b1e      	ldr	r3, [pc, #120]	@ (800692c <HAL_RCC_GetSysClockFreq+0x94>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f003 030c 	and.w	r3, r3, #12
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d002      	beq.n	80068c8 <HAL_RCC_GetSysClockFreq+0x30>
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d003      	beq.n	80068ce <HAL_RCC_GetSysClockFreq+0x36>
 80068c6:	e027      	b.n	8006918 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068c8:	4b19      	ldr	r3, [pc, #100]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x98>)
 80068ca:	613b      	str	r3, [r7, #16]
      break;
 80068cc:	e027      	b.n	800691e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	0c9b      	lsrs	r3, r3, #18
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	4a17      	ldr	r2, [pc, #92]	@ (8006934 <HAL_RCC_GetSysClockFreq+0x9c>)
 80068d8:	5cd3      	ldrb	r3, [r2, r3]
 80068da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d010      	beq.n	8006908 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80068e6:	4b11      	ldr	r3, [pc, #68]	@ (800692c <HAL_RCC_GetSysClockFreq+0x94>)
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	0c5b      	lsrs	r3, r3, #17
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	4a11      	ldr	r2, [pc, #68]	@ (8006938 <HAL_RCC_GetSysClockFreq+0xa0>)
 80068f2:	5cd3      	ldrb	r3, [r2, r3]
 80068f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a0d      	ldr	r2, [pc, #52]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x98>)
 80068fa:	fb03 f202 	mul.w	r2, r3, r2
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	fbb2 f3f3 	udiv	r3, r2, r3
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	e004      	b.n	8006912 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a0c      	ldr	r2, [pc, #48]	@ (800693c <HAL_RCC_GetSysClockFreq+0xa4>)
 800690c:	fb02 f303 	mul.w	r3, r2, r3
 8006910:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	613b      	str	r3, [r7, #16]
      break;
 8006916:	e002      	b.n	800691e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006918:	4b05      	ldr	r3, [pc, #20]	@ (8006930 <HAL_RCC_GetSysClockFreq+0x98>)
 800691a:	613b      	str	r3, [r7, #16]
      break;
 800691c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800691e:	693b      	ldr	r3, [r7, #16]
}
 8006920:	4618      	mov	r0, r3
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40021000 	.word	0x40021000
 8006930:	007a1200 	.word	0x007a1200
 8006934:	0800bbe4 	.word	0x0800bbe4
 8006938:	0800bbf4 	.word	0x0800bbf4
 800693c:	003d0900 	.word	0x003d0900

08006940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006944:	4b02      	ldr	r3, [pc, #8]	@ (8006950 <HAL_RCC_GetHCLKFreq+0x10>)
 8006946:	681b      	ldr	r3, [r3, #0]
}
 8006948:	4618      	mov	r0, r3
 800694a:	46bd      	mov	sp, r7
 800694c:	bc80      	pop	{r7}
 800694e:	4770      	bx	lr
 8006950:	20000000 	.word	0x20000000

08006954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006958:	f7ff fff2 	bl	8006940 <HAL_RCC_GetHCLKFreq>
 800695c:	4602      	mov	r2, r0
 800695e:	4b05      	ldr	r3, [pc, #20]	@ (8006974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	0a1b      	lsrs	r3, r3, #8
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	4903      	ldr	r1, [pc, #12]	@ (8006978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800696a:	5ccb      	ldrb	r3, [r1, r3]
 800696c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006970:	4618      	mov	r0, r3
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40021000 	.word	0x40021000
 8006978:	0800bbdc 	.word	0x0800bbdc

0800697c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	220f      	movs	r2, #15
 800698a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800698c:	4b11      	ldr	r3, [pc, #68]	@ (80069d4 <HAL_RCC_GetClockConfig+0x58>)
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f003 0203 	and.w	r2, r3, #3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006998:	4b0e      	ldr	r3, [pc, #56]	@ (80069d4 <HAL_RCC_GetClockConfig+0x58>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80069a4:	4b0b      	ldr	r3, [pc, #44]	@ (80069d4 <HAL_RCC_GetClockConfig+0x58>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80069b0:	4b08      	ldr	r3, [pc, #32]	@ (80069d4 <HAL_RCC_GetClockConfig+0x58>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	08db      	lsrs	r3, r3, #3
 80069b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80069be:	4b06      	ldr	r3, [pc, #24]	@ (80069d8 <HAL_RCC_GetClockConfig+0x5c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0207 	and.w	r2, r3, #7
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr
 80069d4:	40021000 	.word	0x40021000
 80069d8:	40022000 	.word	0x40022000

080069dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80069e4:	4b0a      	ldr	r3, [pc, #40]	@ (8006a10 <RCC_Delay+0x34>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a0a      	ldr	r2, [pc, #40]	@ (8006a14 <RCC_Delay+0x38>)
 80069ea:	fba2 2303 	umull	r2, r3, r2, r3
 80069ee:	0a5b      	lsrs	r3, r3, #9
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	fb02 f303 	mul.w	r3, r2, r3
 80069f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80069f8:	bf00      	nop
  }
  while (Delay --);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	1e5a      	subs	r2, r3, #1
 80069fe:	60fa      	str	r2, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1f9      	bne.n	80069f8 <RCC_Delay+0x1c>
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr
 8006a10:	20000000 	.word	0x20000000
 8006a14:	10624dd3 	.word	0x10624dd3

08006a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e041      	b.n	8006aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f839 	bl	8006ab6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3304      	adds	r3, #4
 8006a54:	4619      	mov	r1, r3
 8006a56:	4610      	mov	r0, r2
 8006a58:	f000 fbd0 	bl	80071fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d001      	beq.n	8006ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e03a      	b.n	8006b56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0201 	orr.w	r2, r2, #1
 8006af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a18      	ldr	r2, [pc, #96]	@ (8006b60 <HAL_TIM_Base_Start_IT+0x98>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00e      	beq.n	8006b20 <HAL_TIM_Base_Start_IT+0x58>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b0a:	d009      	beq.n	8006b20 <HAL_TIM_Base_Start_IT+0x58>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a14      	ldr	r2, [pc, #80]	@ (8006b64 <HAL_TIM_Base_Start_IT+0x9c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d004      	beq.n	8006b20 <HAL_TIM_Base_Start_IT+0x58>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a13      	ldr	r2, [pc, #76]	@ (8006b68 <HAL_TIM_Base_Start_IT+0xa0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d111      	bne.n	8006b44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b06      	cmp	r3, #6
 8006b30:	d010      	beq.n	8006b54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0201 	orr.w	r2, r2, #1
 8006b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b42:	e007      	b.n	8006b54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr
 8006b60:	40012c00 	.word	0x40012c00
 8006b64:	40000400 	.word	0x40000400
 8006b68:	40000800 	.word	0x40000800

08006b6c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e041      	b.n	8006c02 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d106      	bne.n	8006b98 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7fb ff4e 	bl	8002a34 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4610      	mov	r0, r2
 8006bac:	f000 fb26 	bl	80071fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
	...

08006c0c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d104      	bne.n	8006c2a <HAL_TIM_IC_Start_IT+0x1e>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	e013      	b.n	8006c52 <HAL_TIM_IC_Start_IT+0x46>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b04      	cmp	r3, #4
 8006c2e:	d104      	bne.n	8006c3a <HAL_TIM_IC_Start_IT+0x2e>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	e00b      	b.n	8006c52 <HAL_TIM_IC_Start_IT+0x46>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d104      	bne.n	8006c4a <HAL_TIM_IC_Start_IT+0x3e>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	e003      	b.n	8006c52 <HAL_TIM_IC_Start_IT+0x46>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d104      	bne.n	8006c64 <HAL_TIM_IC_Start_IT+0x58>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	e013      	b.n	8006c8c <HAL_TIM_IC_Start_IT+0x80>
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d104      	bne.n	8006c74 <HAL_TIM_IC_Start_IT+0x68>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	e00b      	b.n	8006c8c <HAL_TIM_IC_Start_IT+0x80>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	2b08      	cmp	r3, #8
 8006c78:	d104      	bne.n	8006c84 <HAL_TIM_IC_Start_IT+0x78>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	e003      	b.n	8006c8c <HAL_TIM_IC_Start_IT+0x80>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d102      	bne.n	8006c9a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c94:	7b7b      	ldrb	r3, [r7, #13]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d001      	beq.n	8006c9e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e0b8      	b.n	8006e10 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d104      	bne.n	8006cae <HAL_TIM_IC_Start_IT+0xa2>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cac:	e013      	b.n	8006cd6 <HAL_TIM_IC_Start_IT+0xca>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d104      	bne.n	8006cbe <HAL_TIM_IC_Start_IT+0xb2>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2202      	movs	r2, #2
 8006cb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cbc:	e00b      	b.n	8006cd6 <HAL_TIM_IC_Start_IT+0xca>
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d104      	bne.n	8006cce <HAL_TIM_IC_Start_IT+0xc2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ccc:	e003      	b.n	8006cd6 <HAL_TIM_IC_Start_IT+0xca>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d104      	bne.n	8006ce6 <HAL_TIM_IC_Start_IT+0xda>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2202      	movs	r2, #2
 8006ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ce4:	e013      	b.n	8006d0e <HAL_TIM_IC_Start_IT+0x102>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d104      	bne.n	8006cf6 <HAL_TIM_IC_Start_IT+0xea>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cf4:	e00b      	b.n	8006d0e <HAL_TIM_IC_Start_IT+0x102>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d104      	bne.n	8006d06 <HAL_TIM_IC_Start_IT+0xfa>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d04:	e003      	b.n	8006d0e <HAL_TIM_IC_Start_IT+0x102>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b0c      	cmp	r3, #12
 8006d12:	d841      	bhi.n	8006d98 <HAL_TIM_IC_Start_IT+0x18c>
 8006d14:	a201      	add	r2, pc, #4	@ (adr r2, 8006d1c <HAL_TIM_IC_Start_IT+0x110>)
 8006d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1a:	bf00      	nop
 8006d1c:	08006d51 	.word	0x08006d51
 8006d20:	08006d99 	.word	0x08006d99
 8006d24:	08006d99 	.word	0x08006d99
 8006d28:	08006d99 	.word	0x08006d99
 8006d2c:	08006d63 	.word	0x08006d63
 8006d30:	08006d99 	.word	0x08006d99
 8006d34:	08006d99 	.word	0x08006d99
 8006d38:	08006d99 	.word	0x08006d99
 8006d3c:	08006d75 	.word	0x08006d75
 8006d40:	08006d99 	.word	0x08006d99
 8006d44:	08006d99 	.word	0x08006d99
 8006d48:	08006d99 	.word	0x08006d99
 8006d4c:	08006d87 	.word	0x08006d87
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f042 0202 	orr.w	r2, r2, #2
 8006d5e:	60da      	str	r2, [r3, #12]
      break;
 8006d60:	e01d      	b.n	8006d9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f042 0204 	orr.w	r2, r2, #4
 8006d70:	60da      	str	r2, [r3, #12]
      break;
 8006d72:	e014      	b.n	8006d9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68da      	ldr	r2, [r3, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0208 	orr.w	r2, r2, #8
 8006d82:	60da      	str	r2, [r3, #12]
      break;
 8006d84:	e00b      	b.n	8006d9e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0210 	orr.w	r2, r2, #16
 8006d94:	60da      	str	r2, [r3, #12]
      break;
 8006d96:	e002      	b.n	8006d9e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d9c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d134      	bne.n	8006e0e <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2201      	movs	r2, #1
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 fba0 	bl	80074f2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a18      	ldr	r2, [pc, #96]	@ (8006e18 <HAL_TIM_IC_Start_IT+0x20c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00e      	beq.n	8006dda <HAL_TIM_IC_Start_IT+0x1ce>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dc4:	d009      	beq.n	8006dda <HAL_TIM_IC_Start_IT+0x1ce>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a14      	ldr	r2, [pc, #80]	@ (8006e1c <HAL_TIM_IC_Start_IT+0x210>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d004      	beq.n	8006dda <HAL_TIM_IC_Start_IT+0x1ce>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a12      	ldr	r2, [pc, #72]	@ (8006e20 <HAL_TIM_IC_Start_IT+0x214>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d111      	bne.n	8006dfe <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b06      	cmp	r3, #6
 8006dea:	d010      	beq.n	8006e0e <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfc:	e007      	b.n	8006e0e <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0201 	orr.w	r2, r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800

08006e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d020      	beq.n	8006e88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d01b      	beq.n	8006e88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f06f 0202 	mvn.w	r2, #2
 8006e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	f003 0303 	and.w	r3, r3, #3
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fa fc5c 	bl	800172c <HAL_TIM_IC_CaptureCallback>
 8006e74:	e005      	b.n	8006e82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f9a4 	bl	80071c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f9aa 	bl	80071d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f003 0304 	and.w	r3, r3, #4
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d020      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01b      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f06f 0204 	mvn.w	r2, #4
 8006ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fa fc36 	bl	800172c <HAL_TIM_IC_CaptureCallback>
 8006ec0:	e005      	b.n	8006ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f97e 	bl	80071c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f984 	bl	80071d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f003 0308 	and.w	r3, r3, #8
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d020      	beq.n	8006f20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f003 0308 	and.w	r3, r3, #8
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d01b      	beq.n	8006f20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f06f 0208 	mvn.w	r2, #8
 8006ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2204      	movs	r2, #4
 8006ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fa fc10 	bl	800172c <HAL_TIM_IC_CaptureCallback>
 8006f0c:	e005      	b.n	8006f1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f958 	bl	80071c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f95e 	bl	80071d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f003 0310 	and.w	r3, r3, #16
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d020      	beq.n	8006f6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01b      	beq.n	8006f6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0210 	mvn.w	r2, #16
 8006f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2208      	movs	r2, #8
 8006f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	69db      	ldr	r3, [r3, #28]
 8006f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fa fbea 	bl	800172c <HAL_TIM_IC_CaptureCallback>
 8006f58:	e005      	b.n	8006f66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f932 	bl	80071c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f938 	bl	80071d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f003 0301 	and.w	r3, r3, #1
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00c      	beq.n	8006f90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f003 0301 	and.w	r3, r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d007      	beq.n	8006f90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f06f 0201 	mvn.w	r2, #1
 8006f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fa fddc 	bl	8001b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00c      	beq.n	8006fb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d007      	beq.n	8006fb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fb2b 	bl	800760a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00c      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d007      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f908 	bl	80071e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 0320 	and.w	r3, r3, #32
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00c      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f06f 0220 	mvn.w	r2, #32
 8006ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fafe 	bl	80075f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ffc:	bf00      	nop
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007010:	2300      	movs	r3, #0
 8007012:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800701a:	2b01      	cmp	r3, #1
 800701c:	d101      	bne.n	8007022 <HAL_TIM_IC_ConfigChannel+0x1e>
 800701e:	2302      	movs	r3, #2
 8007020:	e088      	b.n	8007134 <HAL_TIM_IC_ConfigChannel+0x130>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d11b      	bne.n	8007068 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007040:	f000 f94a 	bl	80072d8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699a      	ldr	r2, [r3, #24]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 020c 	bic.w	r2, r2, #12
 8007052:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6999      	ldr	r1, [r3, #24]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	619a      	str	r2, [r3, #24]
 8007066:	e060      	b.n	800712a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b04      	cmp	r3, #4
 800706c:	d11c      	bne.n	80070a8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800707e:	f000 f985 	bl	800738c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	699a      	ldr	r2, [r3, #24]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007090:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6999      	ldr	r1, [r3, #24]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	021a      	lsls	r2, r3, #8
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	619a      	str	r2, [r3, #24]
 80070a6:	e040      	b.n	800712a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d11b      	bne.n	80070e6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80070be:	f000 f9a1 	bl	8007404 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69da      	ldr	r2, [r3, #28]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 020c 	bic.w	r2, r2, #12
 80070d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69d9      	ldr	r1, [r3, #28]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	61da      	str	r2, [r3, #28]
 80070e4:	e021      	b.n	800712a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b0c      	cmp	r3, #12
 80070ea:	d11c      	bne.n	8007126 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80070fc:	f000 f9bd 	bl	800747a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69da      	ldr	r2, [r3, #28]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800710e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69d9      	ldr	r1, [r3, #28]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	021a      	lsls	r2, r3, #8
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	61da      	str	r2, [r3, #28]
 8007124:	e001      	b.n	800712a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007132:	7dfb      	ldrb	r3, [r7, #23]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b0c      	cmp	r3, #12
 800714e:	d831      	bhi.n	80071b4 <HAL_TIM_ReadCapturedValue+0x78>
 8007150:	a201      	add	r2, pc, #4	@ (adr r2, 8007158 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007156:	bf00      	nop
 8007158:	0800718d 	.word	0x0800718d
 800715c:	080071b5 	.word	0x080071b5
 8007160:	080071b5 	.word	0x080071b5
 8007164:	080071b5 	.word	0x080071b5
 8007168:	08007197 	.word	0x08007197
 800716c:	080071b5 	.word	0x080071b5
 8007170:	080071b5 	.word	0x080071b5
 8007174:	080071b5 	.word	0x080071b5
 8007178:	080071a1 	.word	0x080071a1
 800717c:	080071b5 	.word	0x080071b5
 8007180:	080071b5 	.word	0x080071b5
 8007184:	080071b5 	.word	0x080071b5
 8007188:	080071ab 	.word	0x080071ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007192:	60fb      	str	r3, [r7, #12]

      break;
 8007194:	e00f      	b.n	80071b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719c:	60fb      	str	r3, [r7, #12]

      break;
 800719e:	e00a      	b.n	80071b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071a6:	60fb      	str	r3, [r7, #12]

      break;
 80071a8:	e005      	b.n	80071b6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b0:	60fb      	str	r3, [r7, #12]

      break;
 80071b2:	e000      	b.n	80071b6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80071b4:	bf00      	nop
  }

  return tmpreg;
 80071b6:	68fb      	ldr	r3, [r7, #12]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	bc80      	pop	{r7}
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop

080071c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bc80      	pop	{r7}
 80071d4:	4770      	bx	lr

080071d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bc80      	pop	{r7}
 80071e6:	4770      	bx	lr

080071e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bc80      	pop	{r7}
 80071f8:	4770      	bx	lr
	...

080071fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a2f      	ldr	r2, [pc, #188]	@ (80072cc <TIM_Base_SetConfig+0xd0>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d00b      	beq.n	800722c <TIM_Base_SetConfig+0x30>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800721a:	d007      	beq.n	800722c <TIM_Base_SetConfig+0x30>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a2c      	ldr	r2, [pc, #176]	@ (80072d0 <TIM_Base_SetConfig+0xd4>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d003      	beq.n	800722c <TIM_Base_SetConfig+0x30>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a2b      	ldr	r2, [pc, #172]	@ (80072d4 <TIM_Base_SetConfig+0xd8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d108      	bne.n	800723e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a22      	ldr	r2, [pc, #136]	@ (80072cc <TIM_Base_SetConfig+0xd0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00b      	beq.n	800725e <TIM_Base_SetConfig+0x62>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800724c:	d007      	beq.n	800725e <TIM_Base_SetConfig+0x62>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a1f      	ldr	r2, [pc, #124]	@ (80072d0 <TIM_Base_SetConfig+0xd4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d003      	beq.n	800725e <TIM_Base_SetConfig+0x62>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a1e      	ldr	r2, [pc, #120]	@ (80072d4 <TIM_Base_SetConfig+0xd8>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d108      	bne.n	8007270 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a0d      	ldr	r2, [pc, #52]	@ (80072cc <TIM_Base_SetConfig+0xd0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d103      	bne.n	80072a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	691a      	ldr	r2, [r3, #16]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d005      	beq.n	80072c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	f023 0201 	bic.w	r2, r3, #1
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	611a      	str	r2, [r3, #16]
  }
}
 80072c2:	bf00      	nop
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bc80      	pop	{r7}
 80072ca:	4770      	bx	lr
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	40000400 	.word	0x40000400
 80072d4:	40000800 	.word	0x40000800

080072d8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1b      	ldr	r3, [r3, #32]
 80072f0:	f023 0201 	bic.w	r2, r3, #1
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4a1f      	ldr	r2, [pc, #124]	@ (8007380 <TIM_TI1_SetConfig+0xa8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d00b      	beq.n	800731e <TIM_TI1_SetConfig+0x46>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800730c:	d007      	beq.n	800731e <TIM_TI1_SetConfig+0x46>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4a1c      	ldr	r2, [pc, #112]	@ (8007384 <TIM_TI1_SetConfig+0xac>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d003      	beq.n	800731e <TIM_TI1_SetConfig+0x46>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4a1b      	ldr	r2, [pc, #108]	@ (8007388 <TIM_TI1_SetConfig+0xb0>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d101      	bne.n	8007322 <TIM_TI1_SetConfig+0x4a>
 800731e:	2301      	movs	r3, #1
 8007320:	e000      	b.n	8007324 <TIM_TI1_SetConfig+0x4c>
 8007322:	2300      	movs	r3, #0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d008      	beq.n	800733a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f023 0303 	bic.w	r3, r3, #3
 800732e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4313      	orrs	r3, r2
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e003      	b.n	8007342 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f043 0301 	orr.w	r3, r3, #1
 8007340:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007348:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	b2db      	uxtb	r3, r3
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	4313      	orrs	r3, r2
 8007354:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f023 030a 	bic.w	r3, r3, #10
 800735c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	f003 030a 	and.w	r3, r3, #10
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	4313      	orrs	r3, r2
 8007368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	bc80      	pop	{r7}
 800737e:	4770      	bx	lr
 8007380:	40012c00 	.word	0x40012c00
 8007384:	40000400 	.word	0x40000400
 8007388:	40000800 	.word	0x40000800

0800738c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	f023 0210 	bic.w	r2, r3, #16
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	021b      	lsls	r3, r3, #8
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	031b      	lsls	r3, r3, #12
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80073de:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	621a      	str	r2, [r3, #32]
}
 80073fa:	bf00      	nop
 80073fc:	371c      	adds	r7, #28
 80073fe:	46bd      	mov	sp, r7
 8007400:	bc80      	pop	{r7}
 8007402:	4770      	bx	lr

08007404 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007404:	b480      	push	{r7}
 8007406:	b087      	sub	sp, #28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f023 0303 	bic.w	r3, r3, #3
 8007430:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4313      	orrs	r3, r2
 8007438:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007440:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	011b      	lsls	r3, r3, #4
 8007446:	b2db      	uxtb	r3, r3
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007454:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	021b      	lsls	r3, r3, #8
 800745a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	4313      	orrs	r3, r2
 8007462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	621a      	str	r2, [r3, #32]
}
 8007470:	bf00      	nop
 8007472:	371c      	adds	r7, #28
 8007474:	46bd      	mov	sp, r7
 8007476:	bc80      	pop	{r7}
 8007478:	4770      	bx	lr

0800747a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800747a:	b480      	push	{r7}
 800747c:	b087      	sub	sp, #28
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	607a      	str	r2, [r7, #4]
 8007486:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074a6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80074b8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	031b      	lsls	r3, r3, #12
 80074be:	b29b      	uxth	r3, r3
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	031b      	lsls	r3, r3, #12
 80074d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	621a      	str	r2, [r3, #32]
}
 80074e8:	bf00      	nop
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bc80      	pop	{r7}
 80074f0:	4770      	bx	lr

080074f2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b087      	sub	sp, #28
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	2201      	movs	r2, #1
 8007506:	fa02 f303 	lsl.w	r3, r2, r3
 800750a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6a1a      	ldr	r2, [r3, #32]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	43db      	mvns	r3, r3
 8007514:	401a      	ands	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a1a      	ldr	r2, [r3, #32]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f003 031f 	and.w	r3, r3, #31
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	fa01 f303 	lsl.w	r3, r1, r3
 800752a:	431a      	orrs	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	621a      	str	r2, [r3, #32]
}
 8007530:	bf00      	nop
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr
	...

0800753c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007550:	2302      	movs	r3, #2
 8007552:	e046      	b.n	80075e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800757a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a16      	ldr	r2, [pc, #88]	@ (80075ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00e      	beq.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a0:	d009      	beq.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a12      	ldr	r2, [pc, #72]	@ (80075f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d004      	beq.n	80075b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a10      	ldr	r2, [pc, #64]	@ (80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d10c      	bne.n	80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr
 80075ec:	40012c00 	.word	0x40012c00
 80075f0:	40000400 	.word	0x40000400
 80075f4:	40000800 	.word	0x40000800

080075f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr

0800760a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007612:	bf00      	nop
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr

0800761c <__NVIC_SetPriority>:
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	4603      	mov	r3, r0
 8007624:	6039      	str	r1, [r7, #0]
 8007626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800762c:	2b00      	cmp	r3, #0
 800762e:	db0a      	blt.n	8007646 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	b2da      	uxtb	r2, r3
 8007634:	490c      	ldr	r1, [pc, #48]	@ (8007668 <__NVIC_SetPriority+0x4c>)
 8007636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800763a:	0112      	lsls	r2, r2, #4
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	440b      	add	r3, r1
 8007640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007644:	e00a      	b.n	800765c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	b2da      	uxtb	r2, r3
 800764a:	4908      	ldr	r1, [pc, #32]	@ (800766c <__NVIC_SetPriority+0x50>)
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	f003 030f 	and.w	r3, r3, #15
 8007652:	3b04      	subs	r3, #4
 8007654:	0112      	lsls	r2, r2, #4
 8007656:	b2d2      	uxtb	r2, r2
 8007658:	440b      	add	r3, r1
 800765a:	761a      	strb	r2, [r3, #24]
}
 800765c:	bf00      	nop
 800765e:	370c      	adds	r7, #12
 8007660:	46bd      	mov	sp, r7
 8007662:	bc80      	pop	{r7}
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	e000e100 	.word	0xe000e100
 800766c:	e000ed00 	.word	0xe000ed00

08007670 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007674:	4b05      	ldr	r3, [pc, #20]	@ (800768c <SysTick_Handler+0x1c>)
 8007676:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007678:	f002 f870 	bl	800975c <xTaskGetSchedulerState>
 800767c:	4603      	mov	r3, r0
 800767e:	2b01      	cmp	r3, #1
 8007680:	d001      	beq.n	8007686 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007682:	f002 ff11 	bl	800a4a8 <xPortSysTickHandler>
  }
}
 8007686:	bf00      	nop
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	e000e010 	.word	0xe000e010

08007690 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007694:	2100      	movs	r1, #0
 8007696:	f06f 0004 	mvn.w	r0, #4
 800769a:	f7ff ffbf 	bl	800761c <__NVIC_SetPriority>
#endif
}
 800769e:	bf00      	nop
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076aa:	f3ef 8305 	mrs	r3, IPSR
 80076ae:	603b      	str	r3, [r7, #0]
  return(result);
 80076b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80076b6:	f06f 0305 	mvn.w	r3, #5
 80076ba:	607b      	str	r3, [r7, #4]
 80076bc:	e00c      	b.n	80076d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80076be:	4b09      	ldr	r3, [pc, #36]	@ (80076e4 <osKernelInitialize+0x40>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d105      	bne.n	80076d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80076c6:	4b07      	ldr	r3, [pc, #28]	@ (80076e4 <osKernelInitialize+0x40>)
 80076c8:	2201      	movs	r2, #1
 80076ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	607b      	str	r3, [r7, #4]
 80076d0:	e002      	b.n	80076d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80076d2:	f04f 33ff 	mov.w	r3, #4294967295
 80076d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076d8:	687b      	ldr	r3, [r7, #4]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	bc80      	pop	{r7}
 80076e2:	4770      	bx	lr
 80076e4:	20000350 	.word	0x20000350

080076e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076ee:	f3ef 8305 	mrs	r3, IPSR
 80076f2:	603b      	str	r3, [r7, #0]
  return(result);
 80076f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <osKernelStart+0x1a>
    stat = osErrorISR;
 80076fa:	f06f 0305 	mvn.w	r3, #5
 80076fe:	607b      	str	r3, [r7, #4]
 8007700:	e010      	b.n	8007724 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007702:	4b0b      	ldr	r3, [pc, #44]	@ (8007730 <osKernelStart+0x48>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d109      	bne.n	800771e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800770a:	f7ff ffc1 	bl	8007690 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800770e:	4b08      	ldr	r3, [pc, #32]	@ (8007730 <osKernelStart+0x48>)
 8007710:	2202      	movs	r2, #2
 8007712:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007714:	f001 fbb4 	bl	8008e80 <vTaskStartScheduler>
      stat = osOK;
 8007718:	2300      	movs	r3, #0
 800771a:	607b      	str	r3, [r7, #4]
 800771c:	e002      	b.n	8007724 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800771e:	f04f 33ff 	mov.w	r3, #4294967295
 8007722:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007724:	687b      	ldr	r3, [r7, #4]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	20000350 	.word	0x20000350

08007734 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007734:	b580      	push	{r7, lr}
 8007736:	b08e      	sub	sp, #56	@ 0x38
 8007738:	af04      	add	r7, sp, #16
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007744:	f3ef 8305 	mrs	r3, IPSR
 8007748:	617b      	str	r3, [r7, #20]
  return(result);
 800774a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800774c:	2b00      	cmp	r3, #0
 800774e:	d17e      	bne.n	800784e <osThreadNew+0x11a>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d07b      	beq.n	800784e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007756:	2380      	movs	r3, #128	@ 0x80
 8007758:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800775a:	2318      	movs	r3, #24
 800775c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800775e:	2300      	movs	r3, #0
 8007760:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007762:	f04f 33ff 	mov.w	r3, #4294967295
 8007766:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d045      	beq.n	80077fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <osThreadNew+0x48>
        name = attr->name;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d008      	beq.n	80077a2 <osThreadNew+0x6e>
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	2b38      	cmp	r3, #56	@ 0x38
 8007794:	d805      	bhi.n	80077a2 <osThreadNew+0x6e>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <osThreadNew+0x72>
        return (NULL);
 80077a2:	2300      	movs	r3, #0
 80077a4:	e054      	b.n	8007850 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	089b      	lsrs	r3, r3, #2
 80077b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00e      	beq.n	80077dc <osThreadNew+0xa8>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	2ba7      	cmp	r3, #167	@ 0xa7
 80077c4:	d90a      	bls.n	80077dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d006      	beq.n	80077dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <osThreadNew+0xa8>
        mem = 1;
 80077d6:	2301      	movs	r3, #1
 80077d8:	61bb      	str	r3, [r7, #24]
 80077da:	e010      	b.n	80077fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10c      	bne.n	80077fe <osThreadNew+0xca>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d108      	bne.n	80077fe <osThreadNew+0xca>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d104      	bne.n	80077fe <osThreadNew+0xca>
          mem = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61bb      	str	r3, [r7, #24]
 80077f8:	e001      	b.n	80077fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d110      	bne.n	8007826 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800780c:	9202      	str	r2, [sp, #8]
 800780e:	9301      	str	r3, [sp, #4]
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	6a3a      	ldr	r2, [r7, #32]
 8007818:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f001 f93c 	bl	8008a98 <xTaskCreateStatic>
 8007820:	4603      	mov	r3, r0
 8007822:	613b      	str	r3, [r7, #16]
 8007824:	e013      	b.n	800784e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d110      	bne.n	800784e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	b29a      	uxth	r2, r3
 8007830:	f107 0310 	add.w	r3, r7, #16
 8007834:	9301      	str	r3, [sp, #4]
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f001 f98a 	bl	8008b58 <xTaskCreate>
 8007844:	4603      	mov	r3, r0
 8007846:	2b01      	cmp	r3, #1
 8007848:	d001      	beq.n	800784e <osThreadNew+0x11a>
            hTask = NULL;
 800784a:	2300      	movs	r3, #0
 800784c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800784e:	693b      	ldr	r3, [r7, #16]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3728      	adds	r7, #40	@ 0x28
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007860:	f3ef 8305 	mrs	r3, IPSR
 8007864:	60bb      	str	r3, [r7, #8]
  return(result);
 8007866:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <osDelay+0x1c>
    stat = osErrorISR;
 800786c:	f06f 0305 	mvn.w	r3, #5
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	e007      	b.n	8007884 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <osDelay+0x2c>
      vTaskDelay(ticks);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 fac8 	bl	8008e14 <vTaskDelay>
    }
  }

  return (stat);
 8007884:	68fb      	ldr	r3, [r7, #12]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800788e:	b580      	push	{r7, lr}
 8007890:	b088      	sub	sp, #32
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007896:	2300      	movs	r3, #0
 8007898:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800789a:	f3ef 8305 	mrs	r3, IPSR
 800789e:	60bb      	str	r3, [r7, #8]
  return(result);
 80078a0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d174      	bne.n	8007990 <osMutexNew+0x102>
    if (attr != NULL) {
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d003      	beq.n	80078b4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	61bb      	str	r3, [r7, #24]
 80078b2:	e001      	b.n	80078b8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <osMutexNew+0x3a>
      rmtx = 1U;
 80078c2:	2301      	movs	r3, #1
 80078c4:	617b      	str	r3, [r7, #20]
 80078c6:	e001      	b.n	80078cc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	f003 0308 	and.w	r3, r3, #8
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d15c      	bne.n	8007990 <osMutexNew+0x102>
      mem = -1;
 80078d6:	f04f 33ff 	mov.w	r3, #4294967295
 80078da:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d015      	beq.n	800790e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d006      	beq.n	80078f8 <osMutexNew+0x6a>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	2b4f      	cmp	r3, #79	@ 0x4f
 80078f0:	d902      	bls.n	80078f8 <osMutexNew+0x6a>
          mem = 1;
 80078f2:	2301      	movs	r3, #1
 80078f4:	613b      	str	r3, [r7, #16]
 80078f6:	e00c      	b.n	8007912 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d108      	bne.n	8007912 <osMutexNew+0x84>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d104      	bne.n	8007912 <osMutexNew+0x84>
            mem = 0;
 8007908:	2300      	movs	r3, #0
 800790a:	613b      	str	r3, [r7, #16]
 800790c:	e001      	b.n	8007912 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d112      	bne.n	800793e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d007      	beq.n	800792e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	4619      	mov	r1, r3
 8007924:	2004      	movs	r0, #4
 8007926:	f000 fb1a 	bl	8007f5e <xQueueCreateMutexStatic>
 800792a:	61f8      	str	r0, [r7, #28]
 800792c:	e016      	b.n	800795c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	4619      	mov	r1, r3
 8007934:	2001      	movs	r0, #1
 8007936:	f000 fb12 	bl	8007f5e <xQueueCreateMutexStatic>
 800793a:	61f8      	str	r0, [r7, #28]
 800793c:	e00e      	b.n	800795c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10b      	bne.n	800795c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d004      	beq.n	8007954 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800794a:	2004      	movs	r0, #4
 800794c:	f000 faef 	bl	8007f2e <xQueueCreateMutex>
 8007950:	61f8      	str	r0, [r7, #28]
 8007952:	e003      	b.n	800795c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007954:	2001      	movs	r0, #1
 8007956:	f000 faea 	bl	8007f2e <xQueueCreateMutex>
 800795a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00c      	beq.n	800797c <osMutexNew+0xee>
        if (attr != NULL) {
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <osMutexNew+0xe2>
          name = attr->name;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	e001      	b.n	8007974 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007974:	68f9      	ldr	r1, [r7, #12]
 8007976:	69f8      	ldr	r0, [r7, #28]
 8007978:	f001 f832 	bl	80089e0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d006      	beq.n	8007990 <osMutexNew+0x102>
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	f043 0301 	orr.w	r3, r3, #1
 800798e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007990:	69fb      	ldr	r3, [r7, #28]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3720      	adds	r7, #32
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f023 0301 	bic.w	r3, r3, #1
 80079aa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80079b8:	f3ef 8305 	mrs	r3, IPSR
 80079bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80079be:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80079c4:	f06f 0305 	mvn.w	r3, #5
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	e02c      	b.n	8007a26 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d103      	bne.n	80079da <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80079d2:	f06f 0303 	mvn.w	r3, #3
 80079d6:	617b      	str	r3, [r7, #20]
 80079d8:	e025      	b.n	8007a26 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d011      	beq.n	8007a04 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80079e0:	6839      	ldr	r1, [r7, #0]
 80079e2:	6938      	ldr	r0, [r7, #16]
 80079e4:	f000 fb0b 	bl	8007ffe <xQueueTakeMutexRecursive>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d01b      	beq.n	8007a26 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d003      	beq.n	80079fc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80079f4:	f06f 0301 	mvn.w	r3, #1
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	e014      	b.n	8007a26 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80079fc:	f06f 0302 	mvn.w	r3, #2
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	e010      	b.n	8007a26 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6938      	ldr	r0, [r7, #16]
 8007a08:	f000 fdb2 	bl	8008570 <xQueueSemaphoreTake>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d009      	beq.n	8007a26 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007a18:	f06f 0301 	mvn.w	r3, #1
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	e002      	b.n	8007a26 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007a20:	f06f 0302 	mvn.w	r3, #2
 8007a24:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007a26:	697b      	ldr	r3, [r7, #20]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a4c:	f3ef 8305 	mrs	r3, IPSR
 8007a50:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a52:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007a58:	f06f 0305 	mvn.w	r3, #5
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e01f      	b.n	8007aa0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d103      	bne.n	8007a6e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007a66:	f06f 0303 	mvn.w	r3, #3
 8007a6a:	617b      	str	r3, [r7, #20]
 8007a6c:	e018      	b.n	8007aa0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d009      	beq.n	8007a88 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007a74:	6938      	ldr	r0, [r7, #16]
 8007a76:	f000 fa8d 	bl	8007f94 <xQueueGiveMutexRecursive>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d00f      	beq.n	8007aa0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007a80:	f06f 0302 	mvn.w	r3, #2
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	e00b      	b.n	8007aa0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007a88:	2300      	movs	r3, #0
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	6938      	ldr	r0, [r7, #16]
 8007a90:	f000 faec 	bl	800806c <xQueueGenericSend>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d002      	beq.n	8007aa0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007a9a:	f06f 0302 	mvn.w	r3, #2
 8007a9e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007aa0:	697b      	ldr	r3, [r7, #20]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	4a06      	ldr	r2, [pc, #24]	@ (8007ad4 <vApplicationGetIdleTaskMemory+0x28>)
 8007abc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	4a05      	ldr	r2, [pc, #20]	@ (8007ad8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ac2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2280      	movs	r2, #128	@ 0x80
 8007ac8:	601a      	str	r2, [r3, #0]
}
 8007aca:	bf00      	nop
 8007acc:	3714      	adds	r7, #20
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bc80      	pop	{r7}
 8007ad2:	4770      	bx	lr
 8007ad4:	20000354 	.word	0x20000354
 8007ad8:	200003fc 	.word	0x200003fc

08007adc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4a07      	ldr	r2, [pc, #28]	@ (8007b08 <vApplicationGetTimerTaskMemory+0x2c>)
 8007aec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	4a06      	ldr	r2, [pc, #24]	@ (8007b0c <vApplicationGetTimerTaskMemory+0x30>)
 8007af2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007afa:	601a      	str	r2, [r3, #0]
}
 8007afc:	bf00      	nop
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bc80      	pop	{r7}
 8007b04:	4770      	bx	lr
 8007b06:	bf00      	nop
 8007b08:	200005fc 	.word	0x200005fc
 8007b0c:	200006a4 	.word	0x200006a4

08007b10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f103 0208 	add.w	r2, r3, #8
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f04f 32ff 	mov.w	r2, #4294967295
 8007b28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f103 0208 	add.w	r2, r3, #8
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f103 0208 	add.w	r2, r3, #8
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bc80      	pop	{r7}
 8007b4c:	4770      	bx	lr

08007b4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b083      	sub	sp, #12
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bc80      	pop	{r7}
 8007b64:	4770      	bx	lr

08007b66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	1c5a      	adds	r2, r3, #1
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	601a      	str	r2, [r3, #0]
}
 8007ba2:	bf00      	nop
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bc80      	pop	{r7}
 8007baa:	4770      	bx	lr

08007bac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc2:	d103      	bne.n	8007bcc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	e00c      	b.n	8007be6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	e002      	b.n	8007bda <vListInsert+0x2e>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	60fb      	str	r3, [r7, #12]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d2f6      	bcs.n	8007bd4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	601a      	str	r2, [r3, #0]
}
 8007c12:	bf00      	nop
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr

08007c1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6892      	ldr	r2, [r2, #8]
 8007c32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	6852      	ldr	r2, [r2, #4]
 8007c3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d103      	bne.n	8007c50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	1e5a      	subs	r2, r3, #1
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bc80      	pop	{r7}
 8007c6c:	4770      	bx	lr
	...

08007c70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10b      	bne.n	8007c9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c96:	bf00      	nop
 8007c98:	bf00      	nop
 8007c9a:	e7fd      	b.n	8007c98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c9c:	f002 fb86 	bl	800a3ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca8:	68f9      	ldr	r1, [r7, #12]
 8007caa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	441a      	add	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	68f9      	ldr	r1, [r7, #12]
 8007cd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007cd2:	fb01 f303 	mul.w	r3, r1, r3
 8007cd6:	441a      	add	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	22ff      	movs	r2, #255	@ 0xff
 8007ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	22ff      	movs	r2, #255	@ 0xff
 8007ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d114      	bne.n	8007d1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d01a      	beq.n	8007d30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3310      	adds	r3, #16
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f001 fb58 	bl	80093b4 <xTaskRemoveFromEventList>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d012      	beq.n	8007d30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d40 <xQueueGenericReset+0xd0>)
 8007d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	e009      	b.n	8007d30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3310      	adds	r3, #16
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff fef5 	bl	8007b10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3324      	adds	r3, #36	@ 0x24
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff fef0 	bl	8007b10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d30:	f002 fb6c 	bl	800a40c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d34:	2301      	movs	r3, #1
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	e000ed04 	.word	0xe000ed04

08007d44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08e      	sub	sp, #56	@ 0x38
 8007d48:	af02      	add	r7, sp, #8
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	607a      	str	r2, [r7, #4]
 8007d50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10b      	bne.n	8007d70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007d6a:	bf00      	nop
 8007d6c:	bf00      	nop
 8007d6e:	e7fd      	b.n	8007d6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10b      	bne.n	8007d8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d88:	bf00      	nop
 8007d8a:	bf00      	nop
 8007d8c:	e7fd      	b.n	8007d8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <xQueueGenericCreateStatic+0x56>
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <xQueueGenericCreateStatic+0x5a>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e000      	b.n	8007da0 <xQueueGenericCreateStatic+0x5c>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10b      	bne.n	8007dbc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	623b      	str	r3, [r7, #32]
}
 8007db6:	bf00      	nop
 8007db8:	bf00      	nop
 8007dba:	e7fd      	b.n	8007db8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d102      	bne.n	8007dc8 <xQueueGenericCreateStatic+0x84>
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <xQueueGenericCreateStatic+0x88>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e000      	b.n	8007dce <xQueueGenericCreateStatic+0x8a>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	61fb      	str	r3, [r7, #28]
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007dea:	2350      	movs	r3, #80	@ 0x50
 8007dec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2b50      	cmp	r3, #80	@ 0x50
 8007df2:	d00b      	beq.n	8007e0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	61bb      	str	r3, [r7, #24]
}
 8007e06:	bf00      	nop
 8007e08:	bf00      	nop
 8007e0a:	e7fd      	b.n	8007e08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00d      	beq.n	8007e34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 f840 	bl	8007eb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3730      	adds	r7, #48	@ 0x30
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b08a      	sub	sp, #40	@ 0x28
 8007e42:	af02      	add	r7, sp, #8
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	60b9      	str	r1, [r7, #8]
 8007e48:	4613      	mov	r3, r2
 8007e4a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10b      	bne.n	8007e6a <xQueueGenericCreate+0x2c>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	613b      	str	r3, [r7, #16]
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	e7fd      	b.n	8007e66 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	fb02 f303 	mul.w	r3, r2, r3
 8007e72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	3350      	adds	r3, #80	@ 0x50
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f002 fb99 	bl	800a5b0 <pvPortMalloc>
 8007e7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d011      	beq.n	8007eaa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007e86:	69bb      	ldr	r3, [r7, #24]
 8007e88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	3350      	adds	r3, #80	@ 0x50
 8007e8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e98:	79fa      	ldrb	r2, [r7, #7]
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 f805 	bl	8007eb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007eaa:	69bb      	ldr	r3, [r7, #24]
	}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3720      	adds	r7, #32
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d103      	bne.n	8007ed0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	e002      	b.n	8007ed6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	69b8      	ldr	r0, [r7, #24]
 8007ee6:	f7ff fec3 	bl	8007c70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	78fa      	ldrb	r2, [r7, #3]
 8007eee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007ef2:	bf00      	nop
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00e      	beq.n	8007f26 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	2100      	movs	r1, #0
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f8a3 	bl	800806c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b086      	sub	sp, #24
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	4603      	mov	r3, r0
 8007f36:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	461a      	mov	r2, r3
 8007f44:	6939      	ldr	r1, [r7, #16]
 8007f46:	6978      	ldr	r0, [r7, #20]
 8007f48:	f7ff ff79 	bl	8007e3e <xQueueGenericCreate>
 8007f4c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f7ff ffd3 	bl	8007efa <prvInitialiseMutex>

		return xNewQueue;
 8007f54:	68fb      	ldr	r3, [r7, #12]
	}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b088      	sub	sp, #32
 8007f62:	af02      	add	r7, sp, #8
 8007f64:	4603      	mov	r3, r0
 8007f66:	6039      	str	r1, [r7, #0]
 8007f68:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	9300      	str	r3, [sp, #0]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	6939      	ldr	r1, [r7, #16]
 8007f7c:	6978      	ldr	r0, [r7, #20]
 8007f7e:	f7ff fee1 	bl	8007d44 <xQueueGenericCreateStatic>
 8007f82:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7ff ffb8 	bl	8007efa <prvInitialiseMutex>

		return xNewQueue;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
	}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007f94:	b590      	push	{r4, r7, lr}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10b      	bne.n	8007fbe <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	60fb      	str	r3, [r7, #12]
}
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	e7fd      	b.n	8007fba <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	689c      	ldr	r4, [r3, #8]
 8007fc2:	f001 fbbd 	bl	8009740 <xTaskGetCurrentTaskHandle>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	d111      	bne.n	8007ff0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	1e5a      	subs	r2, r3, #1
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d105      	bne.n	8007fea <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007fde:	2300      	movs	r3, #0
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	6938      	ldr	r0, [r7, #16]
 8007fe6:	f000 f841 	bl	800806c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007fea:	2301      	movs	r3, #1
 8007fec:	617b      	str	r3, [r7, #20]
 8007fee:	e001      	b.n	8007ff4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007ff4:	697b      	ldr	r3, [r7, #20]
	}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd90      	pop	{r4, r7, pc}

08007ffe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007ffe:	b590      	push	{r4, r7, lr}
 8008000:	b087      	sub	sp, #28
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10b      	bne.n	800802a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8008012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008016:	f383 8811 	msr	BASEPRI, r3
 800801a:	f3bf 8f6f 	isb	sy
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	60fb      	str	r3, [r7, #12]
}
 8008024:	bf00      	nop
 8008026:	bf00      	nop
 8008028:	e7fd      	b.n	8008026 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	689c      	ldr	r4, [r3, #8]
 800802e:	f001 fb87 	bl	8009740 <xTaskGetCurrentTaskHandle>
 8008032:	4603      	mov	r3, r0
 8008034:	429c      	cmp	r4, r3
 8008036:	d107      	bne.n	8008048 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008042:	2301      	movs	r3, #1
 8008044:	617b      	str	r3, [r7, #20]
 8008046:	e00c      	b.n	8008062 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6938      	ldr	r0, [r7, #16]
 800804c:	f000 fa90 	bl	8008570 <xQueueSemaphoreTake>
 8008050:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008062:	697b      	ldr	r3, [r7, #20]
	}
 8008064:	4618      	mov	r0, r3
 8008066:	371c      	adds	r7, #28
 8008068:	46bd      	mov	sp, r7
 800806a:	bd90      	pop	{r4, r7, pc}

0800806c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08e      	sub	sp, #56	@ 0x38
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800807a:	2300      	movs	r3, #0
 800807c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10b      	bne.n	80080a0 <xQueueGenericSend+0x34>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800809a:	bf00      	nop
 800809c:	bf00      	nop
 800809e:	e7fd      	b.n	800809c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d103      	bne.n	80080ae <xQueueGenericSend+0x42>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <xQueueGenericSend+0x46>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <xQueueGenericSend+0x48>
 80080b2:	2300      	movs	r3, #0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d10b      	bne.n	80080d0 <xQueueGenericSend+0x64>
	__asm volatile
 80080b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080bc:	f383 8811 	msr	BASEPRI, r3
 80080c0:	f3bf 8f6f 	isb	sy
 80080c4:	f3bf 8f4f 	dsb	sy
 80080c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80080ca:	bf00      	nop
 80080cc:	bf00      	nop
 80080ce:	e7fd      	b.n	80080cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d103      	bne.n	80080de <xQueueGenericSend+0x72>
 80080d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d101      	bne.n	80080e2 <xQueueGenericSend+0x76>
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <xQueueGenericSend+0x78>
 80080e2:	2300      	movs	r3, #0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10b      	bne.n	8008100 <xQueueGenericSend+0x94>
	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	623b      	str	r3, [r7, #32]
}
 80080fa:	bf00      	nop
 80080fc:	bf00      	nop
 80080fe:	e7fd      	b.n	80080fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008100:	f001 fb2c 	bl	800975c <xTaskGetSchedulerState>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d102      	bne.n	8008110 <xQueueGenericSend+0xa4>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <xQueueGenericSend+0xa8>
 8008110:	2301      	movs	r3, #1
 8008112:	e000      	b.n	8008116 <xQueueGenericSend+0xaa>
 8008114:	2300      	movs	r3, #0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10b      	bne.n	8008132 <xQueueGenericSend+0xc6>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	61fb      	str	r3, [r7, #28]
}
 800812c:	bf00      	nop
 800812e:	bf00      	nop
 8008130:	e7fd      	b.n	800812e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008132:	f002 f93b 	bl	800a3ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008138:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800813e:	429a      	cmp	r2, r3
 8008140:	d302      	bcc.n	8008148 <xQueueGenericSend+0xdc>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d129      	bne.n	800819c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	68b9      	ldr	r1, [r7, #8]
 800814c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800814e:	f000 fb36 	bl	80087be <prvCopyDataToQueue>
 8008152:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008158:	2b00      	cmp	r3, #0
 800815a:	d010      	beq.n	800817e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800815c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815e:	3324      	adds	r3, #36	@ 0x24
 8008160:	4618      	mov	r0, r3
 8008162:	f001 f927 	bl	80093b4 <xTaskRemoveFromEventList>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d013      	beq.n	8008194 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800816c:	4b3f      	ldr	r3, [pc, #252]	@ (800826c <xQueueGenericSend+0x200>)
 800816e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008172:	601a      	str	r2, [r3, #0]
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	e00a      	b.n	8008194 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800817e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008184:	4b39      	ldr	r3, [pc, #228]	@ (800826c <xQueueGenericSend+0x200>)
 8008186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008194:	f002 f93a 	bl	800a40c <vPortExitCritical>
				return pdPASS;
 8008198:	2301      	movs	r3, #1
 800819a:	e063      	b.n	8008264 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d103      	bne.n	80081aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80081a2:	f002 f933 	bl	800a40c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081a6:	2300      	movs	r3, #0
 80081a8:	e05c      	b.n	8008264 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d106      	bne.n	80081be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081b0:	f107 0314 	add.w	r3, r7, #20
 80081b4:	4618      	mov	r0, r3
 80081b6:	f001 f961 	bl	800947c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081ba:	2301      	movs	r3, #1
 80081bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081be:	f002 f925 	bl	800a40c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081c2:	f000 fecd 	bl	8008f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081c6:	f002 f8f1 	bl	800a3ac <vPortEnterCritical>
 80081ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081d0:	b25b      	sxtb	r3, r3
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	d103      	bne.n	80081e0 <xQueueGenericSend+0x174>
 80081d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081e6:	b25b      	sxtb	r3, r3
 80081e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ec:	d103      	bne.n	80081f6 <xQueueGenericSend+0x18a>
 80081ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80081f6:	f002 f909 	bl	800a40c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081fa:	1d3a      	adds	r2, r7, #4
 80081fc:	f107 0314 	add.w	r3, r7, #20
 8008200:	4611      	mov	r1, r2
 8008202:	4618      	mov	r0, r3
 8008204:	f001 f950 	bl	80094a8 <xTaskCheckForTimeOut>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d124      	bne.n	8008258 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800820e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008210:	f000 fbcd 	bl	80089ae <prvIsQueueFull>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d018      	beq.n	800824c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	3310      	adds	r3, #16
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4611      	mov	r1, r2
 8008222:	4618      	mov	r0, r3
 8008224:	f001 f874 	bl	8009310 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008228:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800822a:	f000 fb58 	bl	80088de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800822e:	f000 fea5 	bl	8008f7c <xTaskResumeAll>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	f47f af7c 	bne.w	8008132 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800823a:	4b0c      	ldr	r3, [pc, #48]	@ (800826c <xQueueGenericSend+0x200>)
 800823c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	e772      	b.n	8008132 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800824c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800824e:	f000 fb46 	bl	80088de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008252:	f000 fe93 	bl	8008f7c <xTaskResumeAll>
 8008256:	e76c      	b.n	8008132 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800825a:	f000 fb40 	bl	80088de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800825e:	f000 fe8d 	bl	8008f7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008262:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008264:	4618      	mov	r0, r3
 8008266:	3738      	adds	r7, #56	@ 0x38
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	e000ed04 	.word	0xe000ed04

08008270 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b090      	sub	sp, #64	@ 0x40
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10b      	bne.n	80082a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800829a:	bf00      	nop
 800829c:	bf00      	nop
 800829e:	e7fd      	b.n	800829c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d103      	bne.n	80082ae <xQueueGenericSendFromISR+0x3e>
 80082a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <xQueueGenericSendFromISR+0x42>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <xQueueGenericSendFromISR+0x44>
 80082b2:	2300      	movs	r3, #0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10b      	bne.n	80082d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80082ca:	bf00      	nop
 80082cc:	bf00      	nop
 80082ce:	e7fd      	b.n	80082cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d103      	bne.n	80082de <xQueueGenericSendFromISR+0x6e>
 80082d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d101      	bne.n	80082e2 <xQueueGenericSendFromISR+0x72>
 80082de:	2301      	movs	r3, #1
 80082e0:	e000      	b.n	80082e4 <xQueueGenericSendFromISR+0x74>
 80082e2:	2300      	movs	r3, #0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10b      	bne.n	8008300 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80082e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	623b      	str	r3, [r7, #32]
}
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
 80082fe:	e7fd      	b.n	80082fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008300:	f002 f916 	bl	800a530 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008304:	f3ef 8211 	mrs	r2, BASEPRI
 8008308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830c:	f383 8811 	msr	BASEPRI, r3
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	61fa      	str	r2, [r7, #28]
 800831a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800831c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800831e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008328:	429a      	cmp	r2, r3
 800832a:	d302      	bcc.n	8008332 <xQueueGenericSendFromISR+0xc2>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	2b02      	cmp	r3, #2
 8008330:	d12f      	bne.n	8008392 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008334:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008338:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800833c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008340:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008342:	683a      	ldr	r2, [r7, #0]
 8008344:	68b9      	ldr	r1, [r7, #8]
 8008346:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008348:	f000 fa39 	bl	80087be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800834c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008354:	d112      	bne.n	800837c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835a:	2b00      	cmp	r3, #0
 800835c:	d016      	beq.n	800838c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800835e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008360:	3324      	adds	r3, #36	@ 0x24
 8008362:	4618      	mov	r0, r3
 8008364:	f001 f826 	bl	80093b4 <xTaskRemoveFromEventList>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00e      	beq.n	800838c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00b      	beq.n	800838c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	e007      	b.n	800838c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800837c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008380:	3301      	adds	r3, #1
 8008382:	b2db      	uxtb	r3, r3
 8008384:	b25a      	sxtb	r2, r3
 8008386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800838c:	2301      	movs	r3, #1
 800838e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008390:	e001      	b.n	8008396 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008392:	2300      	movs	r3, #0
 8008394:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008398:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80083a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3740      	adds	r7, #64	@ 0x40
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08c      	sub	sp, #48	@ 0x30
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80083b8:	2300      	movs	r3, #0
 80083ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10b      	bne.n	80083de <xQueueReceive+0x32>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	623b      	str	r3, [r7, #32]
}
 80083d8:	bf00      	nop
 80083da:	bf00      	nop
 80083dc:	e7fd      	b.n	80083da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <xQueueReceive+0x40>
 80083e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <xQueueReceive+0x44>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <xQueueReceive+0x46>
 80083f0:	2300      	movs	r3, #0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10b      	bne.n	800840e <xQueueReceive+0x62>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	61fb      	str	r3, [r7, #28]
}
 8008408:	bf00      	nop
 800840a:	bf00      	nop
 800840c:	e7fd      	b.n	800840a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800840e:	f001 f9a5 	bl	800975c <xTaskGetSchedulerState>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d102      	bne.n	800841e <xQueueReceive+0x72>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <xQueueReceive+0x76>
 800841e:	2301      	movs	r3, #1
 8008420:	e000      	b.n	8008424 <xQueueReceive+0x78>
 8008422:	2300      	movs	r3, #0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10b      	bne.n	8008440 <xQueueReceive+0x94>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	61bb      	str	r3, [r7, #24]
}
 800843a:	bf00      	nop
 800843c:	bf00      	nop
 800843e:	e7fd      	b.n	800843c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008440:	f001 ffb4 	bl	800a3ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008448:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	2b00      	cmp	r3, #0
 800844e:	d01f      	beq.n	8008490 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008450:	68b9      	ldr	r1, [r7, #8]
 8008452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008454:	f000 fa1d 	bl	8008892 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845a:	1e5a      	subs	r2, r3, #1
 800845c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800845e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00f      	beq.n	8008488 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846a:	3310      	adds	r3, #16
 800846c:	4618      	mov	r0, r3
 800846e:	f000 ffa1 	bl	80093b4 <xTaskRemoveFromEventList>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d007      	beq.n	8008488 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008478:	4b3c      	ldr	r3, [pc, #240]	@ (800856c <xQueueReceive+0x1c0>)
 800847a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008488:	f001 ffc0 	bl	800a40c <vPortExitCritical>
				return pdPASS;
 800848c:	2301      	movs	r3, #1
 800848e:	e069      	b.n	8008564 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d103      	bne.n	800849e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008496:	f001 ffb9 	bl	800a40c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800849a:	2300      	movs	r3, #0
 800849c:	e062      	b.n	8008564 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800849e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d106      	bne.n	80084b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084a4:	f107 0310 	add.w	r3, r7, #16
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 ffe7 	bl	800947c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084ae:	2301      	movs	r3, #1
 80084b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084b2:	f001 ffab 	bl	800a40c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084b6:	f000 fd53 	bl	8008f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084ba:	f001 ff77 	bl	800a3ac <vPortEnterCritical>
 80084be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084c4:	b25b      	sxtb	r3, r3
 80084c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ca:	d103      	bne.n	80084d4 <xQueueReceive+0x128>
 80084cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084da:	b25b      	sxtb	r3, r3
 80084dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e0:	d103      	bne.n	80084ea <xQueueReceive+0x13e>
 80084e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084ea:	f001 ff8f 	bl	800a40c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084ee:	1d3a      	adds	r2, r7, #4
 80084f0:	f107 0310 	add.w	r3, r7, #16
 80084f4:	4611      	mov	r1, r2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 ffd6 	bl	80094a8 <xTaskCheckForTimeOut>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d123      	bne.n	800854a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008502:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008504:	f000 fa3d 	bl	8008982 <prvIsQueueEmpty>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d017      	beq.n	800853e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800850e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008510:	3324      	adds	r3, #36	@ 0x24
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	4611      	mov	r1, r2
 8008516:	4618      	mov	r0, r3
 8008518:	f000 fefa 	bl	8009310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800851c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800851e:	f000 f9de 	bl	80088de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008522:	f000 fd2b 	bl	8008f7c <xTaskResumeAll>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d189      	bne.n	8008440 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800852c:	4b0f      	ldr	r3, [pc, #60]	@ (800856c <xQueueReceive+0x1c0>)
 800852e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	f3bf 8f6f 	isb	sy
 800853c:	e780      	b.n	8008440 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800853e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008540:	f000 f9cd 	bl	80088de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008544:	f000 fd1a 	bl	8008f7c <xTaskResumeAll>
 8008548:	e77a      	b.n	8008440 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800854a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800854c:	f000 f9c7 	bl	80088de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008550:	f000 fd14 	bl	8008f7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008554:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008556:	f000 fa14 	bl	8008982 <prvIsQueueEmpty>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	f43f af6f 	beq.w	8008440 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008562:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008564:	4618      	mov	r0, r3
 8008566:	3730      	adds	r7, #48	@ 0x30
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	e000ed04 	.word	0xe000ed04

08008570 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b08e      	sub	sp, #56	@ 0x38
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800857a:	2300      	movs	r3, #0
 800857c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008582:	2300      	movs	r3, #0
 8008584:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10b      	bne.n	80085a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	623b      	str	r3, [r7, #32]
}
 800859e:	bf00      	nop
 80085a0:	bf00      	nop
 80085a2:	e7fd      	b.n	80085a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80085a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00b      	beq.n	80085c4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	61fb      	str	r3, [r7, #28]
}
 80085be:	bf00      	nop
 80085c0:	bf00      	nop
 80085c2:	e7fd      	b.n	80085c0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085c4:	f001 f8ca 	bl	800975c <xTaskGetSchedulerState>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d102      	bne.n	80085d4 <xQueueSemaphoreTake+0x64>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d101      	bne.n	80085d8 <xQueueSemaphoreTake+0x68>
 80085d4:	2301      	movs	r3, #1
 80085d6:	e000      	b.n	80085da <xQueueSemaphoreTake+0x6a>
 80085d8:	2300      	movs	r3, #0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10b      	bne.n	80085f6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	61bb      	str	r3, [r7, #24]
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	e7fd      	b.n	80085f2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085f6:	f001 fed9 	bl	800a3ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80085fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008602:	2b00      	cmp	r3, #0
 8008604:	d024      	beq.n	8008650 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008608:	1e5a      	subs	r2, r3, #1
 800860a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800860e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d104      	bne.n	8008620 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008616:	f001 fa1b 	bl	8009a50 <pvTaskIncrementMutexHeldCount>
 800861a:	4602      	mov	r2, r0
 800861c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00f      	beq.n	8008648 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800862a:	3310      	adds	r3, #16
 800862c:	4618      	mov	r0, r3
 800862e:	f000 fec1 	bl	80093b4 <xTaskRemoveFromEventList>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d007      	beq.n	8008648 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008638:	4b54      	ldr	r3, [pc, #336]	@ (800878c <xQueueSemaphoreTake+0x21c>)
 800863a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008648:	f001 fee0 	bl	800a40c <vPortExitCritical>
				return pdPASS;
 800864c:	2301      	movs	r3, #1
 800864e:	e098      	b.n	8008782 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d112      	bne.n	800867c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	617b      	str	r3, [r7, #20]
}
 800866e:	bf00      	nop
 8008670:	bf00      	nop
 8008672:	e7fd      	b.n	8008670 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008674:	f001 feca 	bl	800a40c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008678:	2300      	movs	r3, #0
 800867a:	e082      	b.n	8008782 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800867c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800867e:	2b00      	cmp	r3, #0
 8008680:	d106      	bne.n	8008690 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008682:	f107 030c 	add.w	r3, r7, #12
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fef8 	bl	800947c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800868c:	2301      	movs	r3, #1
 800868e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008690:	f001 febc 	bl	800a40c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008694:	f000 fc64 	bl	8008f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008698:	f001 fe88 	bl	800a3ac <vPortEnterCritical>
 800869c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086a2:	b25b      	sxtb	r3, r3
 80086a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a8:	d103      	bne.n	80086b2 <xQueueSemaphoreTake+0x142>
 80086aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80086b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086b8:	b25b      	sxtb	r3, r3
 80086ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086be:	d103      	bne.n	80086c8 <xQueueSemaphoreTake+0x158>
 80086c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80086c8:	f001 fea0 	bl	800a40c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086cc:	463a      	mov	r2, r7
 80086ce:	f107 030c 	add.w	r3, r7, #12
 80086d2:	4611      	mov	r1, r2
 80086d4:	4618      	mov	r0, r3
 80086d6:	f000 fee7 	bl	80094a8 <xTaskCheckForTimeOut>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d132      	bne.n	8008746 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086e2:	f000 f94e 	bl	8008982 <prvIsQueueEmpty>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d026      	beq.n	800873a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d109      	bne.n	8008708 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80086f4:	f001 fe5a 	bl	800a3ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f001 f84b 	bl	8009798 <xTaskPriorityInherit>
 8008702:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008704:	f001 fe82 	bl	800a40c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800870a:	3324      	adds	r3, #36	@ 0x24
 800870c:	683a      	ldr	r2, [r7, #0]
 800870e:	4611      	mov	r1, r2
 8008710:	4618      	mov	r0, r3
 8008712:	f000 fdfd 	bl	8009310 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008716:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008718:	f000 f8e1 	bl	80088de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800871c:	f000 fc2e 	bl	8008f7c <xTaskResumeAll>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	f47f af67 	bne.w	80085f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008728:	4b18      	ldr	r3, [pc, #96]	@ (800878c <xQueueSemaphoreTake+0x21c>)
 800872a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	e75d      	b.n	80085f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800873a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800873c:	f000 f8cf 	bl	80088de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008740:	f000 fc1c 	bl	8008f7c <xTaskResumeAll>
 8008744:	e757      	b.n	80085f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008746:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008748:	f000 f8c9 	bl	80088de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800874c:	f000 fc16 	bl	8008f7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008750:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008752:	f000 f916 	bl	8008982 <prvIsQueueEmpty>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	f43f af4c 	beq.w	80085f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800875e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00d      	beq.n	8008780 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008764:	f001 fe22 	bl	800a3ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008768:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800876a:	f000 f811 	bl	8008790 <prvGetDisinheritPriorityAfterTimeout>
 800876e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008776:	4618      	mov	r0, r3
 8008778:	f001 f8e6 	bl	8009948 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800877c:	f001 fe46 	bl	800a40c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008780:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008782:	4618      	mov	r0, r3
 8008784:	3738      	adds	r7, #56	@ 0x38
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	e000ed04 	.word	0xe000ed04

08008790 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800879c:	2b00      	cmp	r3, #0
 800879e:	d006      	beq.n	80087ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	e001      	b.n	80087b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80087ae:	2300      	movs	r3, #0
 80087b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80087b2:	68fb      	ldr	r3, [r7, #12]
	}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bc80      	pop	{r7}
 80087bc:	4770      	bx	lr

080087be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b086      	sub	sp, #24
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	60b9      	str	r1, [r7, #8]
 80087c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087ca:	2300      	movs	r3, #0
 80087cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10d      	bne.n	80087f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d14d      	bne.n	8008880 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f001 f83d 	bl	8009868 <xTaskPriorityDisinherit>
 80087ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	609a      	str	r2, [r3, #8]
 80087f6:	e043      	b.n	8008880 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d119      	bne.n	8008832 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6858      	ldr	r0, [r3, #4]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008806:	461a      	mov	r2, r3
 8008808:	68b9      	ldr	r1, [r7, #8]
 800880a:	f002 fc6c 	bl	800b0e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008816:	441a      	add	r2, r3
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	429a      	cmp	r2, r3
 8008826:	d32b      	bcc.n	8008880 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	605a      	str	r2, [r3, #4]
 8008830:	e026      	b.n	8008880 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	68d8      	ldr	r0, [r3, #12]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883a:	461a      	mov	r2, r3
 800883c:	68b9      	ldr	r1, [r7, #8]
 800883e:	f002 fc52 	bl	800b0e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	68da      	ldr	r2, [r3, #12]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800884a:	425b      	negs	r3, r3
 800884c:	441a      	add	r2, r3
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	68da      	ldr	r2, [r3, #12]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d207      	bcs.n	800886e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	689a      	ldr	r2, [r3, #8]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008866:	425b      	negs	r3, r3
 8008868:	441a      	add	r2, r3
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d105      	bne.n	8008880 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	3b01      	subs	r3, #1
 800887e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	1c5a      	adds	r2, r3, #1
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008888:	697b      	ldr	r3, [r7, #20]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3718      	adds	r7, #24
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d018      	beq.n	80088d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	68da      	ldr	r2, [r3, #12]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ac:	441a      	add	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	68da      	ldr	r2, [r3, #12]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d303      	bcc.n	80088c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	68d9      	ldr	r1, [r3, #12]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ce:	461a      	mov	r2, r3
 80088d0:	6838      	ldr	r0, [r7, #0]
 80088d2:	f002 fc08 	bl	800b0e6 <memcpy>
	}
}
 80088d6:	bf00      	nop
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088e6:	f001 fd61 	bl	800a3ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088f2:	e011      	b.n	8008918 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d012      	beq.n	8008922 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	3324      	adds	r3, #36	@ 0x24
 8008900:	4618      	mov	r0, r3
 8008902:	f000 fd57 	bl	80093b4 <xTaskRemoveFromEventList>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800890c:	f000 fe30 	bl	8009570 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008910:	7bfb      	ldrb	r3, [r7, #15]
 8008912:	3b01      	subs	r3, #1
 8008914:	b2db      	uxtb	r3, r3
 8008916:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800891c:	2b00      	cmp	r3, #0
 800891e:	dce9      	bgt.n	80088f4 <prvUnlockQueue+0x16>
 8008920:	e000      	b.n	8008924 <prvUnlockQueue+0x46>
					break;
 8008922:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	22ff      	movs	r2, #255	@ 0xff
 8008928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800892c:	f001 fd6e 	bl	800a40c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008930:	f001 fd3c 	bl	800a3ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800893a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800893c:	e011      	b.n	8008962 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d012      	beq.n	800896c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	3310      	adds	r3, #16
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fd32 	bl	80093b4 <xTaskRemoveFromEventList>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008956:	f000 fe0b 	bl	8009570 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	3b01      	subs	r3, #1
 800895e:	b2db      	uxtb	r3, r3
 8008960:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008962:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008966:	2b00      	cmp	r3, #0
 8008968:	dce9      	bgt.n	800893e <prvUnlockQueue+0x60>
 800896a:	e000      	b.n	800896e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800896c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	22ff      	movs	r2, #255	@ 0xff
 8008972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008976:	f001 fd49 	bl	800a40c <vPortExitCritical>
}
 800897a:	bf00      	nop
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800898a:	f001 fd0f 	bl	800a3ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008992:	2b00      	cmp	r3, #0
 8008994:	d102      	bne.n	800899c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008996:	2301      	movs	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	e001      	b.n	80089a0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800899c:	2300      	movs	r3, #0
 800899e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089a0:	f001 fd34 	bl	800a40c <vPortExitCritical>

	return xReturn;
 80089a4:	68fb      	ldr	r3, [r7, #12]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089b6:	f001 fcf9 	bl	800a3ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d102      	bne.n	80089cc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089c6:	2301      	movs	r3, #1
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	e001      	b.n	80089d0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089cc:	2300      	movs	r3, #0
 80089ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089d0:	f001 fd1c 	bl	800a40c <vPortExitCritical>

	return xReturn;
 80089d4:	68fb      	ldr	r3, [r7, #12]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
	...

080089e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]
 80089ee:	e014      	b.n	8008a1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089f0:	4a0e      	ldr	r2, [pc, #56]	@ (8008a2c <vQueueAddToRegistry+0x4c>)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10b      	bne.n	8008a14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089fc:	490b      	ldr	r1, [pc, #44]	@ (8008a2c <vQueueAddToRegistry+0x4c>)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a06:	4a09      	ldr	r2, [pc, #36]	@ (8008a2c <vQueueAddToRegistry+0x4c>)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	00db      	lsls	r3, r3, #3
 8008a0c:	4413      	add	r3, r2
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a12:	e006      	b.n	8008a22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	3301      	adds	r3, #1
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b07      	cmp	r3, #7
 8008a1e:	d9e7      	bls.n	80089f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a20:	bf00      	nop
 8008a22:	bf00      	nop
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bc80      	pop	{r7}
 8008a2a:	4770      	bx	lr
 8008a2c:	20000aa4 	.word	0x20000aa4

08008a30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a40:	f001 fcb4 	bl	800a3ac <vPortEnterCritical>
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a4a:	b25b      	sxtb	r3, r3
 8008a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a50:	d103      	bne.n	8008a5a <vQueueWaitForMessageRestricted+0x2a>
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a60:	b25b      	sxtb	r3, r3
 8008a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a66:	d103      	bne.n	8008a70 <vQueueWaitForMessageRestricted+0x40>
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a70:	f001 fccc 	bl	800a40c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d106      	bne.n	8008a8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	3324      	adds	r3, #36	@ 0x24
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fc69 	bl	800935c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a8a:	6978      	ldr	r0, [r7, #20]
 8008a8c:	f7ff ff27 	bl	80088de <prvUnlockQueue>
	}
 8008a90:	bf00      	nop
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b08e      	sub	sp, #56	@ 0x38
 8008a9c:	af04      	add	r7, sp, #16
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10b      	bne.n	8008ac4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	623b      	str	r3, [r7, #32]
}
 8008abe:	bf00      	nop
 8008ac0:	bf00      	nop
 8008ac2:	e7fd      	b.n	8008ac0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10b      	bne.n	8008ae2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	61fb      	str	r3, [r7, #28]
}
 8008adc:	bf00      	nop
 8008ade:	bf00      	nop
 8008ae0:	e7fd      	b.n	8008ade <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ae2:	23a8      	movs	r3, #168	@ 0xa8
 8008ae4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	2ba8      	cmp	r3, #168	@ 0xa8
 8008aea:	d00b      	beq.n	8008b04 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	61bb      	str	r3, [r7, #24]
}
 8008afe:	bf00      	nop
 8008b00:	bf00      	nop
 8008b02:	e7fd      	b.n	8008b00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01e      	beq.n	8008b4a <xTaskCreateStatic+0xb2>
 8008b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d01b      	beq.n	8008b4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b24:	2300      	movs	r3, #0
 8008b26:	9303      	str	r3, [sp, #12]
 8008b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2a:	9302      	str	r3, [sp, #8]
 8008b2c:	f107 0314 	add.w	r3, r7, #20
 8008b30:	9301      	str	r3, [sp, #4]
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	68b9      	ldr	r1, [r7, #8]
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f851 	bl	8008be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b44:	f000 f8f6 	bl	8008d34 <prvAddNewTaskToReadyList>
 8008b48:	e001      	b.n	8008b4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b4e:	697b      	ldr	r3, [r7, #20]
	}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3728      	adds	r7, #40	@ 0x28
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b08c      	sub	sp, #48	@ 0x30
 8008b5c:	af04      	add	r7, sp, #16
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	60b9      	str	r1, [r7, #8]
 8008b62:	603b      	str	r3, [r7, #0]
 8008b64:	4613      	mov	r3, r2
 8008b66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b68:	88fb      	ldrh	r3, [r7, #6]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 fd1f 	bl	800a5b0 <pvPortMalloc>
 8008b72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00e      	beq.n	8008b98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b7a:	20a8      	movs	r0, #168	@ 0xa8
 8008b7c:	f001 fd18 	bl	800a5b0 <pvPortMalloc>
 8008b80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d003      	beq.n	8008b90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	697a      	ldr	r2, [r7, #20]
 8008b8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b8e:	e005      	b.n	8008b9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b90:	6978      	ldr	r0, [r7, #20]
 8008b92:	f001 fddb 	bl	800a74c <vPortFree>
 8008b96:	e001      	b.n	8008b9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d017      	beq.n	8008bd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008baa:	88fa      	ldrh	r2, [r7, #6]
 8008bac:	2300      	movs	r3, #0
 8008bae:	9303      	str	r3, [sp, #12]
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	9302      	str	r3, [sp, #8]
 8008bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb6:	9301      	str	r3, [sp, #4]
 8008bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	68b9      	ldr	r1, [r7, #8]
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f000 f80f 	bl	8008be4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bc6:	69f8      	ldr	r0, [r7, #28]
 8008bc8:	f000 f8b4 	bl	8008d34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	61bb      	str	r3, [r7, #24]
 8008bd0:	e002      	b.n	8008bd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bd8:	69bb      	ldr	r3, [r7, #24]
	}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3720      	adds	r7, #32
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b088      	sub	sp, #32
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	21a5      	movs	r1, #165	@ 0xa5
 8008bfe:	f002 f989 	bl	800af14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	f023 0307 	bic.w	r3, r3, #7
 8008c1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00b      	beq.n	8008c3e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2a:	f383 8811 	msr	BASEPRI, r3
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	617b      	str	r3, [r7, #20]
}
 8008c38:	bf00      	nop
 8008c3a:	bf00      	nop
 8008c3c:	e7fd      	b.n	8008c3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d01f      	beq.n	8008c84 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c44:	2300      	movs	r3, #0
 8008c46:	61fb      	str	r3, [r7, #28]
 8008c48:	e012      	b.n	8008c70 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	4413      	add	r3, r2
 8008c50:	7819      	ldrb	r1, [r3, #0]
 8008c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	4413      	add	r3, r2
 8008c58:	3334      	adds	r3, #52	@ 0x34
 8008c5a:	460a      	mov	r2, r1
 8008c5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	4413      	add	r3, r2
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d006      	beq.n	8008c78 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	61fb      	str	r3, [r7, #28]
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	2b0f      	cmp	r3, #15
 8008c74:	d9e9      	bls.n	8008c4a <prvInitialiseNewTask+0x66>
 8008c76:	e000      	b.n	8008c7a <prvInitialiseNewTask+0x96>
			{
				break;
 8008c78:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008c82:	e003      	b.n	8008c8c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8e:	2b37      	cmp	r3, #55	@ 0x37
 8008c90:	d901      	bls.n	8008c96 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c92:	2337      	movs	r3, #55	@ 0x37
 8008c94:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ca0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008caa:	3304      	adds	r3, #4
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fe ff4e 	bl	8007b4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb4:	3318      	adds	r3, #24
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe ff49 	bl	8007b4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cd0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce4:	3354      	adds	r3, #84	@ 0x54
 8008ce6:	224c      	movs	r2, #76	@ 0x4c
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4618      	mov	r0, r3
 8008cec:	f002 f912 	bl	800af14 <memset>
 8008cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8008d28 <prvInitialiseNewTask+0x144>)
 8008cf4:	659a      	str	r2, [r3, #88]	@ 0x58
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8008d2c <prvInitialiseNewTask+0x148>)
 8008cfa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8008d30 <prvInitialiseNewTask+0x14c>)
 8008d00:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	68f9      	ldr	r1, [r7, #12]
 8008d06:	69b8      	ldr	r0, [r7, #24]
 8008d08:	f001 fa62 	bl	800a1d0 <pxPortInitialiseStack>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d002      	beq.n	8008d1e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d1e:	bf00      	nop
 8008d20:	3720      	adds	r7, #32
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	20001d40 	.word	0x20001d40
 8008d2c:	20001da8 	.word	0x20001da8
 8008d30:	20001e10 	.word	0x20001e10

08008d34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d3c:	f001 fb36 	bl	800a3ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d40:	4b2d      	ldr	r3, [pc, #180]	@ (8008df8 <prvAddNewTaskToReadyList+0xc4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	3301      	adds	r3, #1
 8008d46:	4a2c      	ldr	r2, [pc, #176]	@ (8008df8 <prvAddNewTaskToReadyList+0xc4>)
 8008d48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8008dfc <prvAddNewTaskToReadyList+0xc8>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d109      	bne.n	8008d66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d52:	4a2a      	ldr	r2, [pc, #168]	@ (8008dfc <prvAddNewTaskToReadyList+0xc8>)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d58:	4b27      	ldr	r3, [pc, #156]	@ (8008df8 <prvAddNewTaskToReadyList+0xc4>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d110      	bne.n	8008d82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d60:	f000 fc2a 	bl	80095b8 <prvInitialiseTaskLists>
 8008d64:	e00d      	b.n	8008d82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d66:	4b26      	ldr	r3, [pc, #152]	@ (8008e00 <prvAddNewTaskToReadyList+0xcc>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d109      	bne.n	8008d82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d6e:	4b23      	ldr	r3, [pc, #140]	@ (8008dfc <prvAddNewTaskToReadyList+0xc8>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d802      	bhi.n	8008d82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8008dfc <prvAddNewTaskToReadyList+0xc8>)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d82:	4b20      	ldr	r3, [pc, #128]	@ (8008e04 <prvAddNewTaskToReadyList+0xd0>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3301      	adds	r3, #1
 8008d88:	4a1e      	ldr	r2, [pc, #120]	@ (8008e04 <prvAddNewTaskToReadyList+0xd0>)
 8008d8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8008e04 <prvAddNewTaskToReadyList+0xd0>)
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d98:	4b1b      	ldr	r3, [pc, #108]	@ (8008e08 <prvAddNewTaskToReadyList+0xd4>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d903      	bls.n	8008da8 <prvAddNewTaskToReadyList+0x74>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da4:	4a18      	ldr	r2, [pc, #96]	@ (8008e08 <prvAddNewTaskToReadyList+0xd4>)
 8008da6:	6013      	str	r3, [r2, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dac:	4613      	mov	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4413      	add	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4a15      	ldr	r2, [pc, #84]	@ (8008e0c <prvAddNewTaskToReadyList+0xd8>)
 8008db6:	441a      	add	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3304      	adds	r3, #4
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	f7fe fed1 	bl	8007b66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008dc4:	f001 fb22 	bl	800a40c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8008e00 <prvAddNewTaskToReadyList+0xcc>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00e      	beq.n	8008dee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8008dfc <prvAddNewTaskToReadyList+0xc8>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d207      	bcs.n	8008dee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008dde:	4b0c      	ldr	r3, [pc, #48]	@ (8008e10 <prvAddNewTaskToReadyList+0xdc>)
 8008de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dee:	bf00      	nop
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20000fb8 	.word	0x20000fb8
 8008dfc:	20000ae4 	.word	0x20000ae4
 8008e00:	20000fc4 	.word	0x20000fc4
 8008e04:	20000fd4 	.word	0x20000fd4
 8008e08:	20000fc0 	.word	0x20000fc0
 8008e0c:	20000ae8 	.word	0x20000ae8
 8008e10:	e000ed04 	.word	0xe000ed04

08008e14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d018      	beq.n	8008e58 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e26:	4b14      	ldr	r3, [pc, #80]	@ (8008e78 <vTaskDelay+0x64>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00b      	beq.n	8008e46 <vTaskDelay+0x32>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	60bb      	str	r3, [r7, #8]
}
 8008e40:	bf00      	nop
 8008e42:	bf00      	nop
 8008e44:	e7fd      	b.n	8008e42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e46:	f000 f88b 	bl	8008f60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fe13 	bl	8009a78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e52:	f000 f893 	bl	8008f7c <xTaskResumeAll>
 8008e56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d107      	bne.n	8008e6e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008e5e:	4b07      	ldr	r3, [pc, #28]	@ (8008e7c <vTaskDelay+0x68>)
 8008e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e6e:	bf00      	nop
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	20000fe0 	.word	0x20000fe0
 8008e7c:	e000ed04 	.word	0xe000ed04

08008e80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08a      	sub	sp, #40	@ 0x28
 8008e84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e86:	2300      	movs	r3, #0
 8008e88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e8e:	463a      	mov	r2, r7
 8008e90:	1d39      	adds	r1, r7, #4
 8008e92:	f107 0308 	add.w	r3, r7, #8
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fe fe08 	bl	8007aac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	9202      	str	r2, [sp, #8]
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	460a      	mov	r2, r1
 8008eae:	4924      	ldr	r1, [pc, #144]	@ (8008f40 <vTaskStartScheduler+0xc0>)
 8008eb0:	4824      	ldr	r0, [pc, #144]	@ (8008f44 <vTaskStartScheduler+0xc4>)
 8008eb2:	f7ff fdf1 	bl	8008a98 <xTaskCreateStatic>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	4a23      	ldr	r2, [pc, #140]	@ (8008f48 <vTaskStartScheduler+0xc8>)
 8008eba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ebc:	4b22      	ldr	r3, [pc, #136]	@ (8008f48 <vTaskStartScheduler+0xc8>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	617b      	str	r3, [r7, #20]
 8008ec8:	e001      	b.n	8008ece <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d102      	bne.n	8008eda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ed4:	f000 fe24 	bl	8009b20 <xTimerCreateTimerTask>
 8008ed8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d11b      	bne.n	8008f18 <vTaskStartScheduler+0x98>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	613b      	str	r3, [r7, #16]
}
 8008ef2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ef4:	4b15      	ldr	r3, [pc, #84]	@ (8008f4c <vTaskStartScheduler+0xcc>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	3354      	adds	r3, #84	@ 0x54
 8008efa:	4a15      	ldr	r2, [pc, #84]	@ (8008f50 <vTaskStartScheduler+0xd0>)
 8008efc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008efe:	4b15      	ldr	r3, [pc, #84]	@ (8008f54 <vTaskStartScheduler+0xd4>)
 8008f00:	f04f 32ff 	mov.w	r2, #4294967295
 8008f04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f06:	4b14      	ldr	r3, [pc, #80]	@ (8008f58 <vTaskStartScheduler+0xd8>)
 8008f08:	2201      	movs	r2, #1
 8008f0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f0c:	4b13      	ldr	r3, [pc, #76]	@ (8008f5c <vTaskStartScheduler+0xdc>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f12:	f001 f9d9 	bl	800a2c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f16:	e00f      	b.n	8008f38 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1e:	d10b      	bne.n	8008f38 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	60fb      	str	r3, [r7, #12]
}
 8008f32:	bf00      	nop
 8008f34:	bf00      	nop
 8008f36:	e7fd      	b.n	8008f34 <vTaskStartScheduler+0xb4>
}
 8008f38:	bf00      	nop
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	0800bb14 	.word	0x0800bb14
 8008f44:	08009589 	.word	0x08009589
 8008f48:	20000fdc 	.word	0x20000fdc
 8008f4c:	20000ae4 	.word	0x20000ae4
 8008f50:	2000001c 	.word	0x2000001c
 8008f54:	20000fd8 	.word	0x20000fd8
 8008f58:	20000fc4 	.word	0x20000fc4
 8008f5c:	20000fbc 	.word	0x20000fbc

08008f60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f60:	b480      	push	{r7}
 8008f62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f64:	4b04      	ldr	r3, [pc, #16]	@ (8008f78 <vTaskSuspendAll+0x18>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	4a03      	ldr	r2, [pc, #12]	@ (8008f78 <vTaskSuspendAll+0x18>)
 8008f6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f6e:	bf00      	nop
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bc80      	pop	{r7}
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	20000fe0 	.word	0x20000fe0

08008f7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f82:	2300      	movs	r3, #0
 8008f84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f86:	2300      	movs	r3, #0
 8008f88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f8a:	4b42      	ldr	r3, [pc, #264]	@ (8009094 <xTaskResumeAll+0x118>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10b      	bne.n	8008faa <xTaskResumeAll+0x2e>
	__asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	603b      	str	r3, [r7, #0]
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	e7fd      	b.n	8008fa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008faa:	f001 f9ff 	bl	800a3ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008fae:	4b39      	ldr	r3, [pc, #228]	@ (8009094 <xTaskResumeAll+0x118>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	4a37      	ldr	r2, [pc, #220]	@ (8009094 <xTaskResumeAll+0x118>)
 8008fb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fb8:	4b36      	ldr	r3, [pc, #216]	@ (8009094 <xTaskResumeAll+0x118>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d162      	bne.n	8009086 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008fc0:	4b35      	ldr	r3, [pc, #212]	@ (8009098 <xTaskResumeAll+0x11c>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d05e      	beq.n	8009086 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fc8:	e02f      	b.n	800902a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fca:	4b34      	ldr	r3, [pc, #208]	@ (800909c <xTaskResumeAll+0x120>)
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	3318      	adds	r3, #24
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe fe20 	bl	8007c1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fe fe1b 	bl	8007c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fea:	4b2d      	ldr	r3, [pc, #180]	@ (80090a0 <xTaskResumeAll+0x124>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d903      	bls.n	8008ffa <xTaskResumeAll+0x7e>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80090a0 <xTaskResumeAll+0x124>)
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ffe:	4613      	mov	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4413      	add	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4a27      	ldr	r2, [pc, #156]	@ (80090a4 <xTaskResumeAll+0x128>)
 8009008:	441a      	add	r2, r3
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3304      	adds	r3, #4
 800900e:	4619      	mov	r1, r3
 8009010:	4610      	mov	r0, r2
 8009012:	f7fe fda8 	bl	8007b66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800901a:	4b23      	ldr	r3, [pc, #140]	@ (80090a8 <xTaskResumeAll+0x12c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009020:	429a      	cmp	r2, r3
 8009022:	d302      	bcc.n	800902a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009024:	4b21      	ldr	r3, [pc, #132]	@ (80090ac <xTaskResumeAll+0x130>)
 8009026:	2201      	movs	r2, #1
 8009028:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800902a:	4b1c      	ldr	r3, [pc, #112]	@ (800909c <xTaskResumeAll+0x120>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1cb      	bne.n	8008fca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d001      	beq.n	800903c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009038:	f000 fb62 	bl	8009700 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800903c:	4b1c      	ldr	r3, [pc, #112]	@ (80090b0 <xTaskResumeAll+0x134>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d010      	beq.n	800906a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009048:	f000 f844 	bl	80090d4 <xTaskIncrementTick>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d002      	beq.n	8009058 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009052:	4b16      	ldr	r3, [pc, #88]	@ (80090ac <xTaskResumeAll+0x130>)
 8009054:	2201      	movs	r2, #1
 8009056:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3b01      	subs	r3, #1
 800905c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1f1      	bne.n	8009048 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009064:	4b12      	ldr	r3, [pc, #72]	@ (80090b0 <xTaskResumeAll+0x134>)
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800906a:	4b10      	ldr	r3, [pc, #64]	@ (80090ac <xTaskResumeAll+0x130>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d009      	beq.n	8009086 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009072:	2301      	movs	r3, #1
 8009074:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009076:	4b0f      	ldr	r3, [pc, #60]	@ (80090b4 <xTaskResumeAll+0x138>)
 8009078:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	f3bf 8f4f 	dsb	sy
 8009082:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009086:	f001 f9c1 	bl	800a40c <vPortExitCritical>

	return xAlreadyYielded;
 800908a:	68bb      	ldr	r3, [r7, #8]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3710      	adds	r7, #16
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	20000fe0 	.word	0x20000fe0
 8009098:	20000fb8 	.word	0x20000fb8
 800909c:	20000f78 	.word	0x20000f78
 80090a0:	20000fc0 	.word	0x20000fc0
 80090a4:	20000ae8 	.word	0x20000ae8
 80090a8:	20000ae4 	.word	0x20000ae4
 80090ac:	20000fcc 	.word	0x20000fcc
 80090b0:	20000fc8 	.word	0x20000fc8
 80090b4:	e000ed04 	.word	0xe000ed04

080090b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80090be:	4b04      	ldr	r3, [pc, #16]	@ (80090d0 <xTaskGetTickCount+0x18>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80090c4:	687b      	ldr	r3, [r7, #4]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr
 80090d0:	20000fbc 	.word	0x20000fbc

080090d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090da:	2300      	movs	r3, #0
 80090dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090de:	4b4f      	ldr	r3, [pc, #316]	@ (800921c <xTaskIncrementTick+0x148>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f040 8090 	bne.w	8009208 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090e8:	4b4d      	ldr	r3, [pc, #308]	@ (8009220 <xTaskIncrementTick+0x14c>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3301      	adds	r3, #1
 80090ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090f0:	4a4b      	ldr	r2, [pc, #300]	@ (8009220 <xTaskIncrementTick+0x14c>)
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d121      	bne.n	8009140 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80090fc:	4b49      	ldr	r3, [pc, #292]	@ (8009224 <xTaskIncrementTick+0x150>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00b      	beq.n	800911e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	603b      	str	r3, [r7, #0]
}
 8009118:	bf00      	nop
 800911a:	bf00      	nop
 800911c:	e7fd      	b.n	800911a <xTaskIncrementTick+0x46>
 800911e:	4b41      	ldr	r3, [pc, #260]	@ (8009224 <xTaskIncrementTick+0x150>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	4b40      	ldr	r3, [pc, #256]	@ (8009228 <xTaskIncrementTick+0x154>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a3e      	ldr	r2, [pc, #248]	@ (8009224 <xTaskIncrementTick+0x150>)
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	4a3e      	ldr	r2, [pc, #248]	@ (8009228 <xTaskIncrementTick+0x154>)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6013      	str	r3, [r2, #0]
 8009132:	4b3e      	ldr	r3, [pc, #248]	@ (800922c <xTaskIncrementTick+0x158>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3301      	adds	r3, #1
 8009138:	4a3c      	ldr	r2, [pc, #240]	@ (800922c <xTaskIncrementTick+0x158>)
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	f000 fae0 	bl	8009700 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009140:	4b3b      	ldr	r3, [pc, #236]	@ (8009230 <xTaskIncrementTick+0x15c>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	693a      	ldr	r2, [r7, #16]
 8009146:	429a      	cmp	r2, r3
 8009148:	d349      	bcc.n	80091de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800914a:	4b36      	ldr	r3, [pc, #216]	@ (8009224 <xTaskIncrementTick+0x150>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d104      	bne.n	800915e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009154:	4b36      	ldr	r3, [pc, #216]	@ (8009230 <xTaskIncrementTick+0x15c>)
 8009156:	f04f 32ff 	mov.w	r2, #4294967295
 800915a:	601a      	str	r2, [r3, #0]
					break;
 800915c:	e03f      	b.n	80091de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800915e:	4b31      	ldr	r3, [pc, #196]	@ (8009224 <xTaskIncrementTick+0x150>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	429a      	cmp	r2, r3
 8009174:	d203      	bcs.n	800917e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009176:	4a2e      	ldr	r2, [pc, #184]	@ (8009230 <xTaskIncrementTick+0x15c>)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800917c:	e02f      	b.n	80091de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	3304      	adds	r3, #4
 8009182:	4618      	mov	r0, r3
 8009184:	f7fe fd4a 	bl	8007c1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800918c:	2b00      	cmp	r3, #0
 800918e:	d004      	beq.n	800919a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	3318      	adds	r3, #24
 8009194:	4618      	mov	r0, r3
 8009196:	f7fe fd41 	bl	8007c1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800919e:	4b25      	ldr	r3, [pc, #148]	@ (8009234 <xTaskIncrementTick+0x160>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d903      	bls.n	80091ae <xTaskIncrementTick+0xda>
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091aa:	4a22      	ldr	r2, [pc, #136]	@ (8009234 <xTaskIncrementTick+0x160>)
 80091ac:	6013      	str	r3, [r2, #0]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091b2:	4613      	mov	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4a1f      	ldr	r2, [pc, #124]	@ (8009238 <xTaskIncrementTick+0x164>)
 80091bc:	441a      	add	r2, r3
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	3304      	adds	r3, #4
 80091c2:	4619      	mov	r1, r3
 80091c4:	4610      	mov	r0, r2
 80091c6:	f7fe fcce 	bl	8007b66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ce:	4b1b      	ldr	r3, [pc, #108]	@ (800923c <xTaskIncrementTick+0x168>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d3b8      	bcc.n	800914a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80091d8:	2301      	movs	r3, #1
 80091da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091dc:	e7b5      	b.n	800914a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091de:	4b17      	ldr	r3, [pc, #92]	@ (800923c <xTaskIncrementTick+0x168>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e4:	4914      	ldr	r1, [pc, #80]	@ (8009238 <xTaskIncrementTick+0x164>)
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	440b      	add	r3, r1
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d901      	bls.n	80091fa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80091f6:	2301      	movs	r3, #1
 80091f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80091fa:	4b11      	ldr	r3, [pc, #68]	@ (8009240 <xTaskIncrementTick+0x16c>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d007      	beq.n	8009212 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009202:	2301      	movs	r3, #1
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	e004      	b.n	8009212 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009208:	4b0e      	ldr	r3, [pc, #56]	@ (8009244 <xTaskIncrementTick+0x170>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3301      	adds	r3, #1
 800920e:	4a0d      	ldr	r2, [pc, #52]	@ (8009244 <xTaskIncrementTick+0x170>)
 8009210:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009212:	697b      	ldr	r3, [r7, #20]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	20000fe0 	.word	0x20000fe0
 8009220:	20000fbc 	.word	0x20000fbc
 8009224:	20000f70 	.word	0x20000f70
 8009228:	20000f74 	.word	0x20000f74
 800922c:	20000fd0 	.word	0x20000fd0
 8009230:	20000fd8 	.word	0x20000fd8
 8009234:	20000fc0 	.word	0x20000fc0
 8009238:	20000ae8 	.word	0x20000ae8
 800923c:	20000ae4 	.word	0x20000ae4
 8009240:	20000fcc 	.word	0x20000fcc
 8009244:	20000fc8 	.word	0x20000fc8

08009248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800924e:	4b2a      	ldr	r3, [pc, #168]	@ (80092f8 <vTaskSwitchContext+0xb0>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009256:	4b29      	ldr	r3, [pc, #164]	@ (80092fc <vTaskSwitchContext+0xb4>)
 8009258:	2201      	movs	r2, #1
 800925a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800925c:	e047      	b.n	80092ee <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800925e:	4b27      	ldr	r3, [pc, #156]	@ (80092fc <vTaskSwitchContext+0xb4>)
 8009260:	2200      	movs	r2, #0
 8009262:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009264:	4b26      	ldr	r3, [pc, #152]	@ (8009300 <vTaskSwitchContext+0xb8>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	60fb      	str	r3, [r7, #12]
 800926a:	e011      	b.n	8009290 <vTaskSwitchContext+0x48>
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10b      	bne.n	800928a <vTaskSwitchContext+0x42>
	__asm volatile
 8009272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009276:	f383 8811 	msr	BASEPRI, r3
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	607b      	str	r3, [r7, #4]
}
 8009284:	bf00      	nop
 8009286:	bf00      	nop
 8009288:	e7fd      	b.n	8009286 <vTaskSwitchContext+0x3e>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3b01      	subs	r3, #1
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	491c      	ldr	r1, [pc, #112]	@ (8009304 <vTaskSwitchContext+0xbc>)
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	4613      	mov	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	440b      	add	r3, r1
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d0e3      	beq.n	800926c <vTaskSwitchContext+0x24>
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	4613      	mov	r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	4413      	add	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4a15      	ldr	r2, [pc, #84]	@ (8009304 <vTaskSwitchContext+0xbc>)
 80092b0:	4413      	add	r3, r2
 80092b2:	60bb      	str	r3, [r7, #8]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	605a      	str	r2, [r3, #4]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	3308      	adds	r3, #8
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d104      	bne.n	80092d4 <vTaskSwitchContext+0x8c>
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	605a      	str	r2, [r3, #4]
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	4a0b      	ldr	r2, [pc, #44]	@ (8009308 <vTaskSwitchContext+0xc0>)
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	4a08      	ldr	r2, [pc, #32]	@ (8009300 <vTaskSwitchContext+0xb8>)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092e4:	4b08      	ldr	r3, [pc, #32]	@ (8009308 <vTaskSwitchContext+0xc0>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3354      	adds	r3, #84	@ 0x54
 80092ea:	4a08      	ldr	r2, [pc, #32]	@ (800930c <vTaskSwitchContext+0xc4>)
 80092ec:	6013      	str	r3, [r2, #0]
}
 80092ee:	bf00      	nop
 80092f0:	3714      	adds	r7, #20
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bc80      	pop	{r7}
 80092f6:	4770      	bx	lr
 80092f8:	20000fe0 	.word	0x20000fe0
 80092fc:	20000fcc 	.word	0x20000fcc
 8009300:	20000fc0 	.word	0x20000fc0
 8009304:	20000ae8 	.word	0x20000ae8
 8009308:	20000ae4 	.word	0x20000ae4
 800930c:	2000001c 	.word	0x2000001c

08009310 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10b      	bne.n	8009338 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	60fb      	str	r3, [r7, #12]
}
 8009332:	bf00      	nop
 8009334:	bf00      	nop
 8009336:	e7fd      	b.n	8009334 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009338:	4b07      	ldr	r3, [pc, #28]	@ (8009358 <vTaskPlaceOnEventList+0x48>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	3318      	adds	r3, #24
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7fe fc33 	bl	8007bac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009346:	2101      	movs	r1, #1
 8009348:	6838      	ldr	r0, [r7, #0]
 800934a:	f000 fb95 	bl	8009a78 <prvAddCurrentTaskToDelayedList>
}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000ae4 	.word	0x20000ae4

0800935c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d10b      	bne.n	8009386 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	617b      	str	r3, [r7, #20]
}
 8009380:	bf00      	nop
 8009382:	bf00      	nop
 8009384:	e7fd      	b.n	8009382 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009386:	4b0a      	ldr	r3, [pc, #40]	@ (80093b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3318      	adds	r3, #24
 800938c:	4619      	mov	r1, r3
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f7fe fbe9 	bl	8007b66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d002      	beq.n	80093a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800939a:	f04f 33ff 	mov.w	r3, #4294967295
 800939e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	68b8      	ldr	r0, [r7, #8]
 80093a4:	f000 fb68 	bl	8009a78 <prvAddCurrentTaskToDelayedList>
	}
 80093a8:	bf00      	nop
 80093aa:	3718      	adds	r7, #24
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	20000ae4 	.word	0x20000ae4

080093b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10b      	bne.n	80093e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	60fb      	str	r3, [r7, #12]
}
 80093dc:	bf00      	nop
 80093de:	bf00      	nop
 80093e0:	e7fd      	b.n	80093de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	3318      	adds	r3, #24
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fc18 	bl	8007c1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ec:	4b1d      	ldr	r3, [pc, #116]	@ (8009464 <xTaskRemoveFromEventList+0xb0>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d11d      	bne.n	8009430 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	3304      	adds	r3, #4
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7fe fc0f 	bl	8007c1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009402:	4b19      	ldr	r3, [pc, #100]	@ (8009468 <xTaskRemoveFromEventList+0xb4>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	429a      	cmp	r2, r3
 8009408:	d903      	bls.n	8009412 <xTaskRemoveFromEventList+0x5e>
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940e:	4a16      	ldr	r2, [pc, #88]	@ (8009468 <xTaskRemoveFromEventList+0xb4>)
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4a13      	ldr	r2, [pc, #76]	@ (800946c <xTaskRemoveFromEventList+0xb8>)
 8009420:	441a      	add	r2, r3
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	3304      	adds	r3, #4
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7fe fb9c 	bl	8007b66 <vListInsertEnd>
 800942e:	e005      	b.n	800943c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	3318      	adds	r3, #24
 8009434:	4619      	mov	r1, r3
 8009436:	480e      	ldr	r0, [pc, #56]	@ (8009470 <xTaskRemoveFromEventList+0xbc>)
 8009438:	f7fe fb95 	bl	8007b66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009440:	4b0c      	ldr	r3, [pc, #48]	@ (8009474 <xTaskRemoveFromEventList+0xc0>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009446:	429a      	cmp	r2, r3
 8009448:	d905      	bls.n	8009456 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800944a:	2301      	movs	r3, #1
 800944c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800944e:	4b0a      	ldr	r3, [pc, #40]	@ (8009478 <xTaskRemoveFromEventList+0xc4>)
 8009450:	2201      	movs	r2, #1
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	e001      	b.n	800945a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009456:	2300      	movs	r3, #0
 8009458:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800945a:	697b      	ldr	r3, [r7, #20]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	20000fe0 	.word	0x20000fe0
 8009468:	20000fc0 	.word	0x20000fc0
 800946c:	20000ae8 	.word	0x20000ae8
 8009470:	20000f78 	.word	0x20000f78
 8009474:	20000ae4 	.word	0x20000ae4
 8009478:	20000fcc 	.word	0x20000fcc

0800947c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009484:	4b06      	ldr	r3, [pc, #24]	@ (80094a0 <vTaskInternalSetTimeOutState+0x24>)
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800948c:	4b05      	ldr	r3, [pc, #20]	@ (80094a4 <vTaskInternalSetTimeOutState+0x28>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	605a      	str	r2, [r3, #4]
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	bc80      	pop	{r7}
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	20000fd0 	.word	0x20000fd0
 80094a4:	20000fbc 	.word	0x20000fbc

080094a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10b      	bne.n	80094d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	613b      	str	r3, [r7, #16]
}
 80094ca:	bf00      	nop
 80094cc:	bf00      	nop
 80094ce:	e7fd      	b.n	80094cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10b      	bne.n	80094ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	60fb      	str	r3, [r7, #12]
}
 80094e8:	bf00      	nop
 80094ea:	bf00      	nop
 80094ec:	e7fd      	b.n	80094ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80094ee:	f000 ff5d 	bl	800a3ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094f2:	4b1d      	ldr	r3, [pc, #116]	@ (8009568 <xTaskCheckForTimeOut+0xc0>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	69ba      	ldr	r2, [r7, #24]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800950a:	d102      	bne.n	8009512 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800950c:	2300      	movs	r3, #0
 800950e:	61fb      	str	r3, [r7, #28]
 8009510:	e023      	b.n	800955a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	4b15      	ldr	r3, [pc, #84]	@ (800956c <xTaskCheckForTimeOut+0xc4>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	429a      	cmp	r2, r3
 800951c:	d007      	beq.n	800952e <xTaskCheckForTimeOut+0x86>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	429a      	cmp	r2, r3
 8009526:	d302      	bcc.n	800952e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009528:	2301      	movs	r3, #1
 800952a:	61fb      	str	r3, [r7, #28]
 800952c:	e015      	b.n	800955a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	429a      	cmp	r2, r3
 8009536:	d20b      	bcs.n	8009550 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	1ad2      	subs	r2, r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f7ff ff99 	bl	800947c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800954a:	2300      	movs	r3, #0
 800954c:	61fb      	str	r3, [r7, #28]
 800954e:	e004      	b.n	800955a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009556:	2301      	movs	r3, #1
 8009558:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800955a:	f000 ff57 	bl	800a40c <vPortExitCritical>

	return xReturn;
 800955e:	69fb      	ldr	r3, [r7, #28]
}
 8009560:	4618      	mov	r0, r3
 8009562:	3720      	adds	r7, #32
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	20000fbc 	.word	0x20000fbc
 800956c:	20000fd0 	.word	0x20000fd0

08009570 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009574:	4b03      	ldr	r3, [pc, #12]	@ (8009584 <vTaskMissedYield+0x14>)
 8009576:	2201      	movs	r2, #1
 8009578:	601a      	str	r2, [r3, #0]
}
 800957a:	bf00      	nop
 800957c:	46bd      	mov	sp, r7
 800957e:	bc80      	pop	{r7}
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	20000fcc 	.word	0x20000fcc

08009588 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009590:	f000 f852 	bl	8009638 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009594:	4b06      	ldr	r3, [pc, #24]	@ (80095b0 <prvIdleTask+0x28>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d9f9      	bls.n	8009590 <prvIdleTask+0x8>
			{
				taskYIELD();
 800959c:	4b05      	ldr	r3, [pc, #20]	@ (80095b4 <prvIdleTask+0x2c>)
 800959e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	f3bf 8f4f 	dsb	sy
 80095a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80095ac:	e7f0      	b.n	8009590 <prvIdleTask+0x8>
 80095ae:	bf00      	nop
 80095b0:	20000ae8 	.word	0x20000ae8
 80095b4:	e000ed04 	.word	0xe000ed04

080095b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095be:	2300      	movs	r3, #0
 80095c0:	607b      	str	r3, [r7, #4]
 80095c2:	e00c      	b.n	80095de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4a12      	ldr	r2, [pc, #72]	@ (8009618 <prvInitialiseTaskLists+0x60>)
 80095d0:	4413      	add	r3, r2
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fe fa9c 	bl	8007b10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	3301      	adds	r3, #1
 80095dc:	607b      	str	r3, [r7, #4]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b37      	cmp	r3, #55	@ 0x37
 80095e2:	d9ef      	bls.n	80095c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80095e4:	480d      	ldr	r0, [pc, #52]	@ (800961c <prvInitialiseTaskLists+0x64>)
 80095e6:	f7fe fa93 	bl	8007b10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095ea:	480d      	ldr	r0, [pc, #52]	@ (8009620 <prvInitialiseTaskLists+0x68>)
 80095ec:	f7fe fa90 	bl	8007b10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095f0:	480c      	ldr	r0, [pc, #48]	@ (8009624 <prvInitialiseTaskLists+0x6c>)
 80095f2:	f7fe fa8d 	bl	8007b10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095f6:	480c      	ldr	r0, [pc, #48]	@ (8009628 <prvInitialiseTaskLists+0x70>)
 80095f8:	f7fe fa8a 	bl	8007b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095fc:	480b      	ldr	r0, [pc, #44]	@ (800962c <prvInitialiseTaskLists+0x74>)
 80095fe:	f7fe fa87 	bl	8007b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009602:	4b0b      	ldr	r3, [pc, #44]	@ (8009630 <prvInitialiseTaskLists+0x78>)
 8009604:	4a05      	ldr	r2, [pc, #20]	@ (800961c <prvInitialiseTaskLists+0x64>)
 8009606:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009608:	4b0a      	ldr	r3, [pc, #40]	@ (8009634 <prvInitialiseTaskLists+0x7c>)
 800960a:	4a05      	ldr	r2, [pc, #20]	@ (8009620 <prvInitialiseTaskLists+0x68>)
 800960c:	601a      	str	r2, [r3, #0]
}
 800960e:	bf00      	nop
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	20000ae8 	.word	0x20000ae8
 800961c:	20000f48 	.word	0x20000f48
 8009620:	20000f5c 	.word	0x20000f5c
 8009624:	20000f78 	.word	0x20000f78
 8009628:	20000f8c 	.word	0x20000f8c
 800962c:	20000fa4 	.word	0x20000fa4
 8009630:	20000f70 	.word	0x20000f70
 8009634:	20000f74 	.word	0x20000f74

08009638 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800963e:	e019      	b.n	8009674 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009640:	f000 feb4 	bl	800a3ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009644:	4b10      	ldr	r3, [pc, #64]	@ (8009688 <prvCheckTasksWaitingTermination+0x50>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	3304      	adds	r3, #4
 8009650:	4618      	mov	r0, r3
 8009652:	f7fe fae3 	bl	8007c1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009656:	4b0d      	ldr	r3, [pc, #52]	@ (800968c <prvCheckTasksWaitingTermination+0x54>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	3b01      	subs	r3, #1
 800965c:	4a0b      	ldr	r2, [pc, #44]	@ (800968c <prvCheckTasksWaitingTermination+0x54>)
 800965e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009660:	4b0b      	ldr	r3, [pc, #44]	@ (8009690 <prvCheckTasksWaitingTermination+0x58>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3b01      	subs	r3, #1
 8009666:	4a0a      	ldr	r2, [pc, #40]	@ (8009690 <prvCheckTasksWaitingTermination+0x58>)
 8009668:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800966a:	f000 fecf 	bl	800a40c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f810 	bl	8009694 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009674:	4b06      	ldr	r3, [pc, #24]	@ (8009690 <prvCheckTasksWaitingTermination+0x58>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1e1      	bne.n	8009640 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800967c:	bf00      	nop
 800967e:	bf00      	nop
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	20000f8c 	.word	0x20000f8c
 800968c:	20000fb8 	.word	0x20000fb8
 8009690:	20000fa0 	.word	0x20000fa0

08009694 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3354      	adds	r3, #84	@ 0x54
 80096a0:	4618      	mov	r0, r3
 80096a2:	f001 fc4f 	bl	800af44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d108      	bne.n	80096c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b4:	4618      	mov	r0, r3
 80096b6:	f001 f849 	bl	800a74c <vPortFree>
				vPortFree( pxTCB );
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 f846 	bl	800a74c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80096c0:	e019      	b.n	80096f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d103      	bne.n	80096d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 f83d 	bl	800a74c <vPortFree>
	}
 80096d2:	e010      	b.n	80096f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80096da:	2b02      	cmp	r3, #2
 80096dc:	d00b      	beq.n	80096f6 <prvDeleteTCB+0x62>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	60fb      	str	r3, [r7, #12]
}
 80096f0:	bf00      	nop
 80096f2:	bf00      	nop
 80096f4:	e7fd      	b.n	80096f2 <prvDeleteTCB+0x5e>
	}
 80096f6:	bf00      	nop
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
	...

08009700 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009706:	4b0c      	ldr	r3, [pc, #48]	@ (8009738 <prvResetNextTaskUnblockTime+0x38>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d104      	bne.n	800971a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009710:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <prvResetNextTaskUnblockTime+0x3c>)
 8009712:	f04f 32ff 	mov.w	r2, #4294967295
 8009716:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009718:	e008      	b.n	800972c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800971a:	4b07      	ldr	r3, [pc, #28]	@ (8009738 <prvResetNextTaskUnblockTime+0x38>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	4a04      	ldr	r2, [pc, #16]	@ (800973c <prvResetNextTaskUnblockTime+0x3c>)
 800972a:	6013      	str	r3, [r2, #0]
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	bc80      	pop	{r7}
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	20000f70 	.word	0x20000f70
 800973c:	20000fd8 	.word	0x20000fd8

08009740 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009746:	4b04      	ldr	r3, [pc, #16]	@ (8009758 <xTaskGetCurrentTaskHandle+0x18>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800974c:	687b      	ldr	r3, [r7, #4]
	}
 800974e:	4618      	mov	r0, r3
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	bc80      	pop	{r7}
 8009756:	4770      	bx	lr
 8009758:	20000ae4 	.word	0x20000ae4

0800975c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009762:	4b0b      	ldr	r3, [pc, #44]	@ (8009790 <xTaskGetSchedulerState+0x34>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d102      	bne.n	8009770 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800976a:	2301      	movs	r3, #1
 800976c:	607b      	str	r3, [r7, #4]
 800976e:	e008      	b.n	8009782 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009770:	4b08      	ldr	r3, [pc, #32]	@ (8009794 <xTaskGetSchedulerState+0x38>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d102      	bne.n	800977e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009778:	2302      	movs	r3, #2
 800977a:	607b      	str	r3, [r7, #4]
 800977c:	e001      	b.n	8009782 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800977e:	2300      	movs	r3, #0
 8009780:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009782:	687b      	ldr	r3, [r7, #4]
	}
 8009784:	4618      	mov	r0, r3
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	bc80      	pop	{r7}
 800978c:	4770      	bx	lr
 800978e:	bf00      	nop
 8009790:	20000fc4 	.word	0x20000fc4
 8009794:	20000fe0 	.word	0x20000fe0

08009798 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80097a4:	2300      	movs	r3, #0
 80097a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d051      	beq.n	8009852 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b2:	4b2a      	ldr	r3, [pc, #168]	@ (800985c <xTaskPriorityInherit+0xc4>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d241      	bcs.n	8009840 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	db06      	blt.n	80097d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097c4:	4b25      	ldr	r3, [pc, #148]	@ (800985c <xTaskPriorityInherit+0xc4>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	6959      	ldr	r1, [r3, #20]
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097da:	4613      	mov	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4a1f      	ldr	r2, [pc, #124]	@ (8009860 <xTaskPriorityInherit+0xc8>)
 80097e4:	4413      	add	r3, r2
 80097e6:	4299      	cmp	r1, r3
 80097e8:	d122      	bne.n	8009830 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	3304      	adds	r3, #4
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe fa14 	bl	8007c1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097f4:	4b19      	ldr	r3, [pc, #100]	@ (800985c <xTaskPriorityInherit+0xc4>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009802:	4b18      	ldr	r3, [pc, #96]	@ (8009864 <xTaskPriorityInherit+0xcc>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	429a      	cmp	r2, r3
 8009808:	d903      	bls.n	8009812 <xTaskPriorityInherit+0x7a>
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980e:	4a15      	ldr	r2, [pc, #84]	@ (8009864 <xTaskPriorityInherit+0xcc>)
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009816:	4613      	mov	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4a10      	ldr	r2, [pc, #64]	@ (8009860 <xTaskPriorityInherit+0xc8>)
 8009820:	441a      	add	r2, r3
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	3304      	adds	r3, #4
 8009826:	4619      	mov	r1, r3
 8009828:	4610      	mov	r0, r2
 800982a:	f7fe f99c 	bl	8007b66 <vListInsertEnd>
 800982e:	e004      	b.n	800983a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009830:	4b0a      	ldr	r3, [pc, #40]	@ (800985c <xTaskPriorityInherit+0xc4>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800983a:	2301      	movs	r3, #1
 800983c:	60fb      	str	r3, [r7, #12]
 800983e:	e008      	b.n	8009852 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009844:	4b05      	ldr	r3, [pc, #20]	@ (800985c <xTaskPriorityInherit+0xc4>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984a:	429a      	cmp	r2, r3
 800984c:	d201      	bcs.n	8009852 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800984e:	2301      	movs	r3, #1
 8009850:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009852:	68fb      	ldr	r3, [r7, #12]
	}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	20000ae4 	.word	0x20000ae4
 8009860:	20000ae8 	.word	0x20000ae8
 8009864:	20000fc0 	.word	0x20000fc0

08009868 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009874:	2300      	movs	r3, #0
 8009876:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d058      	beq.n	8009930 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800987e:	4b2f      	ldr	r3, [pc, #188]	@ (800993c <xTaskPriorityDisinherit+0xd4>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	429a      	cmp	r2, r3
 8009886:	d00b      	beq.n	80098a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988c:	f383 8811 	msr	BASEPRI, r3
 8009890:	f3bf 8f6f 	isb	sy
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	60fb      	str	r3, [r7, #12]
}
 800989a:	bf00      	nop
 800989c:	bf00      	nop
 800989e:	e7fd      	b.n	800989c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10b      	bne.n	80098c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	60bb      	str	r3, [r7, #8]
}
 80098ba:	bf00      	nop
 80098bc:	bf00      	nop
 80098be:	e7fd      	b.n	80098bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098c4:	1e5a      	subs	r2, r3, #1
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d02c      	beq.n	8009930 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d128      	bne.n	8009930 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	3304      	adds	r3, #4
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fe f99a 	bl	8007c1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009900:	4b0f      	ldr	r3, [pc, #60]	@ (8009940 <xTaskPriorityDisinherit+0xd8>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	429a      	cmp	r2, r3
 8009906:	d903      	bls.n	8009910 <xTaskPriorityDisinherit+0xa8>
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990c:	4a0c      	ldr	r2, [pc, #48]	@ (8009940 <xTaskPriorityDisinherit+0xd8>)
 800990e:	6013      	str	r3, [r2, #0]
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009914:	4613      	mov	r3, r2
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4a09      	ldr	r2, [pc, #36]	@ (8009944 <xTaskPriorityDisinherit+0xdc>)
 800991e:	441a      	add	r2, r3
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	3304      	adds	r3, #4
 8009924:	4619      	mov	r1, r3
 8009926:	4610      	mov	r0, r2
 8009928:	f7fe f91d 	bl	8007b66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800992c:	2301      	movs	r3, #1
 800992e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009930:	697b      	ldr	r3, [r7, #20]
	}
 8009932:	4618      	mov	r0, r3
 8009934:	3718      	adds	r7, #24
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	20000ae4 	.word	0x20000ae4
 8009940:	20000fc0 	.word	0x20000fc0
 8009944:	20000ae8 	.word	0x20000ae8

08009948 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009956:	2301      	movs	r3, #1
 8009958:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d06c      	beq.n	8009a3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10b      	bne.n	8009980 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800996c:	f383 8811 	msr	BASEPRI, r3
 8009970:	f3bf 8f6f 	isb	sy
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	60fb      	str	r3, [r7, #12]
}
 800997a:	bf00      	nop
 800997c:	bf00      	nop
 800997e:	e7fd      	b.n	800997c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	429a      	cmp	r2, r3
 8009988:	d902      	bls.n	8009990 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	61fb      	str	r3, [r7, #28]
 800998e:	e002      	b.n	8009996 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009994:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800999a:	69fa      	ldr	r2, [r7, #28]
 800999c:	429a      	cmp	r2, r3
 800999e:	d04c      	beq.n	8009a3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099a4:	697a      	ldr	r2, [r7, #20]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d147      	bne.n	8009a3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80099aa:	4b26      	ldr	r3, [pc, #152]	@ (8009a44 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	69ba      	ldr	r2, [r7, #24]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d10b      	bne.n	80099cc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80099b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b8:	f383 8811 	msr	BASEPRI, r3
 80099bc:	f3bf 8f6f 	isb	sy
 80099c0:	f3bf 8f4f 	dsb	sy
 80099c4:	60bb      	str	r3, [r7, #8]
}
 80099c6:	bf00      	nop
 80099c8:	bf00      	nop
 80099ca:	e7fd      	b.n	80099c8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	69fa      	ldr	r2, [r7, #28]
 80099d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	db04      	blt.n	80099ea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	6959      	ldr	r1, [r3, #20]
 80099ee:	693a      	ldr	r2, [r7, #16]
 80099f0:	4613      	mov	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4a13      	ldr	r2, [pc, #76]	@ (8009a48 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80099fa:	4413      	add	r3, r2
 80099fc:	4299      	cmp	r1, r3
 80099fe:	d11c      	bne.n	8009a3a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	3304      	adds	r3, #4
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7fe f909 	bl	8007c1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8009a4c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d903      	bls.n	8009a1e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8009a4c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a22:	4613      	mov	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4a07      	ldr	r2, [pc, #28]	@ (8009a48 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009a2c:	441a      	add	r2, r3
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	3304      	adds	r3, #4
 8009a32:	4619      	mov	r1, r3
 8009a34:	4610      	mov	r0, r2
 8009a36:	f7fe f896 	bl	8007b66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a3a:	bf00      	nop
 8009a3c:	3720      	adds	r7, #32
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20000ae4 	.word	0x20000ae4
 8009a48:	20000ae8 	.word	0x20000ae8
 8009a4c:	20000fc0 	.word	0x20000fc0

08009a50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009a50:	b480      	push	{r7}
 8009a52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009a54:	4b07      	ldr	r3, [pc, #28]	@ (8009a74 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d004      	beq.n	8009a66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009a5c:	4b05      	ldr	r3, [pc, #20]	@ (8009a74 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a62:	3201      	adds	r2, #1
 8009a64:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009a66:	4b03      	ldr	r3, [pc, #12]	@ (8009a74 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a68:	681b      	ldr	r3, [r3, #0]
	}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bc80      	pop	{r7}
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	20000ae4 	.word	0x20000ae4

08009a78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a82:	4b21      	ldr	r3, [pc, #132]	@ (8009b08 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a88:	4b20      	ldr	r3, [pc, #128]	@ (8009b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7fe f8c4 	bl	8007c1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9a:	d10a      	bne.n	8009ab2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d007      	beq.n	8009ab2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8009b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4819      	ldr	r0, [pc, #100]	@ (8009b10 <prvAddCurrentTaskToDelayedList+0x98>)
 8009aac:	f7fe f85b 	bl	8007b66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ab0:	e026      	b.n	8009b00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009aba:	4b14      	ldr	r3, [pc, #80]	@ (8009b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68ba      	ldr	r2, [r7, #8]
 8009ac0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d209      	bcs.n	8009ade <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009aca:	4b12      	ldr	r3, [pc, #72]	@ (8009b14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	4b0f      	ldr	r3, [pc, #60]	@ (8009b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4610      	mov	r0, r2
 8009ad8:	f7fe f868 	bl	8007bac <vListInsert>
}
 8009adc:	e010      	b.n	8009b00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ade:	4b0e      	ldr	r3, [pc, #56]	@ (8009b18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8009b0c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3304      	adds	r3, #4
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4610      	mov	r0, r2
 8009aec:	f7fe f85e 	bl	8007bac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009af0:	4b0a      	ldr	r3, [pc, #40]	@ (8009b1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d202      	bcs.n	8009b00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009afa:	4a08      	ldr	r2, [pc, #32]	@ (8009b1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	6013      	str	r3, [r2, #0]
}
 8009b00:	bf00      	nop
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	20000fbc 	.word	0x20000fbc
 8009b0c:	20000ae4 	.word	0x20000ae4
 8009b10:	20000fa4 	.word	0x20000fa4
 8009b14:	20000f74 	.word	0x20000f74
 8009b18:	20000f70 	.word	0x20000f70
 8009b1c:	20000fd8 	.word	0x20000fd8

08009b20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08a      	sub	sp, #40	@ 0x28
 8009b24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b2a:	f000 fb11 	bl	800a150 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ba4 <xTimerCreateTimerTask+0x84>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d021      	beq.n	8009b7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b36:	2300      	movs	r3, #0
 8009b38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b3e:	1d3a      	adds	r2, r7, #4
 8009b40:	f107 0108 	add.w	r1, r7, #8
 8009b44:	f107 030c 	add.w	r3, r7, #12
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fd ffc7 	bl	8007adc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	9202      	str	r2, [sp, #8]
 8009b56:	9301      	str	r3, [sp, #4]
 8009b58:	2302      	movs	r3, #2
 8009b5a:	9300      	str	r3, [sp, #0]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	460a      	mov	r2, r1
 8009b60:	4911      	ldr	r1, [pc, #68]	@ (8009ba8 <xTimerCreateTimerTask+0x88>)
 8009b62:	4812      	ldr	r0, [pc, #72]	@ (8009bac <xTimerCreateTimerTask+0x8c>)
 8009b64:	f7fe ff98 	bl	8008a98 <xTaskCreateStatic>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	4a11      	ldr	r2, [pc, #68]	@ (8009bb0 <xTimerCreateTimerTask+0x90>)
 8009b6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b6e:	4b10      	ldr	r3, [pc, #64]	@ (8009bb0 <xTimerCreateTimerTask+0x90>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b76:	2301      	movs	r3, #1
 8009b78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10b      	bne.n	8009b98 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	613b      	str	r3, [r7, #16]
}
 8009b92:	bf00      	nop
 8009b94:	bf00      	nop
 8009b96:	e7fd      	b.n	8009b94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b98:	697b      	ldr	r3, [r7, #20]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3718      	adds	r7, #24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	20001014 	.word	0x20001014
 8009ba8:	0800bb1c 	.word	0x0800bb1c
 8009bac:	08009ced 	.word	0x08009ced
 8009bb0:	20001018 	.word	0x20001018

08009bb4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b08a      	sub	sp, #40	@ 0x28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
 8009bc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10b      	bne.n	8009be4 <xTimerGenericCommand+0x30>
	__asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	623b      	str	r3, [r7, #32]
}
 8009bde:	bf00      	nop
 8009be0:	bf00      	nop
 8009be2:	e7fd      	b.n	8009be0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009be4:	4b19      	ldr	r3, [pc, #100]	@ (8009c4c <xTimerGenericCommand+0x98>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d02a      	beq.n	8009c42 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b05      	cmp	r3, #5
 8009bfc:	dc18      	bgt.n	8009c30 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009bfe:	f7ff fdad 	bl	800975c <xTaskGetSchedulerState>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d109      	bne.n	8009c1c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009c08:	4b10      	ldr	r3, [pc, #64]	@ (8009c4c <xTimerGenericCommand+0x98>)
 8009c0a:	6818      	ldr	r0, [r3, #0]
 8009c0c:	f107 0110 	add.w	r1, r7, #16
 8009c10:	2300      	movs	r3, #0
 8009c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c14:	f7fe fa2a 	bl	800806c <xQueueGenericSend>
 8009c18:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c1a:	e012      	b.n	8009c42 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c4c <xTimerGenericCommand+0x98>)
 8009c1e:	6818      	ldr	r0, [r3, #0]
 8009c20:	f107 0110 	add.w	r1, r7, #16
 8009c24:	2300      	movs	r3, #0
 8009c26:	2200      	movs	r2, #0
 8009c28:	f7fe fa20 	bl	800806c <xQueueGenericSend>
 8009c2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c2e:	e008      	b.n	8009c42 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c30:	4b06      	ldr	r3, [pc, #24]	@ (8009c4c <xTimerGenericCommand+0x98>)
 8009c32:	6818      	ldr	r0, [r3, #0]
 8009c34:	f107 0110 	add.w	r1, r7, #16
 8009c38:	2300      	movs	r3, #0
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	f7fe fb18 	bl	8008270 <xQueueGenericSendFromISR>
 8009c40:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3728      	adds	r7, #40	@ 0x28
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	20001014 	.word	0x20001014

08009c50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af02      	add	r7, sp, #8
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c5a:	4b23      	ldr	r3, [pc, #140]	@ (8009ce8 <prvProcessExpiredTimer+0x98>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fd ffd7 	bl	8007c1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d023      	beq.n	8009cc4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	699a      	ldr	r2, [r3, #24]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	18d1      	adds	r1, r2, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	6978      	ldr	r0, [r7, #20]
 8009c8a:	f000 f8d3 	bl	8009e34 <prvInsertTimerInActiveList>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d020      	beq.n	8009cd6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c94:	2300      	movs	r3, #0
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	6978      	ldr	r0, [r7, #20]
 8009ca0:	f7ff ff88 	bl	8009bb4 <xTimerGenericCommand>
 8009ca4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d114      	bne.n	8009cd6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	60fb      	str	r3, [r7, #12]
}
 8009cbe:	bf00      	nop
 8009cc0:	bf00      	nop
 8009cc2:	e7fd      	b.n	8009cc0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cca:	f023 0301 	bic.w	r3, r3, #1
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	6978      	ldr	r0, [r7, #20]
 8009cdc:	4798      	blx	r3
}
 8009cde:	bf00      	nop
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	2000100c 	.word	0x2000100c

08009cec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009cf4:	f107 0308 	add.w	r3, r7, #8
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 f859 	bl	8009db0 <prvGetNextExpireTime>
 8009cfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	4619      	mov	r1, r3
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 f805 	bl	8009d14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009d0a:	f000 f8d5 	bl	8009eb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d0e:	bf00      	nop
 8009d10:	e7f0      	b.n	8009cf4 <prvTimerTask+0x8>
	...

08009d14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d1e:	f7ff f91f 	bl	8008f60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d22:	f107 0308 	add.w	r3, r7, #8
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 f864 	bl	8009df4 <prvSampleTimeNow>
 8009d2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d130      	bne.n	8009d96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10a      	bne.n	8009d50 <prvProcessTimerOrBlockTask+0x3c>
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d806      	bhi.n	8009d50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d42:	f7ff f91b 	bl	8008f7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d46:	68f9      	ldr	r1, [r7, #12]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f7ff ff81 	bl	8009c50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d4e:	e024      	b.n	8009d9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d008      	beq.n	8009d68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d56:	4b13      	ldr	r3, [pc, #76]	@ (8009da4 <prvProcessTimerOrBlockTask+0x90>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d101      	bne.n	8009d64 <prvProcessTimerOrBlockTask+0x50>
 8009d60:	2301      	movs	r3, #1
 8009d62:	e000      	b.n	8009d66 <prvProcessTimerOrBlockTask+0x52>
 8009d64:	2300      	movs	r3, #0
 8009d66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d68:	4b0f      	ldr	r3, [pc, #60]	@ (8009da8 <prvProcessTimerOrBlockTask+0x94>)
 8009d6a:	6818      	ldr	r0, [r3, #0]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	1ad3      	subs	r3, r2, r3
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	4619      	mov	r1, r3
 8009d76:	f7fe fe5b 	bl	8008a30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d7a:	f7ff f8ff 	bl	8008f7c <xTaskResumeAll>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10a      	bne.n	8009d9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d84:	4b09      	ldr	r3, [pc, #36]	@ (8009dac <prvProcessTimerOrBlockTask+0x98>)
 8009d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	f3bf 8f6f 	isb	sy
}
 8009d94:	e001      	b.n	8009d9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d96:	f7ff f8f1 	bl	8008f7c <xTaskResumeAll>
}
 8009d9a:	bf00      	nop
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	20001010 	.word	0x20001010
 8009da8:	20001014 	.word	0x20001014
 8009dac:	e000ed04 	.word	0xe000ed04

08009db0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009db8:	4b0d      	ldr	r3, [pc, #52]	@ (8009df0 <prvGetNextExpireTime+0x40>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <prvGetNextExpireTime+0x16>
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	e000      	b.n	8009dc8 <prvGetNextExpireTime+0x18>
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d105      	bne.n	8009de0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dd4:	4b06      	ldr	r3, [pc, #24]	@ (8009df0 <prvGetNextExpireTime+0x40>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	60fb      	str	r3, [r7, #12]
 8009dde:	e001      	b.n	8009de4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009de0:	2300      	movs	r3, #0
 8009de2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009de4:	68fb      	ldr	r3, [r7, #12]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bc80      	pop	{r7}
 8009dee:	4770      	bx	lr
 8009df0:	2000100c 	.word	0x2000100c

08009df4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009dfc:	f7ff f95c 	bl	80090b8 <xTaskGetTickCount>
 8009e00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009e02:	4b0b      	ldr	r3, [pc, #44]	@ (8009e30 <prvSampleTimeNow+0x3c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	d205      	bcs.n	8009e18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e0c:	f000 f93a 	bl	800a084 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	e002      	b.n	8009e1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e1e:	4a04      	ldr	r2, [pc, #16]	@ (8009e30 <prvSampleTimeNow+0x3c>)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e24:	68fb      	ldr	r3, [r7, #12]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	2000101c 	.word	0x2000101c

08009e34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
 8009e40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e42:	2300      	movs	r3, #0
 8009e44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d812      	bhi.n	8009e80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d302      	bcc.n	8009e6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	617b      	str	r3, [r7, #20]
 8009e6c:	e01b      	b.n	8009ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e6e:	4b10      	ldr	r3, [pc, #64]	@ (8009eb0 <prvInsertTimerInActiveList+0x7c>)
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3304      	adds	r3, #4
 8009e76:	4619      	mov	r1, r3
 8009e78:	4610      	mov	r0, r2
 8009e7a:	f7fd fe97 	bl	8007bac <vListInsert>
 8009e7e:	e012      	b.n	8009ea6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d206      	bcs.n	8009e96 <prvInsertTimerInActiveList+0x62>
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d302      	bcc.n	8009e96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e90:	2301      	movs	r3, #1
 8009e92:	617b      	str	r3, [r7, #20]
 8009e94:	e007      	b.n	8009ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e96:	4b07      	ldr	r3, [pc, #28]	@ (8009eb4 <prvInsertTimerInActiveList+0x80>)
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3304      	adds	r3, #4
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	f7fd fe83 	bl	8007bac <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009ea6:	697b      	ldr	r3, [r7, #20]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	20001010 	.word	0x20001010
 8009eb4:	2000100c 	.word	0x2000100c

08009eb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b08e      	sub	sp, #56	@ 0x38
 8009ebc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ebe:	e0ce      	b.n	800a05e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	da19      	bge.n	8009efa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ec6:	1d3b      	adds	r3, r7, #4
 8009ec8:	3304      	adds	r3, #4
 8009eca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10b      	bne.n	8009eea <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	61fb      	str	r3, [r7, #28]
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	e7fd      	b.n	8009ee6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ef0:	6850      	ldr	r0, [r2, #4]
 8009ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ef4:	6892      	ldr	r2, [r2, #8]
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	f2c0 80ae 	blt.w	800a05e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d004      	beq.n	8009f18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f10:	3304      	adds	r3, #4
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fd fe82 	bl	8007c1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f18:	463b      	mov	r3, r7
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7ff ff6a 	bl	8009df4 <prvSampleTimeNow>
 8009f20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b09      	cmp	r3, #9
 8009f26:	f200 8097 	bhi.w	800a058 <prvProcessReceivedCommands+0x1a0>
 8009f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f30 <prvProcessReceivedCommands+0x78>)
 8009f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f30:	08009f59 	.word	0x08009f59
 8009f34:	08009f59 	.word	0x08009f59
 8009f38:	08009f59 	.word	0x08009f59
 8009f3c:	08009fcf 	.word	0x08009fcf
 8009f40:	08009fe3 	.word	0x08009fe3
 8009f44:	0800a02f 	.word	0x0800a02f
 8009f48:	08009f59 	.word	0x08009f59
 8009f4c:	08009f59 	.word	0x08009f59
 8009f50:	08009fcf 	.word	0x08009fcf
 8009f54:	08009fe3 	.word	0x08009fe3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f5e:	f043 0301 	orr.w	r3, r3, #1
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	18d1      	adds	r1, r2, r3
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f78:	f7ff ff5c 	bl	8009e34 <prvInsertTimerInActiveList>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d06c      	beq.n	800a05c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f90:	f003 0304 	and.w	r3, r3, #4
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d061      	beq.n	800a05c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9c:	699b      	ldr	r3, [r3, #24]
 8009f9e:	441a      	add	r2, r3
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009faa:	f7ff fe03 	bl	8009bb4 <xTimerGenericCommand>
 8009fae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009fb0:	6a3b      	ldr	r3, [r7, #32]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d152      	bne.n	800a05c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	61bb      	str	r3, [r7, #24]
}
 8009fc8:	bf00      	nop
 8009fca:	bf00      	nop
 8009fcc:	e7fd      	b.n	8009fca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fd4:	f023 0301 	bic.w	r3, r3, #1
 8009fd8:	b2da      	uxtb	r2, r3
 8009fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009fe0:	e03d      	b.n	800a05e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fe8:	f043 0301 	orr.w	r3, r3, #1
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ffc:	699b      	ldr	r3, [r3, #24]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10b      	bne.n	800a01a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	617b      	str	r3, [r7, #20]
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop
 800a018:	e7fd      	b.n	800a016 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a01c:	699a      	ldr	r2, [r3, #24]
 800a01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a020:	18d1      	adds	r1, r2, r3
 800a022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a028:	f7ff ff04 	bl	8009e34 <prvInsertTimerInActiveList>
					break;
 800a02c:	e017      	b.n	800a05e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a034:	f003 0302 	and.w	r3, r3, #2
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d103      	bne.n	800a044 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a03c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a03e:	f000 fb85 	bl	800a74c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a042:	e00c      	b.n	800a05e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a046:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a04a:	f023 0301 	bic.w	r3, r3, #1
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a052:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a056:	e002      	b.n	800a05e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a058:	bf00      	nop
 800a05a:	e000      	b.n	800a05e <prvProcessReceivedCommands+0x1a6>
					break;
 800a05c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a05e:	4b08      	ldr	r3, [pc, #32]	@ (800a080 <prvProcessReceivedCommands+0x1c8>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	1d39      	adds	r1, r7, #4
 800a064:	2200      	movs	r2, #0
 800a066:	4618      	mov	r0, r3
 800a068:	f7fe f9a0 	bl	80083ac <xQueueReceive>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f47f af26 	bne.w	8009ec0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a074:	bf00      	nop
 800a076:	bf00      	nop
 800a078:	3730      	adds	r7, #48	@ 0x30
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20001014 	.word	0x20001014

0800a084 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a08a:	e049      	b.n	800a120 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a08c:	4b2e      	ldr	r3, [pc, #184]	@ (800a148 <prvSwitchTimerLists+0xc4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	68db      	ldr	r3, [r3, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a096:	4b2c      	ldr	r3, [pc, #176]	@ (800a148 <prvSwitchTimerLists+0xc4>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3304      	adds	r3, #4
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fd fdb9 	bl	8007c1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0b8:	f003 0304 	and.w	r3, r3, #4
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d02f      	beq.n	800a120 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d90e      	bls.n	800a0f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0de:	4b1a      	ldr	r3, [pc, #104]	@ (800a148 <prvSwitchTimerLists+0xc4>)
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	f7fd fd5f 	bl	8007bac <vListInsert>
 800a0ee:	e017      	b.n	800a120 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	693a      	ldr	r2, [r7, #16]
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f7ff fd5a 	bl	8009bb4 <xTimerGenericCommand>
 800a100:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10b      	bne.n	800a120 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	603b      	str	r3, [r7, #0]
}
 800a11a:	bf00      	nop
 800a11c:	bf00      	nop
 800a11e:	e7fd      	b.n	800a11c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a120:	4b09      	ldr	r3, [pc, #36]	@ (800a148 <prvSwitchTimerLists+0xc4>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1b0      	bne.n	800a08c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a12a:	4b07      	ldr	r3, [pc, #28]	@ (800a148 <prvSwitchTimerLists+0xc4>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a130:	4b06      	ldr	r3, [pc, #24]	@ (800a14c <prvSwitchTimerLists+0xc8>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a04      	ldr	r2, [pc, #16]	@ (800a148 <prvSwitchTimerLists+0xc4>)
 800a136:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a138:	4a04      	ldr	r2, [pc, #16]	@ (800a14c <prvSwitchTimerLists+0xc8>)
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	6013      	str	r3, [r2, #0]
}
 800a13e:	bf00      	nop
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	2000100c 	.word	0x2000100c
 800a14c:	20001010 	.word	0x20001010

0800a150 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a156:	f000 f929 	bl	800a3ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a15a:	4b15      	ldr	r3, [pc, #84]	@ (800a1b0 <prvCheckForValidListAndQueue+0x60>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d120      	bne.n	800a1a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a162:	4814      	ldr	r0, [pc, #80]	@ (800a1b4 <prvCheckForValidListAndQueue+0x64>)
 800a164:	f7fd fcd4 	bl	8007b10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a168:	4813      	ldr	r0, [pc, #76]	@ (800a1b8 <prvCheckForValidListAndQueue+0x68>)
 800a16a:	f7fd fcd1 	bl	8007b10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a16e:	4b13      	ldr	r3, [pc, #76]	@ (800a1bc <prvCheckForValidListAndQueue+0x6c>)
 800a170:	4a10      	ldr	r2, [pc, #64]	@ (800a1b4 <prvCheckForValidListAndQueue+0x64>)
 800a172:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a174:	4b12      	ldr	r3, [pc, #72]	@ (800a1c0 <prvCheckForValidListAndQueue+0x70>)
 800a176:	4a10      	ldr	r2, [pc, #64]	@ (800a1b8 <prvCheckForValidListAndQueue+0x68>)
 800a178:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a17a:	2300      	movs	r3, #0
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	4b11      	ldr	r3, [pc, #68]	@ (800a1c4 <prvCheckForValidListAndQueue+0x74>)
 800a180:	4a11      	ldr	r2, [pc, #68]	@ (800a1c8 <prvCheckForValidListAndQueue+0x78>)
 800a182:	2110      	movs	r1, #16
 800a184:	200a      	movs	r0, #10
 800a186:	f7fd fddd 	bl	8007d44 <xQueueGenericCreateStatic>
 800a18a:	4603      	mov	r3, r0
 800a18c:	4a08      	ldr	r2, [pc, #32]	@ (800a1b0 <prvCheckForValidListAndQueue+0x60>)
 800a18e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a190:	4b07      	ldr	r3, [pc, #28]	@ (800a1b0 <prvCheckForValidListAndQueue+0x60>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d005      	beq.n	800a1a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a198:	4b05      	ldr	r3, [pc, #20]	@ (800a1b0 <prvCheckForValidListAndQueue+0x60>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	490b      	ldr	r1, [pc, #44]	@ (800a1cc <prvCheckForValidListAndQueue+0x7c>)
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fe fc1e 	bl	80089e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1a4:	f000 f932 	bl	800a40c <vPortExitCritical>
}
 800a1a8:	bf00      	nop
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop
 800a1b0:	20001014 	.word	0x20001014
 800a1b4:	20000fe4 	.word	0x20000fe4
 800a1b8:	20000ff8 	.word	0x20000ff8
 800a1bc:	2000100c 	.word	0x2000100c
 800a1c0:	20001010 	.word	0x20001010
 800a1c4:	200010c0 	.word	0x200010c0
 800a1c8:	20001020 	.word	0x20001020
 800a1cc:	0800bb24 	.word	0x0800bb24

0800a1d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	3b04      	subs	r3, #4
 800a1e0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a1e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	3b04      	subs	r3, #4
 800a1ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	f023 0201 	bic.w	r2, r3, #1
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3b04      	subs	r3, #4
 800a1fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a200:	4a08      	ldr	r2, [pc, #32]	@ (800a224 <pxPortInitialiseStack+0x54>)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3b14      	subs	r3, #20
 800a20a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3b20      	subs	r3, #32
 800a216:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a218:	68fb      	ldr	r3, [r7, #12]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3714      	adds	r7, #20
 800a21e:	46bd      	mov	sp, r7
 800a220:	bc80      	pop	{r7}
 800a222:	4770      	bx	lr
 800a224:	0800a229 	.word	0x0800a229

0800a228 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a22e:	2300      	movs	r3, #0
 800a230:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a232:	4b12      	ldr	r3, [pc, #72]	@ (800a27c <prvTaskExitError+0x54>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23a:	d00b      	beq.n	800a254 <prvTaskExitError+0x2c>
	__asm volatile
 800a23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	60fb      	str	r3, [r7, #12]
}
 800a24e:	bf00      	nop
 800a250:	bf00      	nop
 800a252:	e7fd      	b.n	800a250 <prvTaskExitError+0x28>
	__asm volatile
 800a254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a258:	f383 8811 	msr	BASEPRI, r3
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f3bf 8f4f 	dsb	sy
 800a264:	60bb      	str	r3, [r7, #8]
}
 800a266:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a268:	bf00      	nop
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d0fc      	beq.n	800a26a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a270:	bf00      	nop
 800a272:	bf00      	nop
 800a274:	3714      	adds	r7, #20
 800a276:	46bd      	mov	sp, r7
 800a278:	bc80      	pop	{r7}
 800a27a:	4770      	bx	lr
 800a27c:	2000000c 	.word	0x2000000c

0800a280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a280:	4b07      	ldr	r3, [pc, #28]	@ (800a2a0 <pxCurrentTCBConst2>)
 800a282:	6819      	ldr	r1, [r3, #0]
 800a284:	6808      	ldr	r0, [r1, #0]
 800a286:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a28a:	f380 8809 	msr	PSP, r0
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f04f 0000 	mov.w	r0, #0
 800a296:	f380 8811 	msr	BASEPRI, r0
 800a29a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a29e:	4770      	bx	lr

0800a2a0 <pxCurrentTCBConst2>:
 800a2a0:	20000ae4 	.word	0x20000ae4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop

0800a2a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a2a8:	4806      	ldr	r0, [pc, #24]	@ (800a2c4 <prvPortStartFirstTask+0x1c>)
 800a2aa:	6800      	ldr	r0, [r0, #0]
 800a2ac:	6800      	ldr	r0, [r0, #0]
 800a2ae:	f380 8808 	msr	MSP, r0
 800a2b2:	b662      	cpsie	i
 800a2b4:	b661      	cpsie	f
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	df00      	svc	0
 800a2c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2c2:	bf00      	nop
 800a2c4:	e000ed08 	.word	0xe000ed08

0800a2c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a2ce:	4b32      	ldr	r3, [pc, #200]	@ (800a398 <xPortStartScheduler+0xd0>)
 800a2d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	22ff      	movs	r2, #255	@ 0xff
 800a2de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a2e8:	78fb      	ldrb	r3, [r7, #3]
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	4b2a      	ldr	r3, [pc, #168]	@ (800a39c <xPortStartScheduler+0xd4>)
 800a2f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a2f6:	4b2a      	ldr	r3, [pc, #168]	@ (800a3a0 <xPortStartScheduler+0xd8>)
 800a2f8:	2207      	movs	r2, #7
 800a2fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2fc:	e009      	b.n	800a312 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a2fe:	4b28      	ldr	r3, [pc, #160]	@ (800a3a0 <xPortStartScheduler+0xd8>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	3b01      	subs	r3, #1
 800a304:	4a26      	ldr	r2, [pc, #152]	@ (800a3a0 <xPortStartScheduler+0xd8>)
 800a306:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a308:	78fb      	ldrb	r3, [r7, #3]
 800a30a:	b2db      	uxtb	r3, r3
 800a30c:	005b      	lsls	r3, r3, #1
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a312:	78fb      	ldrb	r3, [r7, #3]
 800a314:	b2db      	uxtb	r3, r3
 800a316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a31a:	2b80      	cmp	r3, #128	@ 0x80
 800a31c:	d0ef      	beq.n	800a2fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a31e:	4b20      	ldr	r3, [pc, #128]	@ (800a3a0 <xPortStartScheduler+0xd8>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f1c3 0307 	rsb	r3, r3, #7
 800a326:	2b04      	cmp	r3, #4
 800a328:	d00b      	beq.n	800a342 <xPortStartScheduler+0x7a>
	__asm volatile
 800a32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32e:	f383 8811 	msr	BASEPRI, r3
 800a332:	f3bf 8f6f 	isb	sy
 800a336:	f3bf 8f4f 	dsb	sy
 800a33a:	60bb      	str	r3, [r7, #8]
}
 800a33c:	bf00      	nop
 800a33e:	bf00      	nop
 800a340:	e7fd      	b.n	800a33e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a342:	4b17      	ldr	r3, [pc, #92]	@ (800a3a0 <xPortStartScheduler+0xd8>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	021b      	lsls	r3, r3, #8
 800a348:	4a15      	ldr	r2, [pc, #84]	@ (800a3a0 <xPortStartScheduler+0xd8>)
 800a34a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a34c:	4b14      	ldr	r3, [pc, #80]	@ (800a3a0 <xPortStartScheduler+0xd8>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a354:	4a12      	ldr	r2, [pc, #72]	@ (800a3a0 <xPortStartScheduler+0xd8>)
 800a356:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a360:	4b10      	ldr	r3, [pc, #64]	@ (800a3a4 <xPortStartScheduler+0xdc>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a0f      	ldr	r2, [pc, #60]	@ (800a3a4 <xPortStartScheduler+0xdc>)
 800a366:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a36a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a36c:	4b0d      	ldr	r3, [pc, #52]	@ (800a3a4 <xPortStartScheduler+0xdc>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a0c      	ldr	r2, [pc, #48]	@ (800a3a4 <xPortStartScheduler+0xdc>)
 800a372:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a376:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a378:	f000 f8b8 	bl	800a4ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a37c:	4b0a      	ldr	r3, [pc, #40]	@ (800a3a8 <xPortStartScheduler+0xe0>)
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a382:	f7ff ff91 	bl	800a2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a386:	f7fe ff5f 	bl	8009248 <vTaskSwitchContext>
	prvTaskExitError();
 800a38a:	f7ff ff4d 	bl	800a228 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3710      	adds	r7, #16
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	e000e400 	.word	0xe000e400
 800a39c:	20001110 	.word	0x20001110
 800a3a0:	20001114 	.word	0x20001114
 800a3a4:	e000ed20 	.word	0xe000ed20
 800a3a8:	2000000c 	.word	0x2000000c

0800a3ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
	__asm volatile
 800a3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	607b      	str	r3, [r7, #4]
}
 800a3c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a3c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a404 <vPortEnterCritical+0x58>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	4a0d      	ldr	r2, [pc, #52]	@ (800a404 <vPortEnterCritical+0x58>)
 800a3ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a3d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a404 <vPortEnterCritical+0x58>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d110      	bne.n	800a3fa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a3d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a408 <vPortEnterCritical+0x5c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00b      	beq.n	800a3fa <vPortEnterCritical+0x4e>
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	603b      	str	r3, [r7, #0]
}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop
 800a3f8:	e7fd      	b.n	800a3f6 <vPortEnterCritical+0x4a>
	}
}
 800a3fa:	bf00      	nop
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bc80      	pop	{r7}
 800a402:	4770      	bx	lr
 800a404:	2000000c 	.word	0x2000000c
 800a408:	e000ed04 	.word	0xe000ed04

0800a40c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a412:	4b12      	ldr	r3, [pc, #72]	@ (800a45c <vPortExitCritical+0x50>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10b      	bne.n	800a432 <vPortExitCritical+0x26>
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	607b      	str	r3, [r7, #4]
}
 800a42c:	bf00      	nop
 800a42e:	bf00      	nop
 800a430:	e7fd      	b.n	800a42e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a432:	4b0a      	ldr	r3, [pc, #40]	@ (800a45c <vPortExitCritical+0x50>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	3b01      	subs	r3, #1
 800a438:	4a08      	ldr	r2, [pc, #32]	@ (800a45c <vPortExitCritical+0x50>)
 800a43a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a43c:	4b07      	ldr	r3, [pc, #28]	@ (800a45c <vPortExitCritical+0x50>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d105      	bne.n	800a450 <vPortExitCritical+0x44>
 800a444:	2300      	movs	r3, #0
 800a446:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	f383 8811 	msr	BASEPRI, r3
}
 800a44e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	bc80      	pop	{r7}
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	2000000c 	.word	0x2000000c

0800a460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a460:	f3ef 8009 	mrs	r0, PSP
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a0 <pxCurrentTCBConst>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a470:	6010      	str	r0, [r2, #0]
 800a472:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a476:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a47a:	f380 8811 	msr	BASEPRI, r0
 800a47e:	f7fe fee3 	bl	8009248 <vTaskSwitchContext>
 800a482:	f04f 0000 	mov.w	r0, #0
 800a486:	f380 8811 	msr	BASEPRI, r0
 800a48a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a48e:	6819      	ldr	r1, [r3, #0]
 800a490:	6808      	ldr	r0, [r1, #0]
 800a492:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a496:	f380 8809 	msr	PSP, r0
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	4770      	bx	lr

0800a4a0 <pxCurrentTCBConst>:
 800a4a0:	20000ae4 	.word	0x20000ae4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a4a4:	bf00      	nop
 800a4a6:	bf00      	nop

0800a4a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	607b      	str	r3, [r7, #4]
}
 800a4c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4c2:	f7fe fe07 	bl	80090d4 <xTaskIncrementTick>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d003      	beq.n	800a4d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4cc:	4b06      	ldr	r3, [pc, #24]	@ (800a4e8 <xPortSysTickHandler+0x40>)
 800a4ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	f383 8811 	msr	BASEPRI, r3
}
 800a4de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a4e0:	bf00      	nop
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	e000ed04 	.word	0xe000ed04

0800a4ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a51c <vPortSetupTimerInterrupt+0x30>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a4f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a520 <vPortSetupTimerInterrupt+0x34>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4fc:	4b09      	ldr	r3, [pc, #36]	@ (800a524 <vPortSetupTimerInterrupt+0x38>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a09      	ldr	r2, [pc, #36]	@ (800a528 <vPortSetupTimerInterrupt+0x3c>)
 800a502:	fba2 2303 	umull	r2, r3, r2, r3
 800a506:	099b      	lsrs	r3, r3, #6
 800a508:	4a08      	ldr	r2, [pc, #32]	@ (800a52c <vPortSetupTimerInterrupt+0x40>)
 800a50a:	3b01      	subs	r3, #1
 800a50c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a50e:	4b03      	ldr	r3, [pc, #12]	@ (800a51c <vPortSetupTimerInterrupt+0x30>)
 800a510:	2207      	movs	r2, #7
 800a512:	601a      	str	r2, [r3, #0]
}
 800a514:	bf00      	nop
 800a516:	46bd      	mov	sp, r7
 800a518:	bc80      	pop	{r7}
 800a51a:	4770      	bx	lr
 800a51c:	e000e010 	.word	0xe000e010
 800a520:	e000e018 	.word	0xe000e018
 800a524:	20000000 	.word	0x20000000
 800a528:	10624dd3 	.word	0x10624dd3
 800a52c:	e000e014 	.word	0xe000e014

0800a530 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a536:	f3ef 8305 	mrs	r3, IPSR
 800a53a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2b0f      	cmp	r3, #15
 800a540:	d915      	bls.n	800a56e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a542:	4a17      	ldr	r2, [pc, #92]	@ (800a5a0 <vPortValidateInterruptPriority+0x70>)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4413      	add	r3, r2
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a54c:	4b15      	ldr	r3, [pc, #84]	@ (800a5a4 <vPortValidateInterruptPriority+0x74>)
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	7afa      	ldrb	r2, [r7, #11]
 800a552:	429a      	cmp	r2, r3
 800a554:	d20b      	bcs.n	800a56e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	607b      	str	r3, [r7, #4]
}
 800a568:	bf00      	nop
 800a56a:	bf00      	nop
 800a56c:	e7fd      	b.n	800a56a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a56e:	4b0e      	ldr	r3, [pc, #56]	@ (800a5a8 <vPortValidateInterruptPriority+0x78>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a576:	4b0d      	ldr	r3, [pc, #52]	@ (800a5ac <vPortValidateInterruptPriority+0x7c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d90b      	bls.n	800a596 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	603b      	str	r3, [r7, #0]
}
 800a590:	bf00      	nop
 800a592:	bf00      	nop
 800a594:	e7fd      	b.n	800a592 <vPortValidateInterruptPriority+0x62>
	}
 800a596:	bf00      	nop
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bc80      	pop	{r7}
 800a59e:	4770      	bx	lr
 800a5a0:	e000e3f0 	.word	0xe000e3f0
 800a5a4:	20001110 	.word	0x20001110
 800a5a8:	e000ed0c 	.word	0xe000ed0c
 800a5ac:	20001114 	.word	0x20001114

0800a5b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b08a      	sub	sp, #40	@ 0x28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5bc:	f7fe fcd0 	bl	8008f60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5c0:	4b5c      	ldr	r3, [pc, #368]	@ (800a734 <pvPortMalloc+0x184>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d101      	bne.n	800a5cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5c8:	f000 f924 	bl	800a814 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5cc:	4b5a      	ldr	r3, [pc, #360]	@ (800a738 <pvPortMalloc+0x188>)
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f040 8095 	bne.w	800a704 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d01e      	beq.n	800a61e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a5e0:	2208      	movs	r2, #8
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f003 0307 	and.w	r3, r3, #7
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d015      	beq.n	800a61e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f023 0307 	bic.w	r3, r3, #7
 800a5f8:	3308      	adds	r3, #8
 800a5fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f003 0307 	and.w	r3, r3, #7
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00b      	beq.n	800a61e <pvPortMalloc+0x6e>
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	617b      	str	r3, [r7, #20]
}
 800a618:	bf00      	nop
 800a61a:	bf00      	nop
 800a61c:	e7fd      	b.n	800a61a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d06f      	beq.n	800a704 <pvPortMalloc+0x154>
 800a624:	4b45      	ldr	r3, [pc, #276]	@ (800a73c <pvPortMalloc+0x18c>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d86a      	bhi.n	800a704 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a62e:	4b44      	ldr	r3, [pc, #272]	@ (800a740 <pvPortMalloc+0x190>)
 800a630:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a632:	4b43      	ldr	r3, [pc, #268]	@ (800a740 <pvPortMalloc+0x190>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a638:	e004      	b.n	800a644 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a63a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d903      	bls.n	800a656 <pvPortMalloc+0xa6>
 800a64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1f1      	bne.n	800a63a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a656:	4b37      	ldr	r3, [pc, #220]	@ (800a734 <pvPortMalloc+0x184>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d051      	beq.n	800a704 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a660:	6a3b      	ldr	r3, [r7, #32]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2208      	movs	r2, #8
 800a666:	4413      	add	r3, r2
 800a668:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	6a3b      	ldr	r3, [r7, #32]
 800a670:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	1ad2      	subs	r2, r2, r3
 800a67a:	2308      	movs	r3, #8
 800a67c:	005b      	lsls	r3, r3, #1
 800a67e:	429a      	cmp	r2, r3
 800a680:	d920      	bls.n	800a6c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4413      	add	r3, r2
 800a688:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	f003 0307 	and.w	r3, r3, #7
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00b      	beq.n	800a6ac <pvPortMalloc+0xfc>
	__asm volatile
 800a694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	613b      	str	r3, [r7, #16]
}
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
 800a6aa:	e7fd      	b.n	800a6a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	1ad2      	subs	r2, r2, r3
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6be:	69b8      	ldr	r0, [r7, #24]
 800a6c0:	f000 f90a 	bl	800a8d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a73c <pvPortMalloc+0x18c>)
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	4a1b      	ldr	r2, [pc, #108]	@ (800a73c <pvPortMalloc+0x18c>)
 800a6d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6d2:	4b1a      	ldr	r3, [pc, #104]	@ (800a73c <pvPortMalloc+0x18c>)
 800a6d4:	681a      	ldr	r2, [r3, #0]
 800a6d6:	4b1b      	ldr	r3, [pc, #108]	@ (800a744 <pvPortMalloc+0x194>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d203      	bcs.n	800a6e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6de:	4b17      	ldr	r3, [pc, #92]	@ (800a73c <pvPortMalloc+0x18c>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a18      	ldr	r2, [pc, #96]	@ (800a744 <pvPortMalloc+0x194>)
 800a6e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	4b13      	ldr	r3, [pc, #76]	@ (800a738 <pvPortMalloc+0x188>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	431a      	orrs	r2, r3
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a6fa:	4b13      	ldr	r3, [pc, #76]	@ (800a748 <pvPortMalloc+0x198>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3301      	adds	r3, #1
 800a700:	4a11      	ldr	r2, [pc, #68]	@ (800a748 <pvPortMalloc+0x198>)
 800a702:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a704:	f7fe fc3a 	bl	8008f7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	f003 0307 	and.w	r3, r3, #7
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00b      	beq.n	800a72a <pvPortMalloc+0x17a>
	__asm volatile
 800a712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	60fb      	str	r3, [r7, #12]
}
 800a724:	bf00      	nop
 800a726:	bf00      	nop
 800a728:	e7fd      	b.n	800a726 <pvPortMalloc+0x176>
	return pvReturn;
 800a72a:	69fb      	ldr	r3, [r7, #28]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3728      	adds	r7, #40	@ 0x28
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	20001d20 	.word	0x20001d20
 800a738:	20001d34 	.word	0x20001d34
 800a73c:	20001d24 	.word	0x20001d24
 800a740:	20001d18 	.word	0x20001d18
 800a744:	20001d28 	.word	0x20001d28
 800a748:	20001d2c 	.word	0x20001d2c

0800a74c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d04f      	beq.n	800a7fe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a75e:	2308      	movs	r3, #8
 800a760:	425b      	negs	r3, r3
 800a762:	697a      	ldr	r2, [r7, #20]
 800a764:	4413      	add	r3, r2
 800a766:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	4b25      	ldr	r3, [pc, #148]	@ (800a808 <vPortFree+0xbc>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4013      	ands	r3, r2
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10b      	bne.n	800a792 <vPortFree+0x46>
	__asm volatile
 800a77a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	60fb      	str	r3, [r7, #12]
}
 800a78c:	bf00      	nop
 800a78e:	bf00      	nop
 800a790:	e7fd      	b.n	800a78e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00b      	beq.n	800a7b2 <vPortFree+0x66>
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a79e:	f383 8811 	msr	BASEPRI, r3
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	60bb      	str	r3, [r7, #8]
}
 800a7ac:	bf00      	nop
 800a7ae:	bf00      	nop
 800a7b0:	e7fd      	b.n	800a7ae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	685a      	ldr	r2, [r3, #4]
 800a7b6:	4b14      	ldr	r3, [pc, #80]	@ (800a808 <vPortFree+0xbc>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d01e      	beq.n	800a7fe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d11a      	bne.n	800a7fe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a808 <vPortFree+0xbc>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	43db      	mvns	r3, r3
 800a7d2:	401a      	ands	r2, r3
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7d8:	f7fe fbc2 	bl	8008f60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a80c <vPortFree+0xc0>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	4a09      	ldr	r2, [pc, #36]	@ (800a80c <vPortFree+0xc0>)
 800a7e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a7ea:	6938      	ldr	r0, [r7, #16]
 800a7ec:	f000 f874 	bl	800a8d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a7f0:	4b07      	ldr	r3, [pc, #28]	@ (800a810 <vPortFree+0xc4>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	4a06      	ldr	r2, [pc, #24]	@ (800a810 <vPortFree+0xc4>)
 800a7f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a7fa:	f7fe fbbf 	bl	8008f7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7fe:	bf00      	nop
 800a800:	3718      	adds	r7, #24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	20001d34 	.word	0x20001d34
 800a80c:	20001d24 	.word	0x20001d24
 800a810:	20001d30 	.word	0x20001d30

0800a814 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a81a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a81e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a820:	4b27      	ldr	r3, [pc, #156]	@ (800a8c0 <prvHeapInit+0xac>)
 800a822:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f003 0307 	and.w	r3, r3, #7
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00c      	beq.n	800a848 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3307      	adds	r3, #7
 800a832:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f023 0307 	bic.w	r3, r3, #7
 800a83a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	4a1f      	ldr	r2, [pc, #124]	@ (800a8c0 <prvHeapInit+0xac>)
 800a844:	4413      	add	r3, r2
 800a846:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a84c:	4a1d      	ldr	r2, [pc, #116]	@ (800a8c4 <prvHeapInit+0xb0>)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a852:	4b1c      	ldr	r3, [pc, #112]	@ (800a8c4 <prvHeapInit+0xb0>)
 800a854:	2200      	movs	r2, #0
 800a856:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	4413      	add	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a860:	2208      	movs	r2, #8
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	1a9b      	subs	r3, r3, r2
 800a866:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f023 0307 	bic.w	r3, r3, #7
 800a86e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4a15      	ldr	r2, [pc, #84]	@ (800a8c8 <prvHeapInit+0xb4>)
 800a874:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a876:	4b14      	ldr	r3, [pc, #80]	@ (800a8c8 <prvHeapInit+0xb4>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2200      	movs	r2, #0
 800a87c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a87e:	4b12      	ldr	r3, [pc, #72]	@ (800a8c8 <prvHeapInit+0xb4>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	1ad2      	subs	r2, r2, r3
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a894:	4b0c      	ldr	r3, [pc, #48]	@ (800a8c8 <prvHeapInit+0xb4>)
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	4a0a      	ldr	r2, [pc, #40]	@ (800a8cc <prvHeapInit+0xb8>)
 800a8a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	4a09      	ldr	r2, [pc, #36]	@ (800a8d0 <prvHeapInit+0xbc>)
 800a8aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8ac:	4b09      	ldr	r3, [pc, #36]	@ (800a8d4 <prvHeapInit+0xc0>)
 800a8ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a8b2:	601a      	str	r2, [r3, #0]
}
 800a8b4:	bf00      	nop
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bc80      	pop	{r7}
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	20001118 	.word	0x20001118
 800a8c4:	20001d18 	.word	0x20001d18
 800a8c8:	20001d20 	.word	0x20001d20
 800a8cc:	20001d28 	.word	0x20001d28
 800a8d0:	20001d24 	.word	0x20001d24
 800a8d4:	20001d34 	.word	0x20001d34

0800a8d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b085      	sub	sp, #20
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8e0:	4b27      	ldr	r3, [pc, #156]	@ (800a980 <prvInsertBlockIntoFreeList+0xa8>)
 800a8e2:	60fb      	str	r3, [r7, #12]
 800a8e4:	e002      	b.n	800a8ec <prvInsertBlockIntoFreeList+0x14>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d8f7      	bhi.n	800a8e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	4413      	add	r3, r2
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	429a      	cmp	r2, r3
 800a906:	d108      	bne.n	800a91a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	441a      	add	r2, r3
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	441a      	add	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d118      	bne.n	800a960 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	4b14      	ldr	r3, [pc, #80]	@ (800a984 <prvInsertBlockIntoFreeList+0xac>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	429a      	cmp	r2, r3
 800a938:	d00d      	beq.n	800a956 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	441a      	add	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	e008      	b.n	800a968 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a956:	4b0b      	ldr	r3, [pc, #44]	@ (800a984 <prvInsertBlockIntoFreeList+0xac>)
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	601a      	str	r2, [r3, #0]
 800a95e:	e003      	b.n	800a968 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d002      	beq.n	800a976 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a976:	bf00      	nop
 800a978:	3714      	adds	r7, #20
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bc80      	pop	{r7}
 800a97e:	4770      	bx	lr
 800a980:	20001d18 	.word	0x20001d18
 800a984:	20001d20 	.word	0x20001d20

0800a988 <malloc>:
 800a988:	4b02      	ldr	r3, [pc, #8]	@ (800a994 <malloc+0xc>)
 800a98a:	4601      	mov	r1, r0
 800a98c:	6818      	ldr	r0, [r3, #0]
 800a98e:	f000 b82d 	b.w	800a9ec <_malloc_r>
 800a992:	bf00      	nop
 800a994:	2000001c 	.word	0x2000001c

0800a998 <free>:
 800a998:	4b02      	ldr	r3, [pc, #8]	@ (800a9a4 <free+0xc>)
 800a99a:	4601      	mov	r1, r0
 800a99c:	6818      	ldr	r0, [r3, #0]
 800a99e:	f000 bbb1 	b.w	800b104 <_free_r>
 800a9a2:	bf00      	nop
 800a9a4:	2000001c 	.word	0x2000001c

0800a9a8 <sbrk_aligned>:
 800a9a8:	b570      	push	{r4, r5, r6, lr}
 800a9aa:	4e0f      	ldr	r6, [pc, #60]	@ (800a9e8 <sbrk_aligned+0x40>)
 800a9ac:	460c      	mov	r4, r1
 800a9ae:	6831      	ldr	r1, [r6, #0]
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	b911      	cbnz	r1, 800a9ba <sbrk_aligned+0x12>
 800a9b4:	f000 fb48 	bl	800b048 <_sbrk_r>
 800a9b8:	6030      	str	r0, [r6, #0]
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	4628      	mov	r0, r5
 800a9be:	f000 fb43 	bl	800b048 <_sbrk_r>
 800a9c2:	1c43      	adds	r3, r0, #1
 800a9c4:	d103      	bne.n	800a9ce <sbrk_aligned+0x26>
 800a9c6:	f04f 34ff 	mov.w	r4, #4294967295
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	bd70      	pop	{r4, r5, r6, pc}
 800a9ce:	1cc4      	adds	r4, r0, #3
 800a9d0:	f024 0403 	bic.w	r4, r4, #3
 800a9d4:	42a0      	cmp	r0, r4
 800a9d6:	d0f8      	beq.n	800a9ca <sbrk_aligned+0x22>
 800a9d8:	1a21      	subs	r1, r4, r0
 800a9da:	4628      	mov	r0, r5
 800a9dc:	f000 fb34 	bl	800b048 <_sbrk_r>
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	d1f2      	bne.n	800a9ca <sbrk_aligned+0x22>
 800a9e4:	e7ef      	b.n	800a9c6 <sbrk_aligned+0x1e>
 800a9e6:	bf00      	nop
 800a9e8:	20001d38 	.word	0x20001d38

0800a9ec <_malloc_r>:
 800a9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9f0:	1ccd      	adds	r5, r1, #3
 800a9f2:	f025 0503 	bic.w	r5, r5, #3
 800a9f6:	3508      	adds	r5, #8
 800a9f8:	2d0c      	cmp	r5, #12
 800a9fa:	bf38      	it	cc
 800a9fc:	250c      	movcc	r5, #12
 800a9fe:	2d00      	cmp	r5, #0
 800aa00:	4606      	mov	r6, r0
 800aa02:	db01      	blt.n	800aa08 <_malloc_r+0x1c>
 800aa04:	42a9      	cmp	r1, r5
 800aa06:	d904      	bls.n	800aa12 <_malloc_r+0x26>
 800aa08:	230c      	movs	r3, #12
 800aa0a:	6033      	str	r3, [r6, #0]
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aae8 <_malloc_r+0xfc>
 800aa16:	f000 f869 	bl	800aaec <__malloc_lock>
 800aa1a:	f8d8 3000 	ldr.w	r3, [r8]
 800aa1e:	461c      	mov	r4, r3
 800aa20:	bb44      	cbnz	r4, 800aa74 <_malloc_r+0x88>
 800aa22:	4629      	mov	r1, r5
 800aa24:	4630      	mov	r0, r6
 800aa26:	f7ff ffbf 	bl	800a9a8 <sbrk_aligned>
 800aa2a:	1c43      	adds	r3, r0, #1
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	d158      	bne.n	800aae2 <_malloc_r+0xf6>
 800aa30:	f8d8 4000 	ldr.w	r4, [r8]
 800aa34:	4627      	mov	r7, r4
 800aa36:	2f00      	cmp	r7, #0
 800aa38:	d143      	bne.n	800aac2 <_malloc_r+0xd6>
 800aa3a:	2c00      	cmp	r4, #0
 800aa3c:	d04b      	beq.n	800aad6 <_malloc_r+0xea>
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	4639      	mov	r1, r7
 800aa42:	4630      	mov	r0, r6
 800aa44:	eb04 0903 	add.w	r9, r4, r3
 800aa48:	f000 fafe 	bl	800b048 <_sbrk_r>
 800aa4c:	4581      	cmp	r9, r0
 800aa4e:	d142      	bne.n	800aad6 <_malloc_r+0xea>
 800aa50:	6821      	ldr	r1, [r4, #0]
 800aa52:	4630      	mov	r0, r6
 800aa54:	1a6d      	subs	r5, r5, r1
 800aa56:	4629      	mov	r1, r5
 800aa58:	f7ff ffa6 	bl	800a9a8 <sbrk_aligned>
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	d03a      	beq.n	800aad6 <_malloc_r+0xea>
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	442b      	add	r3, r5
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	f8d8 3000 	ldr.w	r3, [r8]
 800aa6a:	685a      	ldr	r2, [r3, #4]
 800aa6c:	bb62      	cbnz	r2, 800aac8 <_malloc_r+0xdc>
 800aa6e:	f8c8 7000 	str.w	r7, [r8]
 800aa72:	e00f      	b.n	800aa94 <_malloc_r+0xa8>
 800aa74:	6822      	ldr	r2, [r4, #0]
 800aa76:	1b52      	subs	r2, r2, r5
 800aa78:	d420      	bmi.n	800aabc <_malloc_r+0xd0>
 800aa7a:	2a0b      	cmp	r2, #11
 800aa7c:	d917      	bls.n	800aaae <_malloc_r+0xc2>
 800aa7e:	1961      	adds	r1, r4, r5
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	6025      	str	r5, [r4, #0]
 800aa84:	bf18      	it	ne
 800aa86:	6059      	strne	r1, [r3, #4]
 800aa88:	6863      	ldr	r3, [r4, #4]
 800aa8a:	bf08      	it	eq
 800aa8c:	f8c8 1000 	streq.w	r1, [r8]
 800aa90:	5162      	str	r2, [r4, r5]
 800aa92:	604b      	str	r3, [r1, #4]
 800aa94:	4630      	mov	r0, r6
 800aa96:	f000 f82f 	bl	800aaf8 <__malloc_unlock>
 800aa9a:	f104 000b 	add.w	r0, r4, #11
 800aa9e:	1d23      	adds	r3, r4, #4
 800aaa0:	f020 0007 	bic.w	r0, r0, #7
 800aaa4:	1ac2      	subs	r2, r0, r3
 800aaa6:	bf1c      	itt	ne
 800aaa8:	1a1b      	subne	r3, r3, r0
 800aaaa:	50a3      	strne	r3, [r4, r2]
 800aaac:	e7af      	b.n	800aa0e <_malloc_r+0x22>
 800aaae:	6862      	ldr	r2, [r4, #4]
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	bf0c      	ite	eq
 800aab4:	f8c8 2000 	streq.w	r2, [r8]
 800aab8:	605a      	strne	r2, [r3, #4]
 800aaba:	e7eb      	b.n	800aa94 <_malloc_r+0xa8>
 800aabc:	4623      	mov	r3, r4
 800aabe:	6864      	ldr	r4, [r4, #4]
 800aac0:	e7ae      	b.n	800aa20 <_malloc_r+0x34>
 800aac2:	463c      	mov	r4, r7
 800aac4:	687f      	ldr	r7, [r7, #4]
 800aac6:	e7b6      	b.n	800aa36 <_malloc_r+0x4a>
 800aac8:	461a      	mov	r2, r3
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	42a3      	cmp	r3, r4
 800aace:	d1fb      	bne.n	800aac8 <_malloc_r+0xdc>
 800aad0:	2300      	movs	r3, #0
 800aad2:	6053      	str	r3, [r2, #4]
 800aad4:	e7de      	b.n	800aa94 <_malloc_r+0xa8>
 800aad6:	230c      	movs	r3, #12
 800aad8:	4630      	mov	r0, r6
 800aada:	6033      	str	r3, [r6, #0]
 800aadc:	f000 f80c 	bl	800aaf8 <__malloc_unlock>
 800aae0:	e794      	b.n	800aa0c <_malloc_r+0x20>
 800aae2:	6005      	str	r5, [r0, #0]
 800aae4:	e7d6      	b.n	800aa94 <_malloc_r+0xa8>
 800aae6:	bf00      	nop
 800aae8:	20001d3c 	.word	0x20001d3c

0800aaec <__malloc_lock>:
 800aaec:	4801      	ldr	r0, [pc, #4]	@ (800aaf4 <__malloc_lock+0x8>)
 800aaee:	f000 baf8 	b.w	800b0e2 <__retarget_lock_acquire_recursive>
 800aaf2:	bf00      	nop
 800aaf4:	20001e80 	.word	0x20001e80

0800aaf8 <__malloc_unlock>:
 800aaf8:	4801      	ldr	r0, [pc, #4]	@ (800ab00 <__malloc_unlock+0x8>)
 800aafa:	f000 baf3 	b.w	800b0e4 <__retarget_lock_release_recursive>
 800aafe:	bf00      	nop
 800ab00:	20001e80 	.word	0x20001e80

0800ab04 <std>:
 800ab04:	2300      	movs	r3, #0
 800ab06:	b510      	push	{r4, lr}
 800ab08:	4604      	mov	r4, r0
 800ab0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab12:	6083      	str	r3, [r0, #8]
 800ab14:	8181      	strh	r1, [r0, #12]
 800ab16:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab18:	81c2      	strh	r2, [r0, #14]
 800ab1a:	6183      	str	r3, [r0, #24]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	2208      	movs	r2, #8
 800ab20:	305c      	adds	r0, #92	@ 0x5c
 800ab22:	f000 f9f7 	bl	800af14 <memset>
 800ab26:	4b0d      	ldr	r3, [pc, #52]	@ (800ab5c <std+0x58>)
 800ab28:	6224      	str	r4, [r4, #32]
 800ab2a:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab2c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab60 <std+0x5c>)
 800ab2e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab30:	4b0c      	ldr	r3, [pc, #48]	@ (800ab64 <std+0x60>)
 800ab32:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab34:	4b0c      	ldr	r3, [pc, #48]	@ (800ab68 <std+0x64>)
 800ab36:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab38:	4b0c      	ldr	r3, [pc, #48]	@ (800ab6c <std+0x68>)
 800ab3a:	429c      	cmp	r4, r3
 800ab3c:	d006      	beq.n	800ab4c <std+0x48>
 800ab3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab42:	4294      	cmp	r4, r2
 800ab44:	d002      	beq.n	800ab4c <std+0x48>
 800ab46:	33d0      	adds	r3, #208	@ 0xd0
 800ab48:	429c      	cmp	r4, r3
 800ab4a:	d105      	bne.n	800ab58 <std+0x54>
 800ab4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab54:	f000 bac4 	b.w	800b0e0 <__retarget_lock_init_recursive>
 800ab58:	bd10      	pop	{r4, pc}
 800ab5a:	bf00      	nop
 800ab5c:	0800ad45 	.word	0x0800ad45
 800ab60:	0800ad67 	.word	0x0800ad67
 800ab64:	0800ad9f 	.word	0x0800ad9f
 800ab68:	0800adc3 	.word	0x0800adc3
 800ab6c:	20001d40 	.word	0x20001d40

0800ab70 <stdio_exit_handler>:
 800ab70:	4a02      	ldr	r2, [pc, #8]	@ (800ab7c <stdio_exit_handler+0xc>)
 800ab72:	4903      	ldr	r1, [pc, #12]	@ (800ab80 <stdio_exit_handler+0x10>)
 800ab74:	4803      	ldr	r0, [pc, #12]	@ (800ab84 <stdio_exit_handler+0x14>)
 800ab76:	f000 b869 	b.w	800ac4c <_fwalk_sglue>
 800ab7a:	bf00      	nop
 800ab7c:	20000010 	.word	0x20000010
 800ab80:	0800b295 	.word	0x0800b295
 800ab84:	20000020 	.word	0x20000020

0800ab88 <cleanup_stdio>:
 800ab88:	6841      	ldr	r1, [r0, #4]
 800ab8a:	4b0c      	ldr	r3, [pc, #48]	@ (800abbc <cleanup_stdio+0x34>)
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	4299      	cmp	r1, r3
 800ab90:	4604      	mov	r4, r0
 800ab92:	d001      	beq.n	800ab98 <cleanup_stdio+0x10>
 800ab94:	f000 fb7e 	bl	800b294 <_fflush_r>
 800ab98:	68a1      	ldr	r1, [r4, #8]
 800ab9a:	4b09      	ldr	r3, [pc, #36]	@ (800abc0 <cleanup_stdio+0x38>)
 800ab9c:	4299      	cmp	r1, r3
 800ab9e:	d002      	beq.n	800aba6 <cleanup_stdio+0x1e>
 800aba0:	4620      	mov	r0, r4
 800aba2:	f000 fb77 	bl	800b294 <_fflush_r>
 800aba6:	68e1      	ldr	r1, [r4, #12]
 800aba8:	4b06      	ldr	r3, [pc, #24]	@ (800abc4 <cleanup_stdio+0x3c>)
 800abaa:	4299      	cmp	r1, r3
 800abac:	d004      	beq.n	800abb8 <cleanup_stdio+0x30>
 800abae:	4620      	mov	r0, r4
 800abb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb4:	f000 bb6e 	b.w	800b294 <_fflush_r>
 800abb8:	bd10      	pop	{r4, pc}
 800abba:	bf00      	nop
 800abbc:	20001d40 	.word	0x20001d40
 800abc0:	20001da8 	.word	0x20001da8
 800abc4:	20001e10 	.word	0x20001e10

0800abc8 <global_stdio_init.part.0>:
 800abc8:	b510      	push	{r4, lr}
 800abca:	4b0b      	ldr	r3, [pc, #44]	@ (800abf8 <global_stdio_init.part.0+0x30>)
 800abcc:	4c0b      	ldr	r4, [pc, #44]	@ (800abfc <global_stdio_init.part.0+0x34>)
 800abce:	4a0c      	ldr	r2, [pc, #48]	@ (800ac00 <global_stdio_init.part.0+0x38>)
 800abd0:	4620      	mov	r0, r4
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	2104      	movs	r1, #4
 800abd6:	2200      	movs	r2, #0
 800abd8:	f7ff ff94 	bl	800ab04 <std>
 800abdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800abe0:	2201      	movs	r2, #1
 800abe2:	2109      	movs	r1, #9
 800abe4:	f7ff ff8e 	bl	800ab04 <std>
 800abe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800abec:	2202      	movs	r2, #2
 800abee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf2:	2112      	movs	r1, #18
 800abf4:	f7ff bf86 	b.w	800ab04 <std>
 800abf8:	20001e78 	.word	0x20001e78
 800abfc:	20001d40 	.word	0x20001d40
 800ac00:	0800ab71 	.word	0x0800ab71

0800ac04 <__sfp_lock_acquire>:
 800ac04:	4801      	ldr	r0, [pc, #4]	@ (800ac0c <__sfp_lock_acquire+0x8>)
 800ac06:	f000 ba6c 	b.w	800b0e2 <__retarget_lock_acquire_recursive>
 800ac0a:	bf00      	nop
 800ac0c:	20001e81 	.word	0x20001e81

0800ac10 <__sfp_lock_release>:
 800ac10:	4801      	ldr	r0, [pc, #4]	@ (800ac18 <__sfp_lock_release+0x8>)
 800ac12:	f000 ba67 	b.w	800b0e4 <__retarget_lock_release_recursive>
 800ac16:	bf00      	nop
 800ac18:	20001e81 	.word	0x20001e81

0800ac1c <__sinit>:
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	4604      	mov	r4, r0
 800ac20:	f7ff fff0 	bl	800ac04 <__sfp_lock_acquire>
 800ac24:	6a23      	ldr	r3, [r4, #32]
 800ac26:	b11b      	cbz	r3, 800ac30 <__sinit+0x14>
 800ac28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac2c:	f7ff bff0 	b.w	800ac10 <__sfp_lock_release>
 800ac30:	4b04      	ldr	r3, [pc, #16]	@ (800ac44 <__sinit+0x28>)
 800ac32:	6223      	str	r3, [r4, #32]
 800ac34:	4b04      	ldr	r3, [pc, #16]	@ (800ac48 <__sinit+0x2c>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1f5      	bne.n	800ac28 <__sinit+0xc>
 800ac3c:	f7ff ffc4 	bl	800abc8 <global_stdio_init.part.0>
 800ac40:	e7f2      	b.n	800ac28 <__sinit+0xc>
 800ac42:	bf00      	nop
 800ac44:	0800ab89 	.word	0x0800ab89
 800ac48:	20001e78 	.word	0x20001e78

0800ac4c <_fwalk_sglue>:
 800ac4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac50:	4607      	mov	r7, r0
 800ac52:	4688      	mov	r8, r1
 800ac54:	4614      	mov	r4, r2
 800ac56:	2600      	movs	r6, #0
 800ac58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac5c:	f1b9 0901 	subs.w	r9, r9, #1
 800ac60:	d505      	bpl.n	800ac6e <_fwalk_sglue+0x22>
 800ac62:	6824      	ldr	r4, [r4, #0]
 800ac64:	2c00      	cmp	r4, #0
 800ac66:	d1f7      	bne.n	800ac58 <_fwalk_sglue+0xc>
 800ac68:	4630      	mov	r0, r6
 800ac6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6e:	89ab      	ldrh	r3, [r5, #12]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d907      	bls.n	800ac84 <_fwalk_sglue+0x38>
 800ac74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	d003      	beq.n	800ac84 <_fwalk_sglue+0x38>
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	4638      	mov	r0, r7
 800ac80:	47c0      	blx	r8
 800ac82:	4306      	orrs	r6, r0
 800ac84:	3568      	adds	r5, #104	@ 0x68
 800ac86:	e7e9      	b.n	800ac5c <_fwalk_sglue+0x10>

0800ac88 <_puts_r>:
 800ac88:	6a03      	ldr	r3, [r0, #32]
 800ac8a:	b570      	push	{r4, r5, r6, lr}
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	460e      	mov	r6, r1
 800ac90:	6884      	ldr	r4, [r0, #8]
 800ac92:	b90b      	cbnz	r3, 800ac98 <_puts_r+0x10>
 800ac94:	f7ff ffc2 	bl	800ac1c <__sinit>
 800ac98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac9a:	07db      	lsls	r3, r3, #31
 800ac9c:	d405      	bmi.n	800acaa <_puts_r+0x22>
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	0598      	lsls	r0, r3, #22
 800aca2:	d402      	bmi.n	800acaa <_puts_r+0x22>
 800aca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aca6:	f000 fa1c 	bl	800b0e2 <__retarget_lock_acquire_recursive>
 800acaa:	89a3      	ldrh	r3, [r4, #12]
 800acac:	0719      	lsls	r1, r3, #28
 800acae:	d502      	bpl.n	800acb6 <_puts_r+0x2e>
 800acb0:	6923      	ldr	r3, [r4, #16]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d135      	bne.n	800ad22 <_puts_r+0x9a>
 800acb6:	4621      	mov	r1, r4
 800acb8:	4628      	mov	r0, r5
 800acba:	f000 f8c5 	bl	800ae48 <__swsetup_r>
 800acbe:	b380      	cbz	r0, 800ad22 <_puts_r+0x9a>
 800acc0:	f04f 35ff 	mov.w	r5, #4294967295
 800acc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acc6:	07da      	lsls	r2, r3, #31
 800acc8:	d405      	bmi.n	800acd6 <_puts_r+0x4e>
 800acca:	89a3      	ldrh	r3, [r4, #12]
 800accc:	059b      	lsls	r3, r3, #22
 800acce:	d402      	bmi.n	800acd6 <_puts_r+0x4e>
 800acd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acd2:	f000 fa07 	bl	800b0e4 <__retarget_lock_release_recursive>
 800acd6:	4628      	mov	r0, r5
 800acd8:	bd70      	pop	{r4, r5, r6, pc}
 800acda:	2b00      	cmp	r3, #0
 800acdc:	da04      	bge.n	800ace8 <_puts_r+0x60>
 800acde:	69a2      	ldr	r2, [r4, #24]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	dc17      	bgt.n	800ad14 <_puts_r+0x8c>
 800ace4:	290a      	cmp	r1, #10
 800ace6:	d015      	beq.n	800ad14 <_puts_r+0x8c>
 800ace8:	6823      	ldr	r3, [r4, #0]
 800acea:	1c5a      	adds	r2, r3, #1
 800acec:	6022      	str	r2, [r4, #0]
 800acee:	7019      	strb	r1, [r3, #0]
 800acf0:	68a3      	ldr	r3, [r4, #8]
 800acf2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800acf6:	3b01      	subs	r3, #1
 800acf8:	60a3      	str	r3, [r4, #8]
 800acfa:	2900      	cmp	r1, #0
 800acfc:	d1ed      	bne.n	800acda <_puts_r+0x52>
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	da11      	bge.n	800ad26 <_puts_r+0x9e>
 800ad02:	4622      	mov	r2, r4
 800ad04:	210a      	movs	r1, #10
 800ad06:	4628      	mov	r0, r5
 800ad08:	f000 f85f 	bl	800adca <__swbuf_r>
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	d0d7      	beq.n	800acc0 <_puts_r+0x38>
 800ad10:	250a      	movs	r5, #10
 800ad12:	e7d7      	b.n	800acc4 <_puts_r+0x3c>
 800ad14:	4622      	mov	r2, r4
 800ad16:	4628      	mov	r0, r5
 800ad18:	f000 f857 	bl	800adca <__swbuf_r>
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d1e7      	bne.n	800acf0 <_puts_r+0x68>
 800ad20:	e7ce      	b.n	800acc0 <_puts_r+0x38>
 800ad22:	3e01      	subs	r6, #1
 800ad24:	e7e4      	b.n	800acf0 <_puts_r+0x68>
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	1c5a      	adds	r2, r3, #1
 800ad2a:	6022      	str	r2, [r4, #0]
 800ad2c:	220a      	movs	r2, #10
 800ad2e:	701a      	strb	r2, [r3, #0]
 800ad30:	e7ee      	b.n	800ad10 <_puts_r+0x88>
	...

0800ad34 <puts>:
 800ad34:	4b02      	ldr	r3, [pc, #8]	@ (800ad40 <puts+0xc>)
 800ad36:	4601      	mov	r1, r0
 800ad38:	6818      	ldr	r0, [r3, #0]
 800ad3a:	f7ff bfa5 	b.w	800ac88 <_puts_r>
 800ad3e:	bf00      	nop
 800ad40:	2000001c 	.word	0x2000001c

0800ad44 <__sread>:
 800ad44:	b510      	push	{r4, lr}
 800ad46:	460c      	mov	r4, r1
 800ad48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad4c:	f000 f96a 	bl	800b024 <_read_r>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	bfab      	itete	ge
 800ad54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad56:	89a3      	ldrhlt	r3, [r4, #12]
 800ad58:	181b      	addge	r3, r3, r0
 800ad5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad5e:	bfac      	ite	ge
 800ad60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad62:	81a3      	strhlt	r3, [r4, #12]
 800ad64:	bd10      	pop	{r4, pc}

0800ad66 <__swrite>:
 800ad66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6a:	461f      	mov	r7, r3
 800ad6c:	898b      	ldrh	r3, [r1, #12]
 800ad6e:	4605      	mov	r5, r0
 800ad70:	05db      	lsls	r3, r3, #23
 800ad72:	460c      	mov	r4, r1
 800ad74:	4616      	mov	r6, r2
 800ad76:	d505      	bpl.n	800ad84 <__swrite+0x1e>
 800ad78:	2302      	movs	r3, #2
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad80:	f000 f93e 	bl	800b000 <_lseek_r>
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	4632      	mov	r2, r6
 800ad88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad8c:	81a3      	strh	r3, [r4, #12]
 800ad8e:	4628      	mov	r0, r5
 800ad90:	463b      	mov	r3, r7
 800ad92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9a:	f000 b965 	b.w	800b068 <_write_r>

0800ad9e <__sseek>:
 800ad9e:	b510      	push	{r4, lr}
 800ada0:	460c      	mov	r4, r1
 800ada2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada6:	f000 f92b 	bl	800b000 <_lseek_r>
 800adaa:	1c43      	adds	r3, r0, #1
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	bf15      	itete	ne
 800adb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800adb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800adb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800adba:	81a3      	strheq	r3, [r4, #12]
 800adbc:	bf18      	it	ne
 800adbe:	81a3      	strhne	r3, [r4, #12]
 800adc0:	bd10      	pop	{r4, pc}

0800adc2 <__sclose>:
 800adc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc6:	f000 b8ad 	b.w	800af24 <_close_r>

0800adca <__swbuf_r>:
 800adca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adcc:	460e      	mov	r6, r1
 800adce:	4614      	mov	r4, r2
 800add0:	4605      	mov	r5, r0
 800add2:	b118      	cbz	r0, 800addc <__swbuf_r+0x12>
 800add4:	6a03      	ldr	r3, [r0, #32]
 800add6:	b90b      	cbnz	r3, 800addc <__swbuf_r+0x12>
 800add8:	f7ff ff20 	bl	800ac1c <__sinit>
 800addc:	69a3      	ldr	r3, [r4, #24]
 800adde:	60a3      	str	r3, [r4, #8]
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	071a      	lsls	r2, r3, #28
 800ade4:	d501      	bpl.n	800adea <__swbuf_r+0x20>
 800ade6:	6923      	ldr	r3, [r4, #16]
 800ade8:	b943      	cbnz	r3, 800adfc <__swbuf_r+0x32>
 800adea:	4621      	mov	r1, r4
 800adec:	4628      	mov	r0, r5
 800adee:	f000 f82b 	bl	800ae48 <__swsetup_r>
 800adf2:	b118      	cbz	r0, 800adfc <__swbuf_r+0x32>
 800adf4:	f04f 37ff 	mov.w	r7, #4294967295
 800adf8:	4638      	mov	r0, r7
 800adfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	6922      	ldr	r2, [r4, #16]
 800ae00:	b2f6      	uxtb	r6, r6
 800ae02:	1a98      	subs	r0, r3, r2
 800ae04:	6963      	ldr	r3, [r4, #20]
 800ae06:	4637      	mov	r7, r6
 800ae08:	4283      	cmp	r3, r0
 800ae0a:	dc05      	bgt.n	800ae18 <__swbuf_r+0x4e>
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f000 fa40 	bl	800b294 <_fflush_r>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d1ed      	bne.n	800adf4 <__swbuf_r+0x2a>
 800ae18:	68a3      	ldr	r3, [r4, #8]
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	60a3      	str	r3, [r4, #8]
 800ae1e:	6823      	ldr	r3, [r4, #0]
 800ae20:	1c5a      	adds	r2, r3, #1
 800ae22:	6022      	str	r2, [r4, #0]
 800ae24:	701e      	strb	r6, [r3, #0]
 800ae26:	6962      	ldr	r2, [r4, #20]
 800ae28:	1c43      	adds	r3, r0, #1
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d004      	beq.n	800ae38 <__swbuf_r+0x6e>
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	07db      	lsls	r3, r3, #31
 800ae32:	d5e1      	bpl.n	800adf8 <__swbuf_r+0x2e>
 800ae34:	2e0a      	cmp	r6, #10
 800ae36:	d1df      	bne.n	800adf8 <__swbuf_r+0x2e>
 800ae38:	4621      	mov	r1, r4
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	f000 fa2a 	bl	800b294 <_fflush_r>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d0d9      	beq.n	800adf8 <__swbuf_r+0x2e>
 800ae44:	e7d6      	b.n	800adf4 <__swbuf_r+0x2a>
	...

0800ae48 <__swsetup_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	4b29      	ldr	r3, [pc, #164]	@ (800aef0 <__swsetup_r+0xa8>)
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	6818      	ldr	r0, [r3, #0]
 800ae50:	460c      	mov	r4, r1
 800ae52:	b118      	cbz	r0, 800ae5c <__swsetup_r+0x14>
 800ae54:	6a03      	ldr	r3, [r0, #32]
 800ae56:	b90b      	cbnz	r3, 800ae5c <__swsetup_r+0x14>
 800ae58:	f7ff fee0 	bl	800ac1c <__sinit>
 800ae5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae60:	0719      	lsls	r1, r3, #28
 800ae62:	d422      	bmi.n	800aeaa <__swsetup_r+0x62>
 800ae64:	06da      	lsls	r2, r3, #27
 800ae66:	d407      	bmi.n	800ae78 <__swsetup_r+0x30>
 800ae68:	2209      	movs	r2, #9
 800ae6a:	602a      	str	r2, [r5, #0]
 800ae6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae70:	f04f 30ff 	mov.w	r0, #4294967295
 800ae74:	81a3      	strh	r3, [r4, #12]
 800ae76:	e033      	b.n	800aee0 <__swsetup_r+0x98>
 800ae78:	0758      	lsls	r0, r3, #29
 800ae7a:	d512      	bpl.n	800aea2 <__swsetup_r+0x5a>
 800ae7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae7e:	b141      	cbz	r1, 800ae92 <__swsetup_r+0x4a>
 800ae80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae84:	4299      	cmp	r1, r3
 800ae86:	d002      	beq.n	800ae8e <__swsetup_r+0x46>
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f000 f93b 	bl	800b104 <_free_r>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae92:	89a3      	ldrh	r3, [r4, #12]
 800ae94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae98:	81a3      	strh	r3, [r4, #12]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	6063      	str	r3, [r4, #4]
 800ae9e:	6923      	ldr	r3, [r4, #16]
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	f043 0308 	orr.w	r3, r3, #8
 800aea8:	81a3      	strh	r3, [r4, #12]
 800aeaa:	6923      	ldr	r3, [r4, #16]
 800aeac:	b94b      	cbnz	r3, 800aec2 <__swsetup_r+0x7a>
 800aeae:	89a3      	ldrh	r3, [r4, #12]
 800aeb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aeb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeb8:	d003      	beq.n	800aec2 <__swsetup_r+0x7a>
 800aeba:	4621      	mov	r1, r4
 800aebc:	4628      	mov	r0, r5
 800aebe:	f000 fa36 	bl	800b32e <__smakebuf_r>
 800aec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aec6:	f013 0201 	ands.w	r2, r3, #1
 800aeca:	d00a      	beq.n	800aee2 <__swsetup_r+0x9a>
 800aecc:	2200      	movs	r2, #0
 800aece:	60a2      	str	r2, [r4, #8]
 800aed0:	6962      	ldr	r2, [r4, #20]
 800aed2:	4252      	negs	r2, r2
 800aed4:	61a2      	str	r2, [r4, #24]
 800aed6:	6922      	ldr	r2, [r4, #16]
 800aed8:	b942      	cbnz	r2, 800aeec <__swsetup_r+0xa4>
 800aeda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aede:	d1c5      	bne.n	800ae6c <__swsetup_r+0x24>
 800aee0:	bd38      	pop	{r3, r4, r5, pc}
 800aee2:	0799      	lsls	r1, r3, #30
 800aee4:	bf58      	it	pl
 800aee6:	6962      	ldrpl	r2, [r4, #20]
 800aee8:	60a2      	str	r2, [r4, #8]
 800aeea:	e7f4      	b.n	800aed6 <__swsetup_r+0x8e>
 800aeec:	2000      	movs	r0, #0
 800aeee:	e7f7      	b.n	800aee0 <__swsetup_r+0x98>
 800aef0:	2000001c 	.word	0x2000001c

0800aef4 <memcmp>:
 800aef4:	b510      	push	{r4, lr}
 800aef6:	3901      	subs	r1, #1
 800aef8:	4402      	add	r2, r0
 800aefa:	4290      	cmp	r0, r2
 800aefc:	d101      	bne.n	800af02 <memcmp+0xe>
 800aefe:	2000      	movs	r0, #0
 800af00:	e005      	b.n	800af0e <memcmp+0x1a>
 800af02:	7803      	ldrb	r3, [r0, #0]
 800af04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800af08:	42a3      	cmp	r3, r4
 800af0a:	d001      	beq.n	800af10 <memcmp+0x1c>
 800af0c:	1b18      	subs	r0, r3, r4
 800af0e:	bd10      	pop	{r4, pc}
 800af10:	3001      	adds	r0, #1
 800af12:	e7f2      	b.n	800aefa <memcmp+0x6>

0800af14 <memset>:
 800af14:	4603      	mov	r3, r0
 800af16:	4402      	add	r2, r0
 800af18:	4293      	cmp	r3, r2
 800af1a:	d100      	bne.n	800af1e <memset+0xa>
 800af1c:	4770      	bx	lr
 800af1e:	f803 1b01 	strb.w	r1, [r3], #1
 800af22:	e7f9      	b.n	800af18 <memset+0x4>

0800af24 <_close_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	2300      	movs	r3, #0
 800af28:	4d05      	ldr	r5, [pc, #20]	@ (800af40 <_close_r+0x1c>)
 800af2a:	4604      	mov	r4, r0
 800af2c:	4608      	mov	r0, r1
 800af2e:	602b      	str	r3, [r5, #0]
 800af30:	f7f7 ff21 	bl	8002d76 <_close>
 800af34:	1c43      	adds	r3, r0, #1
 800af36:	d102      	bne.n	800af3e <_close_r+0x1a>
 800af38:	682b      	ldr	r3, [r5, #0]
 800af3a:	b103      	cbz	r3, 800af3e <_close_r+0x1a>
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	20001e7c 	.word	0x20001e7c

0800af44 <_reclaim_reent>:
 800af44:	4b2d      	ldr	r3, [pc, #180]	@ (800affc <_reclaim_reent+0xb8>)
 800af46:	b570      	push	{r4, r5, r6, lr}
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4604      	mov	r4, r0
 800af4c:	4283      	cmp	r3, r0
 800af4e:	d053      	beq.n	800aff8 <_reclaim_reent+0xb4>
 800af50:	69c3      	ldr	r3, [r0, #28]
 800af52:	b31b      	cbz	r3, 800af9c <_reclaim_reent+0x58>
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	b163      	cbz	r3, 800af72 <_reclaim_reent+0x2e>
 800af58:	2500      	movs	r5, #0
 800af5a:	69e3      	ldr	r3, [r4, #28]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	5959      	ldr	r1, [r3, r5]
 800af60:	b9b1      	cbnz	r1, 800af90 <_reclaim_reent+0x4c>
 800af62:	3504      	adds	r5, #4
 800af64:	2d80      	cmp	r5, #128	@ 0x80
 800af66:	d1f8      	bne.n	800af5a <_reclaim_reent+0x16>
 800af68:	69e3      	ldr	r3, [r4, #28]
 800af6a:	4620      	mov	r0, r4
 800af6c:	68d9      	ldr	r1, [r3, #12]
 800af6e:	f000 f8c9 	bl	800b104 <_free_r>
 800af72:	69e3      	ldr	r3, [r4, #28]
 800af74:	6819      	ldr	r1, [r3, #0]
 800af76:	b111      	cbz	r1, 800af7e <_reclaim_reent+0x3a>
 800af78:	4620      	mov	r0, r4
 800af7a:	f000 f8c3 	bl	800b104 <_free_r>
 800af7e:	69e3      	ldr	r3, [r4, #28]
 800af80:	689d      	ldr	r5, [r3, #8]
 800af82:	b15d      	cbz	r5, 800af9c <_reclaim_reent+0x58>
 800af84:	4629      	mov	r1, r5
 800af86:	4620      	mov	r0, r4
 800af88:	682d      	ldr	r5, [r5, #0]
 800af8a:	f000 f8bb 	bl	800b104 <_free_r>
 800af8e:	e7f8      	b.n	800af82 <_reclaim_reent+0x3e>
 800af90:	680e      	ldr	r6, [r1, #0]
 800af92:	4620      	mov	r0, r4
 800af94:	f000 f8b6 	bl	800b104 <_free_r>
 800af98:	4631      	mov	r1, r6
 800af9a:	e7e1      	b.n	800af60 <_reclaim_reent+0x1c>
 800af9c:	6961      	ldr	r1, [r4, #20]
 800af9e:	b111      	cbz	r1, 800afa6 <_reclaim_reent+0x62>
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 f8af 	bl	800b104 <_free_r>
 800afa6:	69e1      	ldr	r1, [r4, #28]
 800afa8:	b111      	cbz	r1, 800afb0 <_reclaim_reent+0x6c>
 800afaa:	4620      	mov	r0, r4
 800afac:	f000 f8aa 	bl	800b104 <_free_r>
 800afb0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800afb2:	b111      	cbz	r1, 800afba <_reclaim_reent+0x76>
 800afb4:	4620      	mov	r0, r4
 800afb6:	f000 f8a5 	bl	800b104 <_free_r>
 800afba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afbc:	b111      	cbz	r1, 800afc4 <_reclaim_reent+0x80>
 800afbe:	4620      	mov	r0, r4
 800afc0:	f000 f8a0 	bl	800b104 <_free_r>
 800afc4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800afc6:	b111      	cbz	r1, 800afce <_reclaim_reent+0x8a>
 800afc8:	4620      	mov	r0, r4
 800afca:	f000 f89b 	bl	800b104 <_free_r>
 800afce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800afd0:	b111      	cbz	r1, 800afd8 <_reclaim_reent+0x94>
 800afd2:	4620      	mov	r0, r4
 800afd4:	f000 f896 	bl	800b104 <_free_r>
 800afd8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800afda:	b111      	cbz	r1, 800afe2 <_reclaim_reent+0x9e>
 800afdc:	4620      	mov	r0, r4
 800afde:	f000 f891 	bl	800b104 <_free_r>
 800afe2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800afe4:	b111      	cbz	r1, 800afec <_reclaim_reent+0xa8>
 800afe6:	4620      	mov	r0, r4
 800afe8:	f000 f88c 	bl	800b104 <_free_r>
 800afec:	6a23      	ldr	r3, [r4, #32]
 800afee:	b11b      	cbz	r3, 800aff8 <_reclaim_reent+0xb4>
 800aff0:	4620      	mov	r0, r4
 800aff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aff6:	4718      	bx	r3
 800aff8:	bd70      	pop	{r4, r5, r6, pc}
 800affa:	bf00      	nop
 800affc:	2000001c 	.word	0x2000001c

0800b000 <_lseek_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	4604      	mov	r4, r0
 800b004:	4608      	mov	r0, r1
 800b006:	4611      	mov	r1, r2
 800b008:	2200      	movs	r2, #0
 800b00a:	4d05      	ldr	r5, [pc, #20]	@ (800b020 <_lseek_r+0x20>)
 800b00c:	602a      	str	r2, [r5, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	f7f7 fed5 	bl	8002dbe <_lseek>
 800b014:	1c43      	adds	r3, r0, #1
 800b016:	d102      	bne.n	800b01e <_lseek_r+0x1e>
 800b018:	682b      	ldr	r3, [r5, #0]
 800b01a:	b103      	cbz	r3, 800b01e <_lseek_r+0x1e>
 800b01c:	6023      	str	r3, [r4, #0]
 800b01e:	bd38      	pop	{r3, r4, r5, pc}
 800b020:	20001e7c 	.word	0x20001e7c

0800b024 <_read_r>:
 800b024:	b538      	push	{r3, r4, r5, lr}
 800b026:	4604      	mov	r4, r0
 800b028:	4608      	mov	r0, r1
 800b02a:	4611      	mov	r1, r2
 800b02c:	2200      	movs	r2, #0
 800b02e:	4d05      	ldr	r5, [pc, #20]	@ (800b044 <_read_r+0x20>)
 800b030:	602a      	str	r2, [r5, #0]
 800b032:	461a      	mov	r2, r3
 800b034:	f7f7 fe66 	bl	8002d04 <_read>
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d102      	bne.n	800b042 <_read_r+0x1e>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	b103      	cbz	r3, 800b042 <_read_r+0x1e>
 800b040:	6023      	str	r3, [r4, #0]
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	20001e7c 	.word	0x20001e7c

0800b048 <_sbrk_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	2300      	movs	r3, #0
 800b04c:	4d05      	ldr	r5, [pc, #20]	@ (800b064 <_sbrk_r+0x1c>)
 800b04e:	4604      	mov	r4, r0
 800b050:	4608      	mov	r0, r1
 800b052:	602b      	str	r3, [r5, #0]
 800b054:	f7f7 fec0 	bl	8002dd8 <_sbrk>
 800b058:	1c43      	adds	r3, r0, #1
 800b05a:	d102      	bne.n	800b062 <_sbrk_r+0x1a>
 800b05c:	682b      	ldr	r3, [r5, #0]
 800b05e:	b103      	cbz	r3, 800b062 <_sbrk_r+0x1a>
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	bd38      	pop	{r3, r4, r5, pc}
 800b064:	20001e7c 	.word	0x20001e7c

0800b068 <_write_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4604      	mov	r4, r0
 800b06c:	4608      	mov	r0, r1
 800b06e:	4611      	mov	r1, r2
 800b070:	2200      	movs	r2, #0
 800b072:	4d05      	ldr	r5, [pc, #20]	@ (800b088 <_write_r+0x20>)
 800b074:	602a      	str	r2, [r5, #0]
 800b076:	461a      	mov	r2, r3
 800b078:	f7f7 fe61 	bl	8002d3e <_write>
 800b07c:	1c43      	adds	r3, r0, #1
 800b07e:	d102      	bne.n	800b086 <_write_r+0x1e>
 800b080:	682b      	ldr	r3, [r5, #0]
 800b082:	b103      	cbz	r3, 800b086 <_write_r+0x1e>
 800b084:	6023      	str	r3, [r4, #0]
 800b086:	bd38      	pop	{r3, r4, r5, pc}
 800b088:	20001e7c 	.word	0x20001e7c

0800b08c <__errno>:
 800b08c:	4b01      	ldr	r3, [pc, #4]	@ (800b094 <__errno+0x8>)
 800b08e:	6818      	ldr	r0, [r3, #0]
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	2000001c 	.word	0x2000001c

0800b098 <__libc_init_array>:
 800b098:	b570      	push	{r4, r5, r6, lr}
 800b09a:	2600      	movs	r6, #0
 800b09c:	4d0c      	ldr	r5, [pc, #48]	@ (800b0d0 <__libc_init_array+0x38>)
 800b09e:	4c0d      	ldr	r4, [pc, #52]	@ (800b0d4 <__libc_init_array+0x3c>)
 800b0a0:	1b64      	subs	r4, r4, r5
 800b0a2:	10a4      	asrs	r4, r4, #2
 800b0a4:	42a6      	cmp	r6, r4
 800b0a6:	d109      	bne.n	800b0bc <__libc_init_array+0x24>
 800b0a8:	f000 fd02 	bl	800bab0 <_init>
 800b0ac:	2600      	movs	r6, #0
 800b0ae:	4d0a      	ldr	r5, [pc, #40]	@ (800b0d8 <__libc_init_array+0x40>)
 800b0b0:	4c0a      	ldr	r4, [pc, #40]	@ (800b0dc <__libc_init_array+0x44>)
 800b0b2:	1b64      	subs	r4, r4, r5
 800b0b4:	10a4      	asrs	r4, r4, #2
 800b0b6:	42a6      	cmp	r6, r4
 800b0b8:	d105      	bne.n	800b0c6 <__libc_init_array+0x2e>
 800b0ba:	bd70      	pop	{r4, r5, r6, pc}
 800b0bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0c0:	4798      	blx	r3
 800b0c2:	3601      	adds	r6, #1
 800b0c4:	e7ee      	b.n	800b0a4 <__libc_init_array+0xc>
 800b0c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ca:	4798      	blx	r3
 800b0cc:	3601      	adds	r6, #1
 800b0ce:	e7f2      	b.n	800b0b6 <__libc_init_array+0x1e>
 800b0d0:	0800c404 	.word	0x0800c404
 800b0d4:	0800c404 	.word	0x0800c404
 800b0d8:	0800c404 	.word	0x0800c404
 800b0dc:	0800c408 	.word	0x0800c408

0800b0e0 <__retarget_lock_init_recursive>:
 800b0e0:	4770      	bx	lr

0800b0e2 <__retarget_lock_acquire_recursive>:
 800b0e2:	4770      	bx	lr

0800b0e4 <__retarget_lock_release_recursive>:
 800b0e4:	4770      	bx	lr

0800b0e6 <memcpy>:
 800b0e6:	440a      	add	r2, r1
 800b0e8:	4291      	cmp	r1, r2
 800b0ea:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0ee:	d100      	bne.n	800b0f2 <memcpy+0xc>
 800b0f0:	4770      	bx	lr
 800b0f2:	b510      	push	{r4, lr}
 800b0f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0f8:	4291      	cmp	r1, r2
 800b0fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0fe:	d1f9      	bne.n	800b0f4 <memcpy+0xe>
 800b100:	bd10      	pop	{r4, pc}
	...

0800b104 <_free_r>:
 800b104:	b538      	push	{r3, r4, r5, lr}
 800b106:	4605      	mov	r5, r0
 800b108:	2900      	cmp	r1, #0
 800b10a:	d040      	beq.n	800b18e <_free_r+0x8a>
 800b10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b110:	1f0c      	subs	r4, r1, #4
 800b112:	2b00      	cmp	r3, #0
 800b114:	bfb8      	it	lt
 800b116:	18e4      	addlt	r4, r4, r3
 800b118:	f7ff fce8 	bl	800aaec <__malloc_lock>
 800b11c:	4a1c      	ldr	r2, [pc, #112]	@ (800b190 <_free_r+0x8c>)
 800b11e:	6813      	ldr	r3, [r2, #0]
 800b120:	b933      	cbnz	r3, 800b130 <_free_r+0x2c>
 800b122:	6063      	str	r3, [r4, #4]
 800b124:	6014      	str	r4, [r2, #0]
 800b126:	4628      	mov	r0, r5
 800b128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b12c:	f7ff bce4 	b.w	800aaf8 <__malloc_unlock>
 800b130:	42a3      	cmp	r3, r4
 800b132:	d908      	bls.n	800b146 <_free_r+0x42>
 800b134:	6820      	ldr	r0, [r4, #0]
 800b136:	1821      	adds	r1, r4, r0
 800b138:	428b      	cmp	r3, r1
 800b13a:	bf01      	itttt	eq
 800b13c:	6819      	ldreq	r1, [r3, #0]
 800b13e:	685b      	ldreq	r3, [r3, #4]
 800b140:	1809      	addeq	r1, r1, r0
 800b142:	6021      	streq	r1, [r4, #0]
 800b144:	e7ed      	b.n	800b122 <_free_r+0x1e>
 800b146:	461a      	mov	r2, r3
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	b10b      	cbz	r3, 800b150 <_free_r+0x4c>
 800b14c:	42a3      	cmp	r3, r4
 800b14e:	d9fa      	bls.n	800b146 <_free_r+0x42>
 800b150:	6811      	ldr	r1, [r2, #0]
 800b152:	1850      	adds	r0, r2, r1
 800b154:	42a0      	cmp	r0, r4
 800b156:	d10b      	bne.n	800b170 <_free_r+0x6c>
 800b158:	6820      	ldr	r0, [r4, #0]
 800b15a:	4401      	add	r1, r0
 800b15c:	1850      	adds	r0, r2, r1
 800b15e:	4283      	cmp	r3, r0
 800b160:	6011      	str	r1, [r2, #0]
 800b162:	d1e0      	bne.n	800b126 <_free_r+0x22>
 800b164:	6818      	ldr	r0, [r3, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	4408      	add	r0, r1
 800b16a:	6010      	str	r0, [r2, #0]
 800b16c:	6053      	str	r3, [r2, #4]
 800b16e:	e7da      	b.n	800b126 <_free_r+0x22>
 800b170:	d902      	bls.n	800b178 <_free_r+0x74>
 800b172:	230c      	movs	r3, #12
 800b174:	602b      	str	r3, [r5, #0]
 800b176:	e7d6      	b.n	800b126 <_free_r+0x22>
 800b178:	6820      	ldr	r0, [r4, #0]
 800b17a:	1821      	adds	r1, r4, r0
 800b17c:	428b      	cmp	r3, r1
 800b17e:	bf01      	itttt	eq
 800b180:	6819      	ldreq	r1, [r3, #0]
 800b182:	685b      	ldreq	r3, [r3, #4]
 800b184:	1809      	addeq	r1, r1, r0
 800b186:	6021      	streq	r1, [r4, #0]
 800b188:	6063      	str	r3, [r4, #4]
 800b18a:	6054      	str	r4, [r2, #4]
 800b18c:	e7cb      	b.n	800b126 <_free_r+0x22>
 800b18e:	bd38      	pop	{r3, r4, r5, pc}
 800b190:	20001d3c 	.word	0x20001d3c

0800b194 <__sflush_r>:
 800b194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19a:	0716      	lsls	r6, r2, #28
 800b19c:	4605      	mov	r5, r0
 800b19e:	460c      	mov	r4, r1
 800b1a0:	d454      	bmi.n	800b24c <__sflush_r+0xb8>
 800b1a2:	684b      	ldr	r3, [r1, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	dc02      	bgt.n	800b1ae <__sflush_r+0x1a>
 800b1a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	dd48      	ble.n	800b240 <__sflush_r+0xac>
 800b1ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1b0:	2e00      	cmp	r6, #0
 800b1b2:	d045      	beq.n	800b240 <__sflush_r+0xac>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b1ba:	682f      	ldr	r7, [r5, #0]
 800b1bc:	6a21      	ldr	r1, [r4, #32]
 800b1be:	602b      	str	r3, [r5, #0]
 800b1c0:	d030      	beq.n	800b224 <__sflush_r+0x90>
 800b1c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b1c4:	89a3      	ldrh	r3, [r4, #12]
 800b1c6:	0759      	lsls	r1, r3, #29
 800b1c8:	d505      	bpl.n	800b1d6 <__sflush_r+0x42>
 800b1ca:	6863      	ldr	r3, [r4, #4]
 800b1cc:	1ad2      	subs	r2, r2, r3
 800b1ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b1d0:	b10b      	cbz	r3, 800b1d6 <__sflush_r+0x42>
 800b1d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b1d4:	1ad2      	subs	r2, r2, r3
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	4628      	mov	r0, r5
 800b1da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1dc:	6a21      	ldr	r1, [r4, #32]
 800b1de:	47b0      	blx	r6
 800b1e0:	1c43      	adds	r3, r0, #1
 800b1e2:	89a3      	ldrh	r3, [r4, #12]
 800b1e4:	d106      	bne.n	800b1f4 <__sflush_r+0x60>
 800b1e6:	6829      	ldr	r1, [r5, #0]
 800b1e8:	291d      	cmp	r1, #29
 800b1ea:	d82b      	bhi.n	800b244 <__sflush_r+0xb0>
 800b1ec:	4a28      	ldr	r2, [pc, #160]	@ (800b290 <__sflush_r+0xfc>)
 800b1ee:	40ca      	lsrs	r2, r1
 800b1f0:	07d6      	lsls	r6, r2, #31
 800b1f2:	d527      	bpl.n	800b244 <__sflush_r+0xb0>
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	6062      	str	r2, [r4, #4]
 800b1f8:	6922      	ldr	r2, [r4, #16]
 800b1fa:	04d9      	lsls	r1, r3, #19
 800b1fc:	6022      	str	r2, [r4, #0]
 800b1fe:	d504      	bpl.n	800b20a <__sflush_r+0x76>
 800b200:	1c42      	adds	r2, r0, #1
 800b202:	d101      	bne.n	800b208 <__sflush_r+0x74>
 800b204:	682b      	ldr	r3, [r5, #0]
 800b206:	b903      	cbnz	r3, 800b20a <__sflush_r+0x76>
 800b208:	6560      	str	r0, [r4, #84]	@ 0x54
 800b20a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b20c:	602f      	str	r7, [r5, #0]
 800b20e:	b1b9      	cbz	r1, 800b240 <__sflush_r+0xac>
 800b210:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b214:	4299      	cmp	r1, r3
 800b216:	d002      	beq.n	800b21e <__sflush_r+0x8a>
 800b218:	4628      	mov	r0, r5
 800b21a:	f7ff ff73 	bl	800b104 <_free_r>
 800b21e:	2300      	movs	r3, #0
 800b220:	6363      	str	r3, [r4, #52]	@ 0x34
 800b222:	e00d      	b.n	800b240 <__sflush_r+0xac>
 800b224:	2301      	movs	r3, #1
 800b226:	4628      	mov	r0, r5
 800b228:	47b0      	blx	r6
 800b22a:	4602      	mov	r2, r0
 800b22c:	1c50      	adds	r0, r2, #1
 800b22e:	d1c9      	bne.n	800b1c4 <__sflush_r+0x30>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d0c6      	beq.n	800b1c4 <__sflush_r+0x30>
 800b236:	2b1d      	cmp	r3, #29
 800b238:	d001      	beq.n	800b23e <__sflush_r+0xaa>
 800b23a:	2b16      	cmp	r3, #22
 800b23c:	d11d      	bne.n	800b27a <__sflush_r+0xe6>
 800b23e:	602f      	str	r7, [r5, #0]
 800b240:	2000      	movs	r0, #0
 800b242:	e021      	b.n	800b288 <__sflush_r+0xf4>
 800b244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b248:	b21b      	sxth	r3, r3
 800b24a:	e01a      	b.n	800b282 <__sflush_r+0xee>
 800b24c:	690f      	ldr	r7, [r1, #16]
 800b24e:	2f00      	cmp	r7, #0
 800b250:	d0f6      	beq.n	800b240 <__sflush_r+0xac>
 800b252:	0793      	lsls	r3, r2, #30
 800b254:	bf18      	it	ne
 800b256:	2300      	movne	r3, #0
 800b258:	680e      	ldr	r6, [r1, #0]
 800b25a:	bf08      	it	eq
 800b25c:	694b      	ldreq	r3, [r1, #20]
 800b25e:	1bf6      	subs	r6, r6, r7
 800b260:	600f      	str	r7, [r1, #0]
 800b262:	608b      	str	r3, [r1, #8]
 800b264:	2e00      	cmp	r6, #0
 800b266:	ddeb      	ble.n	800b240 <__sflush_r+0xac>
 800b268:	4633      	mov	r3, r6
 800b26a:	463a      	mov	r2, r7
 800b26c:	4628      	mov	r0, r5
 800b26e:	6a21      	ldr	r1, [r4, #32]
 800b270:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b274:	47e0      	blx	ip
 800b276:	2800      	cmp	r0, #0
 800b278:	dc07      	bgt.n	800b28a <__sflush_r+0xf6>
 800b27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b282:	f04f 30ff 	mov.w	r0, #4294967295
 800b286:	81a3      	strh	r3, [r4, #12]
 800b288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b28a:	4407      	add	r7, r0
 800b28c:	1a36      	subs	r6, r6, r0
 800b28e:	e7e9      	b.n	800b264 <__sflush_r+0xd0>
 800b290:	20400001 	.word	0x20400001

0800b294 <_fflush_r>:
 800b294:	b538      	push	{r3, r4, r5, lr}
 800b296:	690b      	ldr	r3, [r1, #16]
 800b298:	4605      	mov	r5, r0
 800b29a:	460c      	mov	r4, r1
 800b29c:	b913      	cbnz	r3, 800b2a4 <_fflush_r+0x10>
 800b29e:	2500      	movs	r5, #0
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	bd38      	pop	{r3, r4, r5, pc}
 800b2a4:	b118      	cbz	r0, 800b2ae <_fflush_r+0x1a>
 800b2a6:	6a03      	ldr	r3, [r0, #32]
 800b2a8:	b90b      	cbnz	r3, 800b2ae <_fflush_r+0x1a>
 800b2aa:	f7ff fcb7 	bl	800ac1c <__sinit>
 800b2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d0f3      	beq.n	800b29e <_fflush_r+0xa>
 800b2b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b2b8:	07d0      	lsls	r0, r2, #31
 800b2ba:	d404      	bmi.n	800b2c6 <_fflush_r+0x32>
 800b2bc:	0599      	lsls	r1, r3, #22
 800b2be:	d402      	bmi.n	800b2c6 <_fflush_r+0x32>
 800b2c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2c2:	f7ff ff0e 	bl	800b0e2 <__retarget_lock_acquire_recursive>
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	4621      	mov	r1, r4
 800b2ca:	f7ff ff63 	bl	800b194 <__sflush_r>
 800b2ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2d0:	4605      	mov	r5, r0
 800b2d2:	07da      	lsls	r2, r3, #31
 800b2d4:	d4e4      	bmi.n	800b2a0 <_fflush_r+0xc>
 800b2d6:	89a3      	ldrh	r3, [r4, #12]
 800b2d8:	059b      	lsls	r3, r3, #22
 800b2da:	d4e1      	bmi.n	800b2a0 <_fflush_r+0xc>
 800b2dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2de:	f7ff ff01 	bl	800b0e4 <__retarget_lock_release_recursive>
 800b2e2:	e7dd      	b.n	800b2a0 <_fflush_r+0xc>

0800b2e4 <__swhatbuf_r>:
 800b2e4:	b570      	push	{r4, r5, r6, lr}
 800b2e6:	460c      	mov	r4, r1
 800b2e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ec:	4615      	mov	r5, r2
 800b2ee:	2900      	cmp	r1, #0
 800b2f0:	461e      	mov	r6, r3
 800b2f2:	b096      	sub	sp, #88	@ 0x58
 800b2f4:	da0c      	bge.n	800b310 <__swhatbuf_r+0x2c>
 800b2f6:	89a3      	ldrh	r3, [r4, #12]
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b2fe:	bf14      	ite	ne
 800b300:	2340      	movne	r3, #64	@ 0x40
 800b302:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b306:	2000      	movs	r0, #0
 800b308:	6031      	str	r1, [r6, #0]
 800b30a:	602b      	str	r3, [r5, #0]
 800b30c:	b016      	add	sp, #88	@ 0x58
 800b30e:	bd70      	pop	{r4, r5, r6, pc}
 800b310:	466a      	mov	r2, sp
 800b312:	f000 f849 	bl	800b3a8 <_fstat_r>
 800b316:	2800      	cmp	r0, #0
 800b318:	dbed      	blt.n	800b2f6 <__swhatbuf_r+0x12>
 800b31a:	9901      	ldr	r1, [sp, #4]
 800b31c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b320:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b324:	4259      	negs	r1, r3
 800b326:	4159      	adcs	r1, r3
 800b328:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b32c:	e7eb      	b.n	800b306 <__swhatbuf_r+0x22>

0800b32e <__smakebuf_r>:
 800b32e:	898b      	ldrh	r3, [r1, #12]
 800b330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b332:	079d      	lsls	r5, r3, #30
 800b334:	4606      	mov	r6, r0
 800b336:	460c      	mov	r4, r1
 800b338:	d507      	bpl.n	800b34a <__smakebuf_r+0x1c>
 800b33a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b33e:	6023      	str	r3, [r4, #0]
 800b340:	6123      	str	r3, [r4, #16]
 800b342:	2301      	movs	r3, #1
 800b344:	6163      	str	r3, [r4, #20]
 800b346:	b003      	add	sp, #12
 800b348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b34a:	466a      	mov	r2, sp
 800b34c:	ab01      	add	r3, sp, #4
 800b34e:	f7ff ffc9 	bl	800b2e4 <__swhatbuf_r>
 800b352:	9f00      	ldr	r7, [sp, #0]
 800b354:	4605      	mov	r5, r0
 800b356:	4639      	mov	r1, r7
 800b358:	4630      	mov	r0, r6
 800b35a:	f7ff fb47 	bl	800a9ec <_malloc_r>
 800b35e:	b948      	cbnz	r0, 800b374 <__smakebuf_r+0x46>
 800b360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b364:	059a      	lsls	r2, r3, #22
 800b366:	d4ee      	bmi.n	800b346 <__smakebuf_r+0x18>
 800b368:	f023 0303 	bic.w	r3, r3, #3
 800b36c:	f043 0302 	orr.w	r3, r3, #2
 800b370:	81a3      	strh	r3, [r4, #12]
 800b372:	e7e2      	b.n	800b33a <__smakebuf_r+0xc>
 800b374:	89a3      	ldrh	r3, [r4, #12]
 800b376:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b37a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b37e:	81a3      	strh	r3, [r4, #12]
 800b380:	9b01      	ldr	r3, [sp, #4]
 800b382:	6020      	str	r0, [r4, #0]
 800b384:	b15b      	cbz	r3, 800b39e <__smakebuf_r+0x70>
 800b386:	4630      	mov	r0, r6
 800b388:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b38c:	f000 f81e 	bl	800b3cc <_isatty_r>
 800b390:	b128      	cbz	r0, 800b39e <__smakebuf_r+0x70>
 800b392:	89a3      	ldrh	r3, [r4, #12]
 800b394:	f023 0303 	bic.w	r3, r3, #3
 800b398:	f043 0301 	orr.w	r3, r3, #1
 800b39c:	81a3      	strh	r3, [r4, #12]
 800b39e:	89a3      	ldrh	r3, [r4, #12]
 800b3a0:	431d      	orrs	r5, r3
 800b3a2:	81a5      	strh	r5, [r4, #12]
 800b3a4:	e7cf      	b.n	800b346 <__smakebuf_r+0x18>
	...

0800b3a8 <_fstat_r>:
 800b3a8:	b538      	push	{r3, r4, r5, lr}
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	4d06      	ldr	r5, [pc, #24]	@ (800b3c8 <_fstat_r+0x20>)
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	4608      	mov	r0, r1
 800b3b2:	4611      	mov	r1, r2
 800b3b4:	602b      	str	r3, [r5, #0]
 800b3b6:	f7f7 fce9 	bl	8002d8c <_fstat>
 800b3ba:	1c43      	adds	r3, r0, #1
 800b3bc:	d102      	bne.n	800b3c4 <_fstat_r+0x1c>
 800b3be:	682b      	ldr	r3, [r5, #0]
 800b3c0:	b103      	cbz	r3, 800b3c4 <_fstat_r+0x1c>
 800b3c2:	6023      	str	r3, [r4, #0]
 800b3c4:	bd38      	pop	{r3, r4, r5, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20001e7c 	.word	0x20001e7c

0800b3cc <_isatty_r>:
 800b3cc:	b538      	push	{r3, r4, r5, lr}
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	4d05      	ldr	r5, [pc, #20]	@ (800b3e8 <_isatty_r+0x1c>)
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	4608      	mov	r0, r1
 800b3d6:	602b      	str	r3, [r5, #0]
 800b3d8:	f7f7 fce7 	bl	8002daa <_isatty>
 800b3dc:	1c43      	adds	r3, r0, #1
 800b3de:	d102      	bne.n	800b3e6 <_isatty_r+0x1a>
 800b3e0:	682b      	ldr	r3, [r5, #0]
 800b3e2:	b103      	cbz	r3, 800b3e6 <_isatty_r+0x1a>
 800b3e4:	6023      	str	r3, [r4, #0]
 800b3e6:	bd38      	pop	{r3, r4, r5, pc}
 800b3e8:	20001e7c 	.word	0x20001e7c

0800b3ec <atan2>:
 800b3ec:	f000 b8f8 	b.w	800b5e0 <__ieee754_atan2>

0800b3f0 <sqrt>:
 800b3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	460f      	mov	r7, r1
 800b3f6:	f000 f81f 	bl	800b438 <__ieee754_sqrt>
 800b3fa:	4632      	mov	r2, r6
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	460d      	mov	r5, r1
 800b400:	463b      	mov	r3, r7
 800b402:	4630      	mov	r0, r6
 800b404:	4639      	mov	r1, r7
 800b406:	f7f5 faf9 	bl	80009fc <__aeabi_dcmpun>
 800b40a:	b990      	cbnz	r0, 800b432 <sqrt+0x42>
 800b40c:	2200      	movs	r2, #0
 800b40e:	2300      	movs	r3, #0
 800b410:	4630      	mov	r0, r6
 800b412:	4639      	mov	r1, r7
 800b414:	f7f5 faca 	bl	80009ac <__aeabi_dcmplt>
 800b418:	b158      	cbz	r0, 800b432 <sqrt+0x42>
 800b41a:	f7ff fe37 	bl	800b08c <__errno>
 800b41e:	2321      	movs	r3, #33	@ 0x21
 800b420:	2200      	movs	r2, #0
 800b422:	6003      	str	r3, [r0, #0]
 800b424:	2300      	movs	r3, #0
 800b426:	4610      	mov	r0, r2
 800b428:	4619      	mov	r1, r3
 800b42a:	f7f5 f977 	bl	800071c <__aeabi_ddiv>
 800b42e:	4604      	mov	r4, r0
 800b430:	460d      	mov	r5, r1
 800b432:	4620      	mov	r0, r4
 800b434:	4629      	mov	r1, r5
 800b436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b438 <__ieee754_sqrt>:
 800b438:	4a65      	ldr	r2, [pc, #404]	@ (800b5d0 <__ieee754_sqrt+0x198>)
 800b43a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43e:	438a      	bics	r2, r1
 800b440:	4606      	mov	r6, r0
 800b442:	460f      	mov	r7, r1
 800b444:	460b      	mov	r3, r1
 800b446:	4604      	mov	r4, r0
 800b448:	d10e      	bne.n	800b468 <__ieee754_sqrt+0x30>
 800b44a:	4602      	mov	r2, r0
 800b44c:	f7f5 f83c 	bl	80004c8 <__aeabi_dmul>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	4630      	mov	r0, r6
 800b456:	4639      	mov	r1, r7
 800b458:	f7f4 fe80 	bl	800015c <__adddf3>
 800b45c:	4606      	mov	r6, r0
 800b45e:	460f      	mov	r7, r1
 800b460:	4630      	mov	r0, r6
 800b462:	4639      	mov	r1, r7
 800b464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b468:	2900      	cmp	r1, #0
 800b46a:	dc0c      	bgt.n	800b486 <__ieee754_sqrt+0x4e>
 800b46c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b470:	4302      	orrs	r2, r0
 800b472:	d0f5      	beq.n	800b460 <__ieee754_sqrt+0x28>
 800b474:	b189      	cbz	r1, 800b49a <__ieee754_sqrt+0x62>
 800b476:	4602      	mov	r2, r0
 800b478:	f7f4 fe6e 	bl	8000158 <__aeabi_dsub>
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	f7f5 f94c 	bl	800071c <__aeabi_ddiv>
 800b484:	e7ea      	b.n	800b45c <__ieee754_sqrt+0x24>
 800b486:	150a      	asrs	r2, r1, #20
 800b488:	d115      	bne.n	800b4b6 <__ieee754_sqrt+0x7e>
 800b48a:	2100      	movs	r1, #0
 800b48c:	e009      	b.n	800b4a2 <__ieee754_sqrt+0x6a>
 800b48e:	0ae3      	lsrs	r3, r4, #11
 800b490:	3a15      	subs	r2, #21
 800b492:	0564      	lsls	r4, r4, #21
 800b494:	2b00      	cmp	r3, #0
 800b496:	d0fa      	beq.n	800b48e <__ieee754_sqrt+0x56>
 800b498:	e7f7      	b.n	800b48a <__ieee754_sqrt+0x52>
 800b49a:	460a      	mov	r2, r1
 800b49c:	e7fa      	b.n	800b494 <__ieee754_sqrt+0x5c>
 800b49e:	005b      	lsls	r3, r3, #1
 800b4a0:	3101      	adds	r1, #1
 800b4a2:	02d8      	lsls	r0, r3, #11
 800b4a4:	d5fb      	bpl.n	800b49e <__ieee754_sqrt+0x66>
 800b4a6:	1e48      	subs	r0, r1, #1
 800b4a8:	1a12      	subs	r2, r2, r0
 800b4aa:	f1c1 0020 	rsb	r0, r1, #32
 800b4ae:	fa24 f000 	lsr.w	r0, r4, r0
 800b4b2:	4303      	orrs	r3, r0
 800b4b4:	408c      	lsls	r4, r1
 800b4b6:	2700      	movs	r7, #0
 800b4b8:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800b4bc:	2116      	movs	r1, #22
 800b4be:	07d2      	lsls	r2, r2, #31
 800b4c0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b4c4:	463a      	mov	r2, r7
 800b4c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b4ce:	bf5c      	itt	pl
 800b4d0:	005b      	lslpl	r3, r3, #1
 800b4d2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800b4d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b4da:	bf58      	it	pl
 800b4dc:	0064      	lslpl	r4, r4, #1
 800b4de:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b4e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b4e6:	0064      	lsls	r4, r4, #1
 800b4e8:	1815      	adds	r5, r2, r0
 800b4ea:	429d      	cmp	r5, r3
 800b4ec:	bfde      	ittt	le
 800b4ee:	182a      	addle	r2, r5, r0
 800b4f0:	1b5b      	suble	r3, r3, r5
 800b4f2:	183f      	addle	r7, r7, r0
 800b4f4:	0fe5      	lsrs	r5, r4, #31
 800b4f6:	3901      	subs	r1, #1
 800b4f8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b4fc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b500:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b504:	d1f0      	bne.n	800b4e8 <__ieee754_sqrt+0xb0>
 800b506:	460d      	mov	r5, r1
 800b508:	2620      	movs	r6, #32
 800b50a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b50e:	4293      	cmp	r3, r2
 800b510:	eb00 0c01 	add.w	ip, r0, r1
 800b514:	dc02      	bgt.n	800b51c <__ieee754_sqrt+0xe4>
 800b516:	d113      	bne.n	800b540 <__ieee754_sqrt+0x108>
 800b518:	45a4      	cmp	ip, r4
 800b51a:	d811      	bhi.n	800b540 <__ieee754_sqrt+0x108>
 800b51c:	f1bc 0f00 	cmp.w	ip, #0
 800b520:	eb0c 0100 	add.w	r1, ip, r0
 800b524:	da3e      	bge.n	800b5a4 <__ieee754_sqrt+0x16c>
 800b526:	2900      	cmp	r1, #0
 800b528:	db3c      	blt.n	800b5a4 <__ieee754_sqrt+0x16c>
 800b52a:	f102 0e01 	add.w	lr, r2, #1
 800b52e:	1a9b      	subs	r3, r3, r2
 800b530:	4672      	mov	r2, lr
 800b532:	45a4      	cmp	ip, r4
 800b534:	bf88      	it	hi
 800b536:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b53a:	eba4 040c 	sub.w	r4, r4, ip
 800b53e:	4405      	add	r5, r0
 800b540:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800b544:	3e01      	subs	r6, #1
 800b546:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800b54a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b54e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b552:	d1dc      	bne.n	800b50e <__ieee754_sqrt+0xd6>
 800b554:	431c      	orrs	r4, r3
 800b556:	d01a      	beq.n	800b58e <__ieee754_sqrt+0x156>
 800b558:	4c1e      	ldr	r4, [pc, #120]	@ (800b5d4 <__ieee754_sqrt+0x19c>)
 800b55a:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800b5d8 <__ieee754_sqrt+0x1a0>
 800b55e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b562:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b566:	f7f4 fdf7 	bl	8000158 <__aeabi_dsub>
 800b56a:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800b56e:	4602      	mov	r2, r0
 800b570:	460b      	mov	r3, r1
 800b572:	4650      	mov	r0, sl
 800b574:	4659      	mov	r1, fp
 800b576:	f7f5 fa23 	bl	80009c0 <__aeabi_dcmple>
 800b57a:	b140      	cbz	r0, 800b58e <__ieee754_sqrt+0x156>
 800b57c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b580:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b584:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b588:	d10e      	bne.n	800b5a8 <__ieee754_sqrt+0x170>
 800b58a:	4635      	mov	r5, r6
 800b58c:	3701      	adds	r7, #1
 800b58e:	107b      	asrs	r3, r7, #1
 800b590:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800b594:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800b598:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800b59c:	086b      	lsrs	r3, r5, #1
 800b59e:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800b5a2:	e75b      	b.n	800b45c <__ieee754_sqrt+0x24>
 800b5a4:	4696      	mov	lr, r2
 800b5a6:	e7c2      	b.n	800b52e <__ieee754_sqrt+0xf6>
 800b5a8:	f7f4 fdd8 	bl	800015c <__adddf3>
 800b5ac:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	4650      	mov	r0, sl
 800b5b6:	4659      	mov	r1, fp
 800b5b8:	f7f5 f9f8 	bl	80009ac <__aeabi_dcmplt>
 800b5bc:	b120      	cbz	r0, 800b5c8 <__ieee754_sqrt+0x190>
 800b5be:	1cab      	adds	r3, r5, #2
 800b5c0:	bf08      	it	eq
 800b5c2:	3701      	addeq	r7, #1
 800b5c4:	3502      	adds	r5, #2
 800b5c6:	e7e2      	b.n	800b58e <__ieee754_sqrt+0x156>
 800b5c8:	1c6b      	adds	r3, r5, #1
 800b5ca:	f023 0501 	bic.w	r5, r3, #1
 800b5ce:	e7de      	b.n	800b58e <__ieee754_sqrt+0x156>
 800b5d0:	7ff00000 	.word	0x7ff00000
 800b5d4:	0800bc00 	.word	0x0800bc00
 800b5d8:	0800bbf8 	.word	0x0800bbf8
 800b5dc:	00000000 	.word	0x00000000

0800b5e0 <__ieee754_atan2>:
 800b5e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e4:	4617      	mov	r7, r2
 800b5e6:	4690      	mov	r8, r2
 800b5e8:	4699      	mov	r9, r3
 800b5ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b5ee:	427b      	negs	r3, r7
 800b5f0:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800b778 <__ieee754_atan2+0x198>
 800b5f4:	433b      	orrs	r3, r7
 800b5f6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b5fa:	4553      	cmp	r3, sl
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	460d      	mov	r5, r1
 800b600:	d809      	bhi.n	800b616 <__ieee754_atan2+0x36>
 800b602:	4246      	negs	r6, r0
 800b604:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b608:	4306      	orrs	r6, r0
 800b60a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800b60e:	4556      	cmp	r6, sl
 800b610:	468e      	mov	lr, r1
 800b612:	4683      	mov	fp, r0
 800b614:	d908      	bls.n	800b628 <__ieee754_atan2+0x48>
 800b616:	4642      	mov	r2, r8
 800b618:	464b      	mov	r3, r9
 800b61a:	4620      	mov	r0, r4
 800b61c:	4629      	mov	r1, r5
 800b61e:	f7f4 fd9d 	bl	800015c <__adddf3>
 800b622:	4604      	mov	r4, r0
 800b624:	460d      	mov	r5, r1
 800b626:	e016      	b.n	800b656 <__ieee754_atan2+0x76>
 800b628:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800b62c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800b630:	433e      	orrs	r6, r7
 800b632:	d103      	bne.n	800b63c <__ieee754_atan2+0x5c>
 800b634:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b638:	f000 b8a6 	b.w	800b788 <atan>
 800b63c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800b640:	f006 0602 	and.w	r6, r6, #2
 800b644:	ea53 0b0b 	orrs.w	fp, r3, fp
 800b648:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800b64c:	d107      	bne.n	800b65e <__ieee754_atan2+0x7e>
 800b64e:	2e02      	cmp	r6, #2
 800b650:	d064      	beq.n	800b71c <__ieee754_atan2+0x13c>
 800b652:	2e03      	cmp	r6, #3
 800b654:	d066      	beq.n	800b724 <__ieee754_atan2+0x144>
 800b656:	4620      	mov	r0, r4
 800b658:	4629      	mov	r1, r5
 800b65a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65e:	4317      	orrs	r7, r2
 800b660:	d106      	bne.n	800b670 <__ieee754_atan2+0x90>
 800b662:	f1be 0f00 	cmp.w	lr, #0
 800b666:	db68      	blt.n	800b73a <__ieee754_atan2+0x15a>
 800b668:	a537      	add	r5, pc, #220	@ (adr r5, 800b748 <__ieee754_atan2+0x168>)
 800b66a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b66e:	e7f2      	b.n	800b656 <__ieee754_atan2+0x76>
 800b670:	4552      	cmp	r2, sl
 800b672:	d10f      	bne.n	800b694 <__ieee754_atan2+0xb4>
 800b674:	4293      	cmp	r3, r2
 800b676:	f106 36ff 	add.w	r6, r6, #4294967295
 800b67a:	d107      	bne.n	800b68c <__ieee754_atan2+0xac>
 800b67c:	2e02      	cmp	r6, #2
 800b67e:	d855      	bhi.n	800b72c <__ieee754_atan2+0x14c>
 800b680:	4b3e      	ldr	r3, [pc, #248]	@ (800b77c <__ieee754_atan2+0x19c>)
 800b682:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b686:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b68a:	e7e4      	b.n	800b656 <__ieee754_atan2+0x76>
 800b68c:	2e02      	cmp	r6, #2
 800b68e:	d851      	bhi.n	800b734 <__ieee754_atan2+0x154>
 800b690:	4b3b      	ldr	r3, [pc, #236]	@ (800b780 <__ieee754_atan2+0x1a0>)
 800b692:	e7f6      	b.n	800b682 <__ieee754_atan2+0xa2>
 800b694:	4553      	cmp	r3, sl
 800b696:	d0e4      	beq.n	800b662 <__ieee754_atan2+0x82>
 800b698:	1a9b      	subs	r3, r3, r2
 800b69a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b69e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b6a2:	da21      	bge.n	800b6e8 <__ieee754_atan2+0x108>
 800b6a4:	f1b9 0f00 	cmp.w	r9, #0
 800b6a8:	da01      	bge.n	800b6ae <__ieee754_atan2+0xce>
 800b6aa:	323c      	adds	r2, #60	@ 0x3c
 800b6ac:	db20      	blt.n	800b6f0 <__ieee754_atan2+0x110>
 800b6ae:	4642      	mov	r2, r8
 800b6b0:	464b      	mov	r3, r9
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	4629      	mov	r1, r5
 800b6b6:	f7f5 f831 	bl	800071c <__aeabi_ddiv>
 800b6ba:	f000 f9f5 	bl	800baa8 <fabs>
 800b6be:	f000 f863 	bl	800b788 <atan>
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	460d      	mov	r5, r1
 800b6c6:	2e01      	cmp	r6, #1
 800b6c8:	d015      	beq.n	800b6f6 <__ieee754_atan2+0x116>
 800b6ca:	2e02      	cmp	r6, #2
 800b6cc:	d017      	beq.n	800b6fe <__ieee754_atan2+0x11e>
 800b6ce:	2e00      	cmp	r6, #0
 800b6d0:	d0c1      	beq.n	800b656 <__ieee754_atan2+0x76>
 800b6d2:	a31f      	add	r3, pc, #124	@ (adr r3, 800b750 <__ieee754_atan2+0x170>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	4620      	mov	r0, r4
 800b6da:	4629      	mov	r1, r5
 800b6dc:	f7f4 fd3c 	bl	8000158 <__aeabi_dsub>
 800b6e0:	a31d      	add	r3, pc, #116	@ (adr r3, 800b758 <__ieee754_atan2+0x178>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	e016      	b.n	800b716 <__ieee754_atan2+0x136>
 800b6e8:	a517      	add	r5, pc, #92	@ (adr r5, 800b748 <__ieee754_atan2+0x168>)
 800b6ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b6ee:	e7ea      	b.n	800b6c6 <__ieee754_atan2+0xe6>
 800b6f0:	2400      	movs	r4, #0
 800b6f2:	2500      	movs	r5, #0
 800b6f4:	e7e7      	b.n	800b6c6 <__ieee754_atan2+0xe6>
 800b6f6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800b6fa:	461d      	mov	r5, r3
 800b6fc:	e7ab      	b.n	800b656 <__ieee754_atan2+0x76>
 800b6fe:	a314      	add	r3, pc, #80	@ (adr r3, 800b750 <__ieee754_atan2+0x170>)
 800b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b704:	4620      	mov	r0, r4
 800b706:	4629      	mov	r1, r5
 800b708:	f7f4 fd26 	bl	8000158 <__aeabi_dsub>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	a111      	add	r1, pc, #68	@ (adr r1, 800b758 <__ieee754_atan2+0x178>)
 800b712:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b716:	f7f4 fd1f 	bl	8000158 <__aeabi_dsub>
 800b71a:	e782      	b.n	800b622 <__ieee754_atan2+0x42>
 800b71c:	a50e      	add	r5, pc, #56	@ (adr r5, 800b758 <__ieee754_atan2+0x178>)
 800b71e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b722:	e798      	b.n	800b656 <__ieee754_atan2+0x76>
 800b724:	a50e      	add	r5, pc, #56	@ (adr r5, 800b760 <__ieee754_atan2+0x180>)
 800b726:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b72a:	e794      	b.n	800b656 <__ieee754_atan2+0x76>
 800b72c:	a50e      	add	r5, pc, #56	@ (adr r5, 800b768 <__ieee754_atan2+0x188>)
 800b72e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b732:	e790      	b.n	800b656 <__ieee754_atan2+0x76>
 800b734:	2400      	movs	r4, #0
 800b736:	2500      	movs	r5, #0
 800b738:	e78d      	b.n	800b656 <__ieee754_atan2+0x76>
 800b73a:	a50d      	add	r5, pc, #52	@ (adr r5, 800b770 <__ieee754_atan2+0x190>)
 800b73c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b740:	e789      	b.n	800b656 <__ieee754_atan2+0x76>
 800b742:	bf00      	nop
 800b744:	f3af 8000 	nop.w
 800b748:	54442d18 	.word	0x54442d18
 800b74c:	3ff921fb 	.word	0x3ff921fb
 800b750:	33145c07 	.word	0x33145c07
 800b754:	3ca1a626 	.word	0x3ca1a626
 800b758:	54442d18 	.word	0x54442d18
 800b75c:	400921fb 	.word	0x400921fb
 800b760:	54442d18 	.word	0x54442d18
 800b764:	c00921fb 	.word	0xc00921fb
 800b768:	54442d18 	.word	0x54442d18
 800b76c:	3fe921fb 	.word	0x3fe921fb
 800b770:	54442d18 	.word	0x54442d18
 800b774:	bff921fb 	.word	0xbff921fb
 800b778:	7ff00000 	.word	0x7ff00000
 800b77c:	0800bc20 	.word	0x0800bc20
 800b780:	0800bc08 	.word	0x0800bc08
 800b784:	00000000 	.word	0x00000000

0800b788 <atan>:
 800b788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78c:	4bbc      	ldr	r3, [pc, #752]	@ (800ba80 <atan+0x2f8>)
 800b78e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800b792:	429e      	cmp	r6, r3
 800b794:	4604      	mov	r4, r0
 800b796:	460d      	mov	r5, r1
 800b798:	468b      	mov	fp, r1
 800b79a:	d918      	bls.n	800b7ce <atan+0x46>
 800b79c:	4bb9      	ldr	r3, [pc, #740]	@ (800ba84 <atan+0x2fc>)
 800b79e:	429e      	cmp	r6, r3
 800b7a0:	d801      	bhi.n	800b7a6 <atan+0x1e>
 800b7a2:	d109      	bne.n	800b7b8 <atan+0x30>
 800b7a4:	b140      	cbz	r0, 800b7b8 <atan+0x30>
 800b7a6:	4622      	mov	r2, r4
 800b7a8:	462b      	mov	r3, r5
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	4629      	mov	r1, r5
 800b7ae:	f7f4 fcd5 	bl	800015c <__adddf3>
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	460d      	mov	r5, r1
 800b7b6:	e006      	b.n	800b7c6 <atan+0x3e>
 800b7b8:	f1bb 0f00 	cmp.w	fp, #0
 800b7bc:	f340 8123 	ble.w	800ba06 <atan+0x27e>
 800b7c0:	a593      	add	r5, pc, #588	@ (adr r5, 800ba10 <atan+0x288>)
 800b7c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ce:	4bae      	ldr	r3, [pc, #696]	@ (800ba88 <atan+0x300>)
 800b7d0:	429e      	cmp	r6, r3
 800b7d2:	d811      	bhi.n	800b7f8 <atan+0x70>
 800b7d4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b7d8:	429e      	cmp	r6, r3
 800b7da:	d80a      	bhi.n	800b7f2 <atan+0x6a>
 800b7dc:	a38e      	add	r3, pc, #568	@ (adr r3, 800ba18 <atan+0x290>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f7f4 fcbb 	bl	800015c <__adddf3>
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	4ba8      	ldr	r3, [pc, #672]	@ (800ba8c <atan+0x304>)
 800b7ea:	f7f5 f8fd 	bl	80009e8 <__aeabi_dcmpgt>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d1e9      	bne.n	800b7c6 <atan+0x3e>
 800b7f2:	f04f 3aff 	mov.w	sl, #4294967295
 800b7f6:	e027      	b.n	800b848 <atan+0xc0>
 800b7f8:	f000 f956 	bl	800baa8 <fabs>
 800b7fc:	4ba4      	ldr	r3, [pc, #656]	@ (800ba90 <atan+0x308>)
 800b7fe:	4604      	mov	r4, r0
 800b800:	429e      	cmp	r6, r3
 800b802:	460d      	mov	r5, r1
 800b804:	f200 80b8 	bhi.w	800b978 <atan+0x1f0>
 800b808:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b80c:	429e      	cmp	r6, r3
 800b80e:	f200 809c 	bhi.w	800b94a <atan+0x1c2>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	f7f4 fca1 	bl	800015c <__adddf3>
 800b81a:	2200      	movs	r2, #0
 800b81c:	4b9b      	ldr	r3, [pc, #620]	@ (800ba8c <atan+0x304>)
 800b81e:	f7f4 fc9b 	bl	8000158 <__aeabi_dsub>
 800b822:	2200      	movs	r2, #0
 800b824:	4606      	mov	r6, r0
 800b826:	460f      	mov	r7, r1
 800b828:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b82c:	4620      	mov	r0, r4
 800b82e:	4629      	mov	r1, r5
 800b830:	f7f4 fc94 	bl	800015c <__adddf3>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	4630      	mov	r0, r6
 800b83a:	4639      	mov	r1, r7
 800b83c:	f7f4 ff6e 	bl	800071c <__aeabi_ddiv>
 800b840:	f04f 0a00 	mov.w	sl, #0
 800b844:	4604      	mov	r4, r0
 800b846:	460d      	mov	r5, r1
 800b848:	4622      	mov	r2, r4
 800b84a:	462b      	mov	r3, r5
 800b84c:	4620      	mov	r0, r4
 800b84e:	4629      	mov	r1, r5
 800b850:	f7f4 fe3a 	bl	80004c8 <__aeabi_dmul>
 800b854:	4602      	mov	r2, r0
 800b856:	460b      	mov	r3, r1
 800b858:	4680      	mov	r8, r0
 800b85a:	4689      	mov	r9, r1
 800b85c:	f7f4 fe34 	bl	80004c8 <__aeabi_dmul>
 800b860:	a36f      	add	r3, pc, #444	@ (adr r3, 800ba20 <atan+0x298>)
 800b862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b866:	4606      	mov	r6, r0
 800b868:	460f      	mov	r7, r1
 800b86a:	f7f4 fe2d 	bl	80004c8 <__aeabi_dmul>
 800b86e:	a36e      	add	r3, pc, #440	@ (adr r3, 800ba28 <atan+0x2a0>)
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	f7f4 fc72 	bl	800015c <__adddf3>
 800b878:	4632      	mov	r2, r6
 800b87a:	463b      	mov	r3, r7
 800b87c:	f7f4 fe24 	bl	80004c8 <__aeabi_dmul>
 800b880:	a36b      	add	r3, pc, #428	@ (adr r3, 800ba30 <atan+0x2a8>)
 800b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b886:	f7f4 fc69 	bl	800015c <__adddf3>
 800b88a:	4632      	mov	r2, r6
 800b88c:	463b      	mov	r3, r7
 800b88e:	f7f4 fe1b 	bl	80004c8 <__aeabi_dmul>
 800b892:	a369      	add	r3, pc, #420	@ (adr r3, 800ba38 <atan+0x2b0>)
 800b894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b898:	f7f4 fc60 	bl	800015c <__adddf3>
 800b89c:	4632      	mov	r2, r6
 800b89e:	463b      	mov	r3, r7
 800b8a0:	f7f4 fe12 	bl	80004c8 <__aeabi_dmul>
 800b8a4:	a366      	add	r3, pc, #408	@ (adr r3, 800ba40 <atan+0x2b8>)
 800b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8aa:	f7f4 fc57 	bl	800015c <__adddf3>
 800b8ae:	4632      	mov	r2, r6
 800b8b0:	463b      	mov	r3, r7
 800b8b2:	f7f4 fe09 	bl	80004c8 <__aeabi_dmul>
 800b8b6:	a364      	add	r3, pc, #400	@ (adr r3, 800ba48 <atan+0x2c0>)
 800b8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8bc:	f7f4 fc4e 	bl	800015c <__adddf3>
 800b8c0:	4642      	mov	r2, r8
 800b8c2:	464b      	mov	r3, r9
 800b8c4:	f7f4 fe00 	bl	80004c8 <__aeabi_dmul>
 800b8c8:	a361      	add	r3, pc, #388	@ (adr r3, 800ba50 <atan+0x2c8>)
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	4680      	mov	r8, r0
 800b8d0:	4689      	mov	r9, r1
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	4639      	mov	r1, r7
 800b8d6:	f7f4 fdf7 	bl	80004c8 <__aeabi_dmul>
 800b8da:	a35f      	add	r3, pc, #380	@ (adr r3, 800ba58 <atan+0x2d0>)
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	f7f4 fc3a 	bl	8000158 <__aeabi_dsub>
 800b8e4:	4632      	mov	r2, r6
 800b8e6:	463b      	mov	r3, r7
 800b8e8:	f7f4 fdee 	bl	80004c8 <__aeabi_dmul>
 800b8ec:	a35c      	add	r3, pc, #368	@ (adr r3, 800ba60 <atan+0x2d8>)
 800b8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f2:	f7f4 fc31 	bl	8000158 <__aeabi_dsub>
 800b8f6:	4632      	mov	r2, r6
 800b8f8:	463b      	mov	r3, r7
 800b8fa:	f7f4 fde5 	bl	80004c8 <__aeabi_dmul>
 800b8fe:	a35a      	add	r3, pc, #360	@ (adr r3, 800ba68 <atan+0x2e0>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	f7f4 fc28 	bl	8000158 <__aeabi_dsub>
 800b908:	4632      	mov	r2, r6
 800b90a:	463b      	mov	r3, r7
 800b90c:	f7f4 fddc 	bl	80004c8 <__aeabi_dmul>
 800b910:	a357      	add	r3, pc, #348	@ (adr r3, 800ba70 <atan+0x2e8>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	f7f4 fc1f 	bl	8000158 <__aeabi_dsub>
 800b91a:	4632      	mov	r2, r6
 800b91c:	463b      	mov	r3, r7
 800b91e:	f7f4 fdd3 	bl	80004c8 <__aeabi_dmul>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	4640      	mov	r0, r8
 800b928:	4649      	mov	r1, r9
 800b92a:	f7f4 fc17 	bl	800015c <__adddf3>
 800b92e:	4622      	mov	r2, r4
 800b930:	462b      	mov	r3, r5
 800b932:	f7f4 fdc9 	bl	80004c8 <__aeabi_dmul>
 800b936:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b93a:	4602      	mov	r2, r0
 800b93c:	460b      	mov	r3, r1
 800b93e:	d144      	bne.n	800b9ca <atan+0x242>
 800b940:	4620      	mov	r0, r4
 800b942:	4629      	mov	r1, r5
 800b944:	f7f4 fc08 	bl	8000158 <__aeabi_dsub>
 800b948:	e733      	b.n	800b7b2 <atan+0x2a>
 800b94a:	2200      	movs	r2, #0
 800b94c:	4b4f      	ldr	r3, [pc, #316]	@ (800ba8c <atan+0x304>)
 800b94e:	f7f4 fc03 	bl	8000158 <__aeabi_dsub>
 800b952:	2200      	movs	r2, #0
 800b954:	4606      	mov	r6, r0
 800b956:	460f      	mov	r7, r1
 800b958:	4620      	mov	r0, r4
 800b95a:	4629      	mov	r1, r5
 800b95c:	4b4b      	ldr	r3, [pc, #300]	@ (800ba8c <atan+0x304>)
 800b95e:	f7f4 fbfd 	bl	800015c <__adddf3>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	4630      	mov	r0, r6
 800b968:	4639      	mov	r1, r7
 800b96a:	f7f4 fed7 	bl	800071c <__aeabi_ddiv>
 800b96e:	f04f 0a01 	mov.w	sl, #1
 800b972:	4604      	mov	r4, r0
 800b974:	460d      	mov	r5, r1
 800b976:	e767      	b.n	800b848 <atan+0xc0>
 800b978:	4b46      	ldr	r3, [pc, #280]	@ (800ba94 <atan+0x30c>)
 800b97a:	429e      	cmp	r6, r3
 800b97c:	d21a      	bcs.n	800b9b4 <atan+0x22c>
 800b97e:	2200      	movs	r2, #0
 800b980:	4b45      	ldr	r3, [pc, #276]	@ (800ba98 <atan+0x310>)
 800b982:	f7f4 fbe9 	bl	8000158 <__aeabi_dsub>
 800b986:	2200      	movs	r2, #0
 800b988:	4606      	mov	r6, r0
 800b98a:	460f      	mov	r7, r1
 800b98c:	4620      	mov	r0, r4
 800b98e:	4629      	mov	r1, r5
 800b990:	4b41      	ldr	r3, [pc, #260]	@ (800ba98 <atan+0x310>)
 800b992:	f7f4 fd99 	bl	80004c8 <__aeabi_dmul>
 800b996:	2200      	movs	r2, #0
 800b998:	4b3c      	ldr	r3, [pc, #240]	@ (800ba8c <atan+0x304>)
 800b99a:	f7f4 fbdf 	bl	800015c <__adddf3>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	4639      	mov	r1, r7
 800b9a6:	f7f4 feb9 	bl	800071c <__aeabi_ddiv>
 800b9aa:	f04f 0a02 	mov.w	sl, #2
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	460d      	mov	r5, r1
 800b9b2:	e749      	b.n	800b848 <atan+0xc0>
 800b9b4:	4602      	mov	r2, r0
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	4938      	ldr	r1, [pc, #224]	@ (800ba9c <atan+0x314>)
 800b9bc:	f7f4 feae 	bl	800071c <__aeabi_ddiv>
 800b9c0:	f04f 0a03 	mov.w	sl, #3
 800b9c4:	4604      	mov	r4, r0
 800b9c6:	460d      	mov	r5, r1
 800b9c8:	e73e      	b.n	800b848 <atan+0xc0>
 800b9ca:	4b35      	ldr	r3, [pc, #212]	@ (800baa0 <atan+0x318>)
 800b9cc:	4e35      	ldr	r6, [pc, #212]	@ (800baa4 <atan+0x31c>)
 800b9ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	f7f4 fbbf 	bl	8000158 <__aeabi_dsub>
 800b9da:	4622      	mov	r2, r4
 800b9dc:	462b      	mov	r3, r5
 800b9de:	f7f4 fbbb 	bl	8000158 <__aeabi_dsub>
 800b9e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b9ee:	f7f4 fbb3 	bl	8000158 <__aeabi_dsub>
 800b9f2:	f1bb 0f00 	cmp.w	fp, #0
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	460d      	mov	r5, r1
 800b9fa:	f6bf aee4 	bge.w	800b7c6 <atan+0x3e>
 800b9fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ba02:	461d      	mov	r5, r3
 800ba04:	e6df      	b.n	800b7c6 <atan+0x3e>
 800ba06:	a51c      	add	r5, pc, #112	@ (adr r5, 800ba78 <atan+0x2f0>)
 800ba08:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba0c:	e6db      	b.n	800b7c6 <atan+0x3e>
 800ba0e:	bf00      	nop
 800ba10:	54442d18 	.word	0x54442d18
 800ba14:	3ff921fb 	.word	0x3ff921fb
 800ba18:	8800759c 	.word	0x8800759c
 800ba1c:	7e37e43c 	.word	0x7e37e43c
 800ba20:	e322da11 	.word	0xe322da11
 800ba24:	3f90ad3a 	.word	0x3f90ad3a
 800ba28:	24760deb 	.word	0x24760deb
 800ba2c:	3fa97b4b 	.word	0x3fa97b4b
 800ba30:	a0d03d51 	.word	0xa0d03d51
 800ba34:	3fb10d66 	.word	0x3fb10d66
 800ba38:	c54c206e 	.word	0xc54c206e
 800ba3c:	3fb745cd 	.word	0x3fb745cd
 800ba40:	920083ff 	.word	0x920083ff
 800ba44:	3fc24924 	.word	0x3fc24924
 800ba48:	5555550d 	.word	0x5555550d
 800ba4c:	3fd55555 	.word	0x3fd55555
 800ba50:	2c6a6c2f 	.word	0x2c6a6c2f
 800ba54:	bfa2b444 	.word	0xbfa2b444
 800ba58:	52defd9a 	.word	0x52defd9a
 800ba5c:	3fadde2d 	.word	0x3fadde2d
 800ba60:	af749a6d 	.word	0xaf749a6d
 800ba64:	3fb3b0f2 	.word	0x3fb3b0f2
 800ba68:	fe231671 	.word	0xfe231671
 800ba6c:	3fbc71c6 	.word	0x3fbc71c6
 800ba70:	9998ebc4 	.word	0x9998ebc4
 800ba74:	3fc99999 	.word	0x3fc99999
 800ba78:	54442d18 	.word	0x54442d18
 800ba7c:	bff921fb 	.word	0xbff921fb
 800ba80:	440fffff 	.word	0x440fffff
 800ba84:	7ff00000 	.word	0x7ff00000
 800ba88:	3fdbffff 	.word	0x3fdbffff
 800ba8c:	3ff00000 	.word	0x3ff00000
 800ba90:	3ff2ffff 	.word	0x3ff2ffff
 800ba94:	40038000 	.word	0x40038000
 800ba98:	3ff80000 	.word	0x3ff80000
 800ba9c:	bff00000 	.word	0xbff00000
 800baa0:	0800bc38 	.word	0x0800bc38
 800baa4:	0800bc58 	.word	0x0800bc58

0800baa8 <fabs>:
 800baa8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800baac:	4619      	mov	r1, r3
 800baae:	4770      	bx	lr

0800bab0 <_init>:
 800bab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab2:	bf00      	nop
 800bab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bab6:	bc08      	pop	{r3}
 800bab8:	469e      	mov	lr, r3
 800baba:	4770      	bx	lr

0800babc <_fini>:
 800babc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800babe:	bf00      	nop
 800bac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bac2:	bc08      	pop	{r3}
 800bac4:	469e      	mov	lr, r3
 800bac6:	4770      	bx	lr
