
drone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065ec  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080066fc  080066fc  000076fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .flash        00000789  08006774  08006774  00007774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000003  08006efd  08006efd  00007efd  2**0
                  ALLOC, READONLY
  5 .ARM          00000000  08006f00  08006f00  00008068  2**0
                  CONTENTS, READONLY
  6 .preinit_array 00000000  08006f00  08006f00  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08006f00  08006f00  00007f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08006f04  08006f04  00007f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000068  20000000  08006f08  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000007c8  20000068  08006f70  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000830  08006f70  00008830  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149d4  00000000  00000000  00008091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ebb  00000000  00000000  0001ca65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  0001f920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f57  00000000  00000000  00020cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043c2  00000000  00000000  00021c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ac7  00000000  00000000  00025ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000987e9  00000000  00000000  0003bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d42a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a40  00000000  00000000  000d42e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  000d9d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080066e4 	.word	0x080066e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080066e4 	.word	0x080066e4

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f001 f977 	bl	8001904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f8e9 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f97f 	bl	800091c <MX_GPIO_Init>
  MX_DMA_Init();
 800061e:	f000 f957 	bl	80008d0 <MX_DMA_Init>
  MX_I2C2_Init();
 8000622:	f000 f925 	bl	8000870 <MX_I2C2_Init>
	//HAL i2c notes:
	//address of MPU6050 device is 1101000, but we shift it to left because the transmit and receive functions require that. So we are left with 0xD0
	//Argument to right of MPU6050_ADDR_LSL1 is the register address, see the register description in onenote.
	uint8_t reg_addr[1];
	/* We compute the MSB and LSB parts of the memory address */
	reg_addr[0] = (uint8_t) (0x6A);
 8000626:	236a      	movs	r3, #106	@ 0x6a
 8000628:	713b      	strb	r3, [r7, #4]

	//delay for init functions to see if it stops glitch of i2c transmission never completing
	HAL_Delay(1000);
 800062a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800062e:	f001 f99b 	bl	8001968 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000632:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000636:	4861      	ldr	r0, [pc, #388]	@ (80007bc <main+0x1b0>)
 8000638:	f001 fea8 	bl	800238c <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800063c:	2064      	movs	r0, #100	@ 0x64
 800063e:	f001 f993 	bl	8001968 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000642:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000646:	485d      	ldr	r0, [pc, #372]	@ (80007bc <main+0x1b0>)
 8000648:	f001 fea0 	bl	800238c <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800064c:	2064      	movs	r0, #100	@ 0x64
 800064e:	f001 f98b 	bl	8001968 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000652:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000656:	4859      	ldr	r0, [pc, #356]	@ (80007bc <main+0x1b0>)
 8000658:	f001 fe98 	bl	800238c <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800065c:	2064      	movs	r0, #100	@ 0x64
 800065e:	f001 f983 	bl	8001968 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000662:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000666:	4855      	ldr	r0, [pc, #340]	@ (80007bc <main+0x1b0>)
 8000668:	f001 fe90 	bl	800238c <HAL_GPIO_TogglePin>

	//test if transmission works
	HAL_StatusTypeDef returnValue = HAL_I2C_Master_Transmit_DMA(&hi2c2, MPU6050_ADDR_LSL1, reg_addr, 1);
 800066c:	1d3a      	adds	r2, r7, #4
 800066e:	2301      	movs	r3, #1
 8000670:	21d0      	movs	r1, #208	@ 0xd0
 8000672:	4853      	ldr	r0, [pc, #332]	@ (80007c0 <main+0x1b4>)
 8000674:	f002 f81e 	bl	80026b4 <HAL_I2C_Master_Transmit_DMA>
 8000678:	4603      	mov	r3, r0
 800067a:	71fb      	strb	r3, [r7, #7]
	while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY);
 800067c:	bf00      	nop
 800067e:	4850      	ldr	r0, [pc, #320]	@ (80007c0 <main+0x1b4>)
 8000680:	f002 ff37 	bl	80034f2 <HAL_I2C_GetState>
 8000684:	4603      	mov	r3, r0
 8000686:	2b20      	cmp	r3, #32
 8000688:	d1f9      	bne.n	800067e <main+0x72>
	if (returnValue != HAL_OK)
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <main+0x88>
	{
		Error_Handler();
 8000690:	f000 f9d6 	bl	8000a40 <Error_Handler>
	}
	if (__HAL_DMA_GET_FLAG(&hdma_i2c1_tx, (0x00000002U)))
 8000694:	4b4b      	ldr	r3, [pc, #300]	@ (80007c4 <main+0x1b8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	2b00      	cmp	r3, #0
 800069e:	d002      	beq.n	80006a6 <main+0x9a>
	{ // Transfer error
		printf("DMA Transfer Error\n");
 80006a0:	4849      	ldr	r0, [pc, #292]	@ (80007c8 <main+0x1bc>)
 80006a2:	f005 fd21 	bl	80060e8 <puts>
		// Handle error here
	}
	HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80006a6:	4849      	ldr	r0, [pc, #292]	@ (80007cc <main+0x1c0>)
 80006a8:	f001 fb94 	bl	8001dd4 <HAL_DMA_IRQHandler>
	while (!i2c_TX_done);
 80006ac:	bf00      	nop
 80006ae:	4b48      	ldr	r3, [pc, #288]	@ (80007d0 <main+0x1c4>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d0fb      	beq.n	80006ae <main+0xa2>
	i2c_TX_done = 0;
 80006b6:	4b46      	ldr	r3, [pc, #280]	@ (80007d0 <main+0x1c4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
	// mpu6050_init(&hi2c2); //write to registers in mpu6050 to configure initial settings
	// moved to private variables to see values of attributes in structs in debug mode easier
	//	mpu6050_sensor_data sensor_data_1;
	//	kalman_filter filter1;

	mpu6050_init_dmp(&hi2c2); //initialize mpu6050 to use dmp
 80006bc:	4840      	ldr	r0, [pc, #256]	@ (80007c0 <main+0x1b4>)
 80006be:	f000 faf9 	bl	8000cb4 <mpu6050_init_dmp>

	setDMPEnabled(&hi2c2, true); //enable the dmp
 80006c2:	2101      	movs	r1, #1
 80006c4:	483e      	ldr	r0, [pc, #248]	@ (80007c0 <main+0x1b4>)
 80006c6:	f000 fdb4 	bl	8001232 <setDMPEnabled>


	packetSize = 42; //FIXME, use this: packetSize = mpu.dmpGetFIFOPacketSize();
 80006ca:	4b42      	ldr	r3, [pc, #264]	@ (80007d4 <main+0x1c8>)
 80006cc:	222a      	movs	r2, #42	@ 0x2a
 80006ce:	801a      	strh	r2, [r3, #0]

	//define starting position
	sensor_data_init(&sensor_data_1); //likely not necessary
 80006d0:	4841      	ldr	r0, [pc, #260]	@ (80007d8 <main+0x1cc>)
 80006d2:	f000 fad9 	bl	8000c88 <sensor_data_init>

	fifoCount = getFIFOCount(&hi2c2);
 80006d6:	483a      	ldr	r0, [pc, #232]	@ (80007c0 <main+0x1b4>)
 80006d8:	f000 fdbe 	bl	8001258 <getFIFOCount>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	4b3e      	ldr	r3, [pc, #248]	@ (80007dc <main+0x1d0>)
 80006e2:	801a      	strh	r2, [r3, #0]
	fifoCount = getFIFOCount(&hi2c2);
 80006e4:	4836      	ldr	r0, [pc, #216]	@ (80007c0 <main+0x1b4>)
 80006e6:	f000 fdb7 	bl	8001258 <getFIFOCount>
 80006ea:	4603      	mov	r3, r0
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b3b      	ldr	r3, [pc, #236]	@ (80007dc <main+0x1d0>)
 80006f0:	801a      	strh	r2, [r3, #0]
	resetFIFO(&hi2c2);
 80006f2:	4833      	ldr	r0, [pc, #204]	@ (80007c0 <main+0x1b4>)
 80006f4:	f000 fdce 	bl	8001294 <resetFIFO>
	fifoCount = getFIFOCount(&hi2c2);
 80006f8:	4831      	ldr	r0, [pc, #196]	@ (80007c0 <main+0x1b4>)
 80006fa:	f000 fdad 	bl	8001258 <getFIFOCount>
 80006fe:	4603      	mov	r3, r0
 8000700:	461a      	mov	r2, r3
 8000702:	4b36      	ldr	r3, [pc, #216]	@ (80007dc <main+0x1d0>)
 8000704:	801a      	strh	r2, [r3, #0]
	fifoCount = getFIFOCount(&hi2c2);
 8000706:	482e      	ldr	r0, [pc, #184]	@ (80007c0 <main+0x1b4>)
 8000708:	f000 fda6 	bl	8001258 <getFIFOCount>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <main+0x1d0>)
 8000712:	801a      	strh	r2, [r3, #0]

	resetFIFO(&hi2c2);
 8000714:	482a      	ldr	r0, [pc, #168]	@ (80007c0 <main+0x1b4>)
 8000716:	f000 fdbd 	bl	8001294 <resetFIFO>
//		resetFIFO(&hi2c2);
//		fifoCount = getFIFOCount(&hi2c2);
//		getFIFOBytes(&hi2c2, fifoBuffer, packetSize);
//		dmpGetQuaternionQuatStruct(&q, fifoBuffer);

		while (fifoCount < packetSize)
 800071a:	e006      	b.n	800072a <main+0x11e>
		{

			//insert here your code

			fifoCount = getFIFOCount(&hi2c2);
 800071c:	4828      	ldr	r0, [pc, #160]	@ (80007c0 <main+0x1b4>)
 800071e:	f000 fd9b 	bl	8001258 <getFIFOCount>
 8000722:	4603      	mov	r3, r0
 8000724:	461a      	mov	r2, r3
 8000726:	4b2d      	ldr	r3, [pc, #180]	@ (80007dc <main+0x1d0>)
 8000728:	801a      	strh	r2, [r3, #0]
		while (fifoCount < packetSize)
 800072a:	4b2c      	ldr	r3, [pc, #176]	@ (80007dc <main+0x1d0>)
 800072c:	881a      	ldrh	r2, [r3, #0]
 800072e:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <main+0x1c8>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	429a      	cmp	r2, r3
 8000734:	d3f2      	bcc.n	800071c <main+0x110>

		}
		if (fifoCount >= 1024)
 8000736:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <main+0x1d0>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800073e:	d303      	bcc.n	8000748 <main+0x13c>
		{

			resetFIFO(&hi2c2);
 8000740:	481f      	ldr	r0, [pc, #124]	@ (80007c0 <main+0x1b4>)
 8000742:	f000 fda7 	bl	8001294 <resetFIFO>
 8000746:	e030      	b.n	80007aa <main+0x19e>

		}
		else
		{

			if (fifoCount % packetSize != 0)
 8000748:	4b24      	ldr	r3, [pc, #144]	@ (80007dc <main+0x1d0>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <main+0x1c8>)
 800074e:	8812      	ldrh	r2, [r2, #0]
 8000750:	fbb3 f1f2 	udiv	r1, r3, r2
 8000754:	fb01 f202 	mul.w	r2, r1, r2
 8000758:	1a9b      	subs	r3, r3, r2
 800075a:	b29b      	uxth	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d01a      	beq.n	8000796 <main+0x18a>
			{

				resetFIFO(&hi2c2);
 8000760:	4817      	ldr	r0, [pc, #92]	@ (80007c0 <main+0x1b4>)
 8000762:	f000 fd97 	bl	8001294 <resetFIFO>
				fifoCount = getFIFOCount(&hi2c2);
 8000766:	4816      	ldr	r0, [pc, #88]	@ (80007c0 <main+0x1b4>)
 8000768:	f000 fd76 	bl	8001258 <getFIFOCount>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4b1a      	ldr	r3, [pc, #104]	@ (80007dc <main+0x1d0>)
 8000772:	801a      	strh	r2, [r3, #0]
 8000774:	e019      	b.n	80007aa <main+0x19e>
			{

				while (fifoCount >= packetSize)
				{

					getFIFOBytes(&hi2c2, fifoBuffer, packetSize);
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <main+0x1c8>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	461a      	mov	r2, r3
 800077e:	4918      	ldr	r1, [pc, #96]	@ (80007e0 <main+0x1d4>)
 8000780:	480f      	ldr	r0, [pc, #60]	@ (80007c0 <main+0x1b4>)
 8000782:	f000 fd97 	bl	80012b4 <getFIFOBytes>
					fifoCount -= packetSize;
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <main+0x1d0>)
 8000788:	881a      	ldrh	r2, [r3, #0]
 800078a:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <main+0x1c8>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	b29a      	uxth	r2, r3
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <main+0x1d0>)
 8000794:	801a      	strh	r2, [r3, #0]
				while (fifoCount >= packetSize)
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <main+0x1d0>)
 8000798:	881a      	ldrh	r2, [r3, #0]
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <main+0x1c8>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d2e9      	bcs.n	8000776 <main+0x16a>

				}

				dmpGetQuaternionQuatStruct(&q, fifoBuffer);
 80007a2:	490f      	ldr	r1, [pc, #60]	@ (80007e0 <main+0x1d4>)
 80007a4:	480f      	ldr	r0, [pc, #60]	@ (80007e4 <main+0x1d8>)
 80007a6:	f000 fdef 	bl	8001388 <dmpGetQuaternionQuatStruct>

			}

		}

		a++;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <main+0x1dc>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	4a0d      	ldr	r2, [pc, #52]	@ (80007e8 <main+0x1dc>)
 80007b2:	6013      	str	r3, [r2, #0]

		HAL_Delay(50);
 80007b4:	2032      	movs	r0, #50	@ 0x32
 80007b6:	f001 f8d7 	bl	8001968 <HAL_Delay>
		while (fifoCount < packetSize)
 80007ba:	e7b6      	b.n	800072a <main+0x11e>
 80007bc:	40011000 	.word	0x40011000
 80007c0:	20000084 	.word	0x20000084
 80007c4:	40020000 	.word	0x40020000
 80007c8:	08006734 	.word	0x08006734
 80007cc:	200000d8 	.word	0x200000d8
 80007d0:	200001e9 	.word	0x200001e9
 80007d4:	20000190 	.word	0x20000190
 80007d8:	20000160 	.word	0x20000160
 80007dc:	20000192 	.word	0x20000192
 80007e0:	20000198 	.word	0x20000198
 80007e4:	200001d8 	.word	0x200001d8
 80007e8:	20000194 	.word	0x20000194

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b090      	sub	sp, #64	@ 0x40
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	2228      	movs	r2, #40	@ 0x28
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 fd64 	bl	80062c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800080e:	2302      	movs	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000812:	2301      	movs	r3, #1
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000816:	2310      	movs	r3, #16
 8000818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800081e:	2300      	movs	r3, #0
 8000820:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000822:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	4618      	mov	r0, r3
 800082e:	f004 fa05 	bl	8004c3c <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000838:	f000 f902 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2102      	movs	r1, #2
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fc72 	bl	8005140 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000862:	f000 f8ed 	bl	8000a40 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3740      	adds	r7, #64	@ 0x40
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000874:	4b13      	ldr	r3, [pc, #76]	@ (80008c4 <MX_I2C2_Init+0x54>)
 8000876:	4a14      	ldr	r2, [pc, #80]	@ (80008c8 <MX_I2C2_Init+0x58>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_I2C2_Init+0x54>)
 800087c:	4a13      	ldr	r2, [pc, #76]	@ (80008cc <MX_I2C2_Init+0x5c>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000880:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <MX_I2C2_Init+0x54>)
 8000882:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000886:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000888:	4b0e      	ldr	r3, [pc, #56]	@ (80008c4 <MX_I2C2_Init+0x54>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088e:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <MX_I2C2_Init+0x54>)
 8000890:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000894:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <MX_I2C2_Init+0x54>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800089c:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <MX_I2C2_Init+0x54>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <MX_I2C2_Init+0x54>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <MX_I2C2_Init+0x54>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	@ (80008c4 <MX_I2C2_Init+0x54>)
 80008b0:	f001 fda8 	bl	8002404 <HAL_I2C_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 80008ba:	f000 f8c1 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000084 	.word	0x20000084
 80008c8:	40005800 	.word	0x40005800
 80008cc:	00061a80 	.word	0x00061a80

080008d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d6:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <MX_DMA_Init+0x48>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a0f      	ldr	r2, [pc, #60]	@ (8000918 <MX_DMA_Init+0x48>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <MX_DMA_Init+0x48>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2105      	movs	r1, #5
 80008f2:	200e      	movs	r0, #14
 80008f4:	f001 f911 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80008f8:	200e      	movs	r0, #14
 80008fa:	f001 f92a 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2105      	movs	r1, #5
 8000902:	200f      	movs	r0, #15
 8000904:	f001 f909 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000908:	200f      	movs	r0, #15
 800090a:	f001 f922 	bl	8001b52 <HAL_NVIC_EnableIRQ>

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000930:	4b28      	ldr	r3, [pc, #160]	@ (80009d4 <MX_GPIO_Init+0xb8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a27      	ldr	r2, [pc, #156]	@ (80009d4 <MX_GPIO_Init+0xb8>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b25      	ldr	r3, [pc, #148]	@ (80009d4 <MX_GPIO_Init+0xb8>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0310 	and.w	r3, r3, #16
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <MX_GPIO_Init+0xb8>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a21      	ldr	r2, [pc, #132]	@ (80009d4 <MX_GPIO_Init+0xb8>)
 800094e:	f043 0308 	orr.w	r3, r3, #8
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_GPIO_Init+0xb8>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0308 	and.w	r3, r3, #8
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_GPIO_Init+0xb8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a1b      	ldr	r2, [pc, #108]	@ (80009d4 <MX_GPIO_Init+0xb8>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <MX_GPIO_Init+0xb8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800097e:	4816      	ldr	r0, [pc, #88]	@ (80009d8 <MX_GPIO_Init+0xbc>)
 8000980:	f001 fcec 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000984:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	4619      	mov	r1, r3
 800099c:	480e      	ldr	r0, [pc, #56]	@ (80009d8 <MX_GPIO_Init+0xbc>)
 800099e:	f001 fb59 	bl	8002054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009a2:	2302      	movs	r3, #2
 80009a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <MX_GPIO_Init+0xc0>)
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4619      	mov	r1, r3
 80009b4:	480a      	ldr	r0, [pc, #40]	@ (80009e0 <MX_GPIO_Init+0xc4>)
 80009b6:	f001 fb4d 	bl	8002054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2105      	movs	r1, #5
 80009be:	2007      	movs	r0, #7
 80009c0:	f001 f8ab 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009c4:	2007      	movs	r0, #7
 80009c6:	f001 f8c4 	bl	8001b52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40011000 	.word	0x40011000
 80009dc:	10110000 	.word	0x10110000
 80009e0:	40010c00 	.word	0x40010c00

080009e4 <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 4 */
//i2c callback functions, remember i2c interface is in mpu6050.c
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	i2c_TX_done = 1;
 80009ec:	4b03      	ldr	r3, [pc, #12]	@ (80009fc <HAL_I2C_MasterTxCpltCallback+0x18>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	200001e9 	.word	0x200001e9

08000a00 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	i2c_RX_done = 1;
 8000a08:	4b03      	ldr	r3, [pc, #12]	@ (8000a18 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	200001e8 	.word	0x200001e8

08000a1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d101      	bne.n	8000a32 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a2e:	f000 ff7f 	bl	8001930 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40000800 	.word	0x40000800

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <Error_Handler+0x8>

08000a4c <i2c_Read_Accelerometer>:
#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default
#endif

//pData is buffer to put read contents into, len is bytes to read from mpu6050
HAL_StatusTypeDef i2c_Read_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t *pData, uint16_t len)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	460b      	mov	r3, r1
 8000a58:	817b      	strh	r3, [r7, #10]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef returnValue;
	uint8_t reg_addr[1];

	/* We compute the MSB and LSB parts of the memory address */
	reg_addr[0] = (uint8_t) (regAddress);
 8000a5e:	7a7b      	ldrb	r3, [r7, #9]
 8000a60:	753b      	strb	r3, [r7, #20]

	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY);
 8000a62:	bf00      	nop
 8000a64:	68f8      	ldr	r0, [r7, #12]
 8000a66:	f002 fd44 	bl	80034f2 <HAL_I2C_GetState>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b20      	cmp	r3, #32
 8000a6e:	d1f9      	bne.n	8000a64 <i2c_Read_Accelerometer+0x18>
	/* First we send the memory location address where start reading data */
	returnValue = HAL_I2C_Master_Seq_Transmit_DMA(hi2c, DevAddress, reg_addr, 1, I2C_FIRST_FRAME);
 8000a70:	f107 0214 	add.w	r2, r7, #20
 8000a74:	8979      	ldrh	r1, [r7, #10]
 8000a76:	2301      	movs	r3, #1
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f002 f86b 	bl	8002b58 <HAL_I2C_Master_Seq_Transmit_DMA>
 8000a82:	4603      	mov	r3, r0
 8000a84:	75fb      	strb	r3, [r7, #23]
	//	while (!i2c_TX_done);
	//	i2c_TX_done = 0;
	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY);
 8000a86:	bf00      	nop
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f002 fd32 	bl	80034f2 <HAL_I2C_GetState>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b20      	cmp	r3, #32
 8000a92:	d1f9      	bne.n	8000a88 <i2c_Read_Accelerometer+0x3c>
	/* Next we can retrieve the data from EEPROM */
	returnValue = HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, len, I2C_LAST_FRAME);	//get data we requested and place it in pData buffer
 8000a94:	8c3b      	ldrh	r3, [r7, #32]
 8000a96:	8979      	ldrh	r1, [r7, #10]
 8000a98:	2220      	movs	r2, #32
 8000a9a:	9200      	str	r2, [sp, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f002 f9b8 	bl	8002e14 <HAL_I2C_Master_Seq_Receive_DMA>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	75fb      	strb	r3, [r7, #23]
	while (!i2c_RX_done);
 8000aa8:	bf00      	nop
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <i2c_Read_Accelerometer+0x98>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d0fb      	beq.n	8000aaa <i2c_Read_Accelerometer+0x5e>
	i2c_RX_done = 0;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <i2c_Read_Accelerometer+0x98>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]

	//for some reason after doing the receive function, the I2C2's CR1 (control register 1) goes from 0x401 to 0x201. This then causes issues
	//when trying to do the next transmit. As a result, I'm manually making sure the correct bits are turned on and off.
	//This seems to only be an issue on the STM32F103C8T6
	hi2c->Instance->CR1 &= ~I2C_CR1_STOP;	//make sure stop bit is turned off (bit 9)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000ac6:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 |= I2C_CR1_ACK;	//turn on acknowledge bit (bit 10)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000ad6:	601a      	str	r2, [r3, #0]
	return returnValue;
 8000ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001e8 	.word	0x200001e8

08000ae8 <i2c_Write_Accelerometer>:

HAL_StatusTypeDef i2c_Write_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t *pData, uint16_t len)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	817b      	strh	r3, [r7, #10]
 8000af6:	4613      	mov	r3, r2
 8000af8:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef returnValue;
	uint8_t *data;

	data = (uint8_t*) malloc(sizeof(uint8_t) * (1 + len));
 8000afa:	8c3b      	ldrh	r3, [r7, #32]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4618      	mov	r0, r3
 8000b00:	f005 f91c 	bl	8005d3c <malloc>
 8000b04:	4603      	mov	r3, r0
 8000b06:	617b      	str	r3, [r7, #20]
	/*We compute the MSB and LSB parts of the memory address*/
	data[0] = (uint8_t) (regAddress);
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	7a7a      	ldrb	r2, [r7, #9]
 8000b0c:	701a      	strb	r2, [r3, #0]

	/*And copy the content of the pData array in the temporary buffer*/
	memcpy(data + 1, pData, len);	//inserts data one slot after the register address
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	8c3a      	ldrh	r2, [r7, #32]
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f005 fc61 	bl	80063de <memcpy>

	/*We are now ready to transfer the buffer over the I2C bus*/
	returnValue = HAL_I2C_Master_Transmit_DMA(hi2c, DevAddress, data, len + 1);
 8000b1c:	8c3b      	ldrh	r3, [r7, #32]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	8979      	ldrh	r1, [r7, #10]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f001 fdc4 	bl	80026b4 <HAL_I2C_Master_Transmit_DMA>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	74fb      	strb	r3, [r7, #19]
	while (!i2c_TX_done);
 8000b30:	bf00      	nop
 8000b32:	4b0d      	ldr	r3, [pc, #52]	@ (8000b68 <i2c_Write_Accelerometer+0x80>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0fb      	beq.n	8000b32 <i2c_Write_Accelerometer+0x4a>
	i2c_TX_done = 0;
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b68 <i2c_Write_Accelerometer+0x80>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
	free(data);
 8000b40:	6978      	ldr	r0, [r7, #20]
 8000b42:	f005 f903 	bl	8005d4c <free>
	/*We wait until the Accelerometer effectively stores data*/
	while (HAL_I2C_IsDeviceReady(hi2c, DevAddress, 1, HAL_MAX_DELAY) != HAL_OK);	//peripheral can only accept the transmission once it finishes doing what it does
 8000b46:	bf00      	nop
 8000b48:	8979      	ldrh	r1, [r7, #10]
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	2201      	movs	r2, #1
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f001 fed3 	bl	80028fc <HAL_I2C_IsDeviceReady>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1f5      	bne.n	8000b48 <i2c_Write_Accelerometer+0x60>

	return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200001e9 	.word	0x200001e9

08000b6c <setBit>:
HAL_StatusTypeDef setBit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t bitNum, uint8_t data)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af02      	add	r7, sp, #8
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	4608      	mov	r0, r1
 8000b76:	4611      	mov	r1, r2
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	807b      	strh	r3, [r7, #2]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	707b      	strb	r3, [r7, #1]
 8000b82:	4613      	mov	r3, r2
 8000b84:	703b      	strb	r3, [r7, #0]
	uint8_t buffer;
	i2c_Read_Accelerometer(hi2c, DevAddress, regAddress, &buffer, 1);
 8000b86:	f107 030e 	add.w	r3, r7, #14
 8000b8a:	787a      	ldrb	r2, [r7, #1]
 8000b8c:	8879      	ldrh	r1, [r7, #2]
 8000b8e:	2001      	movs	r0, #1
 8000b90:	9000      	str	r0, [sp, #0]
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ff5a 	bl	8000a4c <i2c_Read_Accelerometer>
	buffer = (data != 0) ? (buffer | (1 << bitNum)) : (buffer & ~(1 << bitNum));	//bit mask to only change one bit of the register
 8000b98:	7e3b      	ldrb	r3, [r7, #24]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00a      	beq.n	8000bb4 <setBit+0x48>
 8000b9e:	783b      	ldrb	r3, [r7, #0]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	b25a      	sxtb	r2, r3
 8000ba8:	7bbb      	ldrb	r3, [r7, #14]
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	e00b      	b.n	8000bcc <setBit+0x60>
 8000bb4:	783b      	ldrb	r3, [r7, #0]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	b25a      	sxtb	r2, r3
 8000bc2:	7bbb      	ldrb	r3, [r7, #14]
 8000bc4:	b25b      	sxtb	r3, r3
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	b25b      	sxtb	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = i2c_Write_Accelerometer(hi2c, DevAddress, regAddress, (uint8_t*) &buffer, 1);	//write the updated register
 8000bce:	f107 030e 	add.w	r3, r7, #14
 8000bd2:	787a      	ldrb	r2, [r7, #1]
 8000bd4:	8879      	ldrh	r1, [r7, #2]
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	9000      	str	r0, [sp, #0]
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f7ff ff84 	bl	8000ae8 <i2c_Write_Accelerometer>
 8000be0:	4603      	mov	r3, r0
 8000be2:	73fb      	strb	r3, [r7, #15]
	return status;
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <setBits>:
HAL_StatusTypeDef setBits(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t bitStart, uint8_t length, uint8_t data)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af02      	add	r7, sp, #8
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	4608      	mov	r0, r1
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	807b      	strh	r3, [r7, #2]
 8000c00:	460b      	mov	r3, r1
 8000c02:	707b      	strb	r3, [r7, #1]
 8000c04:	4613      	mov	r3, r2
 8000c06:	703b      	strb	r3, [r7, #0]
	// 00011100 mask byte
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value
	uint8_t buffer;
	i2c_Read_Accelerometer(hi2c, DevAddress, regAddress, &buffer, 1);
 8000c08:	f107 030d 	add.w	r3, r7, #13
 8000c0c:	787a      	ldrb	r2, [r7, #1]
 8000c0e:	8879      	ldrh	r1, [r7, #2]
 8000c10:	2001      	movs	r0, #1
 8000c12:	9000      	str	r0, [sp, #0]
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ff19 	bl	8000a4c <i2c_Read_Accelerometer>
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8000c1a:	7e3b      	ldrb	r3, [r7, #24]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	1e5a      	subs	r2, r3, #1
 8000c24:	7839      	ldrb	r1, [r7, #0]
 8000c26:	7e3b      	ldrb	r3, [r7, #24]
 8000c28:	1acb      	subs	r3, r1, r3
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	73fb      	strb	r3, [r7, #15]
	data <<= (bitStart - length + 1); // shift data into correct position
 8000c32:	7f3a      	ldrb	r2, [r7, #28]
 8000c34:	7839      	ldrb	r1, [r7, #0]
 8000c36:	7e3b      	ldrb	r3, [r7, #24]
 8000c38:	1acb      	subs	r3, r1, r3
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	773b      	strb	r3, [r7, #28]
	data &= mask; // zero all non-important bits in data
 8000c42:	7f3a      	ldrb	r2, [r7, #28]
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	4013      	ands	r3, r2
 8000c48:	773b      	strb	r3, [r7, #28]
	buffer &= ~(mask); // zero all important bits in existing byte
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	b25a      	sxtb	r2, r3
 8000c52:	7b7b      	ldrb	r3, [r7, #13]
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	4013      	ands	r3, r2
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	737b      	strb	r3, [r7, #13]
	buffer |= data; // combine data with existing byte
 8000c5e:	7b7a      	ldrb	r2, [r7, #13]
 8000c60:	7f3b      	ldrb	r3, [r7, #28]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = i2c_Write_Accelerometer(hi2c, DevAddress, regAddress, (uint8_t*) &buffer, 1);	//write the updated register
 8000c68:	f107 030d 	add.w	r3, r7, #13
 8000c6c:	787a      	ldrb	r2, [r7, #1]
 8000c6e:	8879      	ldrh	r1, [r7, #2]
 8000c70:	2001      	movs	r0, #1
 8000c72:	9000      	str	r0, [sp, #0]
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff37 	bl	8000ae8 <i2c_Write_Accelerometer>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	73bb      	strb	r3, [r7, #14]
	return status;
 8000c7e:	7bbb      	ldrb	r3, [r7, #14]

}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <sensor_data_init>:
	sensor_data->gyro_y = (sensor_data->gyro_y_buf[0] << 8) | sensor_data->gyro_y_buf[1];
	sensor_data->gyro_z = (sensor_data->gyro_z_buf[0] << 8) | sensor_data->gyro_z_buf[1];
}

void sensor_data_init(mpu6050_sensor_data *sensor_data)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	//initialize values that will be calculated later anyways, probably not necessary to do
	sensor_data->yaw = 0;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
	sensor_data->pitch = 0;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f04f 0200 	mov.w	r2, #0
 8000c9e:	61da      	str	r2, [r3, #28]
	sensor_data->roll = 0;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f04f 0200 	mov.w	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
	...

08000cb4 <mpu6050_init_dmp>:

//MPU6050 code with DMP, credits: https://github.com/jrowberg/i2cdevlib/blob/master/Arduino/MPU6050/MPU6050_6Axis_MotionApps20.cpp#L272, MPU6050_6Axis_MotionApps20::dmpInitialize()
//code was built for arduino, so I'm porting it to stm32
void mpu6050_init_dmp(I2C_HandleTypeDef *hi2c) //combines mpu.initialize and mpu.dmpInitialize
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	@ 0x28
 8000cb8:	af04      	add	r7, sp, #16
 8000cba:	6078      	str	r0, [r7, #4]
	 * after start-up). This function also sets both the accelerometer and the gyroscope
	 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
	 * the clock source to use the X Gyro for reference, which is slightly better than
	 * the default internal clock source.
	 */
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	9301      	str	r3, [sp, #4]
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	226b      	movs	r2, #107	@ 0x6b
 8000cc8:	21d0      	movs	r1, #208	@ 0xd0
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff8f 	bl	8000bee <setBits>
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS_250);
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2304      	movs	r3, #4
 8000cda:	221b      	movs	r2, #27
 8000cdc:	21d0      	movs	r1, #208	@ 0xd0
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff85 	bl	8000bee <setBits>
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_GYRO_FS_250);
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	2302      	movs	r3, #2
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2304      	movs	r3, #4
 8000cee:	221c      	movs	r2, #28
 8000cf0:	21d0      	movs	r1, #208	@ 0xd0
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ff7b 	bl	8000bee <setBits>
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, false);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2306      	movs	r3, #6
 8000cfe:	226b      	movs	r2, #107	@ 0x6b
 8000d00:	21d0      	movs	r1, #208	@ 0xd0
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff32 	bl	8000b6c <setBit>

	//dmpInitialize()
	uint8_t command = 0x00;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	75bb      	strb	r3, [r7, #22]

	//reset the MPU6050
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);	//Device reset bit: When set to 1, this bit resets all internal registers to their default values.  The bit automatically clears to 0 once the reset is done.
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	2307      	movs	r3, #7
 8000d12:	226b      	movs	r2, #107	@ 0x6b
 8000d14:	21d0      	movs	r1, #208	@ 0xd0
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ff28 	bl	8000b6c <setBit>
	HAL_Delay(30); //wait a little
 8000d1c:	201e      	movs	r0, #30
 8000d1e:	f000 fe23 	bl	8001968 <HAL_Delay>

	//turn off sleep mode to power cycle mpu6050
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, false);
 8000d22:	2300      	movs	r3, #0
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2306      	movs	r3, #6
 8000d28:	226b      	movs	r2, #107	@ 0x6b
 8000d2a:	21d0      	movs	r1, #208	@ 0xd0
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff1d 	bl	8000b6c <setBit>

	// get MPU hardware revision
	setMemoryBank(hi2c, 0x10, true, true); //memory bank 2, prefetch enabled, userbank enabled
 8000d32:	2301      	movs	r3, #1
 8000d34:	2201      	movs	r2, #1
 8000d36:	2110      	movs	r1, #16
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f000 f91d 	bl	8000f78 <setMemoryBank>
	setMemoryStartAddress(hi2c, 0x06);
 8000d3e:	2106      	movs	r1, #6
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f947 	bl	8000fd4 <setMemoryStartAddress>
	//DEBUG_PRINTLN(F("Checking hardware revision..."));
	//DEBUG_PRINT(F("Revision @ user[16][6] = "));
	//DEBUG_PRINTLN(readMemoryByte());
	uint8_t temp_buf = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	757b      	strb	r3, [r7, #21]
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_R_W, &temp_buf, 1); //read contents in MPU6050_RA_MEM_R_W register
 8000d4a:	f107 0315 	add.w	r3, r7, #21
 8000d4e:	2201      	movs	r2, #1
 8000d50:	9200      	str	r2, [sp, #0]
 8000d52:	226f      	movs	r2, #111	@ 0x6f
 8000d54:	21d0      	movs	r1, #208	@ 0xd0
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fe78 	bl	8000a4c <i2c_Read_Accelerometer>
	//DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
	setMemoryBank(hi2c, 0, false, false); //memory bank 0, prefetch disabled, userbank disabled
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f000 f908 	bl	8000f78 <setMemoryBank>

	// check OTP bank valid, want the first bit of temp_OTP_valid to be 1
	uint8_t temp_OTP_valid = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	75fb      	strb	r3, [r7, #23]
	temp_OTP_valid = getOTPBankValid(hi2c);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 f943 	bl	8000ff8 <getOTPBankValid>
 8000d72:	4603      	mov	r3, r0
 8000d74:	75fb      	strb	r3, [r7, #23]

	// setup weird slave stuff (?)
	//	DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
	command = 0x7F; //the address
 8000d76:	237f      	movs	r3, #127	@ 0x7f
 8000d78:	75bb      	strb	r3, [r7, #22]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_I2C_SLV0_ADDR , (uint8_t*) &command, 1);
 8000d7a:	f107 0316 	add.w	r3, r7, #22
 8000d7e:	2201      	movs	r2, #1
 8000d80:	9200      	str	r2, [sp, #0]
 8000d82:	2225      	movs	r2, #37	@ 0x25
 8000d84:	21d0      	movs	r1, #208	@ 0xd0
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff feae 	bl	8000ae8 <i2c_Write_Accelerometer>
	//	DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, false);
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	2305      	movs	r3, #5
 8000d92:	226a      	movs	r2, #106	@ 0x6a
 8000d94:	21d0      	movs	r1, #208	@ 0xd0
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff fee8 	bl	8000b6c <setBit>
	//	DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
	command = 0x68;
 8000d9c:	2368      	movs	r3, #104	@ 0x68
 8000d9e:	75bb      	strb	r3, [r7, #22]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_I2C_SLV0_ADDR , (uint8_t*) &command, 1);
 8000da0:	f107 0316 	add.w	r3, r7, #22
 8000da4:	2201      	movs	r2, #1
 8000da6:	9200      	str	r2, [sp, #0]
 8000da8:	2225      	movs	r2, #37	@ 0x25
 8000daa:	21d0      	movs	r1, #208	@ 0xd0
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fe9b 	bl	8000ae8 <i2c_Write_Accelerometer>
	//	DEBUG_PRINTLN(F("Resetting I2C Master control..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8000db2:	2301      	movs	r3, #1
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2301      	movs	r3, #1
 8000db8:	226a      	movs	r2, #106	@ 0x6a
 8000dba:	21d0      	movs	r1, #208	@ 0xd0
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff fed5 	bl	8000b6c <setBit>
	HAL_Delay(20);
 8000dc2:	2014      	movs	r0, #20
 8000dc4:	f000 fdd0 	bl	8001968 <HAL_Delay>
	//	DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_ZGYRO);
 8000dc8:	2303      	movs	r3, #3
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	2303      	movs	r3, #3
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	226b      	movs	r2, #107	@ 0x6b
 8000dd4:	21d0      	movs	r1, #208	@ 0xd0
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff09 	bl	8000bee <setBits>

	//Setting DMP and FIFO_OFLOW interrupts enabled
	setIntEnabled(hi2c, 1 << MPU6050_INTERRUPT_FIFO_OFLOW_BIT | 1 << MPU6050_INTERRUPT_DMP_INT_BIT); 	// 1<<4 | 1 << 1
 8000ddc:	2112      	movs	r1, #18
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 f91e 	bl	8001020 <setIntEnabled>

	//Setting sample rate to 200Hz, since we are using DLPF, 1KHz/(4+1) = 200Hz
	command = 0x04;	//divide by sample rate divider + 1
 8000de4:	2304      	movs	r3, #4
 8000de6:	75bb      	strb	r3, [r7, #22]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_SMPLRT_DIV, (uint8_t*) &command, 1);	// adjust sample rate divider
 8000de8:	f107 0316 	add.w	r3, r7, #22
 8000dec:	2201      	movs	r2, #1
 8000dee:	9200      	str	r2, [sp, #0]
 8000df0:	2219      	movs	r2, #25
 8000df2:	21d0      	movs	r1, #208	@ 0xd0
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff fe77 	bl	8000ae8 <i2c_Write_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_SMPLRT_DIV, (uint8_t*) receive_buffer, 1);	//check sample rate divider contents
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8000f6c <mpu6050_init_dmp+0x2b8>)
 8000e00:	2219      	movs	r2, #25
 8000e02:	21d0      	movs	r1, #208	@ 0xd0
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff fe21 	bl	8000a4c <i2c_Read_Accelerometer>

	//DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, MPU6050_EXT_SYNC_TEMP_OUT_L);
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	2303      	movs	r3, #3
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2305      	movs	r3, #5
 8000e14:	221a      	movs	r2, #26
 8000e16:	21d0      	movs	r1, #208	@ 0xd0
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff fee8 	bl	8000bee <setBits>

	//Setting DLPF bandwidth to 42Hz
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
 8000e1e:	2303      	movs	r3, #3
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	2303      	movs	r3, #3
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	2302      	movs	r3, #2
 8000e28:	221a      	movs	r2, #26
 8000e2a:	21d0      	movs	r1, #208	@ 0xd0
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fede 	bl	8000bee <setBits>

	//Setting gyro sensitivity to +/- 2000 deg/sec FIXME set to 1000 deg/sec later
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS_2000);
 8000e32:	2303      	movs	r3, #3
 8000e34:	9301      	str	r3, [sp, #4]
 8000e36:	2302      	movs	r3, #2
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	221b      	movs	r2, #27
 8000e3e:	21d0      	movs	r1, #208	@ 0xd0
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff fed4 	bl	8000bee <setBits>

	// load DMP code into memory banks
	//DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
	//DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
	//DEBUG_PRINTLN(F(" bytes)"));
	if (!writeProgMemoryBlock(hi2c, dmpMemory, MPU6050_DMP_CODE_SIZE, 0, 0, true))
 8000e46:	2301      	movs	r3, #1
 8000e48:	9301      	str	r3, [sp, #4]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	9300      	str	r3, [sp, #0]
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f240 7289 	movw	r2, #1929	@ 0x789
 8000e54:	4946      	ldr	r1, [pc, #280]	@ (8000f70 <mpu6050_init_dmp+0x2bc>)
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 f9ce 	bl	80011f8 <writeProgMemoryBlock>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f083 0301 	eor.w	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d17c      	bne.n	8000f62 <mpu6050_init_dmp+0x2ae>
		return 1; // Failed
	//DEBUG_PRINTLN(F("Success! DMP code written and verified."));

	// Set the FIFO Rate Divisor int the DMP Firmware Memory
	unsigned char dmpUpdate[] = {0x00, MPU6050_DMP_FIFO_RATE_DIVISOR};
 8000e68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e6c:	823b      	strh	r3, [r7, #16]
	writeMemoryBlock(hi2c, dmpUpdate, 0x02, 0x02, 0x16, true, false); // Lets write the dmpUpdate data to the Firmware image, we have 2 bytes to write in bank 0x02 with the Offset 0x16
 8000e6e:	f107 0110 	add.w	r1, r7, #16
 8000e72:	2300      	movs	r3, #0
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	2301      	movs	r3, #1
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	2316      	movs	r3, #22
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2302      	movs	r3, #2
 8000e80:	2202      	movs	r2, #2
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 f8de 	bl	8001044 <writeMemoryBlock>

	//write start address MSB into register
	uint8_t config = 0x03;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_DMP_CFG_1, (uint8_t*) &config, 1); //setDMPConfig1(0x03);
 8000e8c:	f107 030f 	add.w	r3, r7, #15
 8000e90:	2201      	movs	r2, #1
 8000e92:	9200      	str	r2, [sp, #0]
 8000e94:	2270      	movs	r2, #112	@ 0x70
 8000e96:	21d0      	movs	r1, #208	@ 0xd0
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff fe25 	bl	8000ae8 <i2c_Write_Accelerometer>

	//write start address LSB into register
	config = 0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_DMP_CFG_2, (uint8_t*) &config, 1); //	setDMPConfig2(0x00);
 8000ea2:	f107 030f 	add.w	r3, r7, #15
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	9200      	str	r2, [sp, #0]
 8000eaa:	2271      	movs	r2, #113	@ 0x71
 8000eac:	21d0      	movs	r1, #208	@ 0xd0
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff fe1a 	bl	8000ae8 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, false); //	setOTPBankValid(false);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2300      	movs	r3, #0
 8000eba:	2200      	movs	r2, #0
 8000ebc:	21d0      	movs	r1, #208	@ 0xd0
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff fe54 	bl	8000b6c <setBit>

	//DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
	uint8_t threshold = 2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	73bb      	strb	r3, [r7, #14]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MOT_THR, (uint8_t*) &threshold, 1); //setMotionDetectionThreshold(2);
 8000ec8:	f107 030e 	add.w	r3, r7, #14
 8000ecc:	2201      	movs	r2, #1
 8000ece:	9200      	str	r2, [sp, #0]
 8000ed0:	221f      	movs	r2, #31
 8000ed2:	21d0      	movs	r1, #208	@ 0xd0
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f7ff fe07 	bl	8000ae8 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
	threshold = 156;
 8000eda:	239c      	movs	r3, #156	@ 0x9c
 8000edc:	73bb      	strb	r3, [r7, #14]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_ZRMOT_THR, (uint8_t*) &threshold, 1); //	setZeroMotionDetectionThreshold(156);
 8000ede:	f107 030e 	add.w	r3, r7, #14
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	9200      	str	r2, [sp, #0]
 8000ee6:	2221      	movs	r2, #33	@ 0x21
 8000ee8:	21d0      	movs	r1, #208	@ 0xd0
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff fdfc 	bl	8000ae8 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
	uint8_t duration = 80;
 8000ef0:	2350      	movs	r3, #80	@ 0x50
 8000ef2:	737b      	strb	r3, [r7, #13]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MOT_DUR, (uint8_t*) &duration, 1); //	setMotionDetectionDuration(80);
 8000ef4:	f107 030d 	add.w	r3, r7, #13
 8000ef8:	2201      	movs	r2, #1
 8000efa:	9200      	str	r2, [sp, #0]
 8000efc:	2220      	movs	r2, #32
 8000efe:	21d0      	movs	r1, #208	@ 0xd0
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff fdf1 	bl	8000ae8 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
	duration = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	737b      	strb	r3, [r7, #13]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_ZRMOT_DUR, (uint8_t*) &duration, 1); //	setZeroMotionDetectionDuration(0);
 8000f0a:	f107 030d 	add.w	r3, r7, #13
 8000f0e:	2201      	movs	r2, #1
 8000f10:	9200      	str	r2, [sp, #0]
 8000f12:	2222      	movs	r2, #34	@ 0x22
 8000f14:	21d0      	movs	r1, #208	@ 0xd0
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff fde6 	bl	8000ae8 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Enabling FIFO..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, true); //	setFIFOEnabled(true);
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2306      	movs	r3, #6
 8000f22:	226a      	movs	r2, #106	@ 0x6a
 8000f24:	21d0      	movs	r1, #208	@ 0xd0
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff fe20 	bl	8000b6c <setBit>

	//	DEBUG_PRINTLN(F("Resetting DMP..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true); //	resetDMP();
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2303      	movs	r3, #3
 8000f32:	226a      	movs	r2, #106	@ 0x6a
 8000f34:	21d0      	movs	r1, #208	@ 0xd0
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff fe18 	bl	8000b6c <setBit>

	//	DEBUG_PRINTLN(F("DMP is good to go! Finally."));
	//
	//	DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
	setDMPEnabled(hi2c, false);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f977 	bl	8001232 <setDMPEnabled>
	//
	//	DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
	dmpPacketSize = 42;
 8000f44:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <mpu6050_init_dmp+0x2c0>)
 8000f46:	222a      	movs	r2, #42	@ 0x2a
 8000f48:	801a      	strh	r2, [r3, #0]
	//
	//	DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
	resetFIFO(hi2c);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 f9a2 	bl	8001294 <resetFIFO>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_INT_STATUS, (uint8_t*) receive_buffer, 1);	//	getIntStatus();
 8000f50:	2301      	movs	r3, #1
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <mpu6050_init_dmp+0x2b8>)
 8000f56:	223a      	movs	r2, #58	@ 0x3a
 8000f58:	21d0      	movs	r1, #208	@ 0xd0
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fd76 	bl	8000a4c <i2c_Read_Accelerometer>

	return 0;
 8000f60:	e000      	b.n	8000f64 <mpu6050_init_dmp+0x2b0>
		return 1; // Failed
 8000f62:	bf00      	nop
}
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200001ec 	.word	0x200001ec
 8000f70:	08006774 	.word	0x08006774
 8000f74:	20000200 	.word	0x20000200

08000f78 <setMemoryBank>:

void setMemoryBank(I2C_HandleTypeDef *hi2c, uint8_t bank, bool prefetchEnabled, bool userBank)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	4608      	mov	r0, r1
 8000f82:	4611      	mov	r1, r2
 8000f84:	461a      	mov	r2, r3
 8000f86:	4603      	mov	r3, r0
 8000f88:	70fb      	strb	r3, [r7, #3]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	70bb      	strb	r3, [r7, #2]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	707b      	strb	r3, [r7, #1]
	bank &= 0x1F;
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	f003 031f 	and.w	r3, r3, #31
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	70fb      	strb	r3, [r7, #3]
	if (userBank)
 8000f9c:	787b      	ldrb	r3, [r7, #1]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d004      	beq.n	8000fac <setMemoryBank+0x34>
		bank |= 0x20;
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	f043 0320 	orr.w	r3, r3, #32
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	70fb      	strb	r3, [r7, #3]
	if (prefetchEnabled)
 8000fac:	78bb      	ldrb	r3, [r7, #2]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d004      	beq.n	8000fbc <setMemoryBank+0x44>
		bank |= 0x40;
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	70fb      	strb	r3, [r7, #3]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_BANK_SEL, (uint8_t*) &bank, 1); //write to BANK_SEL = 0x6D register (not in register map documentation)
 8000fbc:	1cfb      	adds	r3, r7, #3
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	9200      	str	r2, [sp, #0]
 8000fc2:	226d      	movs	r2, #109	@ 0x6d
 8000fc4:	21d0      	movs	r1, #208	@ 0xd0
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff fd8e 	bl	8000ae8 <i2c_Write_Accelerometer>

}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <setMemoryStartAddress>:
void setMemoryStartAddress(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	70fb      	strb	r3, [r7, #3]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_START_ADDR, (uint8_t*) &address, 1); //MPU6050_RA_MEM_START_ADDR = 0x6E, write the start address to this register
 8000fe0:	1cfb      	adds	r3, r7, #3
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	9200      	str	r2, [sp, #0]
 8000fe6:	226e      	movs	r2, #110	@ 0x6e
 8000fe8:	21d0      	movs	r1, #208	@ 0xd0
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff fd7c 	bl	8000ae8 <i2c_Write_Accelerometer>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <getOTPBankValid>:
uint8_t getOTPBankValid(I2C_HandleTypeDef *hi2c)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	6078      	str	r0, [r7, #4]
	uint8_t temp_buf = 0; //bit 0 is MPU6050_TC_OTP_BNK_VLD_BIT, which is what we need to confirm if OTP bank is valid
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_XG_OFFS_TC, &temp_buf, 1); //MPU6050_RA_XG_OFFS_TC = 0x00
 8001004:	f107 030f 	add.w	r3, r7, #15
 8001008:	2201      	movs	r2, #1
 800100a:	9200      	str	r2, [sp, #0]
 800100c:	2200      	movs	r2, #0
 800100e:	21d0      	movs	r1, #208	@ 0xd0
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff fd1b 	bl	8000a4c <i2c_Read_Accelerometer>

	return temp_buf;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <setIntEnabled>:
void setIntEnabled(I2C_HandleTypeDef *hi2c, uint8_t enabled)
{ //call this function to choose which interrupts are enabled
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af02      	add	r7, sp, #8
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_INT_ENABLE, (uint8_t*) &enabled, 1);
 800102c:	1cfb      	adds	r3, r7, #3
 800102e:	2201      	movs	r2, #1
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	2238      	movs	r2, #56	@ 0x38
 8001034:	21d0      	movs	r1, #208	@ 0xd0
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff fd56 	bl	8000ae8 <i2c_Write_Accelerometer>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <writeMemoryBlock>:
bool writeMemoryBlock(I2C_HandleTypeDef *hi2c, const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af02      	add	r7, sp, #8
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	4611      	mov	r1, r2
 8001050:	461a      	mov	r2, r3
 8001052:	460b      	mov	r3, r1
 8001054:	80fb      	strh	r3, [r7, #6]
 8001056:	4613      	mov	r3, r2
 8001058:	717b      	strb	r3, [r7, #5]
	setMemoryBank(hi2c, bank, false, false);
 800105a:	7979      	ldrb	r1, [r7, #5]
 800105c:	2300      	movs	r3, #0
 800105e:	2200      	movs	r2, #0
 8001060:	68f8      	ldr	r0, [r7, #12]
 8001062:	f7ff ff89 	bl	8000f78 <setMemoryBank>
	setMemoryStartAddress(hi2c, address);
 8001066:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800106a:	4619      	mov	r1, r3
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff ffb1 	bl	8000fd4 <setMemoryStartAddress>
	uint8_t chunkSize;
	uint8_t *verifyBuffer = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
	uint8_t *progBuffer = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
	uint16_t i;
	uint8_t j;
	if (verify)
 800107a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800107e:	2b00      	cmp	r3, #0
 8001080:	d004      	beq.n	800108c <writeMemoryBlock+0x48>
		verifyBuffer = (uint8_t*) malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8001082:	2010      	movs	r0, #16
 8001084:	f004 fe5a 	bl	8005d3c <malloc>
 8001088:	4603      	mov	r3, r0
 800108a:	61bb      	str	r3, [r7, #24]
	if (useProgMem)
 800108c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001090:	2b00      	cmp	r3, #0
 8001092:	d004      	beq.n	800109e <writeMemoryBlock+0x5a>
		progBuffer = (uint8_t*) malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8001094:	2010      	movs	r0, #16
 8001096:	f004 fe51 	bl	8005d3c <malloc>
 800109a:	4603      	mov	r3, r0
 800109c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < dataSize;)
 800109e:	2300      	movs	r3, #0
 80010a0:	827b      	strh	r3, [r7, #18]
 80010a2:	e091      	b.n	80011c8 <writeMemoryBlock+0x184>
	{
		// determine correct chunk size according to bank position and data size
		chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 80010a4:	2310      	movs	r3, #16
 80010a6:	77fb      	strb	r3, [r7, #31]

		// make sure we don't go past the data size
		if (i + chunkSize > dataSize)
 80010a8:	8a7a      	ldrh	r2, [r7, #18]
 80010aa:	7ffb      	ldrb	r3, [r7, #31]
 80010ac:	441a      	add	r2, r3
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dd05      	ble.n	80010c0 <writeMemoryBlock+0x7c>
			chunkSize = dataSize - i;
 80010b4:	88fb      	ldrh	r3, [r7, #6]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	8a7b      	ldrh	r3, [r7, #18]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	77fb      	strb	r3, [r7, #31]

		// make sure this chunk doesn't go past the bank boundary (256 bytes)
		if (chunkSize > 256 - address)
 80010c0:	7ffa      	ldrb	r2, [r7, #31]
 80010c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010c6:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dd03      	ble.n	80010d6 <writeMemoryBlock+0x92>
			chunkSize = 256 - address;
 80010ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010d2:	425b      	negs	r3, r3
 80010d4:	77fb      	strb	r3, [r7, #31]

		if (useProgMem)
 80010d6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d014      	beq.n	8001108 <writeMemoryBlock+0xc4>
		{
			// write the chunk of data as specified
			for (j = 0; j < chunkSize; j++)
 80010de:	2300      	movs	r3, #0
 80010e0:	747b      	strb	r3, [r7, #17]
 80010e2:	e00c      	b.n	80010fe <writeMemoryBlock+0xba>
				progBuffer[j] = pgm_read_byte(data + i + j);
 80010e4:	8a7a      	ldrh	r2, [r7, #18]
 80010e6:	7c7b      	ldrb	r3, [r7, #17]
 80010e8:	4413      	add	r3, r2
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	441a      	add	r2, r3
 80010ee:	7c7b      	ldrb	r3, [r7, #17]
 80010f0:	6979      	ldr	r1, [r7, #20]
 80010f2:	440b      	add	r3, r1
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < chunkSize; j++)
 80010f8:	7c7b      	ldrb	r3, [r7, #17]
 80010fa:	3301      	adds	r3, #1
 80010fc:	747b      	strb	r3, [r7, #17]
 80010fe:	7c7a      	ldrb	r2, [r7, #17]
 8001100:	7ffb      	ldrb	r3, [r7, #31]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3ee      	bcc.n	80010e4 <writeMemoryBlock+0xa0>
 8001106:	e003      	b.n	8001110 <writeMemoryBlock+0xcc>
		}
		else
		{
			// write the chunk of data as specified
			progBuffer = (uint8_t*) data + i;
 8001108:	8a7b      	ldrh	r3, [r7, #18]
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	617b      	str	r3, [r7, #20]
		}

		i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_R_W, (uint8_t*) progBuffer, chunkSize);
 8001110:	7ffb      	ldrb	r3, [r7, #31]
 8001112:	b29b      	uxth	r3, r3
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	226f      	movs	r2, #111	@ 0x6f
 800111a:	21d0      	movs	r1, #208	@ 0xd0
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff fce3 	bl	8000ae8 <i2c_Write_Accelerometer>

		// verify data if needed
		if (verify && verifyBuffer)
 8001122:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001126:	2b00      	cmp	r3, #0
 8001128:	d02c      	beq.n	8001184 <writeMemoryBlock+0x140>
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d029      	beq.n	8001184 <writeMemoryBlock+0x140>
		{
			setMemoryBank(hi2c, bank, false, false);
 8001130:	7979      	ldrb	r1, [r7, #5]
 8001132:	2300      	movs	r3, #0
 8001134:	2200      	movs	r2, #0
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f7ff ff1e 	bl	8000f78 <setMemoryBank>
			setMemoryStartAddress(hi2c, address);
 800113c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001140:	4619      	mov	r1, r3
 8001142:	68f8      	ldr	r0, [r7, #12]
 8001144:	f7ff ff46 	bl	8000fd4 <setMemoryStartAddress>
			i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_R_W, (uint8_t*) verifyBuffer, chunkSize);
 8001148:	7ffb      	ldrb	r3, [r7, #31]
 800114a:	b29b      	uxth	r3, r3
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	226f      	movs	r2, #111	@ 0x6f
 8001152:	21d0      	movs	r1, #208	@ 0xd0
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f7ff fc79 	bl	8000a4c <i2c_Read_Accelerometer>
			if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0)
 800115a:	7ffb      	ldrb	r3, [r7, #31]
 800115c:	461a      	mov	r2, r3
 800115e:	69b9      	ldr	r1, [r7, #24]
 8001160:	6978      	ldr	r0, [r7, #20]
 8001162:	f005 f8a1 	bl	80062a8 <memcmp>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00b      	beq.n	8001184 <writeMemoryBlock+0x140>
				 Serial.print(" 0x");
				 if (verifyBuffer[i + j] < 16) Serial.print("0");
				 Serial.print(verifyBuffer[i + j], HEX);
				 }
				 Serial.print("\n");*/
				free(verifyBuffer);
 800116c:	69b8      	ldr	r0, [r7, #24]
 800116e:	f004 fded 	bl	8005d4c <free>
				if (useProgMem)
 8001172:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <writeMemoryBlock+0x13c>
					free(progBuffer);
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	f004 fde6 	bl	8005d4c <free>
				return false; // uh oh.
 8001180:	2300      	movs	r3, #0
 8001182:	e035      	b.n	80011f0 <writeMemoryBlock+0x1ac>
			}
		}

		// increase byte index by [chunkSize]
		i += chunkSize;
 8001184:	7ffb      	ldrb	r3, [r7, #31]
 8001186:	b29a      	uxth	r2, r3
 8001188:	8a7b      	ldrh	r3, [r7, #18]
 800118a:	4413      	add	r3, r2
 800118c:	827b      	strh	r3, [r7, #18]

		// uint8_t automatically wraps to 0 at 256
		address += chunkSize;
 800118e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001192:	7ffb      	ldrb	r3, [r7, #31]
 8001194:	4413      	add	r3, r2
 8001196:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

		// if we aren't done, update bank (if necessary) and address
		if (i < dataSize)
 800119a:	8a7a      	ldrh	r2, [r7, #18]
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d212      	bcs.n	80011c8 <writeMemoryBlock+0x184>
		{
			if (address == 0)
 80011a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <writeMemoryBlock+0x16c>
				bank++;
 80011aa:	797b      	ldrb	r3, [r7, #5]
 80011ac:	3301      	adds	r3, #1
 80011ae:	717b      	strb	r3, [r7, #5]
			setMemoryBank(hi2c, bank, false, false);
 80011b0:	7979      	ldrb	r1, [r7, #5]
 80011b2:	2300      	movs	r3, #0
 80011b4:	2200      	movs	r2, #0
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff fede 	bl	8000f78 <setMemoryBank>
			setMemoryStartAddress(hi2c, address);
 80011bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80011c0:	4619      	mov	r1, r3
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f7ff ff06 	bl	8000fd4 <setMemoryStartAddress>
	for (i = 0; i < dataSize;)
 80011c8:	8a7a      	ldrh	r2, [r7, #18]
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f4ff af69 	bcc.w	80010a4 <writeMemoryBlock+0x60>
		}
	}
	if (verify)
 80011d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <writeMemoryBlock+0x19c>
		free(verifyBuffer);
 80011da:	69b8      	ldr	r0, [r7, #24]
 80011dc:	f004 fdb6 	bl	8005d4c <free>
	if (useProgMem)
 80011e0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d002      	beq.n	80011ee <writeMemoryBlock+0x1aa>
		free(progBuffer);
 80011e8:	6978      	ldr	r0, [r7, #20]
 80011ea:	f004 fdaf 	bl	8005d4c <free>
	return true;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <writeProgMemoryBlock>:

bool writeProgMemoryBlock(I2C_HandleTypeDef *hi2c, const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af04      	add	r7, sp, #16
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	460b      	mov	r3, r1
 8001208:	80fb      	strh	r3, [r7, #6]
 800120a:	4613      	mov	r3, r2
 800120c:	717b      	strb	r3, [r7, #5]
	return writeMemoryBlock(hi2c, data, dataSize, bank, address, verify, true);
 800120e:	7979      	ldrb	r1, [r7, #5]
 8001210:	88fa      	ldrh	r2, [r7, #6]
 8001212:	2301      	movs	r3, #1
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	7f3b      	ldrb	r3, [r7, #28]
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	7e3b      	ldrb	r3, [r7, #24]
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	460b      	mov	r3, r1
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f7ff ff0e 	bl	8001044 <writeMemoryBlock>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <setDMPEnabled>:

void setDMPEnabled(I2C_HandleTypeDef *hi2c, bool enabled)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af02      	add	r7, sp, #8
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	460b      	mov	r3, r1
 800123c:	70fb      	strb	r3, [r7, #3]
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled); //	resetDMP();
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2307      	movs	r3, #7
 8001244:	226a      	movs	r2, #106	@ 0x6a
 8001246:	21d0      	movs	r1, #208	@ 0xd0
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fc8f 	bl	8000b6c <setBit>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <getFIFOCount>:
//    getFIFOBytes(data, length); //Get 1 packet
//    return 1;
//}

uint16_t getFIFOCount(I2C_HandleTypeDef *hi2c)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af02      	add	r7, sp, #8
 800125e:	6078      	str	r0, [r7, #4]
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_FIFO_COUNTH, (uint8_t*) receive_buffer, 2);
 8001260:	2302      	movs	r3, #2
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <getFIFOCount+0x38>)
 8001266:	2272      	movs	r2, #114	@ 0x72
 8001268:	21d0      	movs	r1, #208	@ 0xd0
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fbee 	bl	8000a4c <i2c_Read_Accelerometer>
	return (((uint16_t) receive_buffer[0]) << 8) | receive_buffer[1];
 8001270:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <getFIFOCount+0x38>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b21b      	sxth	r3, r3
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <getFIFOCount+0x38>)
 800127c:	785b      	ldrb	r3, [r3, #1]
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21b      	sxth	r3, r3
 8001284:	b29b      	uxth	r3, r3
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001ec 	.word	0x200001ec

08001294 <resetFIFO>:

void resetFIFO(I2C_HandleTypeDef *hi2c)
{ //reset FIFO when it overflows to make sure the data is synchronized.
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af02      	add	r7, sp, #8
 800129a:	6078      	str	r0, [r7, #4]
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 800129c:	2301      	movs	r3, #1
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2302      	movs	r3, #2
 80012a2:	226a      	movs	r2, #106	@ 0x6a
 80012a4:	21d0      	movs	r1, #208	@ 0xd0
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fc60 	bl	8000b6c <setBit>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <getFIFOBytes>:

void getFIFOBytes(I2C_HandleTypeDef *hi2c, uint8_t *data, uint8_t length)
{ //read Bytes from FIFO
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af02      	add	r7, sp, #8
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	4613      	mov	r3, r2
 80012c0:	71fb      	strb	r3, [r7, #7]
	if (length > 0)
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d009      	beq.n	80012dc <getFIFOBytes+0x28>
	{
		i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_FIFO_R_W, (uint8_t*) data, length);
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2274      	movs	r2, #116	@ 0x74
 80012d2:	21d0      	movs	r1, #208	@ 0xd0
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff fbb9 	bl	8000a4c <i2c_Read_Accelerometer>
	}
	else
	{
		*data = 0;
	}
}
 80012da:	e002      	b.n	80012e2 <getFIFOBytes+0x2e>
		*data = 0;
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <dmpGetQuaternion>:

uint8_t dmpGetQuaternion(int16_t *data, const uint8_t *packet)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	// TODO: accommodate different arrangements of sent data (ONLY default supported now)
	if (packet == 0)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <dmpGetQuaternion+0x16>
	{
		packet = dmpPacketBuffer;
 80012fc:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <dmpGetQuaternion+0x98>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	603b      	str	r3, [r7, #0]
	}
	data[0] = ((packet[0] << 8) | packet[1]);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b21b      	sxth	r3, r3
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b21a      	sxth	r2, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	3301      	adds	r3, #1
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21a      	sxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	801a      	strh	r2, [r3, #0]
	data[1] = ((packet[4] << 8) | packet[5]);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	3304      	adds	r3, #4
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b21b      	sxth	r3, r3
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b219      	sxth	r1, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	3305      	adds	r3, #5
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b21a      	sxth	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3302      	adds	r3, #2
 8001334:	430a      	orrs	r2, r1
 8001336:	b212      	sxth	r2, r2
 8001338:	801a      	strh	r2, [r3, #0]
	data[2] = ((packet[8] << 8) | packet[9]);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3308      	adds	r3, #8
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b21b      	sxth	r3, r3
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b219      	sxth	r1, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	3309      	adds	r3, #9
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b21a      	sxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3304      	adds	r3, #4
 8001352:	430a      	orrs	r2, r1
 8001354:	b212      	sxth	r2, r2
 8001356:	801a      	strh	r2, [r3, #0]
	data[3] = ((packet[12] << 8) | packet[13]);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	330c      	adds	r3, #12
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	b21b      	sxth	r3, r3
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	b219      	sxth	r1, r3
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	330d      	adds	r3, #13
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b21a      	sxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3306      	adds	r3, #6
 8001370:	430a      	orrs	r2, r1
 8001372:	b212      	sxth	r2, r2
 8001374:	801a      	strh	r2, [r3, #0]
	return 0;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000204 	.word	0x20000204

08001388 <dmpGetQuaternionQuatStruct>:

uint8_t dmpGetQuaternionQuatStruct(Quaternion *q, const uint8_t *packet)
{ //returns data in struct format, which is more organized than dmpGetQuaternion
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
	// TODO: accommodate different arrangements of sent data (ONLY default supported now)
	int16_t qI[4];
	uint8_t status = dmpGetQuaternion(qI, packet);
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ffa7 	bl	80012ec <dmpGetQuaternion>
 800139e:	4603      	mov	r3, r0
 80013a0:	75fb      	strb	r3, [r7, #23]
	if (status == 0)
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d13d      	bne.n	8001424 <dmpGetQuaternionQuatStruct+0x9c>
	{
		q->w = (float) qI[0] / 16384.0f;
 80013a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7fe ff89 	bl	80002c4 <__aeabi_i2f>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f88b 	bl	80004d4 <__aeabi_fdiv>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	601a      	str	r2, [r3, #0]
		q->x = (float) qI[1] / 16384.0f;
 80013c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7fe ff7a 	bl	80002c4 <__aeabi_i2f>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f87c 	bl	80004d4 <__aeabi_fdiv>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	605a      	str	r2, [r3, #4]
		q->y = (float) qI[2] / 16384.0f;
 80013e4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe ff6b 	bl	80002c4 <__aeabi_i2f>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f86d 	bl	80004d4 <__aeabi_fdiv>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	609a      	str	r2, [r3, #8]
		q->z = (float) qI[3] / 16384.0f;
 8001402:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe ff5c 	bl	80002c4 <__aeabi_i2f>
 800140c:	4603      	mov	r3, r0
 800140e:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f85e 	bl	80004d4 <__aeabi_fdiv>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	60da      	str	r2, [r3, #12]
		return 0;
 8001420:	2300      	movs	r3, #0
 8001422:	e000      	b.n	8001426 <dmpGetQuaternionQuatStruct+0x9e>
	}
	return status; // int16 return value, indicates error if this line is reached
 8001424:	7dfb      	ldrb	r3, [r7, #23]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001436:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <HAL_MspInit+0x68>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	4a17      	ldr	r2, [pc, #92]	@ (8001498 <HAL_MspInit+0x68>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6193      	str	r3, [r2, #24]
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <HAL_MspInit+0x68>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b12      	ldr	r3, [pc, #72]	@ (8001498 <HAL_MspInit+0x68>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a11      	ldr	r2, [pc, #68]	@ (8001498 <HAL_MspInit+0x68>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b0f      	ldr	r3, [pc, #60]	@ (8001498 <HAL_MspInit+0x68>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	210f      	movs	r1, #15
 800146a:	f06f 0001 	mvn.w	r0, #1
 800146e:	f000 fb54 	bl	8001b1a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001472:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <HAL_MspInit+0x6c>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	4a04      	ldr	r2, [pc, #16]	@ (800149c <HAL_MspInit+0x6c>)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000

080014a0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a41      	ldr	r2, [pc, #260]	@ (80015c0 <HAL_I2C_MspInit+0x120>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d17a      	bne.n	80015b6 <HAL_I2C_MspInit+0x116>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c0:	4b40      	ldr	r3, [pc, #256]	@ (80015c4 <HAL_I2C_MspInit+0x124>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	4a3f      	ldr	r2, [pc, #252]	@ (80015c4 <HAL_I2C_MspInit+0x124>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6193      	str	r3, [r2, #24]
 80014cc:	4b3d      	ldr	r3, [pc, #244]	@ (80015c4 <HAL_I2C_MspInit+0x124>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014de:	2312      	movs	r3, #18
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e2:	2303      	movs	r3, #3
 80014e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	4619      	mov	r1, r3
 80014ec:	4836      	ldr	r0, [pc, #216]	@ (80015c8 <HAL_I2C_MspInit+0x128>)
 80014ee:	f000 fdb1 	bl	8002054 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014f2:	4b34      	ldr	r3, [pc, #208]	@ (80015c4 <HAL_I2C_MspInit+0x124>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a33      	ldr	r2, [pc, #204]	@ (80015c4 <HAL_I2C_MspInit+0x124>)
 80014f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b31      	ldr	r3, [pc, #196]	@ (80015c4 <HAL_I2C_MspInit+0x124>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 800150a:	4b30      	ldr	r3, [pc, #192]	@ (80015cc <HAL_I2C_MspInit+0x12c>)
 800150c:	4a30      	ldr	r2, [pc, #192]	@ (80015d0 <HAL_I2C_MspInit+0x130>)
 800150e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001510:	4b2e      	ldr	r3, [pc, #184]	@ (80015cc <HAL_I2C_MspInit+0x12c>)
 8001512:	2210      	movs	r2, #16
 8001514:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001516:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <HAL_I2C_MspInit+0x12c>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800151c:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <HAL_I2C_MspInit+0x12c>)
 800151e:	2280      	movs	r2, #128	@ 0x80
 8001520:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001522:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <HAL_I2C_MspInit+0x12c>)
 8001524:	2200      	movs	r2, #0
 8001526:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001528:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <HAL_I2C_MspInit+0x12c>)
 800152a:	2200      	movs	r2, #0
 800152c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800152e:	4b27      	ldr	r3, [pc, #156]	@ (80015cc <HAL_I2C_MspInit+0x12c>)
 8001530:	2200      	movs	r2, #0
 8001532:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001534:	4b25      	ldr	r3, [pc, #148]	@ (80015cc <HAL_I2C_MspInit+0x12c>)
 8001536:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800153a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800153c:	4823      	ldr	r0, [pc, #140]	@ (80015cc <HAL_I2C_MspInit+0x12c>)
 800153e:	f000 fb17 	bl	8001b70 <HAL_DMA_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 8001548:	f7ff fa7a 	bl	8000a40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a1f      	ldr	r2, [pc, #124]	@ (80015cc <HAL_I2C_MspInit+0x12c>)
 8001550:	635a      	str	r2, [r3, #52]	@ 0x34
 8001552:	4a1e      	ldr	r2, [pc, #120]	@ (80015cc <HAL_I2C_MspInit+0x12c>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8001558:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <HAL_I2C_MspInit+0x134>)
 800155a:	4a1f      	ldr	r2, [pc, #124]	@ (80015d8 <HAL_I2C_MspInit+0x138>)
 800155c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800155e:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <HAL_I2C_MspInit+0x134>)
 8001560:	2200      	movs	r2, #0
 8001562:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001564:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <HAL_I2C_MspInit+0x134>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800156a:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <HAL_I2C_MspInit+0x134>)
 800156c:	2280      	movs	r2, #128	@ 0x80
 800156e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001570:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <HAL_I2C_MspInit+0x134>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <HAL_I2C_MspInit+0x134>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <HAL_I2C_MspInit+0x134>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <HAL_I2C_MspInit+0x134>)
 8001584:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001588:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800158a:	4812      	ldr	r0, [pc, #72]	@ (80015d4 <HAL_I2C_MspInit+0x134>)
 800158c:	f000 faf0 	bl	8001b70 <HAL_DMA_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8001596:	f7ff fa53 	bl	8000a40 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <HAL_I2C_MspInit+0x134>)
 800159e:	639a      	str	r2, [r3, #56]	@ 0x38
 80015a0:	4a0c      	ldr	r2, [pc, #48]	@ (80015d4 <HAL_I2C_MspInit+0x134>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2105      	movs	r1, #5
 80015aa:	2021      	movs	r0, #33	@ 0x21
 80015ac:	f000 fab5 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80015b0:	2021      	movs	r0, #33	@ 0x21
 80015b2:	f000 face 	bl	8001b52 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80015b6:	bf00      	nop
 80015b8:	3720      	adds	r7, #32
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40005800 	.word	0x40005800
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010c00 	.word	0x40010c00
 80015cc:	200000d8 	.word	0x200000d8
 80015d0:	40020044 	.word	0x40020044
 80015d4:	2000011c 	.word	0x2000011c
 80015d8:	40020058 	.word	0x40020058

080015dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	@ 0x38
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80015f2:	4b34      	ldr	r3, [pc, #208]	@ (80016c4 <HAL_InitTick+0xe8>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	4a33      	ldr	r2, [pc, #204]	@ (80016c4 <HAL_InitTick+0xe8>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	61d3      	str	r3, [r2, #28]
 80015fe:	4b31      	ldr	r3, [pc, #196]	@ (80016c4 <HAL_InitTick+0xe8>)
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800160a:	f107 0210 	add.w	r2, r7, #16
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f003 feef 	bl	80053f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800161e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001620:	2b00      	cmp	r3, #0
 8001622:	d103      	bne.n	800162c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001624:	f003 fed4 	bl	80053d0 <HAL_RCC_GetPCLK1Freq>
 8001628:	6378      	str	r0, [r7, #52]	@ 0x34
 800162a:	e004      	b.n	8001636 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800162c:	f003 fed0 	bl	80053d0 <HAL_RCC_GetPCLK1Freq>
 8001630:	4603      	mov	r3, r0
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001638:	4a23      	ldr	r2, [pc, #140]	@ (80016c8 <HAL_InitTick+0xec>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0c9b      	lsrs	r3, r3, #18
 8001640:	3b01      	subs	r3, #1
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001644:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <HAL_InitTick+0xf0>)
 8001646:	4a22      	ldr	r2, [pc, #136]	@ (80016d0 <HAL_InitTick+0xf4>)
 8001648:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800164a:	4b20      	ldr	r3, [pc, #128]	@ (80016cc <HAL_InitTick+0xf0>)
 800164c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001650:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001652:	4a1e      	ldr	r2, [pc, #120]	@ (80016cc <HAL_InitTick+0xf0>)
 8001654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001656:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001658:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <HAL_InitTick+0xf0>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165e:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <HAL_InitTick+0xf0>)
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001664:	4b19      	ldr	r3, [pc, #100]	@ (80016cc <HAL_InitTick+0xf0>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800166a:	4818      	ldr	r0, [pc, #96]	@ (80016cc <HAL_InitTick+0xf0>)
 800166c:	f003 ff12 	bl	8005494 <HAL_TIM_Base_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001676:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800167a:	2b00      	cmp	r3, #0
 800167c:	d11b      	bne.n	80016b6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800167e:	4813      	ldr	r0, [pc, #76]	@ (80016cc <HAL_InitTick+0xf0>)
 8001680:	f003 ff60 	bl	8005544 <HAL_TIM_Base_Start_IT>
 8001684:	4603      	mov	r3, r0
 8001686:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800168a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800168e:	2b00      	cmp	r3, #0
 8001690:	d111      	bne.n	80016b6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001692:	201e      	movs	r0, #30
 8001694:	f000 fa5d 	bl	8001b52 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b0f      	cmp	r3, #15
 800169c:	d808      	bhi.n	80016b0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800169e:	2200      	movs	r2, #0
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	201e      	movs	r0, #30
 80016a4:	f000 fa39 	bl	8001b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a8:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <HAL_InitTick+0xf8>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	e002      	b.n	80016b6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3738      	adds	r7, #56	@ 0x38
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	431bde83 	.word	0x431bde83
 80016cc:	20000208 	.word	0x20000208
 80016d0:	40000800 	.word	0x40000800
 80016d4:	20000004 	.word	0x20000004

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <NMI_Handler+0x4>

080016e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	bf00      	nop
 80016ee:	e7fd      	b.n	80016ec <MemManage_Handler+0x4>

080016f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <UsageFault_Handler+0x4>

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001710:	2002      	movs	r0, #2
 8001712:	f000 fe55 	bl	80023c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001720:	4802      	ldr	r0, [pc, #8]	@ (800172c <DMA1_Channel4_IRQHandler+0x10>)
 8001722:	f000 fb57 	bl	8001dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200000d8 	.word	0x200000d8

08001730 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001734:	4802      	ldr	r0, [pc, #8]	@ (8001740 <DMA1_Channel5_IRQHandler+0x10>)
 8001736:	f000 fb4d 	bl	8001dd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	2000011c 	.word	0x2000011c

08001744 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001748:	4802      	ldr	r0, [pc, #8]	@ (8001754 <TIM4_IRQHandler+0x10>)
 800174a:	f003 ff4d 	bl	80055e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000208 	.word	0x20000208

08001758 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800175c:	4802      	ldr	r0, [pc, #8]	@ (8001768 <I2C2_EV_IRQHandler+0x10>)
 800175e:	f001 fd0b 	bl	8003178 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000084 	.word	0x20000084

0800176c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	e00a      	b.n	8001794 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800177e:	f3af 8000 	nop.w
 8001782:	4601      	mov	r1, r0
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	b2ca      	uxtb	r2, r1
 800178c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	429a      	cmp	r2, r3
 800179a:	dbf0      	blt.n	800177e <_read+0x12>
  }

  return len;
 800179c:	687b      	ldr	r3, [r7, #4]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e009      	b.n	80017cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	60ba      	str	r2, [r7, #8]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3301      	adds	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbf1      	blt.n	80017b8 <_write+0x12>
  }
  return len;
 80017d4:	687b      	ldr	r3, [r7, #4]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <_close>:

int _close(int file)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001804:	605a      	str	r2, [r3, #4]
  return 0;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <_isatty>:

int _isatty(int file)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
	...

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	@ (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	@ (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f004 fd88 	bl	8006384 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20005000 	.word	0x20005000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20000250 	.word	0x20000250
 80018a8:	20000830 	.word	0x20000830

080018ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018b8:	f7ff fff8 	bl	80018ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018bc:	480b      	ldr	r0, [pc, #44]	@ (80018ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018be:	490c      	ldr	r1, [pc, #48]	@ (80018f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018c0:	4a0c      	ldr	r2, [pc, #48]	@ (80018f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c4:	e002      	b.n	80018cc <LoopCopyDataInit>

080018c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ca:	3304      	adds	r3, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d0:	d3f9      	bcc.n	80018c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d2:	4a09      	ldr	r2, [pc, #36]	@ (80018f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018d4:	4c09      	ldr	r4, [pc, #36]	@ (80018fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d8:	e001      	b.n	80018de <LoopFillZerobss>

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018dc:	3204      	adds	r2, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018e2:	f004 fd55 	bl	8006390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018e6:	f7fe fe91 	bl	800060c <main>
  bx lr
 80018ea:	4770      	bx	lr
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018f4:	08006f08 	.word	0x08006f08
  ldr r2, =_sbss
 80018f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018fc:	20000830 	.word	0x20000830

08001900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC1_2_IRQHandler>
	...

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001908:	4b08      	ldr	r3, [pc, #32]	@ (800192c <HAL_Init+0x28>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a07      	ldr	r2, [pc, #28]	@ (800192c <HAL_Init+0x28>)
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001914:	2003      	movs	r0, #3
 8001916:	f000 f8f5 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191a:	200f      	movs	r0, #15
 800191c:	f7ff fe5e 	bl	80015dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001920:	f7ff fd86 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40022000 	.word	0x40022000

08001930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001934:	4b05      	ldr	r3, [pc, #20]	@ (800194c <HAL_IncTick+0x1c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <HAL_IncTick+0x20>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4413      	add	r3, r2
 8001940:	4a03      	ldr	r2, [pc, #12]	@ (8001950 <HAL_IncTick+0x20>)
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	20000008 	.word	0x20000008
 8001950:	20000254 	.word	0x20000254

08001954 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  return uwTick;
 8001958:	4b02      	ldr	r3, [pc, #8]	@ (8001964 <HAL_GetTick+0x10>)
 800195a:	681b      	ldr	r3, [r3, #0]
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr
 8001964:	20000254 	.word	0x20000254

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff fff0 	bl	8001954 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_Delay+0x44>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800198e:	bf00      	nop
 8001990:	f7ff ffe0 	bl	8001954 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000008 	.word	0x20000008

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0b      	blt.n	8001a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4906      	ldr	r1, [pc, #24]	@ (8001a48 <__NVIC_EnableIRQ+0x34>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	@ (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	@ (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	@ 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	@ 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff4f 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff64 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ffb2 	bl	8001aa0 <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff81 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff57 	bl	8001a14 <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e043      	b.n	8001c0e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b22      	ldr	r3, [pc, #136]	@ (8001c18 <HAL_DMA_Init+0xa8>)
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a22      	ldr	r2, [pc, #136]	@ (8001c1c <HAL_DMA_Init+0xac>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	091b      	lsrs	r3, r3, #4
 8001b98:	009a      	lsls	r2, r3, #2
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c20 <HAL_DMA_Init+0xb0>)
 8001ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001bba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001bbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3714      	adds	r7, #20
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	bffdfff8 	.word	0xbffdfff8
 8001c1c:	cccccccd 	.word	0xcccccccd
 8001c20:	40020000 	.word	0x40020000

08001c24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_DMA_Start_IT+0x20>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e04b      	b.n	8001cdc <HAL_DMA_Start_IT+0xb8>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d13a      	bne.n	8001cce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 0201 	bic.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	68b9      	ldr	r1, [r7, #8]
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 f9bc 	bl	8001ffa <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d008      	beq.n	8001c9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 020e 	orr.w	r2, r2, #14
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	e00f      	b.n	8001cbc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0204 	bic.w	r2, r2, #4
 8001caa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 020a 	orr.w	r2, r2, #10
 8001cba:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0201 	orr.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	e005      	b.n	8001cda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d005      	beq.n	8001d08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
 8001d06:	e051      	b.n	8001dac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 020e 	bic.w	r2, r2, #14
 8001d16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0201 	bic.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a22      	ldr	r2, [pc, #136]	@ (8001db8 <HAL_DMA_Abort_IT+0xd4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d029      	beq.n	8001d86 <HAL_DMA_Abort_IT+0xa2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a21      	ldr	r2, [pc, #132]	@ (8001dbc <HAL_DMA_Abort_IT+0xd8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d022      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x9e>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc0 <HAL_DMA_Abort_IT+0xdc>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01a      	beq.n	8001d7c <HAL_DMA_Abort_IT+0x98>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc4 <HAL_DMA_Abort_IT+0xe0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d012      	beq.n	8001d76 <HAL_DMA_Abort_IT+0x92>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc8 <HAL_DMA_Abort_IT+0xe4>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00a      	beq.n	8001d70 <HAL_DMA_Abort_IT+0x8c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dcc <HAL_DMA_Abort_IT+0xe8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d102      	bne.n	8001d6a <HAL_DMA_Abort_IT+0x86>
 8001d64:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d68:	e00e      	b.n	8001d88 <HAL_DMA_Abort_IT+0xa4>
 8001d6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d6e:	e00b      	b.n	8001d88 <HAL_DMA_Abort_IT+0xa4>
 8001d70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d74:	e008      	b.n	8001d88 <HAL_DMA_Abort_IT+0xa4>
 8001d76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7a:	e005      	b.n	8001d88 <HAL_DMA_Abort_IT+0xa4>
 8001d7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d80:	e002      	b.n	8001d88 <HAL_DMA_Abort_IT+0xa4>
 8001d82:	2310      	movs	r3, #16
 8001d84:	e000      	b.n	8001d88 <HAL_DMA_Abort_IT+0xa4>
 8001d86:	2301      	movs	r3, #1
 8001d88:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <HAL_DMA_Abort_IT+0xec>)
 8001d8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	4798      	blx	r3
    } 
  }
  return status;
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40020008 	.word	0x40020008
 8001dbc:	4002001c 	.word	0x4002001c
 8001dc0:	40020030 	.word	0x40020030
 8001dc4:	40020044 	.word	0x40020044
 8001dc8:	40020058 	.word	0x40020058
 8001dcc:	4002006c 	.word	0x4002006c
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	2204      	movs	r2, #4
 8001df2:	409a      	lsls	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d04f      	beq.n	8001e9c <HAL_DMA_IRQHandler+0xc8>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d04a      	beq.n	8001e9c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0204 	bic.w	r2, r2, #4
 8001e22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a66      	ldr	r2, [pc, #408]	@ (8001fc4 <HAL_DMA_IRQHandler+0x1f0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d029      	beq.n	8001e82 <HAL_DMA_IRQHandler+0xae>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a65      	ldr	r2, [pc, #404]	@ (8001fc8 <HAL_DMA_IRQHandler+0x1f4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d022      	beq.n	8001e7e <HAL_DMA_IRQHandler+0xaa>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a63      	ldr	r2, [pc, #396]	@ (8001fcc <HAL_DMA_IRQHandler+0x1f8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01a      	beq.n	8001e78 <HAL_DMA_IRQHandler+0xa4>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a62      	ldr	r2, [pc, #392]	@ (8001fd0 <HAL_DMA_IRQHandler+0x1fc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d012      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x9e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a60      	ldr	r2, [pc, #384]	@ (8001fd4 <HAL_DMA_IRQHandler+0x200>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00a      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x98>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a5f      	ldr	r2, [pc, #380]	@ (8001fd8 <HAL_DMA_IRQHandler+0x204>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d102      	bne.n	8001e66 <HAL_DMA_IRQHandler+0x92>
 8001e60:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e64:	e00e      	b.n	8001e84 <HAL_DMA_IRQHandler+0xb0>
 8001e66:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001e6a:	e00b      	b.n	8001e84 <HAL_DMA_IRQHandler+0xb0>
 8001e6c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001e70:	e008      	b.n	8001e84 <HAL_DMA_IRQHandler+0xb0>
 8001e72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e76:	e005      	b.n	8001e84 <HAL_DMA_IRQHandler+0xb0>
 8001e78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e7c:	e002      	b.n	8001e84 <HAL_DMA_IRQHandler+0xb0>
 8001e7e:	2340      	movs	r3, #64	@ 0x40
 8001e80:	e000      	b.n	8001e84 <HAL_DMA_IRQHandler+0xb0>
 8001e82:	2304      	movs	r3, #4
 8001e84:	4a55      	ldr	r2, [pc, #340]	@ (8001fdc <HAL_DMA_IRQHandler+0x208>)
 8001e86:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8094 	beq.w	8001fba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e9a:	e08e      	b.n	8001fba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d056      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x186>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d051      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0320 	and.w	r3, r3, #32
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10b      	bne.n	8001edc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 020a 	bic.w	r2, r2, #10
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a38      	ldr	r2, [pc, #224]	@ (8001fc4 <HAL_DMA_IRQHandler+0x1f0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d029      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x166>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a37      	ldr	r2, [pc, #220]	@ (8001fc8 <HAL_DMA_IRQHandler+0x1f4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d022      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x162>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a35      	ldr	r2, [pc, #212]	@ (8001fcc <HAL_DMA_IRQHandler+0x1f8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01a      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x15c>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a34      	ldr	r2, [pc, #208]	@ (8001fd0 <HAL_DMA_IRQHandler+0x1fc>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d012      	beq.n	8001f2a <HAL_DMA_IRQHandler+0x156>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a32      	ldr	r2, [pc, #200]	@ (8001fd4 <HAL_DMA_IRQHandler+0x200>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00a      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x150>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a31      	ldr	r2, [pc, #196]	@ (8001fd8 <HAL_DMA_IRQHandler+0x204>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d102      	bne.n	8001f1e <HAL_DMA_IRQHandler+0x14a>
 8001f18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f1c:	e00e      	b.n	8001f3c <HAL_DMA_IRQHandler+0x168>
 8001f1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f22:	e00b      	b.n	8001f3c <HAL_DMA_IRQHandler+0x168>
 8001f24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f28:	e008      	b.n	8001f3c <HAL_DMA_IRQHandler+0x168>
 8001f2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f2e:	e005      	b.n	8001f3c <HAL_DMA_IRQHandler+0x168>
 8001f30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f34:	e002      	b.n	8001f3c <HAL_DMA_IRQHandler+0x168>
 8001f36:	2320      	movs	r3, #32
 8001f38:	e000      	b.n	8001f3c <HAL_DMA_IRQHandler+0x168>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	4a27      	ldr	r2, [pc, #156]	@ (8001fdc <HAL_DMA_IRQHandler+0x208>)
 8001f3e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d034      	beq.n	8001fba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f58:	e02f      	b.n	8001fba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	2208      	movs	r2, #8
 8001f60:	409a      	lsls	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d028      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x1e8>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d023      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 020e 	bic.w	r2, r2, #14
 8001f82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d004      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	4798      	blx	r3
    }
  }
  return;
 8001fba:	bf00      	nop
 8001fbc:	bf00      	nop
}
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40020008 	.word	0x40020008
 8001fc8:	4002001c 	.word	0x4002001c
 8001fcc:	40020030 	.word	0x40020030
 8001fd0:	40020044 	.word	0x40020044
 8001fd4:	40020058 	.word	0x40020058
 8001fd8:	4002006c 	.word	0x4002006c
 8001fdc:	40020000 	.word	0x40020000

08001fe0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fee:	b2db      	uxtb	r3, r3
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b085      	sub	sp, #20
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002010:	2101      	movs	r1, #1
 8002012:	fa01 f202 	lsl.w	r2, r1, r2
 8002016:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b10      	cmp	r3, #16
 8002026:	d108      	bne.n	800203a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002038:	e007      	b.n	800204a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	60da      	str	r2, [r3, #12]
}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002054:	b480      	push	{r7}
 8002056:	b08b      	sub	sp, #44	@ 0x2c
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002066:	e169      	b.n	800233c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002068:	2201      	movs	r2, #1
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69fa      	ldr	r2, [r7, #28]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	429a      	cmp	r2, r3
 8002082:	f040 8158 	bne.w	8002336 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4a9a      	ldr	r2, [pc, #616]	@ (80022f4 <HAL_GPIO_Init+0x2a0>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d05e      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 8002090:	4a98      	ldr	r2, [pc, #608]	@ (80022f4 <HAL_GPIO_Init+0x2a0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d875      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 8002096:	4a98      	ldr	r2, [pc, #608]	@ (80022f8 <HAL_GPIO_Init+0x2a4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d058      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 800209c:	4a96      	ldr	r2, [pc, #600]	@ (80022f8 <HAL_GPIO_Init+0x2a4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d86f      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020a2:	4a96      	ldr	r2, [pc, #600]	@ (80022fc <HAL_GPIO_Init+0x2a8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d052      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 80020a8:	4a94      	ldr	r2, [pc, #592]	@ (80022fc <HAL_GPIO_Init+0x2a8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d869      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020ae:	4a94      	ldr	r2, [pc, #592]	@ (8002300 <HAL_GPIO_Init+0x2ac>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d04c      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 80020b4:	4a92      	ldr	r2, [pc, #584]	@ (8002300 <HAL_GPIO_Init+0x2ac>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d863      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020ba:	4a92      	ldr	r2, [pc, #584]	@ (8002304 <HAL_GPIO_Init+0x2b0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d046      	beq.n	800214e <HAL_GPIO_Init+0xfa>
 80020c0:	4a90      	ldr	r2, [pc, #576]	@ (8002304 <HAL_GPIO_Init+0x2b0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d85d      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020c6:	2b12      	cmp	r3, #18
 80020c8:	d82a      	bhi.n	8002120 <HAL_GPIO_Init+0xcc>
 80020ca:	2b12      	cmp	r3, #18
 80020cc:	d859      	bhi.n	8002182 <HAL_GPIO_Init+0x12e>
 80020ce:	a201      	add	r2, pc, #4	@ (adr r2, 80020d4 <HAL_GPIO_Init+0x80>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	0800214f 	.word	0x0800214f
 80020d8:	08002129 	.word	0x08002129
 80020dc:	0800213b 	.word	0x0800213b
 80020e0:	0800217d 	.word	0x0800217d
 80020e4:	08002183 	.word	0x08002183
 80020e8:	08002183 	.word	0x08002183
 80020ec:	08002183 	.word	0x08002183
 80020f0:	08002183 	.word	0x08002183
 80020f4:	08002183 	.word	0x08002183
 80020f8:	08002183 	.word	0x08002183
 80020fc:	08002183 	.word	0x08002183
 8002100:	08002183 	.word	0x08002183
 8002104:	08002183 	.word	0x08002183
 8002108:	08002183 	.word	0x08002183
 800210c:	08002183 	.word	0x08002183
 8002110:	08002183 	.word	0x08002183
 8002114:	08002183 	.word	0x08002183
 8002118:	08002131 	.word	0x08002131
 800211c:	08002145 	.word	0x08002145
 8002120:	4a79      	ldr	r2, [pc, #484]	@ (8002308 <HAL_GPIO_Init+0x2b4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002126:	e02c      	b.n	8002182 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	623b      	str	r3, [r7, #32]
          break;
 800212e:	e029      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	3304      	adds	r3, #4
 8002136:	623b      	str	r3, [r7, #32]
          break;
 8002138:	e024      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	3308      	adds	r3, #8
 8002140:	623b      	str	r3, [r7, #32]
          break;
 8002142:	e01f      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	330c      	adds	r3, #12
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e01a      	b.n	8002184 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002156:	2304      	movs	r3, #4
 8002158:	623b      	str	r3, [r7, #32]
          break;
 800215a:	e013      	b.n	8002184 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d105      	bne.n	8002170 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002164:	2308      	movs	r3, #8
 8002166:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	611a      	str	r2, [r3, #16]
          break;
 800216e:	e009      	b.n	8002184 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002170:	2308      	movs	r3, #8
 8002172:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	615a      	str	r2, [r3, #20]
          break;
 800217a:	e003      	b.n	8002184 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
          break;
 8002180:	e000      	b.n	8002184 <HAL_GPIO_Init+0x130>
          break;
 8002182:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2bff      	cmp	r3, #255	@ 0xff
 8002188:	d801      	bhi.n	800218e <HAL_GPIO_Init+0x13a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	e001      	b.n	8002192 <HAL_GPIO_Init+0x13e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3304      	adds	r3, #4
 8002192:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2bff      	cmp	r3, #255	@ 0xff
 8002198:	d802      	bhi.n	80021a0 <HAL_GPIO_Init+0x14c>
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	e002      	b.n	80021a6 <HAL_GPIO_Init+0x152>
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	3b08      	subs	r3, #8
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	210f      	movs	r1, #15
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	401a      	ands	r2, r3
 80021b8:	6a39      	ldr	r1, [r7, #32]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	431a      	orrs	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 80b1 	beq.w	8002336 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d4:	4b4d      	ldr	r3, [pc, #308]	@ (800230c <HAL_GPIO_Init+0x2b8>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a4c      	ldr	r2, [pc, #304]	@ (800230c <HAL_GPIO_Init+0x2b8>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b4a      	ldr	r3, [pc, #296]	@ (800230c <HAL_GPIO_Init+0x2b8>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021ec:	4a48      	ldr	r2, [pc, #288]	@ (8002310 <HAL_GPIO_Init+0x2bc>)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	4013      	ands	r3, r2
 800220e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a40      	ldr	r2, [pc, #256]	@ (8002314 <HAL_GPIO_Init+0x2c0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <HAL_GPIO_Init+0x1ec>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a3f      	ldr	r2, [pc, #252]	@ (8002318 <HAL_GPIO_Init+0x2c4>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00d      	beq.n	800223c <HAL_GPIO_Init+0x1e8>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3e      	ldr	r2, [pc, #248]	@ (800231c <HAL_GPIO_Init+0x2c8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d007      	beq.n	8002238 <HAL_GPIO_Init+0x1e4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3d      	ldr	r2, [pc, #244]	@ (8002320 <HAL_GPIO_Init+0x2cc>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_GPIO_Init+0x1e0>
 8002230:	2303      	movs	r3, #3
 8002232:	e006      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 8002234:	2304      	movs	r3, #4
 8002236:	e004      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 8002238:	2302      	movs	r3, #2
 800223a:	e002      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <HAL_GPIO_Init+0x1ee>
 8002240:	2300      	movs	r3, #0
 8002242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002244:	f002 0203 	and.w	r2, r2, #3
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	4093      	lsls	r3, r2
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002252:	492f      	ldr	r1, [pc, #188]	@ (8002310 <HAL_GPIO_Init+0x2bc>)
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	3302      	adds	r3, #2
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800226c:	4b2d      	ldr	r3, [pc, #180]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	492c      	ldr	r1, [pc, #176]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	608b      	str	r3, [r1, #8]
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800227a:	4b2a      	ldr	r3, [pc, #168]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	43db      	mvns	r3, r3
 8002282:	4928      	ldr	r1, [pc, #160]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 8002284:	4013      	ands	r3, r2
 8002286:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002294:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	4922      	ldr	r1, [pc, #136]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	60cb      	str	r3, [r1, #12]
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022a2:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	491e      	ldr	r1, [pc, #120]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022bc:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4918      	ldr	r1, [pc, #96]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
 80022c8:	e006      	b.n	80022d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022ca:	4b16      	ldr	r3, [pc, #88]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	4914      	ldr	r1, [pc, #80]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d021      	beq.n	8002328 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	490e      	ldr	r1, [pc, #56]	@ (8002324 <HAL_GPIO_Init+0x2d0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
 80022f0:	e021      	b.n	8002336 <HAL_GPIO_Init+0x2e2>
 80022f2:	bf00      	nop
 80022f4:	10320000 	.word	0x10320000
 80022f8:	10310000 	.word	0x10310000
 80022fc:	10220000 	.word	0x10220000
 8002300:	10210000 	.word	0x10210000
 8002304:	10120000 	.word	0x10120000
 8002308:	10110000 	.word	0x10110000
 800230c:	40021000 	.word	0x40021000
 8002310:	40010000 	.word	0x40010000
 8002314:	40010800 	.word	0x40010800
 8002318:	40010c00 	.word	0x40010c00
 800231c:	40011000 	.word	0x40011000
 8002320:	40011400 	.word	0x40011400
 8002324:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HAL_GPIO_Init+0x304>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	43db      	mvns	r3, r3
 8002330:	4909      	ldr	r1, [pc, #36]	@ (8002358 <HAL_GPIO_Init+0x304>)
 8002332:	4013      	ands	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	3301      	adds	r3, #1
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	f47f ae8e 	bne.w	8002068 <HAL_GPIO_Init+0x14>
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	372c      	adds	r7, #44	@ 0x2c
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40010400 	.word	0x40010400

0800235c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
 8002368:	4613      	mov	r3, r2
 800236a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002378:	e003      	b.n	8002382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	611a      	str	r2, [r3, #16]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800239e:	887a      	ldrh	r2, [r7, #2]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4013      	ands	r3, r2
 80023a4:	041a      	lsls	r2, r3, #16
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	43d9      	mvns	r1, r3
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	400b      	ands	r3, r1
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	611a      	str	r2, [r3, #16]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
	...

080023c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023ca:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023d6:	4a05      	ldr	r2, [pc, #20]	@ (80023ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	4618      	mov	r0, r3
 80023e0:	f000 f806 	bl	80023f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40010400 	.word	0x40010400

080023f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e12b      	b.n	800266e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff f838 	bl	80014a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2224      	movs	r2, #36	@ 0x24
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002468:	f002 ffb2 	bl	80053d0 <HAL_RCC_GetPCLK1Freq>
 800246c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4a81      	ldr	r2, [pc, #516]	@ (8002678 <HAL_I2C_Init+0x274>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d807      	bhi.n	8002488 <HAL_I2C_Init+0x84>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a80      	ldr	r2, [pc, #512]	@ (800267c <HAL_I2C_Init+0x278>)
 800247c:	4293      	cmp	r3, r2
 800247e:	bf94      	ite	ls
 8002480:	2301      	movls	r3, #1
 8002482:	2300      	movhi	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e006      	b.n	8002496 <HAL_I2C_Init+0x92>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a7d      	ldr	r2, [pc, #500]	@ (8002680 <HAL_I2C_Init+0x27c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0e7      	b.n	800266e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a78      	ldr	r2, [pc, #480]	@ (8002684 <HAL_I2C_Init+0x280>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	0c9b      	lsrs	r3, r3, #18
 80024a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002678 <HAL_I2C_Init+0x274>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d802      	bhi.n	80024d8 <HAL_I2C_Init+0xd4>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3301      	adds	r3, #1
 80024d6:	e009      	b.n	80024ec <HAL_I2C_Init+0xe8>
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	4a69      	ldr	r2, [pc, #420]	@ (8002688 <HAL_I2C_Init+0x284>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	3301      	adds	r3, #1
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	495c      	ldr	r1, [pc, #368]	@ (8002678 <HAL_I2C_Init+0x274>)
 8002508:	428b      	cmp	r3, r1
 800250a:	d819      	bhi.n	8002540 <HAL_I2C_Init+0x13c>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e59      	subs	r1, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fbb1 f3f3 	udiv	r3, r1, r3
 800251a:	1c59      	adds	r1, r3, #1
 800251c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002520:	400b      	ands	r3, r1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_I2C_Init+0x138>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1e59      	subs	r1, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	fbb1 f3f3 	udiv	r3, r1, r3
 8002534:	3301      	adds	r3, #1
 8002536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253a:	e051      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 800253c:	2304      	movs	r3, #4
 800253e:	e04f      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d111      	bne.n	800256c <HAL_I2C_Init+0x168>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1e58      	subs	r0, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	440b      	add	r3, r1
 8002556:	fbb0 f3f3 	udiv	r3, r0, r3
 800255a:	3301      	adds	r3, #1
 800255c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002560:	2b00      	cmp	r3, #0
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	e012      	b.n	8002592 <HAL_I2C_Init+0x18e>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1e58      	subs	r0, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	0099      	lsls	r1, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002582:	3301      	adds	r3, #1
 8002584:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_Init+0x196>
 8002596:	2301      	movs	r3, #1
 8002598:	e022      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10e      	bne.n	80025c0 <HAL_I2C_Init+0x1bc>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1e58      	subs	r0, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6859      	ldr	r1, [r3, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	440b      	add	r3, r1
 80025b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025be:	e00f      	b.n	80025e0 <HAL_I2C_Init+0x1dc>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1e58      	subs	r0, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	0099      	lsls	r1, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	6809      	ldr	r1, [r1, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800260e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6911      	ldr	r1, [r2, #16]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68d2      	ldr	r2, [r2, #12]
 800261a:	4311      	orrs	r1, r2
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	430b      	orrs	r3, r1
 8002622:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	000186a0 	.word	0x000186a0
 800267c:	001e847f 	.word	0x001e847f
 8002680:	003d08ff 	.word	0x003d08ff
 8002684:	431bde83 	.word	0x431bde83
 8002688:	10624dd3 	.word	0x10624dd3

0800268c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269e:	2b80      	cmp	r3, #128	@ 0x80
 80026a0:	d103      	bne.n	80026aa <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	611a      	str	r2, [r3, #16]
  }
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	461a      	mov	r2, r3
 80026c0:	460b      	mov	r3, r1
 80026c2:	817b      	strh	r3, [r7, #10]
 80026c4:	4613      	mov	r3, r2
 80026c6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	f040 8101 	bne.w	80028dc <HAL_I2C_Master_Transmit_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80026da:	4b83      	ldr	r3, [pc, #524]	@ (80028e8 <HAL_I2C_Master_Transmit_DMA+0x234>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	08db      	lsrs	r3, r3, #3
 80026e0:	4a82      	ldr	r2, [pc, #520]	@ (80028ec <HAL_I2C_Master_Transmit_DMA+0x238>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	0a1a      	lsrs	r2, r3, #8
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	009a      	lsls	r2, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d112      	bne.n	8002726 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	f043 0220 	orr.w	r2, r3, #32
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002722:	2302      	movs	r3, #2
 8002724:	e0db      	b.n	80028de <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b02      	cmp	r3, #2
 8002732:	d0df      	beq.n	80026f4 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_I2C_Master_Transmit_DMA+0x8e>
 800273e:	2302      	movs	r3, #2
 8002740:	e0cd      	b.n	80028de <HAL_I2C_Master_Transmit_DMA+0x22a>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b01      	cmp	r3, #1
 8002756:	d007      	beq.n	8002768 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002776:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2221      	movs	r2, #33	@ 0x21
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2210      	movs	r2, #16
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	893a      	ldrh	r2, [r7, #8]
 8002798:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4a52      	ldr	r2, [pc, #328]	@ (80028f0 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 80027a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80027aa:	897a      	ldrh	r2, [r7, #10]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d073      	beq.n	80028a0 <HAL_I2C_Master_Transmit_DMA+0x1ec>
    {
      if (hi2c->hdmatx != NULL)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d022      	beq.n	8002806 <HAL_I2C_Master_Transmit_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c4:	4a4b      	ldr	r2, [pc, #300]	@ (80028f4 <HAL_I2C_Master_Transmit_DMA+0x240>)
 80027c6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027cc:	4a4a      	ldr	r2, [pc, #296]	@ (80028f8 <HAL_I2C_Master_Transmit_DMA+0x244>)
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d4:	2200      	movs	r2, #0
 80027d6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027dc:	2200      	movs	r2, #0
 80027de:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	4619      	mov	r1, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3310      	adds	r3, #16
 80027f0:	461a      	mov	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f6:	f7ff fa15 	bl	8001c24 <HAL_DMA_Start_IT>
 80027fa:	4603      	mov	r3, r0
 80027fc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d139      	bne.n	8002878 <HAL_I2C_Master_Transmit_DMA+0x1c4>
 8002804:	e013      	b.n	800282e <HAL_I2C_Master_Transmit_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e057      	b.n	80028de <HAL_I2C_Master_Transmit_DMA+0x22a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002844:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002854:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002864:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	e02f      	b.n	80028d8 <HAL_I2C_Master_Transmit_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288c:	f043 0210 	orr.w	r2, r3, #16
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e01e      	b.n	80028de <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80028ae:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028be:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80028d6:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	e000      	b.n	80028de <HAL_I2C_Master_Transmit_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000000 	.word	0x20000000
 80028ec:	14f8b589 	.word	0x14f8b589
 80028f0:	ffff0000 	.word	0xffff0000
 80028f4:	08004735 	.word	0x08004735
 80028f8:	080048f3 	.word	0x080048f3

080028fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	@ 0x28
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	460b      	mov	r3, r1
 800290a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800290c:	f7ff f822 	bl	8001954 <HAL_GetTick>
 8002910:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b20      	cmp	r3, #32
 8002920:	f040 8111 	bne.w	8002b46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2319      	movs	r3, #25
 800292a:	2201      	movs	r2, #1
 800292c:	4988      	ldr	r1, [pc, #544]	@ (8002b50 <HAL_I2C_IsDeviceReady+0x254>)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f002 f8be 	bl	8004ab0 <I2C_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800293a:	2302      	movs	r3, #2
 800293c:	e104      	b.n	8002b48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_I2C_IsDeviceReady+0x50>
 8002948:	2302      	movs	r3, #2
 800294a:	e0fd      	b.n	8002b48 <HAL_I2C_IsDeviceReady+0x24c>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b01      	cmp	r3, #1
 8002960:	d007      	beq.n	8002972 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002980:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2224      	movs	r2, #36	@ 0x24
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a70      	ldr	r2, [pc, #448]	@ (8002b54 <HAL_I2C_IsDeviceReady+0x258>)
 8002994:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f002 f87c 	bl	8004ab0 <I2C_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029cc:	d103      	bne.n	80029d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029d4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e0b6      	b.n	8002b48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029da:	897b      	ldrh	r3, [r7, #10]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80029ea:	f7fe ffb3 	bl	8001954 <HAL_GetTick>
 80029ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a1e:	e025      	b.n	8002a6c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a20:	f7fe ff98 	bl	8001954 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d302      	bcc.n	8002a36 <HAL_I2C_IsDeviceReady+0x13a>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d103      	bne.n	8002a3e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	22a0      	movs	r2, #160	@ 0xa0
 8002a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a76:	d005      	beq.n	8002a84 <HAL_I2C_IsDeviceReady+0x188>
 8002a78:	7dfb      	ldrb	r3, [r7, #23]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <HAL_I2C_IsDeviceReady+0x188>
 8002a7e:	7dbb      	ldrb	r3, [r7, #22]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0cd      	beq.n	8002a20 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d129      	bne.n	8002aee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2319      	movs	r3, #25
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4921      	ldr	r1, [pc, #132]	@ (8002b50 <HAL_I2C_IsDeviceReady+0x254>)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f001 fff0 	bl	8004ab0 <I2C_WaitOnFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e036      	b.n	8002b48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e02c      	b.n	8002b48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002afc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	2319      	movs	r3, #25
 8002b0e:	2201      	movs	r2, #1
 8002b10:	490f      	ldr	r1, [pc, #60]	@ (8002b50 <HAL_I2C_IsDeviceReady+0x254>)
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f001 ffcc 	bl	8004ab0 <I2C_WaitOnFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e012      	b.n	8002b48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	f4ff af32 	bcc.w	8002996 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
  }
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	00100002 	.word	0x00100002
 8002b54:	ffff0000 	.word	0xffff0000

08002b58 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	461a      	mov	r2, r3
 8002b64:	460b      	mov	r3, r1
 8002b66:	817b      	strh	r3, [r7, #10]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	f040 813c 	bne.w	8002dfa <HAL_I2C_Master_Seq_Transmit_DMA+0x2a2>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b90:	d005      	beq.n	8002b9e <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 8002b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d002      	beq.n	8002b9e <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 8002b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d12c      	bne.n	8002bf8 <HAL_I2C_Master_Seq_Transmit_DMA+0xa0>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b9e:	4b99      	ldr	r3, [pc, #612]	@ (8002e04 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	08db      	lsrs	r3, r3, #3
 8002ba4:	4a98      	ldr	r2, [pc, #608]	@ (8002e08 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	0a1a      	lsrs	r2, r3, #8
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009a      	lsls	r2, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d112      	bne.n	8002bea <HAL_I2C_Master_Seq_Transmit_DMA+0x92>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	f043 0220 	orr.w	r2, r3, #32
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 8002be6:	2302      	movs	r3, #2
 8002be8:	e108      	b.n	8002dfc <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d0df      	beq.n	8002bb8 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Master_Seq_Transmit_DMA+0xae>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0fa      	b.n	8002dfc <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d007      	beq.n	8002c2c <HAL_I2C_Master_Seq_Transmit_DMA+0xd4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2221      	movs	r2, #33	@ 0x21
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2210      	movs	r2, #16
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	893a      	ldrh	r2, [r7, #8]
 8002c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002c6e:	897a      	ldrh	r2, [r7, #10]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c78:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 808d 	beq.w	8002d9e <HAL_I2C_Master_Seq_Transmit_DMA+0x246>
    {
      if (hi2c->hdmatx != NULL)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d022      	beq.n	8002cd2 <HAL_I2C_Master_Seq_Transmit_DMA+0x17a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c90:	4a5e      	ldr	r2, [pc, #376]	@ (8002e0c <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 8002c92:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c98:	4a5d      	ldr	r2, [pc, #372]	@ (8002e10 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 8002c9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca8:	2200      	movs	r2, #0
 8002caa:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3310      	adds	r3, #16
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	f7fe ffaf 	bl	8001c24 <HAL_DMA_Start_IT>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002cca:	7ffb      	ldrb	r3, [r7, #31]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d152      	bne.n	8002d76 <HAL_I2C_Master_Seq_Transmit_DMA+0x21e>
 8002cd0:	e013      	b.n	8002cfa <HAL_I2C_Master_Seq_Transmit_DMA+0x1a2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e080      	b.n	8002dfc <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d08:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b11      	cmp	r3, #17
 8002d0e:	d10c      	bne.n	8002d2a <HAL_I2C_Master_Seq_Transmit_DMA+0x1d2>
 8002d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d12:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002d16:	d003      	beq.n	8002d20 <HAL_I2C_Master_Seq_Transmit_DMA+0x1c8>
 8002d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002d1e:	d101      	bne.n	8002d24 <HAL_I2C_Master_Seq_Transmit_DMA+0x1cc>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ce>
 8002d24:	2300      	movs	r3, #0
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d107      	bne.n	8002d3a <HAL_I2C_Master_Seq_Transmit_DMA+0x1e2>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d38:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 8002d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d005      	beq.n	8002d54 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 8002d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d002      	beq.n	8002d54 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 8002d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d107      	bne.n	8002d64 <HAL_I2C_Master_Seq_Transmit_DMA+0x20c>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d62:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	e03f      	b.n	8002df6 <HAL_I2C_Master_Seq_Transmit_DMA+0x29e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	f043 0210 	orr.w	r2, r3, #16
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e02e      	b.n	8002dfc <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dac:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b11      	cmp	r3, #17
 8002db2:	d10c      	bne.n	8002dce <HAL_I2C_Master_Seq_Transmit_DMA+0x276>
 8002db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002dba:	d003      	beq.n	8002dc4 <HAL_I2C_Master_Seq_Transmit_DMA+0x26c>
 8002dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbe:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002dc2:	d101      	bne.n	8002dc8 <HAL_I2C_Master_Seq_Transmit_DMA+0x270>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <HAL_I2C_Master_Seq_Transmit_DMA+0x272>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d107      	bne.n	8002dde <HAL_I2C_Master_Seq_Transmit_DMA+0x286>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ddc:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002df4:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e000      	b.n	8002dfc <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
  }
  else
  {
    return HAL_BUSY;
 8002dfa:	2302      	movs	r3, #2
  }
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3720      	adds	r7, #32
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000000 	.word	0x20000000
 8002e08:	14f8b589 	.word	0x14f8b589
 8002e0c:	08004735 	.word	0x08004735
 8002e10:	080048f3 	.word	0x080048f3

08002e14 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	460b      	mov	r3, r1
 8002e22:	817b      	strh	r3, [r7, #10]
 8002e24:	4613      	mov	r3, r2
 8002e26:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e30:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002e34:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	f040 8195 	bne.w	800316e <HAL_I2C_Master_Seq_Receive_DMA+0x35a>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e52:	d005      	beq.n	8002e60 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 8002e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d002      	beq.n	8002e60 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 8002e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d12c      	bne.n	8002eba <HAL_I2C_Master_Seq_Receive_DMA+0xa6>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e60:	4b8d      	ldr	r3, [pc, #564]	@ (8003098 <HAL_I2C_Master_Seq_Receive_DMA+0x284>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	08db      	lsrs	r3, r3, #3
 8002e66:	4a8d      	ldr	r2, [pc, #564]	@ (800309c <HAL_I2C_Master_Seq_Receive_DMA+0x288>)
 8002e68:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6c:	0a1a      	lsrs	r2, r3, #8
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	009a      	lsls	r2, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d112      	bne.n	8002eac <HAL_I2C_Master_Seq_Receive_DMA+0x98>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	f043 0220 	orr.w	r2, r3, #32
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e161      	b.n	8003170 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d0df      	beq.n	8002e7a <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_I2C_Master_Seq_Receive_DMA+0xb4>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e153      	b.n	8003170 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d007      	beq.n	8002eee <HAL_I2C_Master_Seq_Receive_DMA+0xda>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002efc:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f0c:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2222      	movs	r2, #34	@ 0x22
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2210      	movs	r2, #16
 8002f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	893a      	ldrh	r2, [r7, #8]
 8002f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002f40:	897a      	ldrh	r2, [r7, #10]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4a:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80de 	beq.w	8003112 <HAL_I2C_Master_Seq_Receive_DMA+0x2fe>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d12a      	bne.n	8002fb6 <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
 8002f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d002      	beq.n	8002f6c <HAL_I2C_Master_Seq_Receive_DMA+0x158>
 8002f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d124      	bne.n	8002fb6 <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b12      	cmp	r3, #18
 8002f70:	d118      	bne.n	8002fa4 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f80:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f90:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fa0:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8002fa2:	e022      	b.n	8002fea <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fb2:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8002fb4:	e019      	b.n	8002fea <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fc4:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 8002fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d006      	beq.n	8002fda <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 8002fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fce:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002fd2:	d002      	beq.n	8002fda <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 8002fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d107      	bne.n	8002fea <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002fe8:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d022      	beq.n	8003038 <HAL_I2C_Master_Seq_Receive_DMA+0x224>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80030a0 <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 8002ff8:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffe:	4a29      	ldr	r2, [pc, #164]	@ (80030a4 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 8003000:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003006:	2200      	movs	r2, #0
 8003008:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300e:	2200      	movs	r2, #0
 8003010:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3310      	adds	r3, #16
 800301c:	4619      	mov	r1, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	461a      	mov	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	f7fe fdfc 	bl	8001c24 <HAL_DMA_Start_IT>
 800302c:	4603      	mov	r3, r0
 800302e:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 8003030:	7efb      	ldrb	r3, [r7, #27]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d159      	bne.n	80030ea <HAL_I2C_Master_Seq_Receive_DMA+0x2d6>
 8003036:	e013      	b.n	8003060 <HAL_I2C_Master_Seq_Receive_DMA+0x24c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e087      	b.n	8003170 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b12      	cmp	r3, #18
 8003064:	d10c      	bne.n	8003080 <HAL_I2C_Master_Seq_Receive_DMA+0x26c>
 8003066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003068:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800306c:	d003      	beq.n	8003076 <HAL_I2C_Master_Seq_Receive_DMA+0x262>
 800306e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003070:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003074:	d101      	bne.n	800307a <HAL_I2C_Master_Seq_Receive_DMA+0x266>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_I2C_Master_Seq_Receive_DMA+0x268>
 800307a:	2300      	movs	r3, #0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d113      	bne.n	80030a8 <HAL_I2C_Master_Seq_Receive_DMA+0x294>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800308e:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 8003090:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	e00a      	b.n	80030ae <HAL_I2C_Master_Seq_Receive_DMA+0x29a>
 8003098:	20000000 	.word	0x20000000
 800309c:	14f8b589 	.word	0x14f8b589
 80030a0:	08004735 	.word	0x08004735
 80030a4:	080048f3 	.word	0x080048f3
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 80030a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030ac:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 80030b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d005      	beq.n	80030c8 <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d002      	beq.n	80030c8 <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 80030c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d107      	bne.n	80030d8 <HAL_I2C_Master_Seq_Receive_DMA+0x2c4>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030d6:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	e03f      	b.n	800316a <HAL_I2C_Master_Seq_Receive_DMA+0x356>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	f043 0210 	orr.w	r2, r3, #16
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e02e      	b.n	8003170 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003120:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b12      	cmp	r3, #18
 8003126:	d10c      	bne.n	8003142 <HAL_I2C_Master_Seq_Receive_DMA+0x32e>
 8003128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800312e:	d003      	beq.n	8003138 <HAL_I2C_Master_Seq_Receive_DMA+0x324>
 8003130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003132:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003136:	d101      	bne.n	800313c <HAL_I2C_Master_Seq_Receive_DMA+0x328>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_I2C_Master_Seq_Receive_DMA+0x32a>
 800313c:	2300      	movs	r3, #0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_I2C_Master_Seq_Receive_DMA+0x33e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003150:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	e000      	b.n	8003170 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003190:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003198:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d003      	beq.n	80031b0 <HAL_I2C_EV_IRQHandler+0x38>
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b40      	cmp	r3, #64	@ 0x40
 80031ac:	f040 80c1 	bne.w	8003332 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10d      	bne.n	80031e6 <HAL_I2C_EV_IRQHandler+0x6e>
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80031d0:	d003      	beq.n	80031da <HAL_I2C_EV_IRQHandler+0x62>
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80031d8:	d101      	bne.n	80031de <HAL_I2C_EV_IRQHandler+0x66>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_I2C_EV_IRQHandler+0x68>
 80031de:	2300      	movs	r3, #0
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	f000 8132 	beq.w	800344a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00c      	beq.n	800320a <HAL_I2C_EV_IRQHandler+0x92>
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	0a5b      	lsrs	r3, r3, #9
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d006      	beq.n	800320a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f001 fd03 	bl	8004c08 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fce5 	bl	8003bd2 <I2C_Master_SB>
 8003208:	e092      	b.n	8003330 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	08db      	lsrs	r3, r3, #3
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_I2C_EV_IRQHandler+0xb2>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	0a5b      	lsrs	r3, r3, #9
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fd5a 	bl	8003cdc <I2C_Master_ADD10>
 8003228:	e082      	b.n	8003330 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <HAL_I2C_EV_IRQHandler+0xd2>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	0a5b      	lsrs	r3, r3, #9
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fd73 	bl	8003d2e <I2C_Master_ADDR>
 8003248:	e072      	b.n	8003330 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	d03b      	beq.n	80032ce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003260:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003264:	f000 80f3 	beq.w	800344e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	09db      	lsrs	r3, r3, #7
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00f      	beq.n	8003294 <HAL_I2C_EV_IRQHandler+0x11c>
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	0a9b      	lsrs	r3, r3, #10
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <HAL_I2C_EV_IRQHandler+0x11c>
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f93d 	bl	800350c <I2C_MasterTransmit_TXE>
 8003292:	e04d      	b.n	8003330 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80d6 	beq.w	800344e <HAL_I2C_EV_IRQHandler+0x2d6>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	0a5b      	lsrs	r3, r3, #9
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80cf 	beq.w	800344e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032b0:	7bbb      	ldrb	r3, [r7, #14]
 80032b2:	2b21      	cmp	r3, #33	@ 0x21
 80032b4:	d103      	bne.n	80032be <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f9c4 	bl	8003644 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032bc:	e0c7      	b.n	800344e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	2b40      	cmp	r3, #64	@ 0x40
 80032c2:	f040 80c4 	bne.w	800344e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fa32 	bl	8003730 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032cc:	e0bf      	b.n	800344e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032dc:	f000 80b7 	beq.w	800344e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	099b      	lsrs	r3, r3, #6
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00f      	beq.n	800330c <HAL_I2C_EV_IRQHandler+0x194>
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	0a9b      	lsrs	r3, r3, #10
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d009      	beq.n	800330c <HAL_I2C_EV_IRQHandler+0x194>
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d103      	bne.n	800330c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 faab 	bl	8003860 <I2C_MasterReceive_RXNE>
 800330a:	e011      	b.n	8003330 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 809a 	beq.w	800344e <HAL_I2C_EV_IRQHandler+0x2d6>
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	0a5b      	lsrs	r3, r3, #9
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8093 	beq.w	800344e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 fb61 	bl	80039f0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800332e:	e08e      	b.n	800344e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003330:	e08d      	b.n	800344e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d004      	beq.n	8003344 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	61fb      	str	r3, [r7, #28]
 8003342:	e007      	b.n	8003354 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <HAL_I2C_EV_IRQHandler+0x20e>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	0a5b      	lsrs	r3, r3, #9
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00c      	beq.n	8003386 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800337c:	69b9      	ldr	r1, [r7, #24]
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 ff2c 	bl	80041dc <I2C_Slave_ADDR>
 8003384:	e066      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d009      	beq.n	80033a6 <HAL_I2C_EV_IRQHandler+0x22e>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	0a5b      	lsrs	r3, r3, #9
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 ff66 	bl	8004270 <I2C_Slave_STOPF>
 80033a4:	e056      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80033a6:	7bbb      	ldrb	r3, [r7, #14]
 80033a8:	2b21      	cmp	r3, #33	@ 0x21
 80033aa:	d002      	beq.n	80033b2 <HAL_I2C_EV_IRQHandler+0x23a>
 80033ac:	7bbb      	ldrb	r3, [r7, #14]
 80033ae:	2b29      	cmp	r3, #41	@ 0x29
 80033b0:	d125      	bne.n	80033fe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	09db      	lsrs	r3, r3, #7
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00f      	beq.n	80033de <HAL_I2C_EV_IRQHandler+0x266>
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	0a9b      	lsrs	r3, r3, #10
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d009      	beq.n	80033de <HAL_I2C_EV_IRQHandler+0x266>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	089b      	lsrs	r3, r3, #2
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d103      	bne.n	80033de <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fe44 	bl	8004064 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033dc:	e039      	b.n	8003452 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	089b      	lsrs	r3, r3, #2
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d033      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x2da>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	0a5b      	lsrs	r3, r3, #9
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d02d      	beq.n	8003452 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fe71 	bl	80040de <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033fc:	e029      	b.n	8003452 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	099b      	lsrs	r3, r3, #6
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00f      	beq.n	800342a <HAL_I2C_EV_IRQHandler+0x2b2>
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	0a9b      	lsrs	r3, r3, #10
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	089b      	lsrs	r3, r3, #2
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d103      	bne.n	800342a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fe7b 	bl	800411e <I2C_SlaveReceive_RXNE>
 8003428:	e014      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00e      	beq.n	8003454 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	0a5b      	lsrs	r3, r3, #9
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fea9 	bl	800419a <I2C_SlaveReceive_BTF>
 8003448:	e004      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800344a:	bf00      	nop
 800344c:	e002      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003452:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003454:	3720      	adds	r7, #32
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	70fb      	strb	r3, [r7, #3]
 800348a:	4613      	mov	r3, r2
 800348c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003500:	b2db      	uxtb	r3, r3
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr

0800350c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003522:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003528:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352e:	2b00      	cmp	r3, #0
 8003530:	d150      	bne.n	80035d4 <I2C_MasterTransmit_TXE+0xc8>
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	2b21      	cmp	r3, #33	@ 0x21
 8003536:	d14d      	bne.n	80035d4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b08      	cmp	r3, #8
 800353c:	d01d      	beq.n	800357a <I2C_MasterTransmit_TXE+0x6e>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b20      	cmp	r3, #32
 8003542:	d01a      	beq.n	800357a <I2C_MasterTransmit_TXE+0x6e>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800354a:	d016      	beq.n	800357a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800355a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2211      	movs	r2, #17
 8003560:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2220      	movs	r2, #32
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd fa36 	bl	80009e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003578:	e060      	b.n	800363c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003588:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003598:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b40      	cmp	r3, #64	@ 0x40
 80035b2:	d107      	bne.n	80035c4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f7ff ff74 	bl	80034aa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035c2:	e03b      	b.n	800363c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7fd fa09 	bl	80009e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035d2:	e033      	b.n	800363c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b21      	cmp	r3, #33	@ 0x21
 80035d8:	d005      	beq.n	80035e6 <I2C_MasterTransmit_TXE+0xda>
 80035da:	7bbb      	ldrb	r3, [r7, #14]
 80035dc:	2b40      	cmp	r3, #64	@ 0x40
 80035de:	d12d      	bne.n	800363c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80035e0:	7bfb      	ldrb	r3, [r7, #15]
 80035e2:	2b22      	cmp	r3, #34	@ 0x22
 80035e4:	d12a      	bne.n	800363c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d108      	bne.n	8003602 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035fe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003600:	e01c      	b.n	800363c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b40      	cmp	r3, #64	@ 0x40
 800360c:	d103      	bne.n	8003616 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f88e 	bl	8003730 <I2C_MemoryTransmit_TXE_BTF>
}
 8003614:	e012      	b.n	800363c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	781a      	ldrb	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800363a:	e7ff      	b.n	800363c <I2C_MasterTransmit_TXE+0x130>
 800363c:	bf00      	nop
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003650:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b21      	cmp	r3, #33	@ 0x21
 800365c:	d164      	bne.n	8003728 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	d012      	beq.n	800368e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800368c:	e04c      	b.n	8003728 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b08      	cmp	r3, #8
 8003692:	d01d      	beq.n	80036d0 <I2C_MasterTransmit_BTF+0x8c>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b20      	cmp	r3, #32
 8003698:	d01a      	beq.n	80036d0 <I2C_MasterTransmit_BTF+0x8c>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036a0:	d016      	beq.n	80036d0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036b0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2211      	movs	r2, #17
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7fd f98b 	bl	80009e4 <HAL_I2C_MasterTxCpltCallback>
}
 80036ce:	e02b      	b.n	8003728 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036de:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2220      	movs	r2, #32
 80036fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b40      	cmp	r3, #64	@ 0x40
 8003708:	d107      	bne.n	800371a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff fec9 	bl	80034aa <HAL_I2C_MemTxCpltCallback>
}
 8003718:	e006      	b.n	8003728 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fd f95e 	bl	80009e4 <HAL_I2C_MasterTxCpltCallback>
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800373e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003744:	2b00      	cmp	r3, #0
 8003746:	d11d      	bne.n	8003784 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10b      	bne.n	8003768 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003754:	b2da      	uxtb	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003760:	1c9a      	adds	r2, r3, #2
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003766:	e077      	b.n	8003858 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800376c:	b29b      	uxth	r3, r3
 800376e:	121b      	asrs	r3, r3, #8
 8003770:	b2da      	uxtb	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003782:	e069      	b.n	8003858 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003788:	2b01      	cmp	r3, #1
 800378a:	d10b      	bne.n	80037a4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003790:	b2da      	uxtb	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80037a2:	e059      	b.n	8003858 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d152      	bne.n	8003852 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b22      	cmp	r3, #34	@ 0x22
 80037b0:	d10d      	bne.n	80037ce <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037c0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80037cc:	e044      	b.n	8003858 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d015      	beq.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	2b21      	cmp	r3, #33	@ 0x21
 80037dc:	d112      	bne.n	8003804 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003802:	e029      	b.n	8003858 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d124      	bne.n	8003858 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b21      	cmp	r3, #33	@ 0x21
 8003812:	d121      	bne.n	8003858 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003822:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003832:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff fe2d 	bl	80034aa <HAL_I2C_MemTxCpltCallback>
}
 8003850:	e002      	b.n	8003858 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fe ff1a 	bl	800268c <I2C_Flush_DR>
}
 8003858:	bf00      	nop
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b22      	cmp	r3, #34	@ 0x22
 8003872:	f040 80b9 	bne.w	80039e8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003880:	b29b      	uxth	r3, r3
 8003882:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b03      	cmp	r3, #3
 8003888:	d921      	bls.n	80038ce <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	f040 8096 	bne.w	80039e8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038ca:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80038cc:	e08c      	b.n	80039e8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d07f      	beq.n	80039d6 <I2C_MasterReceive_RXNE+0x176>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d002      	beq.n	80038e2 <I2C_MasterReceive_RXNE+0x82>
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d179      	bne.n	80039d6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f001 f95e 	bl	8004ba4 <I2C_WaitOnSTOPRequestThroughIT>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d14c      	bne.n	8003988 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038fc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800390c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b40      	cmp	r3, #64	@ 0x40
 8003946:	d10a      	bne.n	800395e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff fdb0 	bl	80034bc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800395c:	e044      	b.n	80039e8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d002      	beq.n	8003972 <I2C_MasterReceive_RXNE+0x112>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b20      	cmp	r3, #32
 8003970:	d103      	bne.n	800397a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	@ 0x30
 8003978:	e002      	b.n	8003980 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2212      	movs	r2, #18
 800397e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7fd f83d 	bl	8000a00 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003986:	e02f      	b.n	80039e8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003996:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff fd7d 	bl	80034ce <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80039d4:	e008      	b.n	80039e8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e4:	605a      	str	r2, [r3, #4]
}
 80039e6:	e7ff      	b.n	80039e8 <I2C_MasterReceive_RXNE+0x188>
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d11b      	bne.n	8003a40 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a16:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003a3e:	e0c4      	b.n	8003bca <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	d129      	bne.n	8003a9e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a58:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d00a      	beq.n	8003a76 <I2C_MasterReceive_BTF+0x86>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d007      	beq.n	8003a76 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a74:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003a9c:	e095      	b.n	8003bca <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d17d      	bne.n	8003ba4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d002      	beq.n	8003ab4 <I2C_MasterReceive_BTF+0xc4>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d108      	bne.n	8003ac6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	e016      	b.n	8003af4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b04      	cmp	r3, #4
 8003aca:	d002      	beq.n	8003ad2 <I2C_MasterReceive_BTF+0xe2>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d108      	bne.n	8003ae4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e007      	b.n	8003af4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b4e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b40      	cmp	r3, #64	@ 0x40
 8003b62:	d10a      	bne.n	8003b7a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7ff fca2 	bl	80034bc <HAL_I2C_MemRxCpltCallback>
}
 8003b78:	e027      	b.n	8003bca <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d002      	beq.n	8003b8e <I2C_MasterReceive_BTF+0x19e>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d103      	bne.n	8003b96 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b94:	e002      	b.n	8003b9c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2212      	movs	r2, #18
 8003b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fc ff2f 	bl	8000a00 <HAL_I2C_MasterRxCpltCallback>
}
 8003ba2:	e012      	b.n	8003bca <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b40      	cmp	r3, #64	@ 0x40
 8003be4:	d117      	bne.n	8003c16 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bfe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003c00:	e067      	b.n	8003cd2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	611a      	str	r2, [r3, #16]
}
 8003c14:	e05d      	b.n	8003cd2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c1e:	d133      	bne.n	8003c88 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b21      	cmp	r3, #33	@ 0x21
 8003c2a:	d109      	bne.n	8003c40 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c3c:	611a      	str	r2, [r3, #16]
 8003c3e:	e008      	b.n	8003c52 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	b2da      	uxtb	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d004      	beq.n	8003c64 <I2C_Master_SB+0x92>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d108      	bne.n	8003c76 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d032      	beq.n	8003cd2 <I2C_Master_SB+0x100>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d02d      	beq.n	8003cd2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c84:	605a      	str	r2, [r3, #4]
}
 8003c86:	e024      	b.n	8003cd2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10e      	bne.n	8003cae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	11db      	asrs	r3, r3, #7
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	f003 0306 	and.w	r3, r3, #6
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	f063 030f 	orn	r3, r3, #15
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	611a      	str	r2, [r3, #16]
}
 8003cac:	e011      	b.n	8003cd2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d10d      	bne.n	8003cd2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	11db      	asrs	r3, r3, #7
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f003 0306 	and.w	r3, r3, #6
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f063 030e 	orn	r3, r3, #14
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	611a      	str	r2, [r3, #16]
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <I2C_Master_ADD10+0x26>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d108      	bne.n	8003d14 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00c      	beq.n	8003d24 <I2C_Master_ADD10+0x48>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d22:	605a      	str	r2, [r3, #4]
  }
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b091      	sub	sp, #68	@ 0x44
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d44:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b22      	cmp	r3, #34	@ 0x22
 8003d56:	f040 8174 	bne.w	8004042 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10f      	bne.n	8003d82 <I2C_Master_ADDR+0x54>
 8003d62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003d66:	2b40      	cmp	r3, #64	@ 0x40
 8003d68:	d10b      	bne.n	8003d82 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	e16b      	b.n	800405a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d11d      	bne.n	8003dc6 <I2C_Master_ADDR+0x98>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003d92:	d118      	bne.n	8003dc6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d94:	2300      	movs	r3, #0
 8003d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003db8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	651a      	str	r2, [r3, #80]	@ 0x50
 8003dc4:	e149      	b.n	800405a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d113      	bne.n	8003df8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e120      	b.n	800403a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	f040 808a 	bne.w	8003f18 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e0a:	d137      	bne.n	8003e7c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e1a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e2a:	d113      	bne.n	8003e54 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e3a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	e0f2      	b.n	800403a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e54:	2300      	movs	r3, #0
 8003e56:	623b      	str	r3, [r7, #32]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	623b      	str	r3, [r7, #32]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	623b      	str	r3, [r7, #32]
 8003e68:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e0de      	b.n	800403a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d02e      	beq.n	8003ee0 <I2C_Master_ADDR+0x1b2>
 8003e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d02b      	beq.n	8003ee0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8a:	2b12      	cmp	r3, #18
 8003e8c:	d102      	bne.n	8003e94 <I2C_Master_ADDR+0x166>
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d125      	bne.n	8003ee0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d00e      	beq.n	8003eb8 <I2C_Master_ADDR+0x18a>
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d00b      	beq.n	8003eb8 <I2C_Master_ADDR+0x18a>
 8003ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d008      	beq.n	8003eb8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	e007      	b.n	8003ec8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ec6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	e0ac      	b.n	800403a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	61bb      	str	r3, [r7, #24]
 8003f04:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e090      	b.n	800403a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d158      	bne.n	8003fd4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d021      	beq.n	8003f6c <I2C_Master_ADDR+0x23e>
 8003f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d01e      	beq.n	8003f6c <I2C_Master_ADDR+0x23e>
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d01b      	beq.n	8003f6c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f42:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e012      	b.n	8003f92 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f7a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fa0:	d14b      	bne.n	800403a <I2C_Master_ADDR+0x30c>
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fa8:	d00b      	beq.n	8003fc2 <I2C_Master_ADDR+0x294>
 8003faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d008      	beq.n	8003fc2 <I2C_Master_ADDR+0x294>
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d005      	beq.n	8003fc2 <I2C_Master_ADDR+0x294>
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d002      	beq.n	8003fc2 <I2C_Master_ADDR+0x294>
 8003fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d13b      	bne.n	800403a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	e032      	b.n	800403a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fe2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff2:	d117      	bne.n	8004024 <I2C_Master_ADDR+0x2f6>
 8003ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ffa:	d00b      	beq.n	8004014 <I2C_Master_ADDR+0x2e6>
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d008      	beq.n	8004014 <I2C_Master_ADDR+0x2e6>
 8004002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004004:	2b08      	cmp	r3, #8
 8004006:	d005      	beq.n	8004014 <I2C_Master_ADDR+0x2e6>
 8004008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400a:	2b10      	cmp	r3, #16
 800400c:	d002      	beq.n	8004014 <I2C_Master_ADDR+0x2e6>
 800400e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004010:	2b20      	cmp	r3, #32
 8004012:	d107      	bne.n	8004024 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004022:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004040:	e00b      	b.n	800405a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004042:	2300      	movs	r3, #0
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	68bb      	ldr	r3, [r7, #8]
}
 8004058:	e7ff      	b.n	800405a <I2C_Master_ADDR+0x32c>
 800405a:	bf00      	nop
 800405c:	3744      	adds	r7, #68	@ 0x44
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004072:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d02b      	beq.n	80040d6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	781a      	ldrb	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408e:	1c5a      	adds	r2, r3, #1
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d114      	bne.n	80040d6 <I2C_SlaveTransmit_TXE+0x72>
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b29      	cmp	r3, #41	@ 0x29
 80040b0:	d111      	bne.n	80040d6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2221      	movs	r2, #33	@ 0x21
 80040c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2228      	movs	r2, #40	@ 0x28
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff f9c2 	bl	800345a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040d6:	bf00      	nop
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d011      	beq.n	8004114 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	781a      	ldrb	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	bc80      	pop	{r7}
 800411c:	4770      	bx	lr

0800411e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d02c      	beq.n	8004192 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691a      	ldr	r2, [r3, #16]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004154:	b29b      	uxth	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d114      	bne.n	8004192 <I2C_SlaveReceive_RXNE+0x74>
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	2b2a      	cmp	r3, #42	@ 0x2a
 800416c:	d111      	bne.n	8004192 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800417c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2222      	movs	r2, #34	@ 0x22
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2228      	movs	r2, #40	@ 0x28
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff f96d 	bl	800346c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d012      	beq.n	80041d2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr

080041dc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041f6:	2b28      	cmp	r3, #40	@ 0x28
 80041f8:	d127      	bne.n	800424a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004208:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	089b      	lsrs	r3, r3, #2
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004216:	2301      	movs	r3, #1
 8004218:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	09db      	lsrs	r3, r3, #7
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	81bb      	strh	r3, [r7, #12]
 800422c:	e002      	b.n	8004234 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800423c:	89ba      	ldrh	r2, [r7, #12]
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	4619      	mov	r1, r3
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff f91b 	bl	800347e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004248:	e00e      	b.n	8004268 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424a:	2300      	movs	r3, #0
 800424c:	60bb      	str	r3, [r7, #8]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800427e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800428e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004290:	2300      	movs	r3, #0
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	60bb      	str	r3, [r7, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042bc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042cc:	d172      	bne.n	80043b4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	2b22      	cmp	r3, #34	@ 0x22
 80042d2:	d002      	beq.n	80042da <I2C_Slave_STOPF+0x6a>
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80042d8:	d135      	bne.n	8004346 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	f043 0204 	orr.w	r2, r3, #4
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800430c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004312:	4618      	mov	r0, r3
 8004314:	f7fd fe64 	bl	8001fe0 <HAL_DMA_GetState>
 8004318:	4603      	mov	r3, r0
 800431a:	2b01      	cmp	r3, #1
 800431c:	d049      	beq.n	80043b2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004322:	4a69      	ldr	r2, [pc, #420]	@ (80044c8 <I2C_Slave_STOPF+0x258>)
 8004324:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432a:	4618      	mov	r0, r3
 800432c:	f7fd fcda 	bl	8001ce4 <HAL_DMA_Abort_IT>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d03d      	beq.n	80043b2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004340:	4610      	mov	r0, r2
 8004342:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004344:	e035      	b.n	80043b2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	b29a      	uxth	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	f043 0204 	orr.w	r2, r3, #4
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004378:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437e:	4618      	mov	r0, r3
 8004380:	f7fd fe2e 	bl	8001fe0 <HAL_DMA_GetState>
 8004384:	4603      	mov	r3, r0
 8004386:	2b01      	cmp	r3, #1
 8004388:	d014      	beq.n	80043b4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438e:	4a4e      	ldr	r2, [pc, #312]	@ (80044c8 <I2C_Slave_STOPF+0x258>)
 8004390:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004396:	4618      	mov	r0, r3
 8004398:	f7fd fca4 	bl	8001ce4 <HAL_DMA_Abort_IT>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d008      	beq.n	80043b4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043ac:	4610      	mov	r0, r2
 80043ae:	4798      	blx	r3
 80043b0:	e000      	b.n	80043b4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80043b2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d03e      	beq.n	800443c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d112      	bne.n	80043f2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fc:	2b40      	cmp	r3, #64	@ 0x40
 80043fe:	d112      	bne.n	8004426 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004434:	f043 0204 	orr.w	r2, r3, #4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f843 	bl	80044d0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800444a:	e039      	b.n	80044c0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004450:	d109      	bne.n	8004466 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2228      	movs	r2, #40	@ 0x28
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff f803 	bl	800346c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b28      	cmp	r3, #40	@ 0x28
 8004470:	d111      	bne.n	8004496 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a15      	ldr	r2, [pc, #84]	@ (80044cc <I2C_Slave_STOPF+0x25c>)
 8004476:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff f802 	bl	8003498 <HAL_I2C_ListenCpltCallback>
}
 8004494:	e014      	b.n	80044c0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	2b22      	cmp	r3, #34	@ 0x22
 800449c:	d002      	beq.n	80044a4 <I2C_Slave_STOPF+0x234>
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	2b22      	cmp	r3, #34	@ 0x22
 80044a2:	d10d      	bne.n	80044c0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fe ffd6 	bl	800346c <HAL_I2C_SlaveRxCpltCallback>
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	08004961 	.word	0x08004961
 80044cc:	ffff0000 	.word	0xffff0000

080044d0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044de:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044e6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044e8:	7bbb      	ldrb	r3, [r7, #14]
 80044ea:	2b10      	cmp	r3, #16
 80044ec:	d002      	beq.n	80044f4 <I2C_ITError+0x24>
 80044ee:	7bbb      	ldrb	r3, [r7, #14]
 80044f0:	2b40      	cmp	r3, #64	@ 0x40
 80044f2:	d10a      	bne.n	800450a <I2C_ITError+0x3a>
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b22      	cmp	r3, #34	@ 0x22
 80044f8:	d107      	bne.n	800450a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004508:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004510:	2b28      	cmp	r3, #40	@ 0x28
 8004512:	d107      	bne.n	8004524 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2228      	movs	r2, #40	@ 0x28
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004522:	e015      	b.n	8004550 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800452e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004532:	d00a      	beq.n	800454a <I2C_ITError+0x7a>
 8004534:	7bfb      	ldrb	r3, [r7, #15]
 8004536:	2b60      	cmp	r3, #96	@ 0x60
 8004538:	d007      	beq.n	800454a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800455a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800455e:	d162      	bne.n	8004626 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800456e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004574:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b01      	cmp	r3, #1
 800457c:	d020      	beq.n	80045c0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004582:	4a6a      	ldr	r2, [pc, #424]	@ (800472c <I2C_ITError+0x25c>)
 8004584:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800458a:	4618      	mov	r0, r3
 800458c:	f7fd fbaa 	bl	8001ce4 <HAL_DMA_Abort_IT>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 8089 	beq.w	80046aa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045ba:	4610      	mov	r0, r2
 80045bc:	4798      	blx	r3
 80045be:	e074      	b.n	80046aa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c4:	4a59      	ldr	r2, [pc, #356]	@ (800472c <I2C_ITError+0x25c>)
 80045c6:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fd fb89 	bl	8001ce4 <HAL_DMA_Abort_IT>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d068      	beq.n	80046aa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e2:	2b40      	cmp	r3, #64	@ 0x40
 80045e4:	d10b      	bne.n	80045fe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0201 	bic.w	r2, r2, #1
 800460c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004620:	4610      	mov	r0, r2
 8004622:	4798      	blx	r3
 8004624:	e041      	b.n	80046aa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b60      	cmp	r3, #96	@ 0x60
 8004630:	d125      	bne.n	800467e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800464a:	2b40      	cmp	r3, #64	@ 0x40
 800464c:	d10b      	bne.n	8004666 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	691a      	ldr	r2, [r3, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	b2d2      	uxtb	r2, r2
 800465a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0201 	bic.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fe ff32 	bl	80034e0 <HAL_I2C_AbortCpltCallback>
 800467c:	e015      	b.n	80046aa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b40      	cmp	r3, #64	@ 0x40
 800468a:	d10b      	bne.n	80046a4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691a      	ldr	r2, [r3, #16]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004696:	b2d2      	uxtb	r2, r2
 8004698:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7fe ff12 	bl	80034ce <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10e      	bne.n	80046d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d104      	bne.n	80046d8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d007      	beq.n	80046e8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046e6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d113      	bne.n	8004724 <I2C_ITError+0x254>
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b28      	cmp	r3, #40	@ 0x28
 8004700:	d110      	bne.n	8004724 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a0a      	ldr	r2, [pc, #40]	@ (8004730 <I2C_ITError+0x260>)
 8004706:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fe feba 	bl	8003498 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	08004961 	.word	0x08004961
 8004730:	ffff0000 	.word	0xffff0000

08004734 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004748:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004750:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004756:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004766:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004774:	2200      	movs	r2, #0
 8004776:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004784:	2200      	movs	r2, #0
 8004786:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800478e:	2b21      	cmp	r3, #33	@ 0x21
 8004790:	d007      	beq.n	80047a2 <I2C_DMAXferCplt+0x6e>
 8004792:	7cfb      	ldrb	r3, [r7, #19]
 8004794:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8004798:	2b22      	cmp	r3, #34	@ 0x22
 800479a:	d131      	bne.n	8004800 <I2C_DMAXferCplt+0xcc>
 800479c:	7cbb      	ldrb	r3, [r7, #18]
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d12e      	bne.n	8004800 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047b0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2200      	movs	r2, #0
 80047b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80047b8:	7cfb      	ldrb	r3, [r7, #19]
 80047ba:	2b29      	cmp	r3, #41	@ 0x29
 80047bc:	d10a      	bne.n	80047d4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2221      	movs	r2, #33	@ 0x21
 80047c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2228      	movs	r2, #40	@ 0x28
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047cc:	6978      	ldr	r0, [r7, #20]
 80047ce:	f7fe fe44 	bl	800345a <HAL_I2C_SlaveTxCpltCallback>
 80047d2:	e00c      	b.n	80047ee <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80047d8:	d109      	bne.n	80047ee <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2222      	movs	r2, #34	@ 0x22
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2228      	movs	r2, #40	@ 0x28
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047e8:	6978      	ldr	r0, [r7, #20]
 80047ea:	f7fe fe3f 	bl	800346c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80047fc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80047fe:	e074      	b.n	80048ea <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d06e      	beq.n	80048ea <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b01      	cmp	r3, #1
 8004814:	d107      	bne.n	8004826 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004824:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004834:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800483c:	d009      	beq.n	8004852 <I2C_DMAXferCplt+0x11e>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b08      	cmp	r3, #8
 8004842:	d006      	beq.n	8004852 <I2C_DMAXferCplt+0x11e>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800484a:	d002      	beq.n	8004852 <I2C_DMAXferCplt+0x11e>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b20      	cmp	r3, #32
 8004850:	d107      	bne.n	8004862 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004860:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004870:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004880:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2200      	movs	r2, #0
 8004886:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004890:	6978      	ldr	r0, [r7, #20]
 8004892:	f7fe fe1c 	bl	80034ce <HAL_I2C_ErrorCallback>
}
 8004896:	e028      	b.n	80048ea <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2220      	movs	r2, #32
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b40      	cmp	r3, #64	@ 0x40
 80048aa:	d10a      	bne.n	80048c2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2200      	movs	r2, #0
 80048b8:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80048ba:	6978      	ldr	r0, [r7, #20]
 80048bc:	f7fe fdfe 	bl	80034bc <HAL_I2C_MemRxCpltCallback>
}
 80048c0:	e013      	b.n	80048ea <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d002      	beq.n	80048d6 <I2C_DMAXferCplt+0x1a2>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d103      	bne.n	80048de <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2200      	movs	r2, #0
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30
 80048dc:	e002      	b.n	80048e4 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2212      	movs	r2, #18
 80048e2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80048e4:	6978      	ldr	r0, [r7, #20]
 80048e6:	f7fc f88b 	bl	8000a00 <HAL_I2C_MasterRxCpltCallback>
}
 80048ea:	bf00      	nop
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490c:	2200      	movs	r2, #0
 800490e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491c:	2200      	movs	r2, #0
 800491e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800492e:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	f043 0210 	orr.w	r2, r3, #16
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f7fe fdbb 	bl	80034ce <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004958:	bf00      	nop
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004978:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800497a:	4b4b      	ldr	r3, [pc, #300]	@ (8004aa8 <I2C_DMAAbort+0x148>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	08db      	lsrs	r3, r3, #3
 8004980:	4a4a      	ldr	r2, [pc, #296]	@ (8004aac <I2C_DMAAbort+0x14c>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	0a1a      	lsrs	r2, r3, #8
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	00da      	lsls	r2, r3, #3
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d106      	bne.n	80049a8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	f043 0220 	orr.w	r2, r3, #32
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80049a6:	e00a      	b.n	80049be <I2C_DMAAbort+0x5e>
    }
    count--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049bc:	d0ea      	beq.n	8004994 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ca:	2200      	movs	r2, #0
 80049cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049da:	2200      	movs	r2, #0
 80049dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2200      	movs	r2, #0
 80049f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a00:	2200      	movs	r2, #0
 8004a02:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a10:	2200      	movs	r2, #0
 8004a12:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b60      	cmp	r3, #96	@ 0x60
 8004a2e:	d10e      	bne.n	8004a4e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2200      	movs	r2, #0
 8004a44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a46:	6978      	ldr	r0, [r7, #20]
 8004a48:	f7fe fd4a 	bl	80034e0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a4c:	e027      	b.n	8004a9e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a54:	2b28      	cmp	r3, #40	@ 0x28
 8004a56:	d117      	bne.n	8004a88 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a76:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2228      	movs	r2, #40	@ 0x28
 8004a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a86:	e007      	b.n	8004a98 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a98:	6978      	ldr	r0, [r7, #20]
 8004a9a:	f7fe fd18 	bl	80034ce <HAL_I2C_ErrorCallback>
}
 8004a9e:	bf00      	nop
 8004aa0:	3718      	adds	r7, #24
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000000 	.word	0x20000000
 8004aac:	14f8b589 	.word	0x14f8b589

08004ab0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ac0:	e048      	b.n	8004b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac8:	d044      	beq.n	8004b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aca:	f7fc ff43 	bl	8001954 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d302      	bcc.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d139      	bne.n	8004b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	0c1b      	lsrs	r3, r3, #16
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d10d      	bne.n	8004b06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	43da      	mvns	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4013      	ands	r3, r2
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	e00c      	b.n	8004b20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	43da      	mvns	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4013      	ands	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d116      	bne.n	8004b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b40:	f043 0220 	orr.w	r2, r3, #32
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e023      	b.n	8004b9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	0c1b      	lsrs	r3, r3, #16
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d10d      	bne.n	8004b7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	43da      	mvns	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	461a      	mov	r2, r3
 8004b78:	e00c      	b.n	8004b94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	43da      	mvns	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4013      	ands	r3, r2
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	461a      	mov	r2, r3
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d093      	beq.n	8004ac2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bb0:	4b13      	ldr	r3, [pc, #76]	@ (8004c00 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	08db      	lsrs	r3, r3, #3
 8004bb6:	4a13      	ldr	r2, [pc, #76]	@ (8004c04 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	0a1a      	lsrs	r2, r3, #8
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d107      	bne.n	8004be2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f043 0220 	orr.w	r2, r3, #32
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e008      	b.n	8004bf4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bf0:	d0e9      	beq.n	8004bc6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	20000000 	.word	0x20000000
 8004c04:	14f8b589 	.word	0x14f8b589

08004c08 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004c18:	d103      	bne.n	8004c22 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c20:	e007      	b.n	8004c32 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004c2a:	d102      	bne.n	8004c32 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2208      	movs	r2, #8
 8004c30:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr

08004c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e272      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 8087 	beq.w	8004d6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c5c:	4b92      	ldr	r3, [pc, #584]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 030c 	and.w	r3, r3, #12
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d00c      	beq.n	8004c82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c68:	4b8f      	ldr	r3, [pc, #572]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 030c 	and.w	r3, r3, #12
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d112      	bne.n	8004c9a <HAL_RCC_OscConfig+0x5e>
 8004c74:	4b8c      	ldr	r3, [pc, #560]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c80:	d10b      	bne.n	8004c9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c82:	4b89      	ldr	r3, [pc, #548]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d06c      	beq.n	8004d68 <HAL_RCC_OscConfig+0x12c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d168      	bne.n	8004d68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e24c      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca2:	d106      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x76>
 8004ca4:	4b80      	ldr	r3, [pc, #512]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a7f      	ldr	r2, [pc, #508]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004caa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	e02e      	b.n	8004d10 <HAL_RCC_OscConfig+0xd4>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x98>
 8004cba:	4b7b      	ldr	r3, [pc, #492]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7a      	ldr	r2, [pc, #488]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004cc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	4b78      	ldr	r3, [pc, #480]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a77      	ldr	r2, [pc, #476]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004ccc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e01d      	b.n	8004d10 <HAL_RCC_OscConfig+0xd4>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCC_OscConfig+0xbc>
 8004cde:	4b72      	ldr	r3, [pc, #456]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a71      	ldr	r2, [pc, #452]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4b6f      	ldr	r3, [pc, #444]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a6e      	ldr	r2, [pc, #440]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	e00b      	b.n	8004d10 <HAL_RCC_OscConfig+0xd4>
 8004cf8:	4b6b      	ldr	r3, [pc, #428]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a6a      	ldr	r2, [pc, #424]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004cfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	4b68      	ldr	r3, [pc, #416]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a67      	ldr	r2, [pc, #412]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004d0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d013      	beq.n	8004d40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d18:	f7fc fe1c 	bl	8001954 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fc fe18 	bl	8001954 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	@ 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e200      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d32:	4b5d      	ldr	r3, [pc, #372]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0xe4>
 8004d3e:	e014      	b.n	8004d6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d40:	f7fc fe08 	bl	8001954 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fc fe04 	bl	8001954 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	@ 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e1ec      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5a:	4b53      	ldr	r3, [pc, #332]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x10c>
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d063      	beq.n	8004e3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d76:	4b4c      	ldr	r3, [pc, #304]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d82:	4b49      	ldr	r3, [pc, #292]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 030c 	and.w	r3, r3, #12
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d11c      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x18c>
 8004d8e:	4b46      	ldr	r3, [pc, #280]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d116      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9a:	4b43      	ldr	r3, [pc, #268]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_RCC_OscConfig+0x176>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d001      	beq.n	8004db2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e1c0      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004db2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	4939      	ldr	r1, [pc, #228]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc6:	e03a      	b.n	8004e3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d020      	beq.n	8004e12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd0:	4b36      	ldr	r3, [pc, #216]	@ (8004eac <HAL_RCC_OscConfig+0x270>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd6:	f7fc fdbd 	bl	8001954 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dde:	f7fc fdb9 	bl	8001954 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e1a1      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df0:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	4927      	ldr	r1, [pc, #156]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]
 8004e10:	e015      	b.n	8004e3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e12:	4b26      	ldr	r3, [pc, #152]	@ (8004eac <HAL_RCC_OscConfig+0x270>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fc fd9c 	bl	8001954 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e20:	f7fc fd98 	bl	8001954 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e180      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e32:	4b1d      	ldr	r3, [pc, #116]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d03a      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d019      	beq.n	8004e86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e52:	4b17      	ldr	r3, [pc, #92]	@ (8004eb0 <HAL_RCC_OscConfig+0x274>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e58:	f7fc fd7c 	bl	8001954 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e60:	f7fc fd78 	bl	8001954 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e160      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea8 <HAL_RCC_OscConfig+0x26c>)
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004e7e:	2001      	movs	r0, #1
 8004e80:	f000 faea 	bl	8005458 <RCC_Delay>
 8004e84:	e01c      	b.n	8004ec0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e86:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <HAL_RCC_OscConfig+0x274>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8c:	f7fc fd62 	bl	8001954 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e92:	e00f      	b.n	8004eb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e94:	f7fc fd5e 	bl	8001954 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d908      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e146      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
 8004ea6:	bf00      	nop
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	42420000 	.word	0x42420000
 8004eb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb4:	4b92      	ldr	r3, [pc, #584]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e9      	bne.n	8004e94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80a6 	beq.w	800501a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ed2:	4b8b      	ldr	r3, [pc, #556]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10d      	bne.n	8004efa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ede:	4b88      	ldr	r3, [pc, #544]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	4a87      	ldr	r2, [pc, #540]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee8:	61d3      	str	r3, [r2, #28]
 8004eea:	4b85      	ldr	r3, [pc, #532]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efa:	4b82      	ldr	r3, [pc, #520]	@ (8005104 <HAL_RCC_OscConfig+0x4c8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d118      	bne.n	8004f38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f06:	4b7f      	ldr	r3, [pc, #508]	@ (8005104 <HAL_RCC_OscConfig+0x4c8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a7e      	ldr	r2, [pc, #504]	@ (8005104 <HAL_RCC_OscConfig+0x4c8>)
 8004f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f12:	f7fc fd1f 	bl	8001954 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f1a:	f7fc fd1b 	bl	8001954 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b64      	cmp	r3, #100	@ 0x64
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e103      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	4b75      	ldr	r3, [pc, #468]	@ (8005104 <HAL_RCC_OscConfig+0x4c8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f0      	beq.n	8004f1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d106      	bne.n	8004f4e <HAL_RCC_OscConfig+0x312>
 8004f40:	4b6f      	ldr	r3, [pc, #444]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	4a6e      	ldr	r2, [pc, #440]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	6213      	str	r3, [r2, #32]
 8004f4c:	e02d      	b.n	8004faa <HAL_RCC_OscConfig+0x36e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x334>
 8004f56:	4b6a      	ldr	r3, [pc, #424]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	4a69      	ldr	r2, [pc, #420]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	6213      	str	r3, [r2, #32]
 8004f62:	4b67      	ldr	r3, [pc, #412]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	4a66      	ldr	r2, [pc, #408]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	f023 0304 	bic.w	r3, r3, #4
 8004f6c:	6213      	str	r3, [r2, #32]
 8004f6e:	e01c      	b.n	8004faa <HAL_RCC_OscConfig+0x36e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b05      	cmp	r3, #5
 8004f76:	d10c      	bne.n	8004f92 <HAL_RCC_OscConfig+0x356>
 8004f78:	4b61      	ldr	r3, [pc, #388]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	4a60      	ldr	r2, [pc, #384]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004f7e:	f043 0304 	orr.w	r3, r3, #4
 8004f82:	6213      	str	r3, [r2, #32]
 8004f84:	4b5e      	ldr	r3, [pc, #376]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	4a5d      	ldr	r2, [pc, #372]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	6213      	str	r3, [r2, #32]
 8004f90:	e00b      	b.n	8004faa <HAL_RCC_OscConfig+0x36e>
 8004f92:	4b5b      	ldr	r3, [pc, #364]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	4a5a      	ldr	r2, [pc, #360]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004f98:	f023 0301 	bic.w	r3, r3, #1
 8004f9c:	6213      	str	r3, [r2, #32]
 8004f9e:	4b58      	ldr	r3, [pc, #352]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	4a57      	ldr	r2, [pc, #348]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004fa4:	f023 0304 	bic.w	r3, r3, #4
 8004fa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d015      	beq.n	8004fde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb2:	f7fc fccf 	bl	8001954 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb8:	e00a      	b.n	8004fd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fba:	f7fc fccb 	bl	8001954 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e0b1      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd0:	4b4b      	ldr	r3, [pc, #300]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0ee      	beq.n	8004fba <HAL_RCC_OscConfig+0x37e>
 8004fdc:	e014      	b.n	8005008 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fde:	f7fc fcb9 	bl	8001954 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7fc fcb5 	bl	8001954 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e09b      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ffc:	4b40      	ldr	r3, [pc, #256]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1ee      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d105      	bne.n	800501a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800500e:	4b3c      	ldr	r3, [pc, #240]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	4a3b      	ldr	r2, [pc, #236]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8005014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005018:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 8087 	beq.w	8005132 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005024:	4b36      	ldr	r3, [pc, #216]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f003 030c 	and.w	r3, r3, #12
 800502c:	2b08      	cmp	r3, #8
 800502e:	d061      	beq.n	80050f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d146      	bne.n	80050c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005038:	4b33      	ldr	r3, [pc, #204]	@ (8005108 <HAL_RCC_OscConfig+0x4cc>)
 800503a:	2200      	movs	r2, #0
 800503c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503e:	f7fc fc89 	bl	8001954 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005046:	f7fc fc85 	bl	8001954 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e06d      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005058:	4b29      	ldr	r3, [pc, #164]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f0      	bne.n	8005046 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800506c:	d108      	bne.n	8005080 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800506e:	4b24      	ldr	r3, [pc, #144]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	4921      	ldr	r1, [pc, #132]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 800507c:	4313      	orrs	r3, r2
 800507e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005080:	4b1f      	ldr	r3, [pc, #124]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a19      	ldr	r1, [r3, #32]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005090:	430b      	orrs	r3, r1
 8005092:	491b      	ldr	r1, [pc, #108]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 8005094:	4313      	orrs	r3, r2
 8005096:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005098:	4b1b      	ldr	r3, [pc, #108]	@ (8005108 <HAL_RCC_OscConfig+0x4cc>)
 800509a:	2201      	movs	r2, #1
 800509c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509e:	f7fc fc59 	bl	8001954 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a6:	f7fc fc55 	bl	8001954 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e03d      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050b8:	4b11      	ldr	r3, [pc, #68]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0f0      	beq.n	80050a6 <HAL_RCC_OscConfig+0x46a>
 80050c4:	e035      	b.n	8005132 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c6:	4b10      	ldr	r3, [pc, #64]	@ (8005108 <HAL_RCC_OscConfig+0x4cc>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050cc:	f7fc fc42 	bl	8001954 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d4:	f7fc fc3e 	bl	8001954 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e026      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050e6:	4b06      	ldr	r3, [pc, #24]	@ (8005100 <HAL_RCC_OscConfig+0x4c4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1f0      	bne.n	80050d4 <HAL_RCC_OscConfig+0x498>
 80050f2:	e01e      	b.n	8005132 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d107      	bne.n	800510c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e019      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
 8005100:	40021000 	.word	0x40021000
 8005104:	40007000 	.word	0x40007000
 8005108:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800510c:	4b0b      	ldr	r3, [pc, #44]	@ (800513c <HAL_RCC_OscConfig+0x500>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	429a      	cmp	r2, r3
 800511e:	d106      	bne.n	800512e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512a:	429a      	cmp	r2, r3
 800512c:	d001      	beq.n	8005132 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40021000 	.word	0x40021000

08005140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e0d0      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005154:	4b6a      	ldr	r3, [pc, #424]	@ (8005300 <HAL_RCC_ClockConfig+0x1c0>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d910      	bls.n	8005184 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005162:	4b67      	ldr	r3, [pc, #412]	@ (8005300 <HAL_RCC_ClockConfig+0x1c0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 0207 	bic.w	r2, r3, #7
 800516a:	4965      	ldr	r1, [pc, #404]	@ (8005300 <HAL_RCC_ClockConfig+0x1c0>)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005172:	4b63      	ldr	r3, [pc, #396]	@ (8005300 <HAL_RCC_ClockConfig+0x1c0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d001      	beq.n	8005184 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0b8      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d020      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800519c:	4b59      	ldr	r3, [pc, #356]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	4a58      	ldr	r2, [pc, #352]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80051a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051b4:	4b53      	ldr	r3, [pc, #332]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	4a52      	ldr	r2, [pc, #328]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 80051ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80051be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c0:	4b50      	ldr	r3, [pc, #320]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	494d      	ldr	r1, [pc, #308]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d040      	beq.n	8005260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d107      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e6:	4b47      	ldr	r3, [pc, #284]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d115      	bne.n	800521e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e07f      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d107      	bne.n	800520e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fe:	4b41      	ldr	r3, [pc, #260]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e073      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800520e:	4b3d      	ldr	r3, [pc, #244]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e06b      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800521e:	4b39      	ldr	r3, [pc, #228]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f023 0203 	bic.w	r2, r3, #3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	4936      	ldr	r1, [pc, #216]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 800522c:	4313      	orrs	r3, r2
 800522e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005230:	f7fc fb90 	bl	8001954 <HAL_GetTick>
 8005234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005236:	e00a      	b.n	800524e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005238:	f7fc fb8c 	bl	8001954 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005246:	4293      	cmp	r3, r2
 8005248:	d901      	bls.n	800524e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e053      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524e:	4b2d      	ldr	r3, [pc, #180]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f003 020c 	and.w	r2, r3, #12
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	429a      	cmp	r2, r3
 800525e:	d1eb      	bne.n	8005238 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005260:	4b27      	ldr	r3, [pc, #156]	@ (8005300 <HAL_RCC_ClockConfig+0x1c0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d210      	bcs.n	8005290 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526e:	4b24      	ldr	r3, [pc, #144]	@ (8005300 <HAL_RCC_ClockConfig+0x1c0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f023 0207 	bic.w	r2, r3, #7
 8005276:	4922      	ldr	r1, [pc, #136]	@ (8005300 <HAL_RCC_ClockConfig+0x1c0>)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	4313      	orrs	r3, r2
 800527c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800527e:	4b20      	ldr	r3, [pc, #128]	@ (8005300 <HAL_RCC_ClockConfig+0x1c0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d001      	beq.n	8005290 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e032      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d008      	beq.n	80052ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800529c:	4b19      	ldr	r3, [pc, #100]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4916      	ldr	r1, [pc, #88]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052ba:	4b12      	ldr	r3, [pc, #72]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	490e      	ldr	r1, [pc, #56]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80052ce:	f000 f821 	bl	8005314 <HAL_RCC_GetSysClockFreq>
 80052d2:	4602      	mov	r2, r0
 80052d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <HAL_RCC_ClockConfig+0x1c4>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	091b      	lsrs	r3, r3, #4
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	490a      	ldr	r1, [pc, #40]	@ (8005308 <HAL_RCC_ClockConfig+0x1c8>)
 80052e0:	5ccb      	ldrb	r3, [r1, r3]
 80052e2:	fa22 f303 	lsr.w	r3, r2, r3
 80052e6:	4a09      	ldr	r2, [pc, #36]	@ (800530c <HAL_RCC_ClockConfig+0x1cc>)
 80052e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80052ea:	4b09      	ldr	r3, [pc, #36]	@ (8005310 <HAL_RCC_ClockConfig+0x1d0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7fc f974 	bl	80015dc <HAL_InitTick>

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40022000 	.word	0x40022000
 8005304:	40021000 	.word	0x40021000
 8005308:	08006748 	.word	0x08006748
 800530c:	20000000 	.word	0x20000000
 8005310:	20000004 	.word	0x20000004

08005314 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	2300      	movs	r3, #0
 8005320:	60bb      	str	r3, [r7, #8]
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	2300      	movs	r3, #0
 8005328:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800532e:	4b1e      	ldr	r3, [pc, #120]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 030c 	and.w	r3, r3, #12
 800533a:	2b04      	cmp	r3, #4
 800533c:	d002      	beq.n	8005344 <HAL_RCC_GetSysClockFreq+0x30>
 800533e:	2b08      	cmp	r3, #8
 8005340:	d003      	beq.n	800534a <HAL_RCC_GetSysClockFreq+0x36>
 8005342:	e027      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005344:	4b19      	ldr	r3, [pc, #100]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005346:	613b      	str	r3, [r7, #16]
      break;
 8005348:	e027      	b.n	800539a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	0c9b      	lsrs	r3, r3, #18
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	4a17      	ldr	r2, [pc, #92]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005354:	5cd3      	ldrb	r3, [r2, r3]
 8005356:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d010      	beq.n	8005384 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005362:	4b11      	ldr	r3, [pc, #68]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	0c5b      	lsrs	r3, r3, #17
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	4a11      	ldr	r2, [pc, #68]	@ (80053b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800536e:	5cd3      	ldrb	r3, [r2, r3]
 8005370:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a0d      	ldr	r2, [pc, #52]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005376:	fb03 f202 	mul.w	r2, r3, r2
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e004      	b.n	800538e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a0c      	ldr	r2, [pc, #48]	@ (80053b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005388:	fb02 f303 	mul.w	r3, r2, r3
 800538c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	613b      	str	r3, [r7, #16]
      break;
 8005392:	e002      	b.n	800539a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005394:	4b05      	ldr	r3, [pc, #20]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x98>)
 8005396:	613b      	str	r3, [r7, #16]
      break;
 8005398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800539a:	693b      	ldr	r3, [r7, #16]
}
 800539c:	4618      	mov	r0, r3
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40021000 	.word	0x40021000
 80053ac:	007a1200 	.word	0x007a1200
 80053b0:	08006760 	.word	0x08006760
 80053b4:	08006770 	.word	0x08006770
 80053b8:	003d0900 	.word	0x003d0900

080053bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053c0:	4b02      	ldr	r3, [pc, #8]	@ (80053cc <HAL_RCC_GetHCLKFreq+0x10>)
 80053c2:	681b      	ldr	r3, [r3, #0]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr
 80053cc:	20000000 	.word	0x20000000

080053d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053d4:	f7ff fff2 	bl	80053bc <HAL_RCC_GetHCLKFreq>
 80053d8:	4602      	mov	r2, r0
 80053da:	4b05      	ldr	r3, [pc, #20]	@ (80053f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	0a1b      	lsrs	r3, r3, #8
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	4903      	ldr	r1, [pc, #12]	@ (80053f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053e6:	5ccb      	ldrb	r3, [r1, r3]
 80053e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40021000 	.word	0x40021000
 80053f4:	08006758 	.word	0x08006758

080053f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	220f      	movs	r2, #15
 8005406:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005408:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <HAL_RCC_GetClockConfig+0x58>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 0203 	and.w	r2, r3, #3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005414:	4b0e      	ldr	r3, [pc, #56]	@ (8005450 <HAL_RCC_GetClockConfig+0x58>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005420:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <HAL_RCC_GetClockConfig+0x58>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800542c:	4b08      	ldr	r3, [pc, #32]	@ (8005450 <HAL_RCC_GetClockConfig+0x58>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	08db      	lsrs	r3, r3, #3
 8005432:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800543a:	4b06      	ldr	r3, [pc, #24]	@ (8005454 <HAL_RCC_GetClockConfig+0x5c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0207 	and.w	r2, r3, #7
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr
 8005450:	40021000 	.word	0x40021000
 8005454:	40022000 	.word	0x40022000

08005458 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005460:	4b0a      	ldr	r3, [pc, #40]	@ (800548c <RCC_Delay+0x34>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a0a      	ldr	r2, [pc, #40]	@ (8005490 <RCC_Delay+0x38>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	0a5b      	lsrs	r3, r3, #9
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	fb02 f303 	mul.w	r3, r2, r3
 8005472:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005474:	bf00      	nop
  }
  while (Delay --);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1e5a      	subs	r2, r3, #1
 800547a:	60fa      	str	r2, [r7, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1f9      	bne.n	8005474 <RCC_Delay+0x1c>
}
 8005480:	bf00      	nop
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	20000000 	.word	0x20000000
 8005490:	10624dd3 	.word	0x10624dd3

08005494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e041      	b.n	800552a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f839 	bl	8005532 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4619      	mov	r1, r3
 80054d2:	4610      	mov	r0, r2
 80054d4:	f000 f99c 	bl	8005810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr

08005544 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b01      	cmp	r3, #1
 8005556:	d001      	beq.n	800555c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e03a      	b.n	80055d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f042 0201 	orr.w	r2, r2, #1
 8005572:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a18      	ldr	r2, [pc, #96]	@ (80055dc <HAL_TIM_Base_Start_IT+0x98>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d00e      	beq.n	800559c <HAL_TIM_Base_Start_IT+0x58>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005586:	d009      	beq.n	800559c <HAL_TIM_Base_Start_IT+0x58>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a14      	ldr	r2, [pc, #80]	@ (80055e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_TIM_Base_Start_IT+0x58>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a13      	ldr	r2, [pc, #76]	@ (80055e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d111      	bne.n	80055c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b06      	cmp	r3, #6
 80055ac:	d010      	beq.n	80055d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0201 	orr.w	r2, r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055be:	e007      	b.n	80055d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bc80      	pop	{r7}
 80055da:	4770      	bx	lr
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800

080055e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d020      	beq.n	800564c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d01b      	beq.n	800564c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f06f 0202 	mvn.w	r2, #2
 800561c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f8d1 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 8005638:	e005      	b.n	8005646 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f8c4 	bl	80057c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f8d3 	bl	80057ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d020      	beq.n	8005698 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01b      	beq.n	8005698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0204 	mvn.w	r2, #4
 8005668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2202      	movs	r2, #2
 800566e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f8ab 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 8005684:	e005      	b.n	8005692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f89e 	bl	80057c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f8ad 	bl	80057ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d020      	beq.n	80056e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f003 0308 	and.w	r3, r3, #8
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01b      	beq.n	80056e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0208 	mvn.w	r2, #8
 80056b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2204      	movs	r2, #4
 80056ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f003 0303 	and.w	r3, r3, #3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f885 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 80056d0:	e005      	b.n	80056de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f878 	bl	80057c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f887 	bl	80057ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d020      	beq.n	8005730 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01b      	beq.n	8005730 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0210 	mvn.w	r2, #16
 8005700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2208      	movs	r2, #8
 8005706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f85f 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 800571c:	e005      	b.n	800572a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f852 	bl	80057c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f861 	bl	80057ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00c      	beq.n	8005754 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d007      	beq.n	8005754 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0201 	mvn.w	r2, #1
 800574c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fb f964 	bl	8000a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f8c3 	bl	80058fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00c      	beq.n	800579c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f831 	bl	80057fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00c      	beq.n	80057c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0220 	mvn.w	r2, #32
 80057b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f896 	bl	80058ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057c0:	bf00      	nop
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr

080057ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc80      	pop	{r7}
 80057fc:	4770      	bx	lr

080057fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr

08005810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a2f      	ldr	r2, [pc, #188]	@ (80058e0 <TIM_Base_SetConfig+0xd0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00b      	beq.n	8005840 <TIM_Base_SetConfig+0x30>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582e:	d007      	beq.n	8005840 <TIM_Base_SetConfig+0x30>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a2c      	ldr	r2, [pc, #176]	@ (80058e4 <TIM_Base_SetConfig+0xd4>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d003      	beq.n	8005840 <TIM_Base_SetConfig+0x30>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a2b      	ldr	r2, [pc, #172]	@ (80058e8 <TIM_Base_SetConfig+0xd8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d108      	bne.n	8005852 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a22      	ldr	r2, [pc, #136]	@ (80058e0 <TIM_Base_SetConfig+0xd0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00b      	beq.n	8005872 <TIM_Base_SetConfig+0x62>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005860:	d007      	beq.n	8005872 <TIM_Base_SetConfig+0x62>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a1f      	ldr	r2, [pc, #124]	@ (80058e4 <TIM_Base_SetConfig+0xd4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d003      	beq.n	8005872 <TIM_Base_SetConfig+0x62>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a1e      	ldr	r2, [pc, #120]	@ (80058e8 <TIM_Base_SetConfig+0xd8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d108      	bne.n	8005884 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4313      	orrs	r3, r2
 8005882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a0d      	ldr	r2, [pc, #52]	@ (80058e0 <TIM_Base_SetConfig+0xd0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d103      	bne.n	80058b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f023 0201 	bic.w	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	611a      	str	r2, [r3, #16]
  }
}
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800

080058ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr

080058fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	bc80      	pop	{r7}
 800590e:	4770      	bx	lr

08005910 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005914:	4b05      	ldr	r3, [pc, #20]	@ (800592c <SysTick_Handler+0x1c>)
 8005916:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005918:	f000 f994 	bl	8005c44 <xTaskGetSchedulerState>
 800591c:	4603      	mov	r3, r0
 800591e:	2b01      	cmp	r3, #1
 8005920:	d001      	beq.n	8005926 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005922:	f000 f9e9 	bl	8005cf8 <xPortSysTickHandler>
  }
}
 8005926:	bf00      	nop
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	e000e010 	.word	0xe000e010

08005930 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	601a      	str	r2, [r3, #0]
}
 800596c:	bf00      	nop
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr

08005976 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	687a      	ldr	r2, [r7, #4]
 800598a:	6892      	ldr	r2, [r2, #8]
 800598c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6852      	ldr	r2, [r2, #4]
 8005996:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d103      	bne.n	80059aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	1e5a      	subs	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bc80      	pop	{r7}
 80059c6:	4770      	bx	lr

080059c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d2:	4b4f      	ldr	r3, [pc, #316]	@ (8005b10 <xTaskIncrementTick+0x148>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f040 8090 	bne.w	8005afc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059dc:	4b4d      	ldr	r3, [pc, #308]	@ (8005b14 <xTaskIncrementTick+0x14c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3301      	adds	r3, #1
 80059e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059e4:	4a4b      	ldr	r2, [pc, #300]	@ (8005b14 <xTaskIncrementTick+0x14c>)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d121      	bne.n	8005a34 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059f0:	4b49      	ldr	r3, [pc, #292]	@ (8005b18 <xTaskIncrementTick+0x150>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	e7fd      	b.n	8005a0e <xTaskIncrementTick+0x46>
 8005a12:	4b41      	ldr	r3, [pc, #260]	@ (8005b18 <xTaskIncrementTick+0x150>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	4b40      	ldr	r3, [pc, #256]	@ (8005b1c <xTaskIncrementTick+0x154>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a3e      	ldr	r2, [pc, #248]	@ (8005b18 <xTaskIncrementTick+0x150>)
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	4a3e      	ldr	r2, [pc, #248]	@ (8005b1c <xTaskIncrementTick+0x154>)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	4b3e      	ldr	r3, [pc, #248]	@ (8005b20 <xTaskIncrementTick+0x158>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b20 <xTaskIncrementTick+0x158>)
 8005a2e:	6013      	str	r3, [r2, #0]
 8005a30:	f000 f8e8 	bl	8005c04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a34:	4b3b      	ldr	r3, [pc, #236]	@ (8005b24 <xTaskIncrementTick+0x15c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d349      	bcc.n	8005ad2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a3e:	4b36      	ldr	r3, [pc, #216]	@ (8005b18 <xTaskIncrementTick+0x150>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a48:	4b36      	ldr	r3, [pc, #216]	@ (8005b24 <xTaskIncrementTick+0x15c>)
 8005a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4e:	601a      	str	r2, [r3, #0]
					break;
 8005a50:	e03f      	b.n	8005ad2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a52:	4b31      	ldr	r3, [pc, #196]	@ (8005b18 <xTaskIncrementTick+0x150>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d203      	bcs.n	8005a72 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a6a:	4a2e      	ldr	r2, [pc, #184]	@ (8005b24 <xTaskIncrementTick+0x15c>)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a70:	e02f      	b.n	8005ad2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	3304      	adds	r3, #4
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff ff7d 	bl	8005976 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d004      	beq.n	8005a8e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	3318      	adds	r3, #24
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff ff74 	bl	8005976 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a92:	4b25      	ldr	r3, [pc, #148]	@ (8005b28 <xTaskIncrementTick+0x160>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d903      	bls.n	8005aa2 <xTaskIncrementTick+0xda>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	4a22      	ldr	r2, [pc, #136]	@ (8005b28 <xTaskIncrementTick+0x160>)
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4a1f      	ldr	r2, [pc, #124]	@ (8005b2c <xTaskIncrementTick+0x164>)
 8005ab0:	441a      	add	r2, r3
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4610      	mov	r0, r2
 8005aba:	f7ff ff39 	bl	8005930 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b30 <xTaskIncrementTick+0x168>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d3b8      	bcc.n	8005a3e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005acc:	2301      	movs	r3, #1
 8005ace:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ad0:	e7b5      	b.n	8005a3e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ad2:	4b17      	ldr	r3, [pc, #92]	@ (8005b30 <xTaskIncrementTick+0x168>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad8:	4914      	ldr	r1, [pc, #80]	@ (8005b2c <xTaskIncrementTick+0x164>)
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d901      	bls.n	8005aee <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005aea:	2301      	movs	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005aee:	4b11      	ldr	r3, [pc, #68]	@ (8005b34 <xTaskIncrementTick+0x16c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005af6:	2301      	movs	r3, #1
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	e004      	b.n	8005b06 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005afc:	4b0e      	ldr	r3, [pc, #56]	@ (8005b38 <xTaskIncrementTick+0x170>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3301      	adds	r3, #1
 8005b02:	4a0d      	ldr	r2, [pc, #52]	@ (8005b38 <xTaskIncrementTick+0x170>)
 8005b04:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b06:	697b      	ldr	r3, [r7, #20]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	200006e0 	.word	0x200006e0
 8005b14:	200006c4 	.word	0x200006c4
 8005b18:	200006bc 	.word	0x200006bc
 8005b1c:	200006c0 	.word	0x200006c0
 8005b20:	200006d8 	.word	0x200006d8
 8005b24:	200006dc 	.word	0x200006dc
 8005b28:	200006c8 	.word	0x200006c8
 8005b2c:	2000025c 	.word	0x2000025c
 8005b30:	20000258 	.word	0x20000258
 8005b34:	200006d4 	.word	0x200006d4
 8005b38:	200006d0 	.word	0x200006d0

08005b3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b42:	4b2a      	ldr	r3, [pc, #168]	@ (8005bec <vTaskSwitchContext+0xb0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b4a:	4b29      	ldr	r3, [pc, #164]	@ (8005bf0 <vTaskSwitchContext+0xb4>)
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b50:	e047      	b.n	8005be2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005b52:	4b27      	ldr	r3, [pc, #156]	@ (8005bf0 <vTaskSwitchContext+0xb4>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b58:	4b26      	ldr	r3, [pc, #152]	@ (8005bf4 <vTaskSwitchContext+0xb8>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	e011      	b.n	8005b84 <vTaskSwitchContext+0x48>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10b      	bne.n	8005b7e <vTaskSwitchContext+0x42>
	__asm volatile
 8005b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	607b      	str	r3, [r7, #4]
}
 8005b78:	bf00      	nop
 8005b7a:	bf00      	nop
 8005b7c:	e7fd      	b.n	8005b7a <vTaskSwitchContext+0x3e>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	491c      	ldr	r1, [pc, #112]	@ (8005bf8 <vTaskSwitchContext+0xbc>)
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	440b      	add	r3, r1
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0e3      	beq.n	8005b60 <vTaskSwitchContext+0x24>
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4a15      	ldr	r2, [pc, #84]	@ (8005bf8 <vTaskSwitchContext+0xbc>)
 8005ba4:	4413      	add	r3, r2
 8005ba6:	60bb      	str	r3, [r7, #8]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	605a      	str	r2, [r3, #4]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	3308      	adds	r3, #8
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d104      	bne.n	8005bc8 <vTaskSwitchContext+0x8c>
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	605a      	str	r2, [r3, #4]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	4a0b      	ldr	r2, [pc, #44]	@ (8005bfc <vTaskSwitchContext+0xc0>)
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	4a08      	ldr	r2, [pc, #32]	@ (8005bf4 <vTaskSwitchContext+0xb8>)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bd8:	4b08      	ldr	r3, [pc, #32]	@ (8005bfc <vTaskSwitchContext+0xc0>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3354      	adds	r3, #84	@ 0x54
 8005bde:	4a08      	ldr	r2, [pc, #32]	@ (8005c00 <vTaskSwitchContext+0xc4>)
 8005be0:	6013      	str	r3, [r2, #0]
}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr
 8005bec:	200006e0 	.word	0x200006e0
 8005bf0:	200006d4 	.word	0x200006d4
 8005bf4:	200006c8 	.word	0x200006c8
 8005bf8:	2000025c 	.word	0x2000025c
 8005bfc:	20000258 	.word	0x20000258
 8005c00:	20000018 	.word	0x20000018

08005c04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c3c <prvResetNextTaskUnblockTime+0x38>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d104      	bne.n	8005c1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c14:	4b0a      	ldr	r3, [pc, #40]	@ (8005c40 <prvResetNextTaskUnblockTime+0x3c>)
 8005c16:	f04f 32ff 	mov.w	r2, #4294967295
 8005c1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c1c:	e008      	b.n	8005c30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c1e:	4b07      	ldr	r3, [pc, #28]	@ (8005c3c <prvResetNextTaskUnblockTime+0x38>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	4a04      	ldr	r2, [pc, #16]	@ (8005c40 <prvResetNextTaskUnblockTime+0x3c>)
 8005c2e:	6013      	str	r3, [r2, #0]
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	200006bc 	.word	0x200006bc
 8005c40:	200006dc 	.word	0x200006dc

08005c44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c78 <xTaskGetSchedulerState+0x34>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d102      	bne.n	8005c58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c52:	2301      	movs	r3, #1
 8005c54:	607b      	str	r3, [r7, #4]
 8005c56:	e008      	b.n	8005c6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c58:	4b08      	ldr	r3, [pc, #32]	@ (8005c7c <xTaskGetSchedulerState+0x38>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d102      	bne.n	8005c66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c60:	2302      	movs	r3, #2
 8005c62:	607b      	str	r3, [r7, #4]
 8005c64:	e001      	b.n	8005c6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c66:	2300      	movs	r3, #0
 8005c68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c6a:	687b      	ldr	r3, [r7, #4]
	}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	200006cc 	.word	0x200006cc
 8005c7c:	200006e0 	.word	0x200006e0

08005c80 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c80:	4b07      	ldr	r3, [pc, #28]	@ (8005ca0 <pxCurrentTCBConst2>)
 8005c82:	6819      	ldr	r1, [r3, #0]
 8005c84:	6808      	ldr	r0, [r1, #0]
 8005c86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c8a:	f380 8809 	msr	PSP, r0
 8005c8e:	f3bf 8f6f 	isb	sy
 8005c92:	f04f 0000 	mov.w	r0, #0
 8005c96:	f380 8811 	msr	BASEPRI, r0
 8005c9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005c9e:	4770      	bx	lr

08005ca0 <pxCurrentTCBConst2>:
 8005ca0:	20000258 	.word	0x20000258
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop
	...

08005cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005cb0:	f3ef 8009 	mrs	r0, PSP
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf0 <pxCurrentTCBConst>)
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005cc0:	6010      	str	r0, [r2, #0]
 8005cc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005cc6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005cca:	f380 8811 	msr	BASEPRI, r0
 8005cce:	f7ff ff35 	bl	8005b3c <vTaskSwitchContext>
 8005cd2:	f04f 0000 	mov.w	r0, #0
 8005cd6:	f380 8811 	msr	BASEPRI, r0
 8005cda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005cde:	6819      	ldr	r1, [r3, #0]
 8005ce0:	6808      	ldr	r0, [r1, #0]
 8005ce2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ce6:	f380 8809 	msr	PSP, r0
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	4770      	bx	lr

08005cf0 <pxCurrentTCBConst>:
 8005cf0:	20000258 	.word	0x20000258
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop

08005cf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	607b      	str	r3, [r7, #4]
}
 8005d10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d12:	f7ff fe59 	bl	80059c8 <xTaskIncrementTick>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d1c:	4b06      	ldr	r3, [pc, #24]	@ (8005d38 <xPortSysTickHandler+0x40>)
 8005d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	2300      	movs	r3, #0
 8005d26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	e000ed04 	.word	0xe000ed04

08005d3c <malloc>:
 8005d3c:	4b02      	ldr	r3, [pc, #8]	@ (8005d48 <malloc+0xc>)
 8005d3e:	4601      	mov	r1, r0
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	f000 b82d 	b.w	8005da0 <_malloc_r>
 8005d46:	bf00      	nop
 8005d48:	20000018 	.word	0x20000018

08005d4c <free>:
 8005d4c:	4b02      	ldr	r3, [pc, #8]	@ (8005d58 <free+0xc>)
 8005d4e:	4601      	mov	r1, r0
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	f000 bb53 	b.w	80063fc <_free_r>
 8005d56:	bf00      	nop
 8005d58:	20000018 	.word	0x20000018

08005d5c <sbrk_aligned>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	4e0f      	ldr	r6, [pc, #60]	@ (8005d9c <sbrk_aligned+0x40>)
 8005d60:	460c      	mov	r4, r1
 8005d62:	6831      	ldr	r1, [r6, #0]
 8005d64:	4605      	mov	r5, r0
 8005d66:	b911      	cbnz	r1, 8005d6e <sbrk_aligned+0x12>
 8005d68:	f000 faea 	bl	8006340 <_sbrk_r>
 8005d6c:	6030      	str	r0, [r6, #0]
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4628      	mov	r0, r5
 8005d72:	f000 fae5 	bl	8006340 <_sbrk_r>
 8005d76:	1c43      	adds	r3, r0, #1
 8005d78:	d103      	bne.n	8005d82 <sbrk_aligned+0x26>
 8005d7a:	f04f 34ff 	mov.w	r4, #4294967295
 8005d7e:	4620      	mov	r0, r4
 8005d80:	bd70      	pop	{r4, r5, r6, pc}
 8005d82:	1cc4      	adds	r4, r0, #3
 8005d84:	f024 0403 	bic.w	r4, r4, #3
 8005d88:	42a0      	cmp	r0, r4
 8005d8a:	d0f8      	beq.n	8005d7e <sbrk_aligned+0x22>
 8005d8c:	1a21      	subs	r1, r4, r0
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f000 fad6 	bl	8006340 <_sbrk_r>
 8005d94:	3001      	adds	r0, #1
 8005d96:	d1f2      	bne.n	8005d7e <sbrk_aligned+0x22>
 8005d98:	e7ef      	b.n	8005d7a <sbrk_aligned+0x1e>
 8005d9a:	bf00      	nop
 8005d9c:	200006e4 	.word	0x200006e4

08005da0 <_malloc_r>:
 8005da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005da4:	1ccd      	adds	r5, r1, #3
 8005da6:	f025 0503 	bic.w	r5, r5, #3
 8005daa:	3508      	adds	r5, #8
 8005dac:	2d0c      	cmp	r5, #12
 8005dae:	bf38      	it	cc
 8005db0:	250c      	movcc	r5, #12
 8005db2:	2d00      	cmp	r5, #0
 8005db4:	4606      	mov	r6, r0
 8005db6:	db01      	blt.n	8005dbc <_malloc_r+0x1c>
 8005db8:	42a9      	cmp	r1, r5
 8005dba:	d904      	bls.n	8005dc6 <_malloc_r+0x26>
 8005dbc:	230c      	movs	r3, #12
 8005dbe:	6033      	str	r3, [r6, #0]
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e9c <_malloc_r+0xfc>
 8005dca:	f000 f869 	bl	8005ea0 <__malloc_lock>
 8005dce:	f8d8 3000 	ldr.w	r3, [r8]
 8005dd2:	461c      	mov	r4, r3
 8005dd4:	bb44      	cbnz	r4, 8005e28 <_malloc_r+0x88>
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f7ff ffbf 	bl	8005d5c <sbrk_aligned>
 8005dde:	1c43      	adds	r3, r0, #1
 8005de0:	4604      	mov	r4, r0
 8005de2:	d158      	bne.n	8005e96 <_malloc_r+0xf6>
 8005de4:	f8d8 4000 	ldr.w	r4, [r8]
 8005de8:	4627      	mov	r7, r4
 8005dea:	2f00      	cmp	r7, #0
 8005dec:	d143      	bne.n	8005e76 <_malloc_r+0xd6>
 8005dee:	2c00      	cmp	r4, #0
 8005df0:	d04b      	beq.n	8005e8a <_malloc_r+0xea>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	4639      	mov	r1, r7
 8005df6:	4630      	mov	r0, r6
 8005df8:	eb04 0903 	add.w	r9, r4, r3
 8005dfc:	f000 faa0 	bl	8006340 <_sbrk_r>
 8005e00:	4581      	cmp	r9, r0
 8005e02:	d142      	bne.n	8005e8a <_malloc_r+0xea>
 8005e04:	6821      	ldr	r1, [r4, #0]
 8005e06:	4630      	mov	r0, r6
 8005e08:	1a6d      	subs	r5, r5, r1
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	f7ff ffa6 	bl	8005d5c <sbrk_aligned>
 8005e10:	3001      	adds	r0, #1
 8005e12:	d03a      	beq.n	8005e8a <_malloc_r+0xea>
 8005e14:	6823      	ldr	r3, [r4, #0]
 8005e16:	442b      	add	r3, r5
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	bb62      	cbnz	r2, 8005e7c <_malloc_r+0xdc>
 8005e22:	f8c8 7000 	str.w	r7, [r8]
 8005e26:	e00f      	b.n	8005e48 <_malloc_r+0xa8>
 8005e28:	6822      	ldr	r2, [r4, #0]
 8005e2a:	1b52      	subs	r2, r2, r5
 8005e2c:	d420      	bmi.n	8005e70 <_malloc_r+0xd0>
 8005e2e:	2a0b      	cmp	r2, #11
 8005e30:	d917      	bls.n	8005e62 <_malloc_r+0xc2>
 8005e32:	1961      	adds	r1, r4, r5
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	6025      	str	r5, [r4, #0]
 8005e38:	bf18      	it	ne
 8005e3a:	6059      	strne	r1, [r3, #4]
 8005e3c:	6863      	ldr	r3, [r4, #4]
 8005e3e:	bf08      	it	eq
 8005e40:	f8c8 1000 	streq.w	r1, [r8]
 8005e44:	5162      	str	r2, [r4, r5]
 8005e46:	604b      	str	r3, [r1, #4]
 8005e48:	4630      	mov	r0, r6
 8005e4a:	f000 f82f 	bl	8005eac <__malloc_unlock>
 8005e4e:	f104 000b 	add.w	r0, r4, #11
 8005e52:	1d23      	adds	r3, r4, #4
 8005e54:	f020 0007 	bic.w	r0, r0, #7
 8005e58:	1ac2      	subs	r2, r0, r3
 8005e5a:	bf1c      	itt	ne
 8005e5c:	1a1b      	subne	r3, r3, r0
 8005e5e:	50a3      	strne	r3, [r4, r2]
 8005e60:	e7af      	b.n	8005dc2 <_malloc_r+0x22>
 8005e62:	6862      	ldr	r2, [r4, #4]
 8005e64:	42a3      	cmp	r3, r4
 8005e66:	bf0c      	ite	eq
 8005e68:	f8c8 2000 	streq.w	r2, [r8]
 8005e6c:	605a      	strne	r2, [r3, #4]
 8005e6e:	e7eb      	b.n	8005e48 <_malloc_r+0xa8>
 8005e70:	4623      	mov	r3, r4
 8005e72:	6864      	ldr	r4, [r4, #4]
 8005e74:	e7ae      	b.n	8005dd4 <_malloc_r+0x34>
 8005e76:	463c      	mov	r4, r7
 8005e78:	687f      	ldr	r7, [r7, #4]
 8005e7a:	e7b6      	b.n	8005dea <_malloc_r+0x4a>
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	42a3      	cmp	r3, r4
 8005e82:	d1fb      	bne.n	8005e7c <_malloc_r+0xdc>
 8005e84:	2300      	movs	r3, #0
 8005e86:	6053      	str	r3, [r2, #4]
 8005e88:	e7de      	b.n	8005e48 <_malloc_r+0xa8>
 8005e8a:	230c      	movs	r3, #12
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	6033      	str	r3, [r6, #0]
 8005e90:	f000 f80c 	bl	8005eac <__malloc_unlock>
 8005e94:	e794      	b.n	8005dc0 <_malloc_r+0x20>
 8005e96:	6005      	str	r5, [r0, #0]
 8005e98:	e7d6      	b.n	8005e48 <_malloc_r+0xa8>
 8005e9a:	bf00      	nop
 8005e9c:	200006e8 	.word	0x200006e8

08005ea0 <__malloc_lock>:
 8005ea0:	4801      	ldr	r0, [pc, #4]	@ (8005ea8 <__malloc_lock+0x8>)
 8005ea2:	f000 ba9a 	b.w	80063da <__retarget_lock_acquire_recursive>
 8005ea6:	bf00      	nop
 8005ea8:	2000082c 	.word	0x2000082c

08005eac <__malloc_unlock>:
 8005eac:	4801      	ldr	r0, [pc, #4]	@ (8005eb4 <__malloc_unlock+0x8>)
 8005eae:	f000 ba95 	b.w	80063dc <__retarget_lock_release_recursive>
 8005eb2:	bf00      	nop
 8005eb4:	2000082c 	.word	0x2000082c

08005eb8 <std>:
 8005eb8:	2300      	movs	r3, #0
 8005eba:	b510      	push	{r4, lr}
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8005ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ec6:	6083      	str	r3, [r0, #8]
 8005ec8:	8181      	strh	r1, [r0, #12]
 8005eca:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ecc:	81c2      	strh	r2, [r0, #14]
 8005ece:	6183      	str	r3, [r0, #24]
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	305c      	adds	r0, #92	@ 0x5c
 8005ed6:	f000 f9f7 	bl	80062c8 <memset>
 8005eda:	4b0d      	ldr	r3, [pc, #52]	@ (8005f10 <std+0x58>)
 8005edc:	6224      	str	r4, [r4, #32]
 8005ede:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8005f14 <std+0x5c>)
 8005ee2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f18 <std+0x60>)
 8005ee6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f1c <std+0x64>)
 8005eea:	6323      	str	r3, [r4, #48]	@ 0x30
 8005eec:	4b0c      	ldr	r3, [pc, #48]	@ (8005f20 <std+0x68>)
 8005eee:	429c      	cmp	r4, r3
 8005ef0:	d006      	beq.n	8005f00 <std+0x48>
 8005ef2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ef6:	4294      	cmp	r4, r2
 8005ef8:	d002      	beq.n	8005f00 <std+0x48>
 8005efa:	33d0      	adds	r3, #208	@ 0xd0
 8005efc:	429c      	cmp	r4, r3
 8005efe:	d105      	bne.n	8005f0c <std+0x54>
 8005f00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f08:	f000 ba66 	b.w	80063d8 <__retarget_lock_init_recursive>
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	bf00      	nop
 8005f10:	080060f9 	.word	0x080060f9
 8005f14:	0800611b 	.word	0x0800611b
 8005f18:	08006153 	.word	0x08006153
 8005f1c:	08006177 	.word	0x08006177
 8005f20:	200006ec 	.word	0x200006ec

08005f24 <stdio_exit_handler>:
 8005f24:	4a02      	ldr	r2, [pc, #8]	@ (8005f30 <stdio_exit_handler+0xc>)
 8005f26:	4903      	ldr	r1, [pc, #12]	@ (8005f34 <stdio_exit_handler+0x10>)
 8005f28:	4803      	ldr	r0, [pc, #12]	@ (8005f38 <stdio_exit_handler+0x14>)
 8005f2a:	f000 b869 	b.w	8006000 <_fwalk_sglue>
 8005f2e:	bf00      	nop
 8005f30:	2000000c 	.word	0x2000000c
 8005f34:	0800658d 	.word	0x0800658d
 8005f38:	2000001c 	.word	0x2000001c

08005f3c <cleanup_stdio>:
 8005f3c:	6841      	ldr	r1, [r0, #4]
 8005f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f70 <cleanup_stdio+0x34>)
 8005f40:	b510      	push	{r4, lr}
 8005f42:	4299      	cmp	r1, r3
 8005f44:	4604      	mov	r4, r0
 8005f46:	d001      	beq.n	8005f4c <cleanup_stdio+0x10>
 8005f48:	f000 fb20 	bl	800658c <_fflush_r>
 8005f4c:	68a1      	ldr	r1, [r4, #8]
 8005f4e:	4b09      	ldr	r3, [pc, #36]	@ (8005f74 <cleanup_stdio+0x38>)
 8005f50:	4299      	cmp	r1, r3
 8005f52:	d002      	beq.n	8005f5a <cleanup_stdio+0x1e>
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 fb19 	bl	800658c <_fflush_r>
 8005f5a:	68e1      	ldr	r1, [r4, #12]
 8005f5c:	4b06      	ldr	r3, [pc, #24]	@ (8005f78 <cleanup_stdio+0x3c>)
 8005f5e:	4299      	cmp	r1, r3
 8005f60:	d004      	beq.n	8005f6c <cleanup_stdio+0x30>
 8005f62:	4620      	mov	r0, r4
 8005f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f68:	f000 bb10 	b.w	800658c <_fflush_r>
 8005f6c:	bd10      	pop	{r4, pc}
 8005f6e:	bf00      	nop
 8005f70:	200006ec 	.word	0x200006ec
 8005f74:	20000754 	.word	0x20000754
 8005f78:	200007bc 	.word	0x200007bc

08005f7c <global_stdio_init.part.0>:
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fac <global_stdio_init.part.0+0x30>)
 8005f80:	4c0b      	ldr	r4, [pc, #44]	@ (8005fb0 <global_stdio_init.part.0+0x34>)
 8005f82:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb4 <global_stdio_init.part.0+0x38>)
 8005f84:	4620      	mov	r0, r4
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	2104      	movs	r1, #4
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f7ff ff94 	bl	8005eb8 <std>
 8005f90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f94:	2201      	movs	r2, #1
 8005f96:	2109      	movs	r1, #9
 8005f98:	f7ff ff8e 	bl	8005eb8 <std>
 8005f9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa6:	2112      	movs	r1, #18
 8005fa8:	f7ff bf86 	b.w	8005eb8 <std>
 8005fac:	20000824 	.word	0x20000824
 8005fb0:	200006ec 	.word	0x200006ec
 8005fb4:	08005f25 	.word	0x08005f25

08005fb8 <__sfp_lock_acquire>:
 8005fb8:	4801      	ldr	r0, [pc, #4]	@ (8005fc0 <__sfp_lock_acquire+0x8>)
 8005fba:	f000 ba0e 	b.w	80063da <__retarget_lock_acquire_recursive>
 8005fbe:	bf00      	nop
 8005fc0:	2000082d 	.word	0x2000082d

08005fc4 <__sfp_lock_release>:
 8005fc4:	4801      	ldr	r0, [pc, #4]	@ (8005fcc <__sfp_lock_release+0x8>)
 8005fc6:	f000 ba09 	b.w	80063dc <__retarget_lock_release_recursive>
 8005fca:	bf00      	nop
 8005fcc:	2000082d 	.word	0x2000082d

08005fd0 <__sinit>:
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	f7ff fff0 	bl	8005fb8 <__sfp_lock_acquire>
 8005fd8:	6a23      	ldr	r3, [r4, #32]
 8005fda:	b11b      	cbz	r3, 8005fe4 <__sinit+0x14>
 8005fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fe0:	f7ff bff0 	b.w	8005fc4 <__sfp_lock_release>
 8005fe4:	4b04      	ldr	r3, [pc, #16]	@ (8005ff8 <__sinit+0x28>)
 8005fe6:	6223      	str	r3, [r4, #32]
 8005fe8:	4b04      	ldr	r3, [pc, #16]	@ (8005ffc <__sinit+0x2c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1f5      	bne.n	8005fdc <__sinit+0xc>
 8005ff0:	f7ff ffc4 	bl	8005f7c <global_stdio_init.part.0>
 8005ff4:	e7f2      	b.n	8005fdc <__sinit+0xc>
 8005ff6:	bf00      	nop
 8005ff8:	08005f3d 	.word	0x08005f3d
 8005ffc:	20000824 	.word	0x20000824

08006000 <_fwalk_sglue>:
 8006000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006004:	4607      	mov	r7, r0
 8006006:	4688      	mov	r8, r1
 8006008:	4614      	mov	r4, r2
 800600a:	2600      	movs	r6, #0
 800600c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006010:	f1b9 0901 	subs.w	r9, r9, #1
 8006014:	d505      	bpl.n	8006022 <_fwalk_sglue+0x22>
 8006016:	6824      	ldr	r4, [r4, #0]
 8006018:	2c00      	cmp	r4, #0
 800601a:	d1f7      	bne.n	800600c <_fwalk_sglue+0xc>
 800601c:	4630      	mov	r0, r6
 800601e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006022:	89ab      	ldrh	r3, [r5, #12]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d907      	bls.n	8006038 <_fwalk_sglue+0x38>
 8006028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800602c:	3301      	adds	r3, #1
 800602e:	d003      	beq.n	8006038 <_fwalk_sglue+0x38>
 8006030:	4629      	mov	r1, r5
 8006032:	4638      	mov	r0, r7
 8006034:	47c0      	blx	r8
 8006036:	4306      	orrs	r6, r0
 8006038:	3568      	adds	r5, #104	@ 0x68
 800603a:	e7e9      	b.n	8006010 <_fwalk_sglue+0x10>

0800603c <_puts_r>:
 800603c:	6a03      	ldr	r3, [r0, #32]
 800603e:	b570      	push	{r4, r5, r6, lr}
 8006040:	4605      	mov	r5, r0
 8006042:	460e      	mov	r6, r1
 8006044:	6884      	ldr	r4, [r0, #8]
 8006046:	b90b      	cbnz	r3, 800604c <_puts_r+0x10>
 8006048:	f7ff ffc2 	bl	8005fd0 <__sinit>
 800604c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800604e:	07db      	lsls	r3, r3, #31
 8006050:	d405      	bmi.n	800605e <_puts_r+0x22>
 8006052:	89a3      	ldrh	r3, [r4, #12]
 8006054:	0598      	lsls	r0, r3, #22
 8006056:	d402      	bmi.n	800605e <_puts_r+0x22>
 8006058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800605a:	f000 f9be 	bl	80063da <__retarget_lock_acquire_recursive>
 800605e:	89a3      	ldrh	r3, [r4, #12]
 8006060:	0719      	lsls	r1, r3, #28
 8006062:	d502      	bpl.n	800606a <_puts_r+0x2e>
 8006064:	6923      	ldr	r3, [r4, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d135      	bne.n	80060d6 <_puts_r+0x9a>
 800606a:	4621      	mov	r1, r4
 800606c:	4628      	mov	r0, r5
 800606e:	f000 f8c5 	bl	80061fc <__swsetup_r>
 8006072:	b380      	cbz	r0, 80060d6 <_puts_r+0x9a>
 8006074:	f04f 35ff 	mov.w	r5, #4294967295
 8006078:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800607a:	07da      	lsls	r2, r3, #31
 800607c:	d405      	bmi.n	800608a <_puts_r+0x4e>
 800607e:	89a3      	ldrh	r3, [r4, #12]
 8006080:	059b      	lsls	r3, r3, #22
 8006082:	d402      	bmi.n	800608a <_puts_r+0x4e>
 8006084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006086:	f000 f9a9 	bl	80063dc <__retarget_lock_release_recursive>
 800608a:	4628      	mov	r0, r5
 800608c:	bd70      	pop	{r4, r5, r6, pc}
 800608e:	2b00      	cmp	r3, #0
 8006090:	da04      	bge.n	800609c <_puts_r+0x60>
 8006092:	69a2      	ldr	r2, [r4, #24]
 8006094:	429a      	cmp	r2, r3
 8006096:	dc17      	bgt.n	80060c8 <_puts_r+0x8c>
 8006098:	290a      	cmp	r1, #10
 800609a:	d015      	beq.n	80060c8 <_puts_r+0x8c>
 800609c:	6823      	ldr	r3, [r4, #0]
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	6022      	str	r2, [r4, #0]
 80060a2:	7019      	strb	r1, [r3, #0]
 80060a4:	68a3      	ldr	r3, [r4, #8]
 80060a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060aa:	3b01      	subs	r3, #1
 80060ac:	60a3      	str	r3, [r4, #8]
 80060ae:	2900      	cmp	r1, #0
 80060b0:	d1ed      	bne.n	800608e <_puts_r+0x52>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	da11      	bge.n	80060da <_puts_r+0x9e>
 80060b6:	4622      	mov	r2, r4
 80060b8:	210a      	movs	r1, #10
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 f85f 	bl	800617e <__swbuf_r>
 80060c0:	3001      	adds	r0, #1
 80060c2:	d0d7      	beq.n	8006074 <_puts_r+0x38>
 80060c4:	250a      	movs	r5, #10
 80060c6:	e7d7      	b.n	8006078 <_puts_r+0x3c>
 80060c8:	4622      	mov	r2, r4
 80060ca:	4628      	mov	r0, r5
 80060cc:	f000 f857 	bl	800617e <__swbuf_r>
 80060d0:	3001      	adds	r0, #1
 80060d2:	d1e7      	bne.n	80060a4 <_puts_r+0x68>
 80060d4:	e7ce      	b.n	8006074 <_puts_r+0x38>
 80060d6:	3e01      	subs	r6, #1
 80060d8:	e7e4      	b.n	80060a4 <_puts_r+0x68>
 80060da:	6823      	ldr	r3, [r4, #0]
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	6022      	str	r2, [r4, #0]
 80060e0:	220a      	movs	r2, #10
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e7ee      	b.n	80060c4 <_puts_r+0x88>
	...

080060e8 <puts>:
 80060e8:	4b02      	ldr	r3, [pc, #8]	@ (80060f4 <puts+0xc>)
 80060ea:	4601      	mov	r1, r0
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	f7ff bfa5 	b.w	800603c <_puts_r>
 80060f2:	bf00      	nop
 80060f4:	20000018 	.word	0x20000018

080060f8 <__sread>:
 80060f8:	b510      	push	{r4, lr}
 80060fa:	460c      	mov	r4, r1
 80060fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006100:	f000 f90c 	bl	800631c <_read_r>
 8006104:	2800      	cmp	r0, #0
 8006106:	bfab      	itete	ge
 8006108:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800610a:	89a3      	ldrhlt	r3, [r4, #12]
 800610c:	181b      	addge	r3, r3, r0
 800610e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006112:	bfac      	ite	ge
 8006114:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006116:	81a3      	strhlt	r3, [r4, #12]
 8006118:	bd10      	pop	{r4, pc}

0800611a <__swrite>:
 800611a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800611e:	461f      	mov	r7, r3
 8006120:	898b      	ldrh	r3, [r1, #12]
 8006122:	4605      	mov	r5, r0
 8006124:	05db      	lsls	r3, r3, #23
 8006126:	460c      	mov	r4, r1
 8006128:	4616      	mov	r6, r2
 800612a:	d505      	bpl.n	8006138 <__swrite+0x1e>
 800612c:	2302      	movs	r3, #2
 800612e:	2200      	movs	r2, #0
 8006130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006134:	f000 f8e0 	bl	80062f8 <_lseek_r>
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	4632      	mov	r2, r6
 800613c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006140:	81a3      	strh	r3, [r4, #12]
 8006142:	4628      	mov	r0, r5
 8006144:	463b      	mov	r3, r7
 8006146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800614a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800614e:	f000 b907 	b.w	8006360 <_write_r>

08006152 <__sseek>:
 8006152:	b510      	push	{r4, lr}
 8006154:	460c      	mov	r4, r1
 8006156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800615a:	f000 f8cd 	bl	80062f8 <_lseek_r>
 800615e:	1c43      	adds	r3, r0, #1
 8006160:	89a3      	ldrh	r3, [r4, #12]
 8006162:	bf15      	itete	ne
 8006164:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006166:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800616a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800616e:	81a3      	strheq	r3, [r4, #12]
 8006170:	bf18      	it	ne
 8006172:	81a3      	strhne	r3, [r4, #12]
 8006174:	bd10      	pop	{r4, pc}

08006176 <__sclose>:
 8006176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800617a:	f000 b8ad 	b.w	80062d8 <_close_r>

0800617e <__swbuf_r>:
 800617e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006180:	460e      	mov	r6, r1
 8006182:	4614      	mov	r4, r2
 8006184:	4605      	mov	r5, r0
 8006186:	b118      	cbz	r0, 8006190 <__swbuf_r+0x12>
 8006188:	6a03      	ldr	r3, [r0, #32]
 800618a:	b90b      	cbnz	r3, 8006190 <__swbuf_r+0x12>
 800618c:	f7ff ff20 	bl	8005fd0 <__sinit>
 8006190:	69a3      	ldr	r3, [r4, #24]
 8006192:	60a3      	str	r3, [r4, #8]
 8006194:	89a3      	ldrh	r3, [r4, #12]
 8006196:	071a      	lsls	r2, r3, #28
 8006198:	d501      	bpl.n	800619e <__swbuf_r+0x20>
 800619a:	6923      	ldr	r3, [r4, #16]
 800619c:	b943      	cbnz	r3, 80061b0 <__swbuf_r+0x32>
 800619e:	4621      	mov	r1, r4
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 f82b 	bl	80061fc <__swsetup_r>
 80061a6:	b118      	cbz	r0, 80061b0 <__swbuf_r+0x32>
 80061a8:	f04f 37ff 	mov.w	r7, #4294967295
 80061ac:	4638      	mov	r0, r7
 80061ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	6922      	ldr	r2, [r4, #16]
 80061b4:	b2f6      	uxtb	r6, r6
 80061b6:	1a98      	subs	r0, r3, r2
 80061b8:	6963      	ldr	r3, [r4, #20]
 80061ba:	4637      	mov	r7, r6
 80061bc:	4283      	cmp	r3, r0
 80061be:	dc05      	bgt.n	80061cc <__swbuf_r+0x4e>
 80061c0:	4621      	mov	r1, r4
 80061c2:	4628      	mov	r0, r5
 80061c4:	f000 f9e2 	bl	800658c <_fflush_r>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d1ed      	bne.n	80061a8 <__swbuf_r+0x2a>
 80061cc:	68a3      	ldr	r3, [r4, #8]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	60a3      	str	r3, [r4, #8]
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	6022      	str	r2, [r4, #0]
 80061d8:	701e      	strb	r6, [r3, #0]
 80061da:	6962      	ldr	r2, [r4, #20]
 80061dc:	1c43      	adds	r3, r0, #1
 80061de:	429a      	cmp	r2, r3
 80061e0:	d004      	beq.n	80061ec <__swbuf_r+0x6e>
 80061e2:	89a3      	ldrh	r3, [r4, #12]
 80061e4:	07db      	lsls	r3, r3, #31
 80061e6:	d5e1      	bpl.n	80061ac <__swbuf_r+0x2e>
 80061e8:	2e0a      	cmp	r6, #10
 80061ea:	d1df      	bne.n	80061ac <__swbuf_r+0x2e>
 80061ec:	4621      	mov	r1, r4
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 f9cc 	bl	800658c <_fflush_r>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d0d9      	beq.n	80061ac <__swbuf_r+0x2e>
 80061f8:	e7d6      	b.n	80061a8 <__swbuf_r+0x2a>
	...

080061fc <__swsetup_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4b29      	ldr	r3, [pc, #164]	@ (80062a4 <__swsetup_r+0xa8>)
 8006200:	4605      	mov	r5, r0
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	460c      	mov	r4, r1
 8006206:	b118      	cbz	r0, 8006210 <__swsetup_r+0x14>
 8006208:	6a03      	ldr	r3, [r0, #32]
 800620a:	b90b      	cbnz	r3, 8006210 <__swsetup_r+0x14>
 800620c:	f7ff fee0 	bl	8005fd0 <__sinit>
 8006210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006214:	0719      	lsls	r1, r3, #28
 8006216:	d422      	bmi.n	800625e <__swsetup_r+0x62>
 8006218:	06da      	lsls	r2, r3, #27
 800621a:	d407      	bmi.n	800622c <__swsetup_r+0x30>
 800621c:	2209      	movs	r2, #9
 800621e:	602a      	str	r2, [r5, #0]
 8006220:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	81a3      	strh	r3, [r4, #12]
 800622a:	e033      	b.n	8006294 <__swsetup_r+0x98>
 800622c:	0758      	lsls	r0, r3, #29
 800622e:	d512      	bpl.n	8006256 <__swsetup_r+0x5a>
 8006230:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006232:	b141      	cbz	r1, 8006246 <__swsetup_r+0x4a>
 8006234:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006238:	4299      	cmp	r1, r3
 800623a:	d002      	beq.n	8006242 <__swsetup_r+0x46>
 800623c:	4628      	mov	r0, r5
 800623e:	f000 f8dd 	bl	80063fc <_free_r>
 8006242:	2300      	movs	r3, #0
 8006244:	6363      	str	r3, [r4, #52]	@ 0x34
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800624c:	81a3      	strh	r3, [r4, #12]
 800624e:	2300      	movs	r3, #0
 8006250:	6063      	str	r3, [r4, #4]
 8006252:	6923      	ldr	r3, [r4, #16]
 8006254:	6023      	str	r3, [r4, #0]
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	f043 0308 	orr.w	r3, r3, #8
 800625c:	81a3      	strh	r3, [r4, #12]
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	b94b      	cbnz	r3, 8006276 <__swsetup_r+0x7a>
 8006262:	89a3      	ldrh	r3, [r4, #12]
 8006264:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800626c:	d003      	beq.n	8006276 <__swsetup_r+0x7a>
 800626e:	4621      	mov	r1, r4
 8006270:	4628      	mov	r0, r5
 8006272:	f000 f9d8 	bl	8006626 <__smakebuf_r>
 8006276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627a:	f013 0201 	ands.w	r2, r3, #1
 800627e:	d00a      	beq.n	8006296 <__swsetup_r+0x9a>
 8006280:	2200      	movs	r2, #0
 8006282:	60a2      	str	r2, [r4, #8]
 8006284:	6962      	ldr	r2, [r4, #20]
 8006286:	4252      	negs	r2, r2
 8006288:	61a2      	str	r2, [r4, #24]
 800628a:	6922      	ldr	r2, [r4, #16]
 800628c:	b942      	cbnz	r2, 80062a0 <__swsetup_r+0xa4>
 800628e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006292:	d1c5      	bne.n	8006220 <__swsetup_r+0x24>
 8006294:	bd38      	pop	{r3, r4, r5, pc}
 8006296:	0799      	lsls	r1, r3, #30
 8006298:	bf58      	it	pl
 800629a:	6962      	ldrpl	r2, [r4, #20]
 800629c:	60a2      	str	r2, [r4, #8]
 800629e:	e7f4      	b.n	800628a <__swsetup_r+0x8e>
 80062a0:	2000      	movs	r0, #0
 80062a2:	e7f7      	b.n	8006294 <__swsetup_r+0x98>
 80062a4:	20000018 	.word	0x20000018

080062a8 <memcmp>:
 80062a8:	b510      	push	{r4, lr}
 80062aa:	3901      	subs	r1, #1
 80062ac:	4402      	add	r2, r0
 80062ae:	4290      	cmp	r0, r2
 80062b0:	d101      	bne.n	80062b6 <memcmp+0xe>
 80062b2:	2000      	movs	r0, #0
 80062b4:	e005      	b.n	80062c2 <memcmp+0x1a>
 80062b6:	7803      	ldrb	r3, [r0, #0]
 80062b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80062bc:	42a3      	cmp	r3, r4
 80062be:	d001      	beq.n	80062c4 <memcmp+0x1c>
 80062c0:	1b18      	subs	r0, r3, r4
 80062c2:	bd10      	pop	{r4, pc}
 80062c4:	3001      	adds	r0, #1
 80062c6:	e7f2      	b.n	80062ae <memcmp+0x6>

080062c8 <memset>:
 80062c8:	4603      	mov	r3, r0
 80062ca:	4402      	add	r2, r0
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d100      	bne.n	80062d2 <memset+0xa>
 80062d0:	4770      	bx	lr
 80062d2:	f803 1b01 	strb.w	r1, [r3], #1
 80062d6:	e7f9      	b.n	80062cc <memset+0x4>

080062d8 <_close_r>:
 80062d8:	b538      	push	{r3, r4, r5, lr}
 80062da:	2300      	movs	r3, #0
 80062dc:	4d05      	ldr	r5, [pc, #20]	@ (80062f4 <_close_r+0x1c>)
 80062de:	4604      	mov	r4, r0
 80062e0:	4608      	mov	r0, r1
 80062e2:	602b      	str	r3, [r5, #0]
 80062e4:	f7fb fa7b 	bl	80017de <_close>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	d102      	bne.n	80062f2 <_close_r+0x1a>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	b103      	cbz	r3, 80062f2 <_close_r+0x1a>
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	bd38      	pop	{r3, r4, r5, pc}
 80062f4:	20000828 	.word	0x20000828

080062f8 <_lseek_r>:
 80062f8:	b538      	push	{r3, r4, r5, lr}
 80062fa:	4604      	mov	r4, r0
 80062fc:	4608      	mov	r0, r1
 80062fe:	4611      	mov	r1, r2
 8006300:	2200      	movs	r2, #0
 8006302:	4d05      	ldr	r5, [pc, #20]	@ (8006318 <_lseek_r+0x20>)
 8006304:	602a      	str	r2, [r5, #0]
 8006306:	461a      	mov	r2, r3
 8006308:	f7fb fa8d 	bl	8001826 <_lseek>
 800630c:	1c43      	adds	r3, r0, #1
 800630e:	d102      	bne.n	8006316 <_lseek_r+0x1e>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	b103      	cbz	r3, 8006316 <_lseek_r+0x1e>
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	bd38      	pop	{r3, r4, r5, pc}
 8006318:	20000828 	.word	0x20000828

0800631c <_read_r>:
 800631c:	b538      	push	{r3, r4, r5, lr}
 800631e:	4604      	mov	r4, r0
 8006320:	4608      	mov	r0, r1
 8006322:	4611      	mov	r1, r2
 8006324:	2200      	movs	r2, #0
 8006326:	4d05      	ldr	r5, [pc, #20]	@ (800633c <_read_r+0x20>)
 8006328:	602a      	str	r2, [r5, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	f7fb fa1e 	bl	800176c <_read>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_read_r+0x1e>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_read_r+0x1e>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	20000828 	.word	0x20000828

08006340 <_sbrk_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	2300      	movs	r3, #0
 8006344:	4d05      	ldr	r5, [pc, #20]	@ (800635c <_sbrk_r+0x1c>)
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	602b      	str	r3, [r5, #0]
 800634c:	f7fb fa78 	bl	8001840 <_sbrk>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_sbrk_r+0x1a>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_sbrk_r+0x1a>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	20000828 	.word	0x20000828

08006360 <_write_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	4604      	mov	r4, r0
 8006364:	4608      	mov	r0, r1
 8006366:	4611      	mov	r1, r2
 8006368:	2200      	movs	r2, #0
 800636a:	4d05      	ldr	r5, [pc, #20]	@ (8006380 <_write_r+0x20>)
 800636c:	602a      	str	r2, [r5, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	f7fb fa19 	bl	80017a6 <_write>
 8006374:	1c43      	adds	r3, r0, #1
 8006376:	d102      	bne.n	800637e <_write_r+0x1e>
 8006378:	682b      	ldr	r3, [r5, #0]
 800637a:	b103      	cbz	r3, 800637e <_write_r+0x1e>
 800637c:	6023      	str	r3, [r4, #0]
 800637e:	bd38      	pop	{r3, r4, r5, pc}
 8006380:	20000828 	.word	0x20000828

08006384 <__errno>:
 8006384:	4b01      	ldr	r3, [pc, #4]	@ (800638c <__errno+0x8>)
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	20000018 	.word	0x20000018

08006390 <__libc_init_array>:
 8006390:	b570      	push	{r4, r5, r6, lr}
 8006392:	2600      	movs	r6, #0
 8006394:	4d0c      	ldr	r5, [pc, #48]	@ (80063c8 <__libc_init_array+0x38>)
 8006396:	4c0d      	ldr	r4, [pc, #52]	@ (80063cc <__libc_init_array+0x3c>)
 8006398:	1b64      	subs	r4, r4, r5
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	42a6      	cmp	r6, r4
 800639e:	d109      	bne.n	80063b4 <__libc_init_array+0x24>
 80063a0:	f000 f9a0 	bl	80066e4 <_init>
 80063a4:	2600      	movs	r6, #0
 80063a6:	4d0a      	ldr	r5, [pc, #40]	@ (80063d0 <__libc_init_array+0x40>)
 80063a8:	4c0a      	ldr	r4, [pc, #40]	@ (80063d4 <__libc_init_array+0x44>)
 80063aa:	1b64      	subs	r4, r4, r5
 80063ac:	10a4      	asrs	r4, r4, #2
 80063ae:	42a6      	cmp	r6, r4
 80063b0:	d105      	bne.n	80063be <__libc_init_array+0x2e>
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b8:	4798      	blx	r3
 80063ba:	3601      	adds	r6, #1
 80063bc:	e7ee      	b.n	800639c <__libc_init_array+0xc>
 80063be:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c2:	4798      	blx	r3
 80063c4:	3601      	adds	r6, #1
 80063c6:	e7f2      	b.n	80063ae <__libc_init_array+0x1e>
 80063c8:	08006f00 	.word	0x08006f00
 80063cc:	08006f00 	.word	0x08006f00
 80063d0:	08006f00 	.word	0x08006f00
 80063d4:	08006f04 	.word	0x08006f04

080063d8 <__retarget_lock_init_recursive>:
 80063d8:	4770      	bx	lr

080063da <__retarget_lock_acquire_recursive>:
 80063da:	4770      	bx	lr

080063dc <__retarget_lock_release_recursive>:
 80063dc:	4770      	bx	lr

080063de <memcpy>:
 80063de:	440a      	add	r2, r1
 80063e0:	4291      	cmp	r1, r2
 80063e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80063e6:	d100      	bne.n	80063ea <memcpy+0xc>
 80063e8:	4770      	bx	lr
 80063ea:	b510      	push	{r4, lr}
 80063ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063f0:	4291      	cmp	r1, r2
 80063f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063f6:	d1f9      	bne.n	80063ec <memcpy+0xe>
 80063f8:	bd10      	pop	{r4, pc}
	...

080063fc <_free_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4605      	mov	r5, r0
 8006400:	2900      	cmp	r1, #0
 8006402:	d040      	beq.n	8006486 <_free_r+0x8a>
 8006404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006408:	1f0c      	subs	r4, r1, #4
 800640a:	2b00      	cmp	r3, #0
 800640c:	bfb8      	it	lt
 800640e:	18e4      	addlt	r4, r4, r3
 8006410:	f7ff fd46 	bl	8005ea0 <__malloc_lock>
 8006414:	4a1c      	ldr	r2, [pc, #112]	@ (8006488 <_free_r+0x8c>)
 8006416:	6813      	ldr	r3, [r2, #0]
 8006418:	b933      	cbnz	r3, 8006428 <_free_r+0x2c>
 800641a:	6063      	str	r3, [r4, #4]
 800641c:	6014      	str	r4, [r2, #0]
 800641e:	4628      	mov	r0, r5
 8006420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006424:	f7ff bd42 	b.w	8005eac <__malloc_unlock>
 8006428:	42a3      	cmp	r3, r4
 800642a:	d908      	bls.n	800643e <_free_r+0x42>
 800642c:	6820      	ldr	r0, [r4, #0]
 800642e:	1821      	adds	r1, r4, r0
 8006430:	428b      	cmp	r3, r1
 8006432:	bf01      	itttt	eq
 8006434:	6819      	ldreq	r1, [r3, #0]
 8006436:	685b      	ldreq	r3, [r3, #4]
 8006438:	1809      	addeq	r1, r1, r0
 800643a:	6021      	streq	r1, [r4, #0]
 800643c:	e7ed      	b.n	800641a <_free_r+0x1e>
 800643e:	461a      	mov	r2, r3
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	b10b      	cbz	r3, 8006448 <_free_r+0x4c>
 8006444:	42a3      	cmp	r3, r4
 8006446:	d9fa      	bls.n	800643e <_free_r+0x42>
 8006448:	6811      	ldr	r1, [r2, #0]
 800644a:	1850      	adds	r0, r2, r1
 800644c:	42a0      	cmp	r0, r4
 800644e:	d10b      	bne.n	8006468 <_free_r+0x6c>
 8006450:	6820      	ldr	r0, [r4, #0]
 8006452:	4401      	add	r1, r0
 8006454:	1850      	adds	r0, r2, r1
 8006456:	4283      	cmp	r3, r0
 8006458:	6011      	str	r1, [r2, #0]
 800645a:	d1e0      	bne.n	800641e <_free_r+0x22>
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	4408      	add	r0, r1
 8006462:	6010      	str	r0, [r2, #0]
 8006464:	6053      	str	r3, [r2, #4]
 8006466:	e7da      	b.n	800641e <_free_r+0x22>
 8006468:	d902      	bls.n	8006470 <_free_r+0x74>
 800646a:	230c      	movs	r3, #12
 800646c:	602b      	str	r3, [r5, #0]
 800646e:	e7d6      	b.n	800641e <_free_r+0x22>
 8006470:	6820      	ldr	r0, [r4, #0]
 8006472:	1821      	adds	r1, r4, r0
 8006474:	428b      	cmp	r3, r1
 8006476:	bf01      	itttt	eq
 8006478:	6819      	ldreq	r1, [r3, #0]
 800647a:	685b      	ldreq	r3, [r3, #4]
 800647c:	1809      	addeq	r1, r1, r0
 800647e:	6021      	streq	r1, [r4, #0]
 8006480:	6063      	str	r3, [r4, #4]
 8006482:	6054      	str	r4, [r2, #4]
 8006484:	e7cb      	b.n	800641e <_free_r+0x22>
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	200006e8 	.word	0x200006e8

0800648c <__sflush_r>:
 800648c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	0716      	lsls	r6, r2, #28
 8006494:	4605      	mov	r5, r0
 8006496:	460c      	mov	r4, r1
 8006498:	d454      	bmi.n	8006544 <__sflush_r+0xb8>
 800649a:	684b      	ldr	r3, [r1, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	dc02      	bgt.n	80064a6 <__sflush_r+0x1a>
 80064a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	dd48      	ble.n	8006538 <__sflush_r+0xac>
 80064a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064a8:	2e00      	cmp	r6, #0
 80064aa:	d045      	beq.n	8006538 <__sflush_r+0xac>
 80064ac:	2300      	movs	r3, #0
 80064ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064b2:	682f      	ldr	r7, [r5, #0]
 80064b4:	6a21      	ldr	r1, [r4, #32]
 80064b6:	602b      	str	r3, [r5, #0]
 80064b8:	d030      	beq.n	800651c <__sflush_r+0x90>
 80064ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	0759      	lsls	r1, r3, #29
 80064c0:	d505      	bpl.n	80064ce <__sflush_r+0x42>
 80064c2:	6863      	ldr	r3, [r4, #4]
 80064c4:	1ad2      	subs	r2, r2, r3
 80064c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064c8:	b10b      	cbz	r3, 80064ce <__sflush_r+0x42>
 80064ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064cc:	1ad2      	subs	r2, r2, r3
 80064ce:	2300      	movs	r3, #0
 80064d0:	4628      	mov	r0, r5
 80064d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064d4:	6a21      	ldr	r1, [r4, #32]
 80064d6:	47b0      	blx	r6
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	d106      	bne.n	80064ec <__sflush_r+0x60>
 80064de:	6829      	ldr	r1, [r5, #0]
 80064e0:	291d      	cmp	r1, #29
 80064e2:	d82b      	bhi.n	800653c <__sflush_r+0xb0>
 80064e4:	4a28      	ldr	r2, [pc, #160]	@ (8006588 <__sflush_r+0xfc>)
 80064e6:	40ca      	lsrs	r2, r1
 80064e8:	07d6      	lsls	r6, r2, #31
 80064ea:	d527      	bpl.n	800653c <__sflush_r+0xb0>
 80064ec:	2200      	movs	r2, #0
 80064ee:	6062      	str	r2, [r4, #4]
 80064f0:	6922      	ldr	r2, [r4, #16]
 80064f2:	04d9      	lsls	r1, r3, #19
 80064f4:	6022      	str	r2, [r4, #0]
 80064f6:	d504      	bpl.n	8006502 <__sflush_r+0x76>
 80064f8:	1c42      	adds	r2, r0, #1
 80064fa:	d101      	bne.n	8006500 <__sflush_r+0x74>
 80064fc:	682b      	ldr	r3, [r5, #0]
 80064fe:	b903      	cbnz	r3, 8006502 <__sflush_r+0x76>
 8006500:	6560      	str	r0, [r4, #84]	@ 0x54
 8006502:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006504:	602f      	str	r7, [r5, #0]
 8006506:	b1b9      	cbz	r1, 8006538 <__sflush_r+0xac>
 8006508:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800650c:	4299      	cmp	r1, r3
 800650e:	d002      	beq.n	8006516 <__sflush_r+0x8a>
 8006510:	4628      	mov	r0, r5
 8006512:	f7ff ff73 	bl	80063fc <_free_r>
 8006516:	2300      	movs	r3, #0
 8006518:	6363      	str	r3, [r4, #52]	@ 0x34
 800651a:	e00d      	b.n	8006538 <__sflush_r+0xac>
 800651c:	2301      	movs	r3, #1
 800651e:	4628      	mov	r0, r5
 8006520:	47b0      	blx	r6
 8006522:	4602      	mov	r2, r0
 8006524:	1c50      	adds	r0, r2, #1
 8006526:	d1c9      	bne.n	80064bc <__sflush_r+0x30>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0c6      	beq.n	80064bc <__sflush_r+0x30>
 800652e:	2b1d      	cmp	r3, #29
 8006530:	d001      	beq.n	8006536 <__sflush_r+0xaa>
 8006532:	2b16      	cmp	r3, #22
 8006534:	d11d      	bne.n	8006572 <__sflush_r+0xe6>
 8006536:	602f      	str	r7, [r5, #0]
 8006538:	2000      	movs	r0, #0
 800653a:	e021      	b.n	8006580 <__sflush_r+0xf4>
 800653c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006540:	b21b      	sxth	r3, r3
 8006542:	e01a      	b.n	800657a <__sflush_r+0xee>
 8006544:	690f      	ldr	r7, [r1, #16]
 8006546:	2f00      	cmp	r7, #0
 8006548:	d0f6      	beq.n	8006538 <__sflush_r+0xac>
 800654a:	0793      	lsls	r3, r2, #30
 800654c:	bf18      	it	ne
 800654e:	2300      	movne	r3, #0
 8006550:	680e      	ldr	r6, [r1, #0]
 8006552:	bf08      	it	eq
 8006554:	694b      	ldreq	r3, [r1, #20]
 8006556:	1bf6      	subs	r6, r6, r7
 8006558:	600f      	str	r7, [r1, #0]
 800655a:	608b      	str	r3, [r1, #8]
 800655c:	2e00      	cmp	r6, #0
 800655e:	ddeb      	ble.n	8006538 <__sflush_r+0xac>
 8006560:	4633      	mov	r3, r6
 8006562:	463a      	mov	r2, r7
 8006564:	4628      	mov	r0, r5
 8006566:	6a21      	ldr	r1, [r4, #32]
 8006568:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800656c:	47e0      	blx	ip
 800656e:	2800      	cmp	r0, #0
 8006570:	dc07      	bgt.n	8006582 <__sflush_r+0xf6>
 8006572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800657a:	f04f 30ff 	mov.w	r0, #4294967295
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006582:	4407      	add	r7, r0
 8006584:	1a36      	subs	r6, r6, r0
 8006586:	e7e9      	b.n	800655c <__sflush_r+0xd0>
 8006588:	20400001 	.word	0x20400001

0800658c <_fflush_r>:
 800658c:	b538      	push	{r3, r4, r5, lr}
 800658e:	690b      	ldr	r3, [r1, #16]
 8006590:	4605      	mov	r5, r0
 8006592:	460c      	mov	r4, r1
 8006594:	b913      	cbnz	r3, 800659c <_fflush_r+0x10>
 8006596:	2500      	movs	r5, #0
 8006598:	4628      	mov	r0, r5
 800659a:	bd38      	pop	{r3, r4, r5, pc}
 800659c:	b118      	cbz	r0, 80065a6 <_fflush_r+0x1a>
 800659e:	6a03      	ldr	r3, [r0, #32]
 80065a0:	b90b      	cbnz	r3, 80065a6 <_fflush_r+0x1a>
 80065a2:	f7ff fd15 	bl	8005fd0 <__sinit>
 80065a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0f3      	beq.n	8006596 <_fflush_r+0xa>
 80065ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065b0:	07d0      	lsls	r0, r2, #31
 80065b2:	d404      	bmi.n	80065be <_fflush_r+0x32>
 80065b4:	0599      	lsls	r1, r3, #22
 80065b6:	d402      	bmi.n	80065be <_fflush_r+0x32>
 80065b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ba:	f7ff ff0e 	bl	80063da <__retarget_lock_acquire_recursive>
 80065be:	4628      	mov	r0, r5
 80065c0:	4621      	mov	r1, r4
 80065c2:	f7ff ff63 	bl	800648c <__sflush_r>
 80065c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065c8:	4605      	mov	r5, r0
 80065ca:	07da      	lsls	r2, r3, #31
 80065cc:	d4e4      	bmi.n	8006598 <_fflush_r+0xc>
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	059b      	lsls	r3, r3, #22
 80065d2:	d4e1      	bmi.n	8006598 <_fflush_r+0xc>
 80065d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065d6:	f7ff ff01 	bl	80063dc <__retarget_lock_release_recursive>
 80065da:	e7dd      	b.n	8006598 <_fflush_r+0xc>

080065dc <__swhatbuf_r>:
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	460c      	mov	r4, r1
 80065e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e4:	4615      	mov	r5, r2
 80065e6:	2900      	cmp	r1, #0
 80065e8:	461e      	mov	r6, r3
 80065ea:	b096      	sub	sp, #88	@ 0x58
 80065ec:	da0c      	bge.n	8006608 <__swhatbuf_r+0x2c>
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	2100      	movs	r1, #0
 80065f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065f6:	bf14      	ite	ne
 80065f8:	2340      	movne	r3, #64	@ 0x40
 80065fa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80065fe:	2000      	movs	r0, #0
 8006600:	6031      	str	r1, [r6, #0]
 8006602:	602b      	str	r3, [r5, #0]
 8006604:	b016      	add	sp, #88	@ 0x58
 8006606:	bd70      	pop	{r4, r5, r6, pc}
 8006608:	466a      	mov	r2, sp
 800660a:	f000 f849 	bl	80066a0 <_fstat_r>
 800660e:	2800      	cmp	r0, #0
 8006610:	dbed      	blt.n	80065ee <__swhatbuf_r+0x12>
 8006612:	9901      	ldr	r1, [sp, #4]
 8006614:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006618:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800661c:	4259      	negs	r1, r3
 800661e:	4159      	adcs	r1, r3
 8006620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006624:	e7eb      	b.n	80065fe <__swhatbuf_r+0x22>

08006626 <__smakebuf_r>:
 8006626:	898b      	ldrh	r3, [r1, #12]
 8006628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800662a:	079d      	lsls	r5, r3, #30
 800662c:	4606      	mov	r6, r0
 800662e:	460c      	mov	r4, r1
 8006630:	d507      	bpl.n	8006642 <__smakebuf_r+0x1c>
 8006632:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	2301      	movs	r3, #1
 800663c:	6163      	str	r3, [r4, #20]
 800663e:	b003      	add	sp, #12
 8006640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006642:	466a      	mov	r2, sp
 8006644:	ab01      	add	r3, sp, #4
 8006646:	f7ff ffc9 	bl	80065dc <__swhatbuf_r>
 800664a:	9f00      	ldr	r7, [sp, #0]
 800664c:	4605      	mov	r5, r0
 800664e:	4639      	mov	r1, r7
 8006650:	4630      	mov	r0, r6
 8006652:	f7ff fba5 	bl	8005da0 <_malloc_r>
 8006656:	b948      	cbnz	r0, 800666c <__smakebuf_r+0x46>
 8006658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800665c:	059a      	lsls	r2, r3, #22
 800665e:	d4ee      	bmi.n	800663e <__smakebuf_r+0x18>
 8006660:	f023 0303 	bic.w	r3, r3, #3
 8006664:	f043 0302 	orr.w	r3, r3, #2
 8006668:	81a3      	strh	r3, [r4, #12]
 800666a:	e7e2      	b.n	8006632 <__smakebuf_r+0xc>
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006676:	81a3      	strh	r3, [r4, #12]
 8006678:	9b01      	ldr	r3, [sp, #4]
 800667a:	6020      	str	r0, [r4, #0]
 800667c:	b15b      	cbz	r3, 8006696 <__smakebuf_r+0x70>
 800667e:	4630      	mov	r0, r6
 8006680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006684:	f000 f81e 	bl	80066c4 <_isatty_r>
 8006688:	b128      	cbz	r0, 8006696 <__smakebuf_r+0x70>
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	f023 0303 	bic.w	r3, r3, #3
 8006690:	f043 0301 	orr.w	r3, r3, #1
 8006694:	81a3      	strh	r3, [r4, #12]
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	431d      	orrs	r5, r3
 800669a:	81a5      	strh	r5, [r4, #12]
 800669c:	e7cf      	b.n	800663e <__smakebuf_r+0x18>
	...

080066a0 <_fstat_r>:
 80066a0:	b538      	push	{r3, r4, r5, lr}
 80066a2:	2300      	movs	r3, #0
 80066a4:	4d06      	ldr	r5, [pc, #24]	@ (80066c0 <_fstat_r+0x20>)
 80066a6:	4604      	mov	r4, r0
 80066a8:	4608      	mov	r0, r1
 80066aa:	4611      	mov	r1, r2
 80066ac:	602b      	str	r3, [r5, #0]
 80066ae:	f7fb f8a1 	bl	80017f4 <_fstat>
 80066b2:	1c43      	adds	r3, r0, #1
 80066b4:	d102      	bne.n	80066bc <_fstat_r+0x1c>
 80066b6:	682b      	ldr	r3, [r5, #0]
 80066b8:	b103      	cbz	r3, 80066bc <_fstat_r+0x1c>
 80066ba:	6023      	str	r3, [r4, #0]
 80066bc:	bd38      	pop	{r3, r4, r5, pc}
 80066be:	bf00      	nop
 80066c0:	20000828 	.word	0x20000828

080066c4 <_isatty_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	2300      	movs	r3, #0
 80066c8:	4d05      	ldr	r5, [pc, #20]	@ (80066e0 <_isatty_r+0x1c>)
 80066ca:	4604      	mov	r4, r0
 80066cc:	4608      	mov	r0, r1
 80066ce:	602b      	str	r3, [r5, #0]
 80066d0:	f7fb f89f 	bl	8001812 <_isatty>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d102      	bne.n	80066de <_isatty_r+0x1a>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	b103      	cbz	r3, 80066de <_isatty_r+0x1a>
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	20000828 	.word	0x20000828

080066e4 <_init>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	bf00      	nop
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr

080066f0 <_fini>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	bf00      	nop
 80066f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f6:	bc08      	pop	{r3}
 80066f8:	469e      	mov	lr, r3
 80066fa:	4770      	bx	lr
