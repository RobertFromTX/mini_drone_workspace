
drone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9c8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800cad8  0800cad8  0000dad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .flash        00000789  0800cc88  0800cc88  0000dc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000003  0800d411  0800d411  0000e411  2**0
                  ALLOC, READONLY
  5 .ARM          00000000  0800d414  0800d414  0000f06c  2**0
                  CONTENTS, READONLY
  6 .preinit_array 00000000  0800d414  0800d414  0000f06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800d414  0800d414  0000e414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0800d418  0800d418  0000e418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000006c  20000000  0800d41c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001ea4  2000006c  0800d488  0000f06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001f10  0800d488  0000ff10  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0000f06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019bc4  00000000  00000000  0000f095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a90  00000000  00000000  00028c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  0002c6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e4  00000000  00000000  0002ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a423  00000000  00000000  0002efdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000199d8  00000000  00000000  000493ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099bd0  00000000  00000000  00062dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fc9a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c48  00000000  00000000  000fc9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00103634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cac0 	.word	0x0800cac0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	0800cac0 	.word	0x0800cac0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	@ 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d36:	2afd      	cmp	r2, #253	@ 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	@ 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2iz>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001078:	d30f      	bcc.n	800109a <__aeabi_f2iz+0x2a>
 800107a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d90d      	bls.n	80010a0 <__aeabi_f2iz+0x30>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800108c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001090:	fa23 f002 	lsr.w	r0, r3, r2
 8001094:	bf18      	it	ne
 8001096:	4240      	negne	r0, r0
 8001098:	4770      	bx	lr
 800109a:	f04f 0000 	mov.w	r0, #0
 800109e:	4770      	bx	lr
 80010a0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010a4:	d101      	bne.n	80010aa <__aeabi_f2iz+0x3a>
 80010a6:	0242      	lsls	r2, r0, #9
 80010a8:	d105      	bne.n	80010b6 <__aeabi_f2iz+0x46>
 80010aa:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010ae:	bf08      	it	eq
 80010b0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010b4:	4770      	bx	lr
 80010b6:	f04f 0000 	mov.w	r0, #0
 80010ba:	4770      	bx	lr

080010bc <initialize_PID>:

#include "drone_PID.h"

//PID control functions
void initialize_PID(pid_controller *controller, float32_t updated_measured_pos)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]

	controller->Ts = 0.004; //equates to 250Hz
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <initialize_PID+0x74>)
 80010ca:	601a      	str	r2, [r3, #0]
	controller->tau = .1;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a19      	ldr	r2, [pc, #100]	@ (8001134 <initialize_PID+0x78>)
 80010d0:	611a      	str	r2, [r3, #16]

	controller->out_max = 1000;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a18      	ldr	r2, [pc, #96]	@ (8001138 <initialize_PID+0x7c>)
 80010d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	controller->out_min = -1000;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a18      	ldr	r2, [pc, #96]	@ (800113c <initialize_PID+0x80>)
 80010dc:	631a      	str	r2, [r3, #48]	@ 0x30

	controller->proportional_gain = 0;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
	controller->integral_gain = 0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
	controller->derivative_gain = 0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]

	controller->proportional_out = 0;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
	controller->integral_out = 0;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
	controller->derivative_out = 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
	controller->total_out = 0;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	629a      	str	r2, [r3, #40]	@ 0x28

	controller->error = 0;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	621a      	str	r2, [r3, #32]
	controller->measured_pos = updated_measured_pos;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	3b83126f 	.word	0x3b83126f
 8001134:	3dcccccd 	.word	0x3dcccccd
 8001138:	447a0000 	.word	0x447a0000
 800113c:	c47a0000 	.word	0xc47a0000

08001140 <set_gains_PID>:
void set_gains_PID(pid_controller *controller, float32_t Kp, float32_t Ki, float32_t Kd)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	603b      	str	r3, [r7, #0]
	controller->proportional_gain = Kp;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	605a      	str	r2, [r3, #4]
	controller->integral_gain = Ki;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	609a      	str	r2, [r3, #8]
	controller->derivative_gain = Kd;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	60da      	str	r2, [r3, #12]
}
 8001160:	bf00      	nop
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
	...

0800116c <update_PID>:
void update_PID(pid_controller *controller, float32_t updated_measured_pos, float32_t set_point)
{
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b088      	sub	sp, #32
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
	float32_t adjusted_measured_pos = updated_measured_pos;
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	61fb      	str	r3, [r7, #28]

	float32_t updated_error = set_point - updated_measured_pos;
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fca6 	bl	8000ad0 <__aeabi_fsub>
 8001184:	4603      	mov	r3, r0
 8001186:	617b      	str	r3, [r7, #20]

	//this block makes sure that if the setpoint is near boundaries (0 or 359 degrees), can still approach the setpoint
	//from the direction that has the angle measurement spike from 0 to 359 degrees or 359 to 0 degrees
	//this is done by adjusting the error term
	if (updated_measured_pos > set_point + 180 && set_point < 180)
 8001188:	4994      	ldr	r1, [pc, #592]	@ (80013dc <update_PID+0x270>)
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fca2 	bl	8000ad4 <__addsf3>
 8001190:	4603      	mov	r3, r0
 8001192:	4619      	mov	r1, r3
 8001194:	68b8      	ldr	r0, [r7, #8]
 8001196:	f7ff ff61 	bl	800105c <__aeabi_fcmpgt>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d00d      	beq.n	80011bc <update_PID+0x50>
 80011a0:	498e      	ldr	r1, [pc, #568]	@ (80013dc <update_PID+0x270>)
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff3c 	bl	8001020 <__aeabi_fcmplt>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <update_PID+0x50>
	{
		adjusted_measured_pos = adjusted_measured_pos - 360;
 80011ae:	498c      	ldr	r1, [pc, #560]	@ (80013e0 <update_PID+0x274>)
 80011b0:	69f8      	ldr	r0, [r7, #28]
 80011b2:	f7ff fc8d 	bl	8000ad0 <__aeabi_fsub>
 80011b6:	4603      	mov	r3, r0
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	e018      	b.n	80011ee <update_PID+0x82>
	}
	else if (updated_measured_pos < set_point - 180 && set_point >= 180)
 80011bc:	4987      	ldr	r1, [pc, #540]	@ (80013dc <update_PID+0x270>)
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fc86 	bl	8000ad0 <__aeabi_fsub>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4619      	mov	r1, r3
 80011c8:	68b8      	ldr	r0, [r7, #8]
 80011ca:	f7ff ff29 	bl	8001020 <__aeabi_fcmplt>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00c      	beq.n	80011ee <update_PID+0x82>
 80011d4:	4981      	ldr	r1, [pc, #516]	@ (80013dc <update_PID+0x270>)
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff36 	bl	8001048 <__aeabi_fcmpge>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <update_PID+0x82>
	{
		adjusted_measured_pos = adjusted_measured_pos + 360;
 80011e2:	497f      	ldr	r1, [pc, #508]	@ (80013e0 <update_PID+0x274>)
 80011e4:	69f8      	ldr	r0, [r7, #28]
 80011e6:	f7ff fc75 	bl	8000ad4 <__addsf3>
 80011ea:	4603      	mov	r3, r0
 80011ec:	61fb      	str	r3, [r7, #28]
	}
	updated_error = set_point - adjusted_measured_pos;
 80011ee:	69f9      	ldr	r1, [r7, #28]
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff fc6d 	bl	8000ad0 <__aeabi_fsub>
 80011f6:	4603      	mov	r3, r0
 80011f8:	617b      	str	r3, [r7, #20]

	//calculate difference for derivative term, but need to account for when motor goes from 359->0 and 0->359
	//make sure that when it goes 359->0, the difference is 1, and 0->359 is -1
	float32_t position_difference = updated_measured_pos - controller->measured_pos;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fe:	4619      	mov	r1, r3
 8001200:	68b8      	ldr	r0, [r7, #8]
 8001202:	f7ff fc65 	bl	8000ad0 <__aeabi_fsub>
 8001206:	4603      	mov	r3, r0
 8001208:	61bb      	str	r3, [r7, #24]
	if (position_difference > 300) //when it goes from 0 to 359
 800120a:	4976      	ldr	r1, [pc, #472]	@ (80013e4 <update_PID+0x278>)
 800120c:	69b8      	ldr	r0, [r7, #24]
 800120e:	f7ff ff25 	bl	800105c <__aeabi_fcmpgt>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d006      	beq.n	8001226 <update_PID+0xba>
	{
		position_difference = position_difference - 360;
 8001218:	4971      	ldr	r1, [pc, #452]	@ (80013e0 <update_PID+0x274>)
 800121a:	69b8      	ldr	r0, [r7, #24]
 800121c:	f7ff fc58 	bl	8000ad0 <__aeabi_fsub>
 8001220:	4603      	mov	r3, r0
 8001222:	61bb      	str	r3, [r7, #24]
 8001224:	e00c      	b.n	8001240 <update_PID+0xd4>
	}
	else if (position_difference < -300) //when it goes from 359 to 0
 8001226:	4970      	ldr	r1, [pc, #448]	@ (80013e8 <update_PID+0x27c>)
 8001228:	69b8      	ldr	r0, [r7, #24]
 800122a:	f7ff fef9 	bl	8001020 <__aeabi_fcmplt>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <update_PID+0xd4>
	{
		position_difference = position_difference + 360;
 8001234:	496a      	ldr	r1, [pc, #424]	@ (80013e0 <update_PID+0x274>)
 8001236:	69b8      	ldr	r0, [r7, #24]
 8001238:	f7ff fc4c 	bl	8000ad4 <__addsf3>
 800123c:	4603      	mov	r3, r0
 800123e:	61bb      	str	r3, [r7, #24]
	}

	//updated the outputs of the P, I, and D components of the controller
	controller->proportional_out = controller->proportional_gain * updated_error;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	6979      	ldr	r1, [r7, #20]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fd4c 	bl	8000ce4 <__aeabi_fmul>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	615a      	str	r2, [r3, #20]
	controller->integral_out = controller->integral_gain * controller->Ts * (updated_error + controller->error) / 2.0 + controller->integral_out;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	4610      	mov	r0, r2
 8001260:	f7ff fd40 	bl	8000ce4 <__aeabi_fmul>
 8001264:	4603      	mov	r3, r0
 8001266:	461c      	mov	r4, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	6979      	ldr	r1, [r7, #20]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fc30 	bl	8000ad4 <__addsf3>
 8001274:	4603      	mov	r3, r0
 8001276:	4619      	mov	r1, r3
 8001278:	4620      	mov	r0, r4
 800127a:	f7ff fd33 	bl	8000ce4 <__aeabi_fmul>
 800127e:	4603      	mov	r3, r0
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f8c9 	bl	8000418 <__aeabi_f2d>
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800128e:	f7ff fa45 	bl	800071c <__aeabi_ddiv>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4614      	mov	r4, r2
 8001298:	461d      	mov	r5, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f8ba 	bl	8000418 <__aeabi_f2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4620      	mov	r0, r4
 80012aa:	4629      	mov	r1, r5
 80012ac:	f7fe ff56 	bl	800015c <__adddf3>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fbb6 	bl	8000a28 <__aeabi_d2f>
 80012bc:	4602      	mov	r2, r0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	619a      	str	r2, [r3, #24]
	controller->derivative_out = ((controller->derivative_gain * 2) * (position_difference) //
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	4619      	mov	r1, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fc03 	bl	8000ad4 <__addsf3>
 80012ce:	4603      	mov	r3, r0
 80012d0:	69b9      	ldr	r1, [r7, #24]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fd06 	bl	8000ce4 <__aeabi_fmul>
 80012d8:	4603      	mov	r3, r0
 80012da:	461c      	mov	r4, r3
	+ (2 * controller->tau - controller->Ts) * controller->derivative_out) / (2 * controller->tau + controller->Ts);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	4619      	mov	r1, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fbf6 	bl	8000ad4 <__addsf3>
 80012e8:	4603      	mov	r3, r0
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	4610      	mov	r0, r2
 80012f4:	f7ff fbec 	bl	8000ad0 <__aeabi_fsub>
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	4619      	mov	r1, r3
 8001302:	4610      	mov	r0, r2
 8001304:	f7ff fcee 	bl	8000ce4 <__aeabi_fmul>
 8001308:	4603      	mov	r3, r0
 800130a:	4619      	mov	r1, r3
 800130c:	4620      	mov	r0, r4
 800130e:	f7ff fbe1 	bl	8000ad4 <__addsf3>
 8001312:	4603      	mov	r3, r0
 8001314:	461c      	mov	r4, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	4619      	mov	r1, r3
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fbd9 	bl	8000ad4 <__addsf3>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	4610      	mov	r0, r2
 800132e:	f7ff fbd1 	bl	8000ad4 <__addsf3>
 8001332:	4603      	mov	r3, r0
 8001334:	4619      	mov	r1, r3
 8001336:	4620      	mov	r0, r4
 8001338:	f7ff fd88 	bl	8000e4c <__aeabi_fdiv>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
	controller->derivative_out = ((controller->derivative_gain * 2) * (position_difference) //
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	61da      	str	r2, [r3, #28]
//	{
//		integral_min = 0;
//	}

	//get absolute error
	float32_t absval_error = controller->error;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	613b      	str	r3, [r7, #16]
	if (absval_error < 0)
 800134a:	f04f 0100 	mov.w	r1, #0
 800134e:	6938      	ldr	r0, [r7, #16]
 8001350:	f7ff fe66 	bl	8001020 <__aeabi_fcmplt>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <update_PID+0x1f6>
	{
		absval_error = -1 * absval_error;
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001360:	613b      	str	r3, [r7, #16]
//	{
//		controller->integral_out = integral_min;
//	}

	//compute total output of controller
	controller->total_out = controller->proportional_out + controller->integral_out - controller->derivative_out; //note negative sign on derivative term, this is correct since it is on the feedback loop
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4619      	mov	r1, r3
 800136c:	4610      	mov	r0, r2
 800136e:	f7ff fbb1 	bl	8000ad4 <__addsf3>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4619      	mov	r1, r3
 800137c:	4610      	mov	r0, r2
 800137e:	f7ff fba7 	bl	8000ad0 <__aeabi_fsub>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	629a      	str	r2, [r3, #40]	@ 0x28
	//	{
	//		controller->total_out -= 100;
	//	}

	//limit total output of controller
	if (controller->total_out > controller->out_max)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001392:	4619      	mov	r1, r3
 8001394:	4610      	mov	r0, r2
 8001396:	f7ff fe61 	bl	800105c <__aeabi_fcmpgt>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d004      	beq.n	80013aa <update_PID+0x23e>
	{
		controller->total_out = controller->out_max;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80013a8:	e00e      	b.n	80013c8 <update_PID+0x25c>
	}
	else if (controller->total_out < controller->out_min)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4619      	mov	r1, r3
 80013b4:	4610      	mov	r0, r2
 80013b6:	f7ff fe33 	bl	8001020 <__aeabi_fcmplt>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <update_PID+0x25c>
	{
		controller->total_out = controller->out_min;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	629a      	str	r2, [r3, #40]	@ 0x28
	}

	//updated the error and measured position
	controller->error = updated_error;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	621a      	str	r2, [r3, #32]
	controller->measured_pos = updated_measured_pos;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80013d4:	bf00      	nop
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bdb0      	pop	{r4, r5, r7, pc}
 80013dc:	43340000 	.word	0x43340000
 80013e0:	43b40000 	.word	0x43b40000
 80013e4:	43960000 	.word	0x43960000
 80013e8:	c3960000 	.word	0xc3960000

080013ec <initialize_drone_motor_controller>:

//drone_motor_controller functions
void initialize_drone_motor_controller(drone_motor_controller *drone_controller, pid_controller *pitch_controller, pid_controller *roll_controller)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
	drone_controller->pitch_PID_controller = pitch_controller;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	601a      	str	r2, [r3, #0]
	drone_controller->roll_PID_controller = roll_controller;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	605a      	str	r2, [r3, #4]

	drone_controller->thrust_signal = 0;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
	drone_controller->yaw_signal = 0;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
	drone_controller->pitch_signal = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
	drone_controller->roll_signal = 0;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	615a      	str	r2, [r3, #20]

	drone_controller->motor1_total_out = 0;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	831a      	strh	r2, [r3, #24]
	drone_controller->motor2_total_out = 0;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	835a      	strh	r2, [r3, #26]
	drone_controller->motor3_total_out = 0;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	839a      	strh	r2, [r3, #28]
	drone_controller->motor4_total_out = 0;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2200      	movs	r2, #0
 800143a:	83da      	strh	r2, [r3, #30]

	drone_controller->motor_out_max = 1000;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001442:	841a      	strh	r2, [r3, #32]
	drone_controller->motor_out_min = 0;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <update_signals>:
void update_signals(drone_motor_controller *drone_controller, float32_t new_thrust_signal, float32_t new_yaw_signal)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
	//pitch and roll signals are determined from the output of PID controller. thrust and yaw come directly from RC controller.
	drone_controller->thrust_signal = new_thrust_signal;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	609a      	str	r2, [r3, #8]
	drone_controller->yaw_signal = new_yaw_signal;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	60da      	str	r2, [r3, #12]
	drone_controller->pitch_signal = drone_controller->pitch_PID_controller->total_out;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	611a      	str	r2, [r3, #16]
	drone_controller->roll_signal = drone_controller->roll_PID_controller->total_out;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	615a      	str	r2, [r3, #20]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <update_motor_input>:
void update_motor_input(drone_motor_controller *drone_controller, TIM_HandleTypeDef* htim2)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
	drone_controller->motor1_total_out = drone_controller->thrust_signal - drone_controller->roll_signal + drone_controller->pitch_signal + drone_controller->yaw_signal;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	4619      	mov	r1, r3
 800149e:	4610      	mov	r0, r2
 80014a0:	f7ff fb16 	bl	8000ad0 <__aeabi_fsub>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4610      	mov	r0, r2
 80014b0:	f7ff fb10 	bl	8000ad4 <__addsf3>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4619      	mov	r1, r3
 80014be:	4610      	mov	r0, r2
 80014c0:	f7ff fb08 	bl	8000ad4 <__addsf3>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fdd2 	bl	8001070 <__aeabi_f2iz>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	831a      	strh	r2, [r3, #24]
	drone_controller->motor2_total_out = drone_controller->thrust_signal + drone_controller->roll_signal - drone_controller->pitch_signal + drone_controller->yaw_signal;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	695b      	ldr	r3, [r3, #20]
 80014dc:	4619      	mov	r1, r3
 80014de:	4610      	mov	r0, r2
 80014e0:	f7ff faf8 	bl	8000ad4 <__addsf3>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4610      	mov	r0, r2
 80014f0:	f7ff faee 	bl	8000ad0 <__aeabi_fsub>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4610      	mov	r0, r2
 8001500:	f7ff fae8 	bl	8000ad4 <__addsf3>
 8001504:	4603      	mov	r3, r0
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fdb2 	bl	8001070 <__aeabi_f2iz>
 800150c:	4603      	mov	r3, r0
 800150e:	b21a      	sxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	835a      	strh	r2, [r3, #26]
	drone_controller->motor3_total_out = drone_controller->thrust_signal + drone_controller->roll_signal + drone_controller->pitch_signal - drone_controller->yaw_signal;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f7ff fad8 	bl	8000ad4 <__addsf3>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f7ff fad0 	bl	8000ad4 <__addsf3>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	4619      	mov	r1, r3
 800153e:	4610      	mov	r0, r2
 8001540:	f7ff fac6 	bl	8000ad0 <__aeabi_fsub>
 8001544:	4603      	mov	r3, r0
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fd92 	bl	8001070 <__aeabi_f2iz>
 800154c:	4603      	mov	r3, r0
 800154e:	b21a      	sxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	839a      	strh	r2, [r3, #28]
	drone_controller->motor4_total_out = drone_controller->thrust_signal - drone_controller->roll_signal - drone_controller->pitch_signal - drone_controller->yaw_signal;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	4619      	mov	r1, r3
 800155e:	4610      	mov	r0, r2
 8001560:	f7ff fab6 	bl	8000ad0 <__aeabi_fsub>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f7ff faae 	bl	8000ad0 <__aeabi_fsub>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f7ff faa6 	bl	8000ad0 <__aeabi_fsub>
 8001584:	4603      	mov	r3, r0
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fd72 	bl	8001070 <__aeabi_f2iz>
 800158c:	4603      	mov	r3, r0
 800158e:	b21a      	sxth	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	83da      	strh	r2, [r3, #30]

	//clamp outputs to stay between [0,1000]
	if(drone_controller->motor1_total_out > 1000)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800159a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800159e:	dd04      	ble.n	80015aa <update_motor_input+0x120>
	{
		drone_controller->motor1_total_out = 1000;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015a6:	831a      	strh	r2, [r3, #24]
 80015a8:	e007      	b.n	80015ba <update_motor_input+0x130>
	} else if(drone_controller->motor1_total_out < 0)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	da02      	bge.n	80015ba <update_motor_input+0x130>
	{
		drone_controller->motor1_total_out = 0;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	831a      	strh	r2, [r3, #24]
	}

	if(drone_controller->motor2_total_out > 1000)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80015c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015c4:	dd04      	ble.n	80015d0 <update_motor_input+0x146>
	{
		drone_controller->motor2_total_out = 1000;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015cc:	835a      	strh	r2, [r3, #26]
 80015ce:	e007      	b.n	80015e0 <update_motor_input+0x156>
	} else if(drone_controller->motor2_total_out < 0)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	da02      	bge.n	80015e0 <update_motor_input+0x156>
	{
		drone_controller->motor2_total_out = 0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	835a      	strh	r2, [r3, #26]
	}

	if(drone_controller->motor3_total_out > 1000)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80015e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015ea:	dd04      	ble.n	80015f6 <update_motor_input+0x16c>
	{
		drone_controller->motor3_total_out = 1000;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015f2:	839a      	strh	r2, [r3, #28]
 80015f4:	e007      	b.n	8001606 <update_motor_input+0x17c>
	} else if(drone_controller->motor3_total_out < 0)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	da02      	bge.n	8001606 <update_motor_input+0x17c>
	{
		drone_controller->motor3_total_out = 0;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	839a      	strh	r2, [r3, #28]
	}

	if(drone_controller->motor4_total_out > 1000)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800160c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001610:	dd04      	ble.n	800161c <update_motor_input+0x192>
	{
		drone_controller->motor4_total_out = 1000;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001618:	83da      	strh	r2, [r3, #30]
 800161a:	e007      	b.n	800162c <update_motor_input+0x1a2>
	} else if(drone_controller->motor4_total_out < 0)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001622:	2b00      	cmp	r3, #0
 8001624:	da02      	bge.n	800162c <update_motor_input+0x1a2>
	{
		drone_controller->motor4_total_out = 0;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	83da      	strh	r2, [r3, #30]
	}

	__HAL_TIM_SET_COMPARE(htim2,TIM_CHANNEL_1, drone_controller->motor1_total_out);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(htim2,TIM_CHANNEL_2, drone_controller->motor2_total_out);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(htim2,TIM_CHANNEL_3, drone_controller->motor3_total_out);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(htim2,TIM_CHANNEL_4, drone_controller->motor4_total_out);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	641a      	str	r2, [r3, #64]	@ 0x40

}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800166a:	f002 f8e3 	bl	8003834 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800166e:	f000 f951 	bl	8001914 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001672:	f000 fad7 	bl	8001c24 <MX_GPIO_Init>
	MX_DMA_Init();
 8001676:	f000 faaf 	bl	8001bd8 <MX_DMA_Init>
	MX_I2C2_Init();
 800167a:	f000 f98d 	bl	8001998 <MX_I2C2_Init>
	MX_TIM2_Init();
 800167e:	f000 f9bb 	bl	80019f8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001682:	f000 fa33 	bl	8001aec <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	//timer3 used for measuring duty cycle of incoming PWM signal of throttle, yaw, pitch and roll from receiver.
	if (HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1) != HAL_OK) //CH1 Throttle
 8001686:	2100      	movs	r1, #0
 8001688:	4885      	ldr	r0, [pc, #532]	@ (80018a0 <main+0x23c>)
 800168a:	f006 f87d 	bl	8007788 <HAL_TIM_IC_Start_IT>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <main+0x34>
	{
		Error_Handler();  // Error starting input capture for channel 1
 8001694:	f000 ff0c 	bl	80024b0 <Error_Handler>
	}
	if (HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2) != HAL_OK) //CH2 Yaw
 8001698:	2104      	movs	r1, #4
 800169a:	4881      	ldr	r0, [pc, #516]	@ (80018a0 <main+0x23c>)
 800169c:	f006 f874 	bl	8007788 <HAL_TIM_IC_Start_IT>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <main+0x46>
	{
		Error_Handler();  // Error starting input capture for channel 2
 80016a6:	f000 ff03 	bl	80024b0 <Error_Handler>
	}
	if (HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3) != HAL_OK) //CH3 Pitch
 80016aa:	2108      	movs	r1, #8
 80016ac:	487c      	ldr	r0, [pc, #496]	@ (80018a0 <main+0x23c>)
 80016ae:	f006 f86b 	bl	8007788 <HAL_TIM_IC_Start_IT>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <main+0x58>
	{
		Error_Handler();  // Error starting input capture for channel 3
 80016b8:	f000 fefa 	bl	80024b0 <Error_Handler>
	}
	if (HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4) != HAL_OK) //CH4 Roll
 80016bc:	210c      	movs	r1, #12
 80016be:	4878      	ldr	r0, [pc, #480]	@ (80018a0 <main+0x23c>)
 80016c0:	f006 f862 	bl	8007788 <HAL_TIM_IC_Start_IT>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <main+0x6a>
	{
		Error_Handler();  // Error starting input capture for channel 4
 80016ca:	f000 fef1 	bl	80024b0 <Error_Handler>
	}

	//timer2 used to generate pwm signals to send to motor drivers
	/* Start channel 1 */
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4874      	ldr	r0, [pc, #464]	@ (80018a4 <main+0x240>)
 80016d2:	f005 ff67 	bl	80075a4 <HAL_TIM_PWM_Start>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <main+0x7c>
	{
	Error_Handler();
 80016dc:	f000 fee8 	bl	80024b0 <Error_Handler>
	}
	/* Start channel 2 */
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2) != HAL_OK)
 80016e0:	2104      	movs	r1, #4
 80016e2:	4870      	ldr	r0, [pc, #448]	@ (80018a4 <main+0x240>)
 80016e4:	f005 ff5e 	bl	80075a4 <HAL_TIM_PWM_Start>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <main+0x8e>
	{
	Error_Handler();
 80016ee:	f000 fedf 	bl	80024b0 <Error_Handler>
	}
	/* Start channel 3 */
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK)
 80016f2:	2108      	movs	r1, #8
 80016f4:	486b      	ldr	r0, [pc, #428]	@ (80018a4 <main+0x240>)
 80016f6:	f005 ff55 	bl	80075a4 <HAL_TIM_PWM_Start>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <main+0xa0>
	{
	Error_Handler();
 8001700:	f000 fed6 	bl	80024b0 <Error_Handler>
	}
	/* Start channel 4 */
	if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4) != HAL_OK)
 8001704:	210c      	movs	r1, #12
 8001706:	4867      	ldr	r0, [pc, #412]	@ (80018a4 <main+0x240>)
 8001708:	f005 ff4c 	bl	80075a4 <HAL_TIM_PWM_Start>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <main+0xb2>
	{
	Error_Handler();
 8001712:	f000 fecd 	bl	80024b0 <Error_Handler>
	//HAL i2c notes:
	//address of MPU6050 device is 1101000, but we shift it to left because the transmit and receive functions require that. So we are left with 0xD0
	//Argument to right of MPU6050_ADDR_LSL1 is the register address, see the register description in onenote.
	uint8_t reg_addr[1];
	/* We compute the MSB and LSB parts of the memory address */
	reg_addr[0] = (uint8_t) (0x6A);
 8001716:	236a      	movs	r3, #106	@ 0x6a
 8001718:	713b      	strb	r3, [r7, #4]

	//delay for init functions to see if it stops glitch of i2c transmission never completing
	HAL_Delay(1000);
 800171a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800171e:	f002 f8bb 	bl	8003898 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001722:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001726:	4860      	ldr	r0, [pc, #384]	@ (80018a8 <main+0x244>)
 8001728:	f002 fdc8 	bl	80042bc <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800172c:	2064      	movs	r0, #100	@ 0x64
 800172e:	f002 f8b3 	bl	8003898 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001732:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001736:	485c      	ldr	r0, [pc, #368]	@ (80018a8 <main+0x244>)
 8001738:	f002 fdc0 	bl	80042bc <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800173c:	2064      	movs	r0, #100	@ 0x64
 800173e:	f002 f8ab 	bl	8003898 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001742:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001746:	4858      	ldr	r0, [pc, #352]	@ (80018a8 <main+0x244>)
 8001748:	f002 fdb8 	bl	80042bc <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800174c:	2064      	movs	r0, #100	@ 0x64
 800174e:	f002 f8a3 	bl	8003898 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001752:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001756:	4854      	ldr	r0, [pc, #336]	@ (80018a8 <main+0x244>)
 8001758:	f002 fdb0 	bl	80042bc <HAL_GPIO_TogglePin>

	//test if transmission works
	HAL_StatusTypeDef returnValue = HAL_I2C_Master_Transmit_DMA(&hi2c2, MPU6050_ADDR_LSL1, reg_addr, 1);
 800175c:	1d3a      	adds	r2, r7, #4
 800175e:	2301      	movs	r3, #1
 8001760:	21d0      	movs	r1, #208	@ 0xd0
 8001762:	4852      	ldr	r0, [pc, #328]	@ (80018ac <main+0x248>)
 8001764:	f002 ff34 	bl	80045d0 <HAL_I2C_Master_Transmit_DMA>
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
	while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY);
 800176c:	bf00      	nop
 800176e:	484f      	ldr	r0, [pc, #316]	@ (80018ac <main+0x248>)
 8001770:	f003 fe4d 	bl	800540e <HAL_I2C_GetState>
 8001774:	4603      	mov	r3, r0
 8001776:	2b20      	cmp	r3, #32
 8001778:	d1f9      	bne.n	800176e <main+0x10a>
	if (returnValue != HAL_OK)
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <main+0x120>
	{
		Error_Handler();
 8001780:	f000 fe96 	bl	80024b0 <Error_Handler>
	}
	if (__HAL_DMA_GET_FLAG(&hdma_i2c1_tx, (0x00000002U)))
 8001784:	4b4a      	ldr	r3, [pc, #296]	@ (80018b0 <main+0x24c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <main+0x132>
	{ // Transfer error
		printf("DMA Transfer Error\n");
 8001790:	4848      	ldr	r0, [pc, #288]	@ (80018b4 <main+0x250>)
 8001792:	f00a fad7 	bl	800bd44 <puts>
		// Handle error here
	}
	HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001796:	4848      	ldr	r0, [pc, #288]	@ (80018b8 <main+0x254>)
 8001798:	f002 fab4 	bl	8003d04 <HAL_DMA_IRQHandler>
	while (!i2c_TX_done);
 800179c:	bf00      	nop
 800179e:	4b47      	ldr	r3, [pc, #284]	@ (80018bc <main+0x258>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0fb      	beq.n	800179e <main+0x13a>
	i2c_TX_done = 0;
 80017a6:	4b45      	ldr	r3, [pc, #276]	@ (80018bc <main+0x258>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
	// mpu6050_init(&hi2c2); //write to registers in mpu6050 to configure initial settings
	// moved to private variables to see values of attributes in structs in debug mode easier
	//	mpu6050_sensor_data sensor_data_1;
	//	kalman_filter filter1;

	mpu6050_init_dmp(&hi2c2); //initialize mpu6050 to use dmp
 80017ac:	483f      	ldr	r0, [pc, #252]	@ (80018ac <main+0x248>)
 80017ae:	f000 ffb9 	bl	8002724 <mpu6050_init_dmp>

	setDMPEnabled(&hi2c2, true); //enable the dmp
 80017b2:	2101      	movs	r1, #1
 80017b4:	483d      	ldr	r0, [pc, #244]	@ (80018ac <main+0x248>)
 80017b6:	f001 fa74 	bl	8002ca2 <setDMPEnabled>

	packetSize = 42; //FIXME, use this: packetSize = mpu.dmpGetFIFOPacketSize();
 80017ba:	4b41      	ldr	r3, [pc, #260]	@ (80018c0 <main+0x25c>)
 80017bc:	222a      	movs	r2, #42	@ 0x2a
 80017be:	801a      	strh	r2, [r3, #0]

	//define starting position
	sensor_data_init(&sensor_data_1); //likely not necessary
 80017c0:	4840      	ldr	r0, [pc, #256]	@ (80018c4 <main+0x260>)
 80017c2:	f000 ff99 	bl	80026f8 <sensor_data_init>

	fifoCount = getFIFOCount(&hi2c2);
 80017c6:	4839      	ldr	r0, [pc, #228]	@ (80018ac <main+0x248>)
 80017c8:	f001 fa7e 	bl	8002cc8 <getFIFOCount>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b3d      	ldr	r3, [pc, #244]	@ (80018c8 <main+0x264>)
 80017d2:	801a      	strh	r2, [r3, #0]
	fifoCount = getFIFOCount(&hi2c2);
 80017d4:	4835      	ldr	r0, [pc, #212]	@ (80018ac <main+0x248>)
 80017d6:	f001 fa77 	bl	8002cc8 <getFIFOCount>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b3a      	ldr	r3, [pc, #232]	@ (80018c8 <main+0x264>)
 80017e0:	801a      	strh	r2, [r3, #0]
	resetFIFO(&hi2c2);
 80017e2:	4832      	ldr	r0, [pc, #200]	@ (80018ac <main+0x248>)
 80017e4:	f001 fa8e 	bl	8002d04 <resetFIFO>
	fifoCount = getFIFOCount(&hi2c2);
 80017e8:	4830      	ldr	r0, [pc, #192]	@ (80018ac <main+0x248>)
 80017ea:	f001 fa6d 	bl	8002cc8 <getFIFOCount>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b35      	ldr	r3, [pc, #212]	@ (80018c8 <main+0x264>)
 80017f4:	801a      	strh	r2, [r3, #0]
	fifoCount = getFIFOCount(&hi2c2);
 80017f6:	482d      	ldr	r0, [pc, #180]	@ (80018ac <main+0x248>)
 80017f8:	f001 fa66 	bl	8002cc8 <getFIFOCount>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <main+0x264>)
 8001802:	801a      	strh	r2, [r3, #0]

	resetFIFO(&hi2c2);
 8001804:	4829      	ldr	r0, [pc, #164]	@ (80018ac <main+0x248>)
 8001806:	f001 fa7d 	bl	8002d04 <resetFIFO>

	//setup PID controllers for pitch and roll
	initialize_PID(&pitch_PID_controller, 0);
 800180a:	f04f 0100 	mov.w	r1, #0
 800180e:	482f      	ldr	r0, [pc, #188]	@ (80018cc <main+0x268>)
 8001810:	f7ff fc54 	bl	80010bc <initialize_PID>
	set_gains_PID(&pitch_PID_controller, 700, 0, 0);
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	492c      	ldr	r1, [pc, #176]	@ (80018d0 <main+0x26c>)
 800181e:	482b      	ldr	r0, [pc, #172]	@ (80018cc <main+0x268>)
 8001820:	f7ff fc8e 	bl	8001140 <set_gains_PID>

	initialize_PID(&roll_PID_controller, 0);
 8001824:	f04f 0100 	mov.w	r1, #0
 8001828:	482a      	ldr	r0, [pc, #168]	@ (80018d4 <main+0x270>)
 800182a:	f7ff fc47 	bl	80010bc <initialize_PID>
	set_gains_PID(&roll_PID_controller, 700, 0, 0);
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	4926      	ldr	r1, [pc, #152]	@ (80018d0 <main+0x26c>)
 8001838:	4826      	ldr	r0, [pc, #152]	@ (80018d4 <main+0x270>)
 800183a:	f7ff fc81 	bl	8001140 <set_gains_PID>

	//setup drone motor controller
	initialize_drone_motor_controller(&drone_controller, &pitch_PID_controller, &roll_PID_controller);
 800183e:	4a25      	ldr	r2, [pc, #148]	@ (80018d4 <main+0x270>)
 8001840:	4922      	ldr	r1, [pc, #136]	@ (80018cc <main+0x268>)
 8001842:	4825      	ldr	r0, [pc, #148]	@ (80018d8 <main+0x274>)
 8001844:	f7ff fdd2 	bl	80013ec <initialize_drone_motor_controller>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001848:	f006 ff34 	bl	80086b4 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of xMutex */
	xMutexHandle = osMutexNew(&xMutex_attributes);
 800184c:	4823      	ldr	r0, [pc, #140]	@ (80018dc <main+0x278>)
 800184e:	f007 f826 	bl	800889e <osMutexNew>
 8001852:	4603      	mov	r3, r0
 8001854:	4a22      	ldr	r2, [pc, #136]	@ (80018e0 <main+0x27c>)
 8001856:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001858:	4a22      	ldr	r2, [pc, #136]	@ (80018e4 <main+0x280>)
 800185a:	2100      	movs	r1, #0
 800185c:	4822      	ldr	r0, [pc, #136]	@ (80018e8 <main+0x284>)
 800185e:	f006 ff71 	bl	8008744 <osThreadNew>
 8001862:	4603      	mov	r3, r0
 8001864:	4a21      	ldr	r2, [pc, #132]	@ (80018ec <main+0x288>)
 8001866:	6013      	str	r3, [r2, #0]

	/* creation of PIDTask */
	PIDTaskHandle = osThreadNew(updatePID, NULL, &PIDTask_attributes);
 8001868:	4a21      	ldr	r2, [pc, #132]	@ (80018f0 <main+0x28c>)
 800186a:	2100      	movs	r1, #0
 800186c:	4821      	ldr	r0, [pc, #132]	@ (80018f4 <main+0x290>)
 800186e:	f006 ff69 	bl	8008744 <osThreadNew>
 8001872:	4603      	mov	r3, r0
 8001874:	4a20      	ldr	r2, [pc, #128]	@ (80018f8 <main+0x294>)
 8001876:	6013      	str	r3, [r2, #0]

	/* creation of orientationTask */
	orientationTaskHandle = osThreadNew(getOrientation, NULL, &orientationTask_attributes);
 8001878:	4a20      	ldr	r2, [pc, #128]	@ (80018fc <main+0x298>)
 800187a:	2100      	movs	r1, #0
 800187c:	4820      	ldr	r0, [pc, #128]	@ (8001900 <main+0x29c>)
 800187e:	f006 ff61 	bl	8008744 <osThreadNew>
 8001882:	4603      	mov	r3, r0
 8001884:	4a1f      	ldr	r2, [pc, #124]	@ (8001904 <main+0x2a0>)
 8001886:	6013      	str	r3, [r2, #0]

	/* creation of inputsTask */
	inputsTaskHandle = osThreadNew(getInputs, NULL, &inputsTask_attributes);
 8001888:	4a1f      	ldr	r2, [pc, #124]	@ (8001908 <main+0x2a4>)
 800188a:	2100      	movs	r1, #0
 800188c:	481f      	ldr	r0, [pc, #124]	@ (800190c <main+0x2a8>)
 800188e:	f006 ff59 	bl	8008744 <osThreadNew>
 8001892:	4603      	mov	r3, r0
 8001894:	4a1e      	ldr	r2, [pc, #120]	@ (8001910 <main+0x2ac>)
 8001896:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8001898:	f006 ff2e 	bl	80086f8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <main+0x238>
 80018a0:	200001ac 	.word	0x200001ac
 80018a4:	20000164 	.word	0x20000164
 80018a8:	40011000 	.word	0x40011000
 80018ac:	20000088 	.word	0x20000088
 80018b0:	40020000 	.word	0x40020000
 80018b4:	0800cb10 	.word	0x0800cb10
 80018b8:	200000dc 	.word	0x200000dc
 80018bc:	2000036d 	.word	0x2000036d
 80018c0:	20000238 	.word	0x20000238
 80018c4:	20000208 	.word	0x20000208
 80018c8:	2000023a 	.word	0x2000023a
 80018cc:	20000304 	.word	0x20000304
 80018d0:	442f0000 	.word	0x442f0000
 80018d4:	20000338 	.word	0x20000338
 80018d8:	200002e0 	.word	0x200002e0
 80018dc:	0800cbcc 	.word	0x0800cbcc
 80018e0:	20000204 	.word	0x20000204
 80018e4:	0800cb3c 	.word	0x0800cb3c
 80018e8:	0800215d 	.word	0x0800215d
 80018ec:	200001f4 	.word	0x200001f4
 80018f0:	0800cb60 	.word	0x0800cb60
 80018f4:	08002171 	.word	0x08002171
 80018f8:	200001f8 	.word	0x200001f8
 80018fc:	0800cb84 	.word	0x0800cb84
 8001900:	0800235d 	.word	0x0800235d
 8001904:	200001fc 	.word	0x200001fc
 8001908:	0800cba8 	.word	0x0800cba8
 800190c:	0800247d 	.word	0x0800247d
 8001910:	20000200 	.word	0x20000200

08001914 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b090      	sub	sp, #64	@ 0x40
 8001918:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800191a:	f107 0318 	add.w	r3, r7, #24
 800191e:	2228      	movs	r2, #40	@ 0x28
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f00a fafe 	bl	800bf24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800193a:	2301      	movs	r3, #1
 800193c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800193e:	2310      	movs	r3, #16
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001942:	2302      	movs	r3, #2
 8001944:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001946:	2300      	movs	r3, #0
 8001948:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800194a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800194e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	4618      	mov	r0, r3
 8001956:	f005 f8ff 	bl	8006b58 <HAL_RCC_OscConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0x50>
	{
		Error_Handler();
 8001960:	f000 fda6 	bl	80024b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001964:	230f      	movs	r3, #15
 8001966:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001968:	2302      	movs	r3, #2
 800196a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001970:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001974:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2102      	movs	r1, #2
 800197e:	4618      	mov	r0, r3
 8001980:	f005 fb6c 	bl	800705c <HAL_RCC_ClockConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0x7a>
	{
		Error_Handler();
 800198a:	f000 fd91 	bl	80024b0 <Error_Handler>
	}
}
 800198e:	bf00      	nop
 8001990:	3740      	adds	r7, #64	@ 0x40
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <MX_I2C2_Init+0x54>)
 800199e:	4a14      	ldr	r2, [pc, #80]	@ (80019f0 <MX_I2C2_Init+0x58>)
 80019a0:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <MX_I2C2_Init+0x54>)
 80019a4:	4a13      	ldr	r2, [pc, #76]	@ (80019f4 <MX_I2C2_Init+0x5c>)
 80019a6:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 80019a8:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <MX_I2C2_Init+0x54>)
 80019aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019ae:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <MX_I2C2_Init+0x54>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <MX_I2C2_Init+0x54>)
 80019b8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019bc:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <MX_I2C2_Init+0x54>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <MX_I2C2_Init+0x54>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <MX_I2C2_Init+0x54>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <MX_I2C2_Init+0x54>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019d6:	4805      	ldr	r0, [pc, #20]	@ (80019ec <MX_I2C2_Init+0x54>)
 80019d8:	f002 fca2 	bl	8004320 <HAL_I2C_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_I2C2_Init+0x4e>
	{
		Error_Handler();
 80019e2:	f000 fd65 	bl	80024b0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000088 	.word	0x20000088
 80019f0:	40005800 	.word	0x40005800
 80019f4:	00061a80 	.word	0x00061a80

080019f8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	@ 0x28
 80019fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fe:	f107 0320 	add.w	r3, r7, #32
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]
 8001a16:	615a      	str	r2, [r3, #20]
 8001a18:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001a1a:	4b33      	ldr	r3, [pc, #204]	@ (8001ae8 <MX_TIM2_Init+0xf0>)
 8001a1c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a20:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 3;
 8001a22:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <MX_TIM2_Init+0xf0>)
 8001a24:	2203      	movs	r2, #3
 8001a26:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a28:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae8 <MX_TIM2_Init+0xf0>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
 8001a2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae8 <MX_TIM2_Init+0xf0>)
 8001a30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a34:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae8 <MX_TIM2_Init+0xf0>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <MX_TIM2_Init+0xf0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a42:	4829      	ldr	r0, [pc, #164]	@ (8001ae8 <MX_TIM2_Init+0xf0>)
 8001a44:	f005 fd5e 	bl	8007504 <HAL_TIM_PWM_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM2_Init+0x5a>
	{
		Error_Handler();
 8001a4e:	f000 fd2f 	bl	80024b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a5a:	f107 0320 	add.w	r3, r7, #32
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4821      	ldr	r0, [pc, #132]	@ (8001ae8 <MX_TIM2_Init+0xf0>)
 8001a62:	f006 fd73 	bl	800854c <HAL_TIMEx_MasterConfigSynchronization>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0x78>
	{
		Error_Handler();
 8001a6c:	f000 fd20 	bl	80024b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a70:	2360      	movs	r3, #96	@ 0x60
 8001a72:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2200      	movs	r2, #0
 8001a84:	4619      	mov	r1, r3
 8001a86:	4818      	ldr	r0, [pc, #96]	@ (8001ae8 <MX_TIM2_Init+0xf0>)
 8001a88:	f006 f916 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0x9e>
	{
		Error_Handler();
 8001a92:	f000 fd0d 	bl	80024b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2204      	movs	r2, #4
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4812      	ldr	r0, [pc, #72]	@ (8001ae8 <MX_TIM2_Init+0xf0>)
 8001a9e:	f006 f90b 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8001aa8:	f000 fd02 	bl	80024b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2208      	movs	r2, #8
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480d      	ldr	r0, [pc, #52]	@ (8001ae8 <MX_TIM2_Init+0xf0>)
 8001ab4:	f006 f900 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM2_Init+0xca>
	{
		Error_Handler();
 8001abe:	f000 fcf7 	bl	80024b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	220c      	movs	r2, #12
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4807      	ldr	r0, [pc, #28]	@ (8001ae8 <MX_TIM2_Init+0xf0>)
 8001aca:	f006 f8f5 	bl	8007cb8 <HAL_TIM_PWM_ConfigChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM2_Init+0xe0>
	{
		Error_Handler();
 8001ad4:	f000 fcec 	bl	80024b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001ad8:	4803      	ldr	r0, [pc, #12]	@ (8001ae8 <MX_TIM2_Init+0xf0>)
 8001ada:	f001 fcd3 	bl	8003484 <HAL_TIM_MspPostInit>

}
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	@ 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000164 	.word	0x20000164

08001aec <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001afc:	463b      	mov	r3, r7
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001b08:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <MX_TIM3_Init+0xe4>)
 8001b0a:	4a32      	ldr	r2, [pc, #200]	@ (8001bd4 <MX_TIM3_Init+0xe8>)
 8001b0c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 999;
 8001b0e:	4b30      	ldr	r3, [pc, #192]	@ (8001bd0 <MX_TIM3_Init+0xe4>)
 8001b10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b14:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <MX_TIM3_Init+0xe4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001b1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd0 <MX_TIM3_Init+0xe4>)
 8001b1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b22:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b24:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd0 <MX_TIM3_Init+0xe4>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2a:	4b29      	ldr	r3, [pc, #164]	@ (8001bd0 <MX_TIM3_Init+0xe4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001b30:	4827      	ldr	r0, [pc, #156]	@ (8001bd0 <MX_TIM3_Init+0xe4>)
 8001b32:	f005 fdd9 	bl	80076e8 <HAL_TIM_IC_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8001b3c:	f000 fcb8 	bl	80024b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4820      	ldr	r0, [pc, #128]	@ (8001bd0 <MX_TIM3_Init+0xe4>)
 8001b50:	f006 fcfc 	bl	800854c <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM3_Init+0x72>
	{
		Error_Handler();
 8001b5a:	f000 fca9 	bl	80024b0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b62:	2301      	movs	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b6e:	463b      	mov	r3, r7
 8001b70:	2200      	movs	r2, #0
 8001b72:	4619      	mov	r1, r3
 8001b74:	4816      	ldr	r0, [pc, #88]	@ (8001bd0 <MX_TIM3_Init+0xe4>)
 8001b76:	f006 f803 	bl	8007b80 <HAL_TIM_IC_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 8001b80:	f000 fc96 	bl	80024b0 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b84:	463b      	mov	r3, r7
 8001b86:	2204      	movs	r2, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4811      	ldr	r0, [pc, #68]	@ (8001bd0 <MX_TIM3_Init+0xe4>)
 8001b8c:	f005 fff8 	bl	8007b80 <HAL_TIM_IC_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM3_Init+0xae>
	{
		Error_Handler();
 8001b96:	f000 fc8b 	bl	80024b0 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480b      	ldr	r0, [pc, #44]	@ (8001bd0 <MX_TIM3_Init+0xe4>)
 8001ba2:	f005 ffed 	bl	8007b80 <HAL_TIM_IC_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM3_Init+0xc4>
	{
		Error_Handler();
 8001bac:	f000 fc80 	bl	80024b0 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4806      	ldr	r0, [pc, #24]	@ (8001bd0 <MX_TIM3_Init+0xe4>)
 8001bb8:	f005 ffe2 	bl	8007b80 <HAL_TIM_IC_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM3_Init+0xda>
	{
		Error_Handler();
 8001bc2:	f000 fc75 	bl	80024b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200001ac 	.word	0x200001ac
 8001bd4:	40000400 	.word	0x40000400

08001bd8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <MX_DMA_Init+0x48>)
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	4a0f      	ldr	r2, [pc, #60]	@ (8001c20 <MX_DMA_Init+0x48>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6153      	str	r3, [r2, #20]
 8001bea:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <MX_DMA_Init+0x48>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2105      	movs	r1, #5
 8001bfa:	200e      	movs	r0, #14
 8001bfc:	f001 ff25 	bl	8003a4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c00:	200e      	movs	r0, #14
 8001c02:	f001 ff3e 	bl	8003a82 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2105      	movs	r1, #5
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f001 ff1d 	bl	8003a4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001c10:	200f      	movs	r0, #15
 8001c12:	f001 ff36 	bl	8003a82 <HAL_NVIC_EnableIRQ>

}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40021000 	.word	0x40021000

08001c24 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	f107 0310 	add.w	r3, r7, #16
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c38:	4b28      	ldr	r3, [pc, #160]	@ (8001cdc <MX_GPIO_Init+0xb8>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a27      	ldr	r2, [pc, #156]	@ (8001cdc <MX_GPIO_Init+0xb8>)
 8001c3e:	f043 0310 	orr.w	r3, r3, #16
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b25      	ldr	r3, [pc, #148]	@ (8001cdc <MX_GPIO_Init+0xb8>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4b22      	ldr	r3, [pc, #136]	@ (8001cdc <MX_GPIO_Init+0xb8>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a21      	ldr	r2, [pc, #132]	@ (8001cdc <MX_GPIO_Init+0xb8>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cdc <MX_GPIO_Init+0xb8>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <MX_GPIO_Init+0xb8>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cdc <MX_GPIO_Init+0xb8>)
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <MX_GPIO_Init+0xb8>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c86:	4816      	ldr	r0, [pc, #88]	@ (8001ce0 <MX_GPIO_Init+0xbc>)
 8001c88:	f002 fb00 	bl	800428c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c90:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9e:	f107 0310 	add.w	r3, r7, #16
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480e      	ldr	r0, [pc, #56]	@ (8001ce0 <MX_GPIO_Init+0xbc>)
 8001ca6:	f002 f96d 	bl	8003f84 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001caa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <MX_GPIO_Init+0xc0>)
 8001cb2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb8:	f107 0310 	add.w	r3, r7, #16
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480a      	ldr	r0, [pc, #40]	@ (8001ce8 <MX_GPIO_Init+0xc4>)
 8001cc0:	f002 f960 	bl	8003f84 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2105      	movs	r1, #5
 8001cc8:	2028      	movs	r0, #40	@ 0x28
 8001cca:	f001 febe 	bl	8003a4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cce:	2028      	movs	r0, #40	@ 0x28
 8001cd0:	f001 fed7 	bl	8003a82 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001cd4:	bf00      	nop
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	10110000 	.word	0x10110000
 8001ce8:	40010c00 	.word	0x40010c00

08001cec <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 4 */
//i2c callback functions, remember i2c interface is in mpu6050_lib.c
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	i2c_TX_done = 1; //defined in mpu6050_lib.c
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <HAL_I2C_MasterTxCpltCallback+0x18>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	2000036d 	.word	0x2000036d

08001d08 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	i2c_RX_done = 1; //defined in mpu6050_lib.c
 8001d10:	4b03      	ldr	r3, [pc, #12]	@ (8001d20 <HAL_I2C_MasterRxCpltCallback+0x18>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	2000036c 	.word	0x2000036c

08001d24 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12)
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d34:	d102      	bne.n	8001d3c <HAL_GPIO_EXTI_Callback+0x18>
	{
		orientation_data_ready = 1; //defined in mpu6050_lib.c, get DMP data as soon as its ready from mpu6050
 8001d36:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <HAL_GPIO_EXTI_Callback+0x24>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
	}

}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	2000036e 	.word	0x2000036e

08001d4c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) //PWM duty cycle calculations, called when timer detects rising and falling edges
{ //most code based off of f303k8 TIM_InputCapture example from 1.11.15 firmware package, some is based off of chapter 11.3.5 of mastering stm32 book.
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a8c      	ldr	r2, [pc, #560]	@ (8001f8c <HAL_TIM_IC_CaptureCallback+0x240>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	f040 81e9 	bne.w	8002132 <HAL_TIM_IC_CaptureCallback+0x3e6>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7f1b      	ldrb	r3, [r3, #28]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d170      	bne.n	8001e4a <HAL_TIM_IC_CaptureCallback+0xfe>
		{
			if (throttleCaptureIndex == 0)
 8001d68:	4b89      	ldr	r3, [pc, #548]	@ (8001f90 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d122      	bne.n	8001db6 <HAL_TIM_IC_CaptureCallback+0x6a>
			{
				throttleInputCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001d70:	2100      	movs	r1, #0
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f006 f862 	bl	8007e3c <HAL_TIM_ReadCapturedValue>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4a86      	ldr	r2, [pc, #536]	@ (8001f94 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001d7c:	6013      	str	r3, [r2, #0]
				throttleCaptureIndex = 1;
 8001d7e:	4b84      	ldr	r3, [pc, #528]	@ (8001f90 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	801a      	strh	r2, [r3, #0]

				//change polarity so that next time the falling edge is detected
				htim->Instance->CCER &= ~TIM_CCER_CC1E;     // Disable channel
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6a1a      	ldr	r2, [r3, #32]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC1P;      // Toggle polarity
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6a1a      	ldr	r2, [r3, #32]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0202 	orr.w	r2, r2, #2
 8001da2:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC1E;      // Re-enable channel
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6a1a      	ldr	r2, [r3, #32]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC4E;      // Re-enable channel
			}
		}
	}

}
 8001db4:	e1bd      	b.n	8002132 <HAL_TIM_IC_CaptureCallback+0x3e6>
			else if (throttleCaptureIndex == 1)
 8001db6:	4b76      	ldr	r3, [pc, #472]	@ (8001f90 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001db8:	881b      	ldrh	r3, [r3, #0]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	f040 81b9 	bne.w	8002132 <HAL_TIM_IC_CaptureCallback+0x3e6>
				throttleInputCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f006 f83a 	bl	8007e3c <HAL_TIM_ReadCapturedValue>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4a73      	ldr	r2, [pc, #460]	@ (8001f98 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001dcc:	6013      	str	r3, [r2, #0]
				if (throttleInputCaptureValue2 > throttleInputCaptureValue1)
 8001dce:	4b72      	ldr	r3, [pc, #456]	@ (8001f98 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4b70      	ldr	r3, [pc, #448]	@ (8001f94 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d907      	bls.n	8001dea <HAL_TIM_IC_CaptureCallback+0x9e>
					throttleDiffCapture = throttleInputCaptureValue2 - throttleInputCaptureValue1;
 8001dda:	4b6f      	ldr	r3, [pc, #444]	@ (8001f98 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4b6d      	ldr	r3, [pc, #436]	@ (8001f94 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	4a6d      	ldr	r2, [pc, #436]	@ (8001f9c <HAL_TIM_IC_CaptureCallback+0x250>)
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	e013      	b.n	8001e12 <HAL_TIM_IC_CaptureCallback+0xc6>
				else if (throttleInputCaptureValue2 < throttleInputCaptureValue1)
 8001dea:	4b6b      	ldr	r3, [pc, #428]	@ (8001f98 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b69      	ldr	r3, [pc, #420]	@ (8001f94 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d20b      	bcs.n	8001e0e <HAL_TIM_IC_CaptureCallback+0xc2>
					throttleDiffCapture = (htim->Instance->ARR - throttleInputCaptureValue1) + throttleInputCaptureValue2;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dfc:	4b65      	ldr	r3, [pc, #404]	@ (8001f94 <HAL_TIM_IC_CaptureCallback+0x248>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	1ad2      	subs	r2, r2, r3
 8001e02:	4b65      	ldr	r3, [pc, #404]	@ (8001f98 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	4a64      	ldr	r2, [pc, #400]	@ (8001f9c <HAL_TIM_IC_CaptureCallback+0x250>)
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	e001      	b.n	8001e12 <HAL_TIM_IC_CaptureCallback+0xc6>
					Error_Handler();
 8001e0e:	f000 fb4f 	bl	80024b0 <Error_Handler>
				throttleCaptureIndex = 0;
 8001e12:	4b5f      	ldr	r3, [pc, #380]	@ (8001f90 <HAL_TIM_IC_CaptureCallback+0x244>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC1E;     // Disable channel
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6a1a      	ldr	r2, [r3, #32]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER &= ~TIM_CCER_CC1P;      // Toggle polarity
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6a1a      	ldr	r2, [r3, #32]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0202 	bic.w	r2, r2, #2
 8001e36:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC1E;      // Re-enable channel
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6a1a      	ldr	r2, [r3, #32]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	621a      	str	r2, [r3, #32]
}
 8001e48:	e173      	b.n	8002132 <HAL_TIM_IC_CaptureCallback+0x3e6>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7f1b      	ldrb	r3, [r3, #28]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d170      	bne.n	8001f34 <HAL_TIM_IC_CaptureCallback+0x1e8>
			if (yawCaptureIndex == 0)
 8001e52:	4b53      	ldr	r3, [pc, #332]	@ (8001fa0 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d122      	bne.n	8001ea0 <HAL_TIM_IC_CaptureCallback+0x154>
				yawInputCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f005 ffed 	bl	8007e3c <HAL_TIM_ReadCapturedValue>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4a4f      	ldr	r2, [pc, #316]	@ (8001fa4 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001e66:	6013      	str	r3, [r2, #0]
				yawCaptureIndex = 1;
 8001e68:	4b4d      	ldr	r3, [pc, #308]	@ (8001fa0 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC2E;     // Disable channel
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6a1a      	ldr	r2, [r3, #32]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0210 	bic.w	r2, r2, #16
 8001e7c:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC2P;      // Toggle polarity
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a1a      	ldr	r2, [r3, #32]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0220 	orr.w	r2, r2, #32
 8001e8c:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC2E;      // Re-enable channel
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6a1a      	ldr	r2, [r3, #32]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0210 	orr.w	r2, r2, #16
 8001e9c:	621a      	str	r2, [r3, #32]
}
 8001e9e:	e148      	b.n	8002132 <HAL_TIM_IC_CaptureCallback+0x3e6>
			else if (yawCaptureIndex == 1)
 8001ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa0 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	f040 8144 	bne.w	8002132 <HAL_TIM_IC_CaptureCallback+0x3e6>
				yawInputCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001eaa:	2104      	movs	r1, #4
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f005 ffc5 	bl	8007e3c <HAL_TIM_ReadCapturedValue>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8001fa8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001eb6:	6013      	str	r3, [r2, #0]
				if (yawInputCaptureValue2 > yawInputCaptureValue1)
 8001eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	4b39      	ldr	r3, [pc, #228]	@ (8001fa4 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d907      	bls.n	8001ed4 <HAL_TIM_IC_CaptureCallback+0x188>
					yawDiffCapture = yawInputCaptureValue2 - yawInputCaptureValue1;
 8001ec4:	4b38      	ldr	r3, [pc, #224]	@ (8001fa8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b36      	ldr	r3, [pc, #216]	@ (8001fa4 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	4a37      	ldr	r2, [pc, #220]	@ (8001fac <HAL_TIM_IC_CaptureCallback+0x260>)
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e013      	b.n	8001efc <HAL_TIM_IC_CaptureCallback+0x1b0>
				else if (yawInputCaptureValue2 < yawInputCaptureValue1)
 8001ed4:	4b34      	ldr	r3, [pc, #208]	@ (8001fa8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b32      	ldr	r3, [pc, #200]	@ (8001fa4 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d20b      	bcs.n	8001ef8 <HAL_TIM_IC_CaptureCallback+0x1ac>
					yawDiffCapture = (htim->Instance->ARR - yawInputCaptureValue1) + yawInputCaptureValue2;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa4 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	1ad2      	subs	r2, r2, r3
 8001eec:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa8 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8001fac <HAL_TIM_IC_CaptureCallback+0x260>)
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e001      	b.n	8001efc <HAL_TIM_IC_CaptureCallback+0x1b0>
					Error_Handler();
 8001ef8:	f000 fada 	bl	80024b0 <Error_Handler>
				yawCaptureIndex = 0;
 8001efc:	4b28      	ldr	r3, [pc, #160]	@ (8001fa0 <HAL_TIM_IC_CaptureCallback+0x254>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC2E;     // Disable channel
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6a1a      	ldr	r2, [r3, #32]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0210 	bic.w	r2, r2, #16
 8001f10:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER &= ~TIM_CCER_CC2P;      // Toggle polarity
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6a1a      	ldr	r2, [r3, #32]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0220 	bic.w	r2, r2, #32
 8001f20:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC2E;      // Re-enable channel
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0210 	orr.w	r2, r2, #16
 8001f30:	621a      	str	r2, [r3, #32]
}
 8001f32:	e0fe      	b.n	8002132 <HAL_TIM_IC_CaptureCallback+0x3e6>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7f1b      	ldrb	r3, [r3, #28]
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	f040 8087 	bne.w	800204c <HAL_TIM_IC_CaptureCallback+0x300>
			if (pitchCaptureIndex == 0)
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb0 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d138      	bne.n	8001fb8 <HAL_TIM_IC_CaptureCallback+0x26c>
				pitchInputCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001f46:	2108      	movs	r1, #8
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f005 ff77 	bl	8007e3c <HAL_TIM_ReadCapturedValue>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4a18      	ldr	r2, [pc, #96]	@ (8001fb4 <HAL_TIM_IC_CaptureCallback+0x268>)
 8001f52:	6013      	str	r3, [r2, #0]
				pitchCaptureIndex = 1;
 8001f54:	4b16      	ldr	r3, [pc, #88]	@ (8001fb0 <HAL_TIM_IC_CaptureCallback+0x264>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC3E;     // Disable channel
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a1a      	ldr	r2, [r3, #32]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f68:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC3P;      // Toggle polarity
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f78:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC3E;      // Re-enable channel
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a1a      	ldr	r2, [r3, #32]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f88:	621a      	str	r2, [r3, #32]
}
 8001f8a:	e0d2      	b.n	8002132 <HAL_TIM_IC_CaptureCallback+0x3e6>
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	200002a8 	.word	0x200002a8
 8001f94:	200002b0 	.word	0x200002b0
 8001f98:	200002b4 	.word	0x200002b4
 8001f9c:	200002b8 	.word	0x200002b8
 8001fa0:	200002aa 	.word	0x200002aa
 8001fa4:	200002bc 	.word	0x200002bc
 8001fa8:	200002c0 	.word	0x200002c0
 8001fac:	200002c4 	.word	0x200002c4
 8001fb0:	200002ac 	.word	0x200002ac
 8001fb4:	200002c8 	.word	0x200002c8
			else if (pitchCaptureIndex == 1)
 8001fb8:	4b60      	ldr	r3, [pc, #384]	@ (800213c <HAL_TIM_IC_CaptureCallback+0x3f0>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	f040 80b8 	bne.w	8002132 <HAL_TIM_IC_CaptureCallback+0x3e6>
				pitchInputCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001fc2:	2108      	movs	r1, #8
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f005 ff39 	bl	8007e3c <HAL_TIM_ReadCapturedValue>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4a5c      	ldr	r2, [pc, #368]	@ (8002140 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8001fce:	6013      	str	r3, [r2, #0]
				if (pitchInputCaptureValue2 > pitchInputCaptureValue1)
 8001fd0:	4b5b      	ldr	r3, [pc, #364]	@ (8002140 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b5b      	ldr	r3, [pc, #364]	@ (8002144 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d907      	bls.n	8001fec <HAL_TIM_IC_CaptureCallback+0x2a0>
					pitchDiffCapture = pitchInputCaptureValue2 - pitchInputCaptureValue1;
 8001fdc:	4b58      	ldr	r3, [pc, #352]	@ (8002140 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b58      	ldr	r3, [pc, #352]	@ (8002144 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	4a58      	ldr	r2, [pc, #352]	@ (8002148 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e013      	b.n	8002014 <HAL_TIM_IC_CaptureCallback+0x2c8>
				else if (pitchInputCaptureValue2 < pitchInputCaptureValue1)
 8001fec:	4b54      	ldr	r3, [pc, #336]	@ (8002140 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b54      	ldr	r3, [pc, #336]	@ (8002144 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d20b      	bcs.n	8002010 <HAL_TIM_IC_CaptureCallback+0x2c4>
					pitchDiffCapture = (htim->Instance->ARR - pitchInputCaptureValue1) + pitchInputCaptureValue2;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ffe:	4b51      	ldr	r3, [pc, #324]	@ (8002144 <HAL_TIM_IC_CaptureCallback+0x3f8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	1ad2      	subs	r2, r2, r3
 8002004:	4b4e      	ldr	r3, [pc, #312]	@ (8002140 <HAL_TIM_IC_CaptureCallback+0x3f4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4413      	add	r3, r2
 800200a:	4a4f      	ldr	r2, [pc, #316]	@ (8002148 <HAL_TIM_IC_CaptureCallback+0x3fc>)
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e001      	b.n	8002014 <HAL_TIM_IC_CaptureCallback+0x2c8>
					Error_Handler();
 8002010:	f000 fa4e 	bl	80024b0 <Error_Handler>
				pitchCaptureIndex = 0;
 8002014:	4b49      	ldr	r3, [pc, #292]	@ (800213c <HAL_TIM_IC_CaptureCallback+0x3f0>)
 8002016:	2200      	movs	r2, #0
 8002018:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC3E;     // Disable channel
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a1a      	ldr	r2, [r3, #32]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002028:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER &= ~TIM_CCER_CC3P;      // Toggle polarity
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6a1a      	ldr	r2, [r3, #32]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002038:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC3E;      // Re-enable channel
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6a1a      	ldr	r2, [r3, #32]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002048:	621a      	str	r2, [r3, #32]
}
 800204a:	e072      	b.n	8002132 <HAL_TIM_IC_CaptureCallback+0x3e6>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	7f1b      	ldrb	r3, [r3, #28]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d16e      	bne.n	8002132 <HAL_TIM_IC_CaptureCallback+0x3e6>
			if (rollCaptureIndex == 0)
 8002054:	4b3d      	ldr	r3, [pc, #244]	@ (800214c <HAL_TIM_IC_CaptureCallback+0x400>)
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d122      	bne.n	80020a2 <HAL_TIM_IC_CaptureCallback+0x356>
				rollInputCaptureValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 800205c:	210c      	movs	r1, #12
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f005 feec 	bl	8007e3c <HAL_TIM_ReadCapturedValue>
 8002064:	4603      	mov	r3, r0
 8002066:	4a3a      	ldr	r2, [pc, #232]	@ (8002150 <HAL_TIM_IC_CaptureCallback+0x404>)
 8002068:	6013      	str	r3, [r2, #0]
				rollCaptureIndex = 1;
 800206a:	4b38      	ldr	r3, [pc, #224]	@ (800214c <HAL_TIM_IC_CaptureCallback+0x400>)
 800206c:	2201      	movs	r2, #1
 800206e:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC4E;     // Disable channel
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6a1a      	ldr	r2, [r3, #32]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800207e:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC4P;      // Toggle polarity
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800208e:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC4E;      // Re-enable channel
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6a1a      	ldr	r2, [r3, #32]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800209e:	621a      	str	r2, [r3, #32]
}
 80020a0:	e047      	b.n	8002132 <HAL_TIM_IC_CaptureCallback+0x3e6>
			else if (rollCaptureIndex == 1)
 80020a2:	4b2a      	ldr	r3, [pc, #168]	@ (800214c <HAL_TIM_IC_CaptureCallback+0x400>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d143      	bne.n	8002132 <HAL_TIM_IC_CaptureCallback+0x3e6>
				rollInputCaptureValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80020aa:	210c      	movs	r1, #12
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f005 fec5 	bl	8007e3c <HAL_TIM_ReadCapturedValue>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4a27      	ldr	r2, [pc, #156]	@ (8002154 <HAL_TIM_IC_CaptureCallback+0x408>)
 80020b6:	6013      	str	r3, [r2, #0]
				if (rollInputCaptureValue2 > rollInputCaptureValue1)
 80020b8:	4b26      	ldr	r3, [pc, #152]	@ (8002154 <HAL_TIM_IC_CaptureCallback+0x408>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b24      	ldr	r3, [pc, #144]	@ (8002150 <HAL_TIM_IC_CaptureCallback+0x404>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d907      	bls.n	80020d4 <HAL_TIM_IC_CaptureCallback+0x388>
					rollDiffCapture = rollInputCaptureValue2 - rollInputCaptureValue1;
 80020c4:	4b23      	ldr	r3, [pc, #140]	@ (8002154 <HAL_TIM_IC_CaptureCallback+0x408>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b21      	ldr	r3, [pc, #132]	@ (8002150 <HAL_TIM_IC_CaptureCallback+0x404>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	4a22      	ldr	r2, [pc, #136]	@ (8002158 <HAL_TIM_IC_CaptureCallback+0x40c>)
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	e013      	b.n	80020fc <HAL_TIM_IC_CaptureCallback+0x3b0>
				else if (rollInputCaptureValue2 < rollInputCaptureValue1)
 80020d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002154 <HAL_TIM_IC_CaptureCallback+0x408>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002150 <HAL_TIM_IC_CaptureCallback+0x404>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d20b      	bcs.n	80020f8 <HAL_TIM_IC_CaptureCallback+0x3ac>
					rollDiffCapture = (htim->Instance->ARR - rollInputCaptureValue1) + rollInputCaptureValue2;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002150 <HAL_TIM_IC_CaptureCallback+0x404>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	1ad2      	subs	r2, r2, r3
 80020ec:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <HAL_TIM_IC_CaptureCallback+0x408>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4413      	add	r3, r2
 80020f2:	4a19      	ldr	r2, [pc, #100]	@ (8002158 <HAL_TIM_IC_CaptureCallback+0x40c>)
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e001      	b.n	80020fc <HAL_TIM_IC_CaptureCallback+0x3b0>
					Error_Handler();
 80020f8:	f000 f9da 	bl	80024b0 <Error_Handler>
				rollCaptureIndex = 0;
 80020fc:	4b13      	ldr	r3, [pc, #76]	@ (800214c <HAL_TIM_IC_CaptureCallback+0x400>)
 80020fe:	2200      	movs	r2, #0
 8002100:	801a      	strh	r2, [r3, #0]
				htim->Instance->CCER &= ~TIM_CCER_CC4E;     // Disable channel
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6a1a      	ldr	r2, [r3, #32]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002110:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER &= ~TIM_CCER_CC4P;      // Toggle polarity
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002120:	621a      	str	r2, [r3, #32]
				htim->Instance->CCER |= TIM_CCER_CC4E;      // Re-enable channel
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002130:	621a      	str	r2, [r3, #32]
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200002ac 	.word	0x200002ac
 8002140:	200002cc 	.word	0x200002cc
 8002144:	200002c8 	.word	0x200002c8
 8002148:	200002d0 	.word	0x200002d0
 800214c:	200002ae 	.word	0x200002ae
 8002150:	200002d4 	.word	0x200002d4
 8002154:	200002d8 	.word	0x200002d8
 8002158:	200002dc 	.word	0x200002dc

0800215c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8002164:	2001      	movs	r0, #1
 8002166:	f006 fb7f 	bl	8008868 <osDelay>
 800216a:	e7fb      	b.n	8002164 <StartDefaultTask+0x8>
 800216c:	0000      	movs	r0, r0
	...

08002170 <updatePID>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_updatePID */
void updatePID(void *argument)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
		// The DiffCapture variables have values between 65 to 125, which represents 1ms to 2ms pulse time in ticks (ticks occur at a frequency of 64,000 Hz).
		// We want to map the pulse time of the PWM signal to desired tilt angles in radians.
		// The controllers are imperfect, so we set thresholds for DiffCapture values to be set at their max or min. Anything over 120 is considered max and anything below 80 is considered min.
		// The middle is 100 ticks of pulse width as a result, we subtract 100 to make the input 0 when joystick is in middle.
		// The max is now 20 and min is now -20. Now, we can scale appropriately to get our desired control input by dividing or multiplying.
		float32_t pitch_setpoint = ((int32_t) pitchDiffCapture-100);
 8002178:	4b69      	ldr	r3, [pc, #420]	@ (8002320 <updatePID+0x1b0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3b64      	subs	r3, #100	@ 0x64
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fd5c 	bl	8000c3c <__aeabi_i2f>
 8002184:	4603      	mov	r3, r0
 8002186:	617b      	str	r3, [r7, #20]
		if(pitch_setpoint > 20)
 8002188:	4966      	ldr	r1, [pc, #408]	@ (8002324 <updatePID+0x1b4>)
 800218a:	6978      	ldr	r0, [r7, #20]
 800218c:	f7fe ff66 	bl	800105c <__aeabi_fcmpgt>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <updatePID+0x2c>
		{
			pitch_setpoint = 20;
 8002196:	4b63      	ldr	r3, [pc, #396]	@ (8002324 <updatePID+0x1b4>)
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e008      	b.n	80021ae <updatePID+0x3e>
		} else if(pitch_setpoint < -20)
 800219c:	4962      	ldr	r1, [pc, #392]	@ (8002328 <updatePID+0x1b8>)
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7fe ff3e 	bl	8001020 <__aeabi_fcmplt>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <updatePID+0x3e>
		{
			pitch_setpoint = -20;
 80021aa:	4b5f      	ldr	r3, [pc, #380]	@ (8002328 <updatePID+0x1b8>)
 80021ac:	617b      	str	r3, [r7, #20]
		}
		pitch_setpoint = (pitch_setpoint/4)*3.14/180; //For pitch and roll, we scale appropriately so the max tilt angle setpoint back and forth is around 5 degrees, but converted to radians
 80021ae:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80021b2:	6978      	ldr	r0, [r7, #20]
 80021b4:	f7fe fe4a 	bl	8000e4c <__aeabi_fdiv>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f92c 	bl	8000418 <__aeabi_f2d>
 80021c0:	a355      	add	r3, pc, #340	@ (adr r3, 8002318 <updatePID+0x1a8>)
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	f7fe f97f 	bl	80004c8 <__aeabi_dmul>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b55      	ldr	r3, [pc, #340]	@ (800232c <updatePID+0x1bc>)
 80021d8:	f7fe faa0 	bl	800071c <__aeabi_ddiv>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fc20 	bl	8000a28 <__aeabi_d2f>
 80021e8:	4603      	mov	r3, r0
 80021ea:	617b      	str	r3, [r7, #20]

		float32_t roll_setpoint = ((int32_t) rollDiffCapture-100);
 80021ec:	4b50      	ldr	r3, [pc, #320]	@ (8002330 <updatePID+0x1c0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3b64      	subs	r3, #100	@ 0x64
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fd22 	bl	8000c3c <__aeabi_i2f>
 80021f8:	4603      	mov	r3, r0
 80021fa:	613b      	str	r3, [r7, #16]
		if(roll_setpoint > 20)
 80021fc:	4949      	ldr	r1, [pc, #292]	@ (8002324 <updatePID+0x1b4>)
 80021fe:	6938      	ldr	r0, [r7, #16]
 8002200:	f7fe ff2c 	bl	800105c <__aeabi_fcmpgt>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <updatePID+0xa0>
		{
			roll_setpoint = 20;
 800220a:	4b46      	ldr	r3, [pc, #280]	@ (8002324 <updatePID+0x1b4>)
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e008      	b.n	8002222 <updatePID+0xb2>
		} else if(roll_setpoint < -20)
 8002210:	4945      	ldr	r1, [pc, #276]	@ (8002328 <updatePID+0x1b8>)
 8002212:	6938      	ldr	r0, [r7, #16]
 8002214:	f7fe ff04 	bl	8001020 <__aeabi_fcmplt>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <updatePID+0xb2>
		{
			roll_setpoint = -20;
 800221e:	4b42      	ldr	r3, [pc, #264]	@ (8002328 <updatePID+0x1b8>)
 8002220:	613b      	str	r3, [r7, #16]
		}
		roll_setpoint = (roll_setpoint/4)*3.14/180;
 8002222:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8002226:	6938      	ldr	r0, [r7, #16]
 8002228:	f7fe fe10 	bl	8000e4c <__aeabi_fdiv>
 800222c:	4603      	mov	r3, r0
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f8f2 	bl	8000418 <__aeabi_f2d>
 8002234:	a338      	add	r3, pc, #224	@ (adr r3, 8002318 <updatePID+0x1a8>)
 8002236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223a:	f7fe f945 	bl	80004c8 <__aeabi_dmul>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	4b38      	ldr	r3, [pc, #224]	@ (800232c <updatePID+0x1bc>)
 800224c:	f7fe fa66 	bl	800071c <__aeabi_ddiv>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	f7fe fbe6 	bl	8000a28 <__aeabi_d2f>
 800225c:	4603      	mov	r3, r0
 800225e:	613b      	str	r3, [r7, #16]

		float32_t yaw_signal = ((int32_t) yawDiffCapture-100)*5;
 8002260:	4b34      	ldr	r3, [pc, #208]	@ (8002334 <updatePID+0x1c4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fce4 	bl	8000c3c <__aeabi_i2f>
 8002274:	4603      	mov	r3, r0
 8002276:	60fb      	str	r3, [r7, #12]
		if(yaw_signal > 100)
 8002278:	492f      	ldr	r1, [pc, #188]	@ (8002338 <updatePID+0x1c8>)
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f7fe feee 	bl	800105c <__aeabi_fcmpgt>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <updatePID+0x11a>
		{
			yaw_signal = 100;
 8002286:	4b2c      	ldr	r3, [pc, #176]	@ (8002338 <updatePID+0x1c8>)
 8002288:	60fb      	str	r3, [r7, #12]
		}
		if(yaw_signal < -100)
 800228a:	492c      	ldr	r1, [pc, #176]	@ (800233c <updatePID+0x1cc>)
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7fe fec7 	bl	8001020 <__aeabi_fcmplt>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <updatePID+0x12c>
		{
			yaw_signal = -100;
 8002298:	4b28      	ldr	r3, [pc, #160]	@ (800233c <updatePID+0x1cc>)
 800229a:	60fb      	str	r3, [r7, #12]
		}

		float32_t throttle_signal = (throttleDiffCapture - 60)*17;
 800229c:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <updatePID+0x1d0>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	4413      	add	r3, r2
 80022a6:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fcc2 	bl	8000c34 <__aeabi_ui2f>
 80022b0:	4603      	mov	r3, r0
 80022b2:	60bb      	str	r3, [r7, #8]
		if(throttle_signal > 950)
 80022b4:	4923      	ldr	r1, [pc, #140]	@ (8002344 <updatePID+0x1d4>)
 80022b6:	68b8      	ldr	r0, [r7, #8]
 80022b8:	f7fe fed0 	bl	800105c <__aeabi_fcmpgt>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <updatePID+0x156>
		{
			throttle_signal = 950;
 80022c2:	4b20      	ldr	r3, [pc, #128]	@ (8002344 <updatePID+0x1d4>)
 80022c4:	60bb      	str	r3, [r7, #8]
		}
		if(throttle_signal < 0)
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	68b8      	ldr	r0, [r7, #8]
 80022cc:	f7fe fea8 	bl	8001020 <__aeabi_fcmplt>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <updatePID+0x16c>
		{
			throttle_signal = 0;
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
		}
		update_PID(&pitch_PID_controller, ypr[1], pitch_setpoint);
 80022dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <updatePID+0x1d8>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4619      	mov	r1, r3
 80022e4:	4819      	ldr	r0, [pc, #100]	@ (800234c <updatePID+0x1dc>)
 80022e6:	f7fe ff41 	bl	800116c <update_PID>
		update_PID(&roll_PID_controller, ypr[2], roll_setpoint);
 80022ea:	4b17      	ldr	r3, [pc, #92]	@ (8002348 <updatePID+0x1d8>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4619      	mov	r1, r3
 80022f2:	4817      	ldr	r0, [pc, #92]	@ (8002350 <updatePID+0x1e0>)
 80022f4:	f7fe ff3a 	bl	800116c <update_PID>
		update_signals(&drone_controller, throttle_signal, yaw_signal);
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	4815      	ldr	r0, [pc, #84]	@ (8002354 <updatePID+0x1e4>)
 80022fe:	f7ff f8a9 	bl	8001454 <update_signals>
		update_motor_input(&drone_controller, &htim2);
 8002302:	4915      	ldr	r1, [pc, #84]	@ (8002358 <updatePID+0x1e8>)
 8002304:	4813      	ldr	r0, [pc, #76]	@ (8002354 <updatePID+0x1e4>)
 8002306:	f7ff f8c0 	bl	800148a <update_motor_input>
		osDelay(1);
 800230a:	2001      	movs	r0, #1
 800230c:	f006 faac 	bl	8008868 <osDelay>
	{
 8002310:	e732      	b.n	8002178 <updatePID+0x8>
 8002312:	bf00      	nop
 8002314:	f3af 8000 	nop.w
 8002318:	51eb851f 	.word	0x51eb851f
 800231c:	40091eb8 	.word	0x40091eb8
 8002320:	200002d0 	.word	0x200002d0
 8002324:	41a00000 	.word	0x41a00000
 8002328:	c1a00000 	.word	0xc1a00000
 800232c:	40668000 	.word	0x40668000
 8002330:	200002dc 	.word	0x200002dc
 8002334:	200002c4 	.word	0x200002c4
 8002338:	42c80000 	.word	0x42c80000
 800233c:	c2c80000 	.word	0xc2c80000
 8002340:	200002b8 	.word	0x200002b8
 8002344:	446d8000 	.word	0x446d8000
 8002348:	2000029c 	.word	0x2000029c
 800234c:	20000304 	.word	0x20000304
 8002350:	20000338 	.word	0x20000338
 8002354:	200002e0 	.word	0x200002e0
 8002358:	20000164 	.word	0x20000164

0800235c <getOrientation>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_getOrientation */
void getOrientation(void *argument)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;)
	{
		//credits: https://github.com/Pluscrafter/i2cdevlib/blob/master/STM32_HAL/Nucleo-144F722ZE/Src/main.cpp

		while (!orientation_data_ready); //wait until external interrupt fires to get data when it is freshly ready
 8002364:	bf00      	nop
 8002366:	4b3b      	ldr	r3, [pc, #236]	@ (8002454 <getOrientation+0xf8>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0fb      	beq.n	8002366 <getOrientation+0xa>
		if (osMutexAcquire(xMutexHandle, osWaitForever) == osOK) //try to aquire mutex
 800236e:	4b3a      	ldr	r3, [pc, #232]	@ (8002458 <getOrientation+0xfc>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f04f 31ff 	mov.w	r1, #4294967295
 8002376:	4618      	mov	r0, r3
 8002378:	f006 fb17 	bl	80089aa <osMutexAcquire>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d15c      	bne.n	800243c <getOrientation+0xe0>
		{
			fifoCount = getFIFOCount(&hi2c2);
 8002382:	4836      	ldr	r0, [pc, #216]	@ (800245c <getOrientation+0x100>)
 8002384:	f000 fca0 	bl	8002cc8 <getFIFOCount>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <getOrientation+0x104>)
 800238e:	801a      	strh	r2, [r3, #0]
			while (fifoCount < packetSize)
 8002390:	e006      	b.n	80023a0 <getOrientation+0x44>
			{
				//insert here your code
				fifoCount = getFIFOCount(&hi2c2);
 8002392:	4832      	ldr	r0, [pc, #200]	@ (800245c <getOrientation+0x100>)
 8002394:	f000 fc98 	bl	8002cc8 <getFIFOCount>
 8002398:	4603      	mov	r3, r0
 800239a:	461a      	mov	r2, r3
 800239c:	4b30      	ldr	r3, [pc, #192]	@ (8002460 <getOrientation+0x104>)
 800239e:	801a      	strh	r2, [r3, #0]
			while (fifoCount < packetSize)
 80023a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002460 <getOrientation+0x104>)
 80023a2:	881a      	ldrh	r2, [r3, #0]
 80023a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002464 <getOrientation+0x108>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d3f2      	bcc.n	8002392 <getOrientation+0x36>
			}
			if (fifoCount >= 1024)
 80023ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002460 <getOrientation+0x104>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023b4:	d303      	bcc.n	80023be <getOrientation+0x62>
			{
				resetFIFO(&hi2c2);
 80023b6:	4829      	ldr	r0, [pc, #164]	@ (800245c <getOrientation+0x100>)
 80023b8:	f000 fca4 	bl	8002d04 <resetFIFO>
 80023bc:	e039      	b.n	8002432 <getOrientation+0xd6>
				//Serial.println(F("FIFO overflow!"));
			}
			else
			{
				if (fifoCount % packetSize != 0)
 80023be:	4b28      	ldr	r3, [pc, #160]	@ (8002460 <getOrientation+0x104>)
 80023c0:	881b      	ldrh	r3, [r3, #0]
 80023c2:	4a28      	ldr	r2, [pc, #160]	@ (8002464 <getOrientation+0x108>)
 80023c4:	8812      	ldrh	r2, [r2, #0]
 80023c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80023ca:	fb01 f202 	mul.w	r2, r1, r2
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d01a      	beq.n	800240c <getOrientation+0xb0>
				{
					resetFIFO(&hi2c2);
 80023d6:	4821      	ldr	r0, [pc, #132]	@ (800245c <getOrientation+0x100>)
 80023d8:	f000 fc94 	bl	8002d04 <resetFIFO>
					fifoCount = getFIFOCount(&hi2c2);
 80023dc:	481f      	ldr	r0, [pc, #124]	@ (800245c <getOrientation+0x100>)
 80023de:	f000 fc73 	bl	8002cc8 <getFIFOCount>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002460 <getOrientation+0x104>)
 80023e8:	801a      	strh	r2, [r3, #0]
 80023ea:	e022      	b.n	8002432 <getOrientation+0xd6>
				else
				{
					while (fifoCount >= packetSize)
					{

						getFIFOBytes(&hi2c2, fifoBuffer, packetSize);
 80023ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002464 <getOrientation+0x108>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	491c      	ldr	r1, [pc, #112]	@ (8002468 <getOrientation+0x10c>)
 80023f6:	4819      	ldr	r0, [pc, #100]	@ (800245c <getOrientation+0x100>)
 80023f8:	f000 fc94 	bl	8002d24 <getFIFOBytes>
						fifoCount -= packetSize;
 80023fc:	4b18      	ldr	r3, [pc, #96]	@ (8002460 <getOrientation+0x104>)
 80023fe:	881a      	ldrh	r2, [r3, #0]
 8002400:	4b18      	ldr	r3, [pc, #96]	@ (8002464 <getOrientation+0x108>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	b29a      	uxth	r2, r3
 8002408:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <getOrientation+0x104>)
 800240a:	801a      	strh	r2, [r3, #0]
					while (fifoCount >= packetSize)
 800240c:	4b14      	ldr	r3, [pc, #80]	@ (8002460 <getOrientation+0x104>)
 800240e:	881a      	ldrh	r2, [r3, #0]
 8002410:	4b14      	ldr	r3, [pc, #80]	@ (8002464 <getOrientation+0x108>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d2e9      	bcs.n	80023ec <getOrientation+0x90>

					}
					dmpGetQuaternionQuatStruct(&q, fifoBuffer);
 8002418:	4913      	ldr	r1, [pc, #76]	@ (8002468 <getOrientation+0x10c>)
 800241a:	4814      	ldr	r0, [pc, #80]	@ (800246c <getOrientation+0x110>)
 800241c:	f000 fcec 	bl	8002df8 <dmpGetQuaternionQuatStruct>
					dmpGetGravity(&gravity, &q);
 8002420:	4912      	ldr	r1, [pc, #72]	@ (800246c <getOrientation+0x110>)
 8002422:	4813      	ldr	r0, [pc, #76]	@ (8002470 <getOrientation+0x114>)
 8002424:	f000 fd3b 	bl	8002e9e <dmpGetGravity>
					dmpGetYawPitchRoll(ypr, &q, &gravity);
 8002428:	4a11      	ldr	r2, [pc, #68]	@ (8002470 <getOrientation+0x114>)
 800242a:	4910      	ldr	r1, [pc, #64]	@ (800246c <getOrientation+0x110>)
 800242c:	4811      	ldr	r0, [pc, #68]	@ (8002474 <getOrientation+0x118>)
 800242e:	f000 fdbb 	bl	8002fa8 <dmpGetYawPitchRoll>
				}
			}
			a++;
 8002432:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <getOrientation+0x11c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	3301      	adds	r3, #1
 8002438:	4a0f      	ldr	r2, [pc, #60]	@ (8002478 <getOrientation+0x11c>)
 800243a:	6013      	str	r3, [r2, #0]

		}
		osMutexRelease(xMutexHandle);
 800243c:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <getOrientation+0xfc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f006 fafd 	bl	8008a40 <osMutexRelease>
		HAL_Delay(20);
 8002446:	2014      	movs	r0, #20
 8002448:	f001 fa26 	bl	8003898 <HAL_Delay>
		orientation_data_ready = 0;
 800244c:	4b01      	ldr	r3, [pc, #4]	@ (8002454 <getOrientation+0xf8>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
		while (!orientation_data_ready); //wait until external interrupt fires to get data when it is freshly ready
 8002452:	e787      	b.n	8002364 <getOrientation+0x8>
 8002454:	2000036e 	.word	0x2000036e
 8002458:	20000204 	.word	0x20000204
 800245c:	20000088 	.word	0x20000088
 8002460:	2000023a 	.word	0x2000023a
 8002464:	20000238 	.word	0x20000238
 8002468:	20000240 	.word	0x20000240
 800246c:	20000280 	.word	0x20000280
 8002470:	20000290 	.word	0x20000290
 8002474:	2000029c 	.word	0x2000029c
 8002478:	2000023c 	.word	0x2000023c

0800247c <getInputs>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_getInputs */
void getInputs(void *argument)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN getInputs */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8002484:	2001      	movs	r0, #1
 8002486:	f006 f9ef 	bl	8008868 <osDelay>
 800248a:	e7fb      	b.n	8002484 <getInputs+0x8>

0800248c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a04      	ldr	r2, [pc, #16]	@ (80024ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800249e:	f001 f9df 	bl	8003860 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40000800 	.word	0x40000800

080024b0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b4:	b672      	cpsid	i
}
 80024b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <Error_Handler+0x8>

080024bc <i2c_Read_Accelerometer>:
#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default
#endif

//pData is buffer to put read contents into, len is bytes to read from mpu6050
HAL_StatusTypeDef i2c_Read_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t *pData, uint16_t len)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	817b      	strh	r3, [r7, #10]
 80024ca:	4613      	mov	r3, r2
 80024cc:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef returnValue;
	uint8_t reg_addr[1];

	/* We compute the MSB and LSB parts of the memory address */
	reg_addr[0] = (uint8_t) (regAddress);
 80024ce:	7a7b      	ldrb	r3, [r7, #9]
 80024d0:	753b      	strb	r3, [r7, #20]

	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY);
 80024d2:	bf00      	nop
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f002 ff9a 	bl	800540e <HAL_I2C_GetState>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d1f9      	bne.n	80024d4 <i2c_Read_Accelerometer+0x18>
	/* First we send the memory location address where start reading data */
	returnValue = HAL_I2C_Master_Seq_Transmit_DMA(hi2c, DevAddress, reg_addr, 1, I2C_FIRST_FRAME);
 80024e0:	f107 0214 	add.w	r2, r7, #20
 80024e4:	8979      	ldrh	r1, [r7, #10]
 80024e6:	2301      	movs	r3, #1
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2301      	movs	r3, #1
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f002 fac1 	bl	8004a74 <HAL_I2C_Master_Seq_Transmit_DMA>
 80024f2:	4603      	mov	r3, r0
 80024f4:	75fb      	strb	r3, [r7, #23]
	//	while (!i2c_TX_done);
	//	i2c_TX_done = 0;
	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY);
 80024f6:	bf00      	nop
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f002 ff88 	bl	800540e <HAL_I2C_GetState>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b20      	cmp	r3, #32
 8002502:	d1f9      	bne.n	80024f8 <i2c_Read_Accelerometer+0x3c>
	/* Next we can retrieve the data from EEPROM */
	returnValue = HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, len, I2C_LAST_FRAME);	//get data we requested and place it in pData buffer
 8002504:	8c3b      	ldrh	r3, [r7, #32]
 8002506:	8979      	ldrh	r1, [r7, #10]
 8002508:	2220      	movs	r2, #32
 800250a:	9200      	str	r2, [sp, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f002 fc0e 	bl	8004d30 <HAL_I2C_Master_Seq_Receive_DMA>
 8002514:	4603      	mov	r3, r0
 8002516:	75fb      	strb	r3, [r7, #23]
	while (!i2c_RX_done);
 8002518:	bf00      	nop
 800251a:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <i2c_Read_Accelerometer+0x98>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0fb      	beq.n	800251a <i2c_Read_Accelerometer+0x5e>
	i2c_RX_done = 0;
 8002522:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <i2c_Read_Accelerometer+0x98>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]

	//for some reason after doing the receive function, the I2C2's CR1 (control register 1) goes from 0x401 to 0x201. This then causes issues
	//when trying to do the next transmit. As a result, I'm manually making sure the correct bits are turned on and off.
	//This seems to only be an issue on the STM32F103C8T6
	hi2c->Instance->CR1 &= ~I2C_CR1_STOP;	//make sure stop bit is turned off (bit 9)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002536:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 |= I2C_CR1_ACK;	//turn on acknowledge bit (bit 10)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002546:	601a      	str	r2, [r3, #0]
	return returnValue;
 8002548:	7dfb      	ldrb	r3, [r7, #23]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	2000036c 	.word	0x2000036c

08002558 <i2c_Write_Accelerometer>:

HAL_StatusTypeDef i2c_Write_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t *pData, uint16_t len)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	817b      	strh	r3, [r7, #10]
 8002566:	4613      	mov	r3, r2
 8002568:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef returnValue;
	uint8_t *data;

	data = (uint8_t*) malloc(sizeof(uint8_t) * (1 + len));
 800256a:	8c3b      	ldrh	r3, [r7, #32]
 800256c:	3301      	adds	r3, #1
 800256e:	4618      	mov	r0, r3
 8002570:	f009 fa12 	bl	800b998 <malloc>
 8002574:	4603      	mov	r3, r0
 8002576:	617b      	str	r3, [r7, #20]
	/*We compute the MSB and LSB parts of the memory address*/
	data[0] = (uint8_t) (regAddress);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	7a7a      	ldrb	r2, [r7, #9]
 800257c:	701a      	strb	r2, [r3, #0]

	/*And copy the content of the pData array in the temporary buffer*/
	memcpy(data + 1, pData, len);	//inserts data one slot after the register address
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	8c3a      	ldrh	r2, [r7, #32]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4618      	mov	r0, r3
 8002588:	f009 fdb5 	bl	800c0f6 <memcpy>

	/*We are now ready to transfer the buffer over the I2C bus*/
	returnValue = HAL_I2C_Master_Transmit_DMA(hi2c, DevAddress, data, len + 1);
 800258c:	8c3b      	ldrh	r3, [r7, #32]
 800258e:	3301      	adds	r3, #1
 8002590:	b29b      	uxth	r3, r3
 8002592:	8979      	ldrh	r1, [r7, #10]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f002 f81a 	bl	80045d0 <HAL_I2C_Master_Transmit_DMA>
 800259c:	4603      	mov	r3, r0
 800259e:	74fb      	strb	r3, [r7, #19]
	while (!i2c_TX_done);
 80025a0:	bf00      	nop
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <i2c_Write_Accelerometer+0x80>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0fb      	beq.n	80025a2 <i2c_Write_Accelerometer+0x4a>
	i2c_TX_done = 0;
 80025aa:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <i2c_Write_Accelerometer+0x80>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
	//free(data); //originally freed data here, but causes glitches and wrong data would be sent to dmp
	/*We wait until the Accelerometer effectively stores data*/
	while (HAL_I2C_IsDeviceReady(hi2c, DevAddress, 1, HAL_MAX_DELAY) != HAL_OK);	//peripheral can only accept the transmission once it finishes doing what it does
 80025b0:	bf00      	nop
 80025b2:	8979      	ldrh	r1, [r7, #10]
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	2201      	movs	r2, #1
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f002 f92c 	bl	8004818 <HAL_I2C_IsDeviceReady>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f5      	bne.n	80025b2 <i2c_Write_Accelerometer+0x5a>

	free(data); // free data at end
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f009 f9ee 	bl	800b9a8 <free>

	return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	2000036d 	.word	0x2000036d

080025dc <setBit>:
HAL_StatusTypeDef setBit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t bitNum, uint8_t data)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	4608      	mov	r0, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	807b      	strh	r3, [r7, #2]
 80025ee:	460b      	mov	r3, r1
 80025f0:	707b      	strb	r3, [r7, #1]
 80025f2:	4613      	mov	r3, r2
 80025f4:	703b      	strb	r3, [r7, #0]
	uint8_t buffer;
	i2c_Read_Accelerometer(hi2c, DevAddress, regAddress, &buffer, 1);
 80025f6:	f107 030e 	add.w	r3, r7, #14
 80025fa:	787a      	ldrb	r2, [r7, #1]
 80025fc:	8879      	ldrh	r1, [r7, #2]
 80025fe:	2001      	movs	r0, #1
 8002600:	9000      	str	r0, [sp, #0]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ff5a 	bl	80024bc <i2c_Read_Accelerometer>
	buffer = (data != 0) ? (buffer | (1 << bitNum)) : (buffer & ~(1 << bitNum));	//bit mask to only change one bit of the register
 8002608:	7e3b      	ldrb	r3, [r7, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <setBit+0x48>
 800260e:	783b      	ldrb	r3, [r7, #0]
 8002610:	2201      	movs	r2, #1
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	b25a      	sxtb	r2, r3
 8002618:	7bbb      	ldrb	r3, [r7, #14]
 800261a:	b25b      	sxtb	r3, r3
 800261c:	4313      	orrs	r3, r2
 800261e:	b25b      	sxtb	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e00b      	b.n	800263c <setBit+0x60>
 8002624:	783b      	ldrb	r3, [r7, #0]
 8002626:	2201      	movs	r2, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	b25b      	sxtb	r3, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	b25a      	sxtb	r2, r3
 8002632:	7bbb      	ldrb	r3, [r7, #14]
 8002634:	b25b      	sxtb	r3, r3
 8002636:	4013      	ands	r3, r2
 8002638:	b25b      	sxtb	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status = i2c_Write_Accelerometer(hi2c, DevAddress, regAddress, (uint8_t*) &buffer, 1);	//write the updated register
 800263e:	f107 030e 	add.w	r3, r7, #14
 8002642:	787a      	ldrb	r2, [r7, #1]
 8002644:	8879      	ldrh	r1, [r7, #2]
 8002646:	2001      	movs	r0, #1
 8002648:	9000      	str	r0, [sp, #0]
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff84 	bl	8002558 <i2c_Write_Accelerometer>
 8002650:	4603      	mov	r3, r0
 8002652:	73fb      	strb	r3, [r7, #15]
	return status;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <setBits>:
HAL_StatusTypeDef setBits(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t bitStart, uint8_t length, uint8_t data)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af02      	add	r7, sp, #8
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	4608      	mov	r0, r1
 8002668:	4611      	mov	r1, r2
 800266a:	461a      	mov	r2, r3
 800266c:	4603      	mov	r3, r0
 800266e:	807b      	strh	r3, [r7, #2]
 8002670:	460b      	mov	r3, r1
 8002672:	707b      	strb	r3, [r7, #1]
 8002674:	4613      	mov	r3, r2
 8002676:	703b      	strb	r3, [r7, #0]
	// 00011100 mask byte
	// 10101111 original value (sample)
	// 10100011 original & ~mask
	// 10101011 masked | value
	uint8_t buffer;
	i2c_Read_Accelerometer(hi2c, DevAddress, regAddress, &buffer, 1);
 8002678:	f107 030d 	add.w	r3, r7, #13
 800267c:	787a      	ldrb	r2, [r7, #1]
 800267e:	8879      	ldrh	r1, [r7, #2]
 8002680:	2001      	movs	r0, #1
 8002682:	9000      	str	r0, [sp, #0]
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff ff19 	bl	80024bc <i2c_Read_Accelerometer>
	uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 800268a:	7e3b      	ldrb	r3, [r7, #24]
 800268c:	2201      	movs	r2, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	1e5a      	subs	r2, r3, #1
 8002694:	7839      	ldrb	r1, [r7, #0]
 8002696:	7e3b      	ldrb	r3, [r7, #24]
 8002698:	1acb      	subs	r3, r1, r3
 800269a:	3301      	adds	r3, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	73fb      	strb	r3, [r7, #15]
	data <<= (bitStart - length + 1); // shift data into correct position
 80026a2:	7f3a      	ldrb	r2, [r7, #28]
 80026a4:	7839      	ldrb	r1, [r7, #0]
 80026a6:	7e3b      	ldrb	r3, [r7, #24]
 80026a8:	1acb      	subs	r3, r1, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	773b      	strb	r3, [r7, #28]
	data &= mask; // zero all non-important bits in data
 80026b2:	7f3a      	ldrb	r2, [r7, #28]
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	4013      	ands	r3, r2
 80026b8:	773b      	strb	r3, [r7, #28]
	buffer &= ~(mask); // zero all important bits in existing byte
 80026ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026be:	43db      	mvns	r3, r3
 80026c0:	b25a      	sxtb	r2, r3
 80026c2:	7b7b      	ldrb	r3, [r7, #13]
 80026c4:	b25b      	sxtb	r3, r3
 80026c6:	4013      	ands	r3, r2
 80026c8:	b25b      	sxtb	r3, r3
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	737b      	strb	r3, [r7, #13]
	buffer |= data; // combine data with existing byte
 80026ce:	7b7a      	ldrb	r2, [r7, #13]
 80026d0:	7f3b      	ldrb	r3, [r7, #28]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = i2c_Write_Accelerometer(hi2c, DevAddress, regAddress, (uint8_t*) &buffer, 1);	//write the updated register
 80026d8:	f107 030d 	add.w	r3, r7, #13
 80026dc:	787a      	ldrb	r2, [r7, #1]
 80026de:	8879      	ldrh	r1, [r7, #2]
 80026e0:	2001      	movs	r0, #1
 80026e2:	9000      	str	r0, [sp, #0]
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff37 	bl	8002558 <i2c_Write_Accelerometer>
 80026ea:	4603      	mov	r3, r0
 80026ec:	73bb      	strb	r3, [r7, #14]
	return status;
 80026ee:	7bbb      	ldrb	r3, [r7, #14]

}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <sensor_data_init>:
	sensor_data->gyro_y = (sensor_data->gyro_y_buf[0] << 8) | sensor_data->gyro_y_buf[1];
	sensor_data->gyro_z = (sensor_data->gyro_z_buf[0] << 8) | sensor_data->gyro_z_buf[1];
}

void sensor_data_init(mpu6050_sensor_data *sensor_data)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	//initialize values that will be calculated later anyways, probably not necessary to do
	sensor_data->yaw = 0;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
	sensor_data->pitch = 0;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	61da      	str	r2, [r3, #28]
	sensor_data->roll = 0;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
	...

08002724 <mpu6050_init_dmp>:

//MPU6050 code with DMP, credits: https://github.com/jrowberg/i2cdevlib/blob/master/Arduino/MPU6050/MPU6050_6Axis_MotionApps20.cpp#L272, MPU6050_6Axis_MotionApps20::dmpInitialize()
//code was built for arduino, so I'm porting it to stm32
void mpu6050_init_dmp(I2C_HandleTypeDef *hi2c) //combines mpu.initialize and mpu.dmpInitialize
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	@ 0x28
 8002728:	af04      	add	r7, sp, #16
 800272a:	6078      	str	r0, [r7, #4]
	 * after start-up). This function also sets both the accelerometer and the gyroscope
	 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
	 * the clock source to use the X Gyro for reference, which is slightly better than
	 * the default internal clock source.
	 */
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_XGYRO);
 800272c:	2301      	movs	r3, #1
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	2303      	movs	r3, #3
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2302      	movs	r3, #2
 8002736:	226b      	movs	r2, #107	@ 0x6b
 8002738:	21d0      	movs	r1, #208	@ 0xd0
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ff8f 	bl	800265e <setBits>
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS_250);
 8002740:	2300      	movs	r3, #0
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	2302      	movs	r3, #2
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2304      	movs	r3, #4
 800274a:	221b      	movs	r2, #27
 800274c:	21d0      	movs	r1, #208	@ 0xd0
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ff85 	bl	800265e <setBits>
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, MPU6050_GYRO_FS_250);
 8002754:	2300      	movs	r3, #0
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	2302      	movs	r3, #2
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	2304      	movs	r3, #4
 800275e:	221c      	movs	r2, #28
 8002760:	21d0      	movs	r1, #208	@ 0xd0
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ff7b 	bl	800265e <setBits>
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, false);
 8002768:	2300      	movs	r3, #0
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2306      	movs	r3, #6
 800276e:	226b      	movs	r2, #107	@ 0x6b
 8002770:	21d0      	movs	r1, #208	@ 0xd0
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff32 	bl	80025dc <setBit>

	//dmpInitialize()
	uint8_t command = 0x00;
 8002778:	2300      	movs	r3, #0
 800277a:	75bb      	strb	r3, [r7, #22]

	//reset the MPU6050
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);	//Device reset bit: When set to 1, this bit resets all internal registers to their default values.  The bit automatically clears to 0 once the reset is done.
 800277c:	2301      	movs	r3, #1
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2307      	movs	r3, #7
 8002782:	226b      	movs	r2, #107	@ 0x6b
 8002784:	21d0      	movs	r1, #208	@ 0xd0
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff ff28 	bl	80025dc <setBit>
	HAL_Delay(30); //wait a little
 800278c:	201e      	movs	r0, #30
 800278e:	f001 f883 	bl	8003898 <HAL_Delay>

	//turn off sleep mode to power cycle mpu6050
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, false);
 8002792:	2300      	movs	r3, #0
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2306      	movs	r3, #6
 8002798:	226b      	movs	r2, #107	@ 0x6b
 800279a:	21d0      	movs	r1, #208	@ 0xd0
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff1d 	bl	80025dc <setBit>

	// get MPU hardware revision
	setMemoryBank(hi2c, 0x10, true, true); //memory bank 2, prefetch enabled, userbank enabled
 80027a2:	2301      	movs	r3, #1
 80027a4:	2201      	movs	r2, #1
 80027a6:	2110      	movs	r1, #16
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f91d 	bl	80029e8 <setMemoryBank>
	setMemoryStartAddress(hi2c, 0x06);
 80027ae:	2106      	movs	r1, #6
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f947 	bl	8002a44 <setMemoryStartAddress>
	//DEBUG_PRINTLN(F("Checking hardware revision..."));
	//DEBUG_PRINT(F("Revision @ user[16][6] = "));
	//DEBUG_PRINTLN(readMemoryByte());
	uint8_t temp_buf = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	757b      	strb	r3, [r7, #21]
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_R_W, &temp_buf, 1); //read contents in MPU6050_RA_MEM_R_W register
 80027ba:	f107 0315 	add.w	r3, r7, #21
 80027be:	2201      	movs	r2, #1
 80027c0:	9200      	str	r2, [sp, #0]
 80027c2:	226f      	movs	r2, #111	@ 0x6f
 80027c4:	21d0      	movs	r1, #208	@ 0xd0
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fe78 	bl	80024bc <i2c_Read_Accelerometer>
	//DEBUG_PRINTLN(F("Resetting memory bank selection to 0..."));
	setMemoryBank(hi2c, 0, false, false); //memory bank 0, prefetch disabled, userbank disabled
 80027cc:	2300      	movs	r3, #0
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f908 	bl	80029e8 <setMemoryBank>

	// check OTP bank valid, want the first bit of temp_OTP_valid to be 1
	uint8_t temp_OTP_valid = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	75fb      	strb	r3, [r7, #23]
	temp_OTP_valid = getOTPBankValid(hi2c);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f943 	bl	8002a68 <getOTPBankValid>
 80027e2:	4603      	mov	r3, r0
 80027e4:	75fb      	strb	r3, [r7, #23]

	// setup weird slave stuff (?)
	//	DEBUG_PRINTLN(F("Setting slave 0 address to 0x7F..."));
	command = 0x7F; //the address
 80027e6:	237f      	movs	r3, #127	@ 0x7f
 80027e8:	75bb      	strb	r3, [r7, #22]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_I2C_SLV0_ADDR , (uint8_t*) &command, 1);
 80027ea:	f107 0316 	add.w	r3, r7, #22
 80027ee:	2201      	movs	r2, #1
 80027f0:	9200      	str	r2, [sp, #0]
 80027f2:	2225      	movs	r2, #37	@ 0x25
 80027f4:	21d0      	movs	r1, #208	@ 0xd0
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff feae 	bl	8002558 <i2c_Write_Accelerometer>
	//	DEBUG_PRINTLN(F("Disabling I2C Master mode..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, false);
 80027fc:	2300      	movs	r3, #0
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2305      	movs	r3, #5
 8002802:	226a      	movs	r2, #106	@ 0x6a
 8002804:	21d0      	movs	r1, #208	@ 0xd0
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff fee8 	bl	80025dc <setBit>
	//	DEBUG_PRINTLN(F("Setting slave 0 address to 0x68 (self)..."));
	command = 0x68;
 800280c:	2368      	movs	r3, #104	@ 0x68
 800280e:	75bb      	strb	r3, [r7, #22]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_I2C_SLV0_ADDR , (uint8_t*) &command, 1);
 8002810:	f107 0316 	add.w	r3, r7, #22
 8002814:	2201      	movs	r2, #1
 8002816:	9200      	str	r2, [sp, #0]
 8002818:	2225      	movs	r2, #37	@ 0x25
 800281a:	21d0      	movs	r1, #208	@ 0xd0
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff fe9b 	bl	8002558 <i2c_Write_Accelerometer>
	//	DEBUG_PRINTLN(F("Resetting I2C Master control..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);
 8002822:	2301      	movs	r3, #1
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	2301      	movs	r3, #1
 8002828:	226a      	movs	r2, #106	@ 0x6a
 800282a:	21d0      	movs	r1, #208	@ 0xd0
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff fed5 	bl	80025dc <setBit>
	HAL_Delay(20);
 8002832:	2014      	movs	r0, #20
 8002834:	f001 f830 	bl	8003898 <HAL_Delay>
	//	DEBUG_PRINTLN(F("Setting clock source to Z Gyro..."));
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, MPU6050_CLOCK_PLL_ZGYRO);
 8002838:	2303      	movs	r3, #3
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	2303      	movs	r3, #3
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2302      	movs	r3, #2
 8002842:	226b      	movs	r2, #107	@ 0x6b
 8002844:	21d0      	movs	r1, #208	@ 0xd0
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ff09 	bl	800265e <setBits>

	//Setting DMP and FIFO_OFLOW interrupts enabled
	setIntEnabled(hi2c, 1 << MPU6050_INTERRUPT_FIFO_OFLOW_BIT | 1 << MPU6050_INTERRUPT_DMP_INT_BIT); 	// 1<<4 | 1 << 1
 800284c:	2112      	movs	r1, #18
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f91e 	bl	8002a90 <setIntEnabled>

	//Setting sample rate to 200Hz, since we are using DLPF, 1KHz/(4+1) = 200Hz
	command = 0x04;	//divide by sample rate divider + 1
 8002854:	2304      	movs	r3, #4
 8002856:	75bb      	strb	r3, [r7, #22]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_SMPLRT_DIV, (uint8_t*) &command, 1);	// adjust sample rate divider
 8002858:	f107 0316 	add.w	r3, r7, #22
 800285c:	2201      	movs	r2, #1
 800285e:	9200      	str	r2, [sp, #0]
 8002860:	2219      	movs	r2, #25
 8002862:	21d0      	movs	r1, #208	@ 0xd0
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff fe77 	bl	8002558 <i2c_Write_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_SMPLRT_DIV, (uint8_t*) receive_buffer, 1);	//check sample rate divider contents
 800286a:	2301      	movs	r3, #1
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	4b5b      	ldr	r3, [pc, #364]	@ (80029dc <mpu6050_init_dmp+0x2b8>)
 8002870:	2219      	movs	r2, #25
 8002872:	21d0      	movs	r1, #208	@ 0xd0
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff fe21 	bl	80024bc <i2c_Read_Accelerometer>

	//DEBUG_PRINTLN(F("Setting external frame sync to TEMP_OUT_L[0]..."));
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, MPU6050_EXT_SYNC_TEMP_OUT_L);
 800287a:	2301      	movs	r3, #1
 800287c:	9301      	str	r3, [sp, #4]
 800287e:	2303      	movs	r3, #3
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2305      	movs	r3, #5
 8002884:	221a      	movs	r2, #26
 8002886:	21d0      	movs	r1, #208	@ 0xd0
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff fee8 	bl	800265e <setBits>

	//Setting DLPF bandwidth to 42Hz
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, MPU6050_DLPF_BW_42);
 800288e:	2303      	movs	r3, #3
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	2303      	movs	r3, #3
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2302      	movs	r3, #2
 8002898:	221a      	movs	r2, #26
 800289a:	21d0      	movs	r1, #208	@ 0xd0
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff fede 	bl	800265e <setBits>

	//Setting gyro sensitivity to +/- 2000 deg/sec FIXME set to 1000 deg/sec later
	setBits(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, MPU6050_GYRO_FS_2000);
 80028a2:	2303      	movs	r3, #3
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	2302      	movs	r3, #2
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2304      	movs	r3, #4
 80028ac:	221b      	movs	r2, #27
 80028ae:	21d0      	movs	r1, #208	@ 0xd0
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff fed4 	bl	800265e <setBits>

	// load DMP code into memory banks
	//DEBUG_PRINT(F("Writing DMP code to MPU memory banks ("));
	//DEBUG_PRINT(MPU6050_DMP_CODE_SIZE);
	//DEBUG_PRINTLN(F(" bytes)"));
	if (!writeProgMemoryBlock(hi2c, dmpMemory, MPU6050_DMP_CODE_SIZE, 0, 0, true))
 80028b6:	2301      	movs	r3, #1
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	2300      	movs	r3, #0
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2300      	movs	r3, #0
 80028c0:	f240 7289 	movw	r2, #1929	@ 0x789
 80028c4:	4946      	ldr	r1, [pc, #280]	@ (80029e0 <mpu6050_init_dmp+0x2bc>)
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f9ce 	bl	8002c68 <writeProgMemoryBlock>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f083 0301 	eor.w	r3, r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d17c      	bne.n	80029d2 <mpu6050_init_dmp+0x2ae>
		return 1; // Failed
	//DEBUG_PRINTLN(F("Success! DMP code written and verified."));

	// Set the FIFO Rate Divisor int the DMP Firmware Memory
	unsigned char dmpUpdate[] = {0x00, MPU6050_DMP_FIFO_RATE_DIVISOR};
 80028d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028dc:	823b      	strh	r3, [r7, #16]
	writeMemoryBlock(hi2c, dmpUpdate, 0x02, 0x02, 0x16, true, false); // Lets write the dmpUpdate data to the Firmware image, we have 2 bytes to write in bank 0x02 with the Offset 0x16
 80028de:	f107 0110 	add.w	r1, r7, #16
 80028e2:	2300      	movs	r3, #0
 80028e4:	9302      	str	r3, [sp, #8]
 80028e6:	2301      	movs	r3, #1
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	2316      	movs	r3, #22
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2302      	movs	r3, #2
 80028f0:	2202      	movs	r2, #2
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f8de 	bl	8002ab4 <writeMemoryBlock>

	//write start address MSB into register
	uint8_t config = 0x03;
 80028f8:	2303      	movs	r3, #3
 80028fa:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_DMP_CFG_1, (uint8_t*) &config, 1); //setDMPConfig1(0x03);
 80028fc:	f107 030f 	add.w	r3, r7, #15
 8002900:	2201      	movs	r2, #1
 8002902:	9200      	str	r2, [sp, #0]
 8002904:	2270      	movs	r2, #112	@ 0x70
 8002906:	21d0      	movs	r1, #208	@ 0xd0
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fe25 	bl	8002558 <i2c_Write_Accelerometer>

	//write start address LSB into register
	config = 0x00;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_DMP_CFG_2, (uint8_t*) &config, 1); //	setDMPConfig2(0x00);
 8002912:	f107 030f 	add.w	r3, r7, #15
 8002916:	2201      	movs	r2, #1
 8002918:	9200      	str	r2, [sp, #0]
 800291a:	2271      	movs	r2, #113	@ 0x71
 800291c:	21d0      	movs	r1, #208	@ 0xd0
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff fe1a 	bl	8002558 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Clearing OTP Bank flag..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, false); //	setOTPBankValid(false);
 8002924:	2300      	movs	r3, #0
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2300      	movs	r3, #0
 800292a:	2200      	movs	r2, #0
 800292c:	21d0      	movs	r1, #208	@ 0xd0
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff fe54 	bl	80025dc <setBit>

	//DEBUG_PRINTLN(F("Setting motion detection threshold to 2..."));
	uint8_t threshold = 2;
 8002934:	2302      	movs	r3, #2
 8002936:	73bb      	strb	r3, [r7, #14]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MOT_THR, (uint8_t*) &threshold, 1); //setMotionDetectionThreshold(2);
 8002938:	f107 030e 	add.w	r3, r7, #14
 800293c:	2201      	movs	r2, #1
 800293e:	9200      	str	r2, [sp, #0]
 8002940:	221f      	movs	r2, #31
 8002942:	21d0      	movs	r1, #208	@ 0xd0
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff fe07 	bl	8002558 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Setting zero-motion detection threshold to 156..."));
	threshold = 156;
 800294a:	239c      	movs	r3, #156	@ 0x9c
 800294c:	73bb      	strb	r3, [r7, #14]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_ZRMOT_THR, (uint8_t*) &threshold, 1); //	setZeroMotionDetectionThreshold(156);
 800294e:	f107 030e 	add.w	r3, r7, #14
 8002952:	2201      	movs	r2, #1
 8002954:	9200      	str	r2, [sp, #0]
 8002956:	2221      	movs	r2, #33	@ 0x21
 8002958:	21d0      	movs	r1, #208	@ 0xd0
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fdfc 	bl	8002558 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Setting motion detection duration to 80..."));
	uint8_t duration = 80;
 8002960:	2350      	movs	r3, #80	@ 0x50
 8002962:	737b      	strb	r3, [r7, #13]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MOT_DUR, (uint8_t*) &duration, 1); //	setMotionDetectionDuration(80);
 8002964:	f107 030d 	add.w	r3, r7, #13
 8002968:	2201      	movs	r2, #1
 800296a:	9200      	str	r2, [sp, #0]
 800296c:	2220      	movs	r2, #32
 800296e:	21d0      	movs	r1, #208	@ 0xd0
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff fdf1 	bl	8002558 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Setting zero-motion detection duration to 0..."));
	duration = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	737b      	strb	r3, [r7, #13]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_ZRMOT_DUR, (uint8_t*) &duration, 1); //	setZeroMotionDetectionDuration(0);
 800297a:	f107 030d 	add.w	r3, r7, #13
 800297e:	2201      	movs	r2, #1
 8002980:	9200      	str	r2, [sp, #0]
 8002982:	2222      	movs	r2, #34	@ 0x22
 8002984:	21d0      	movs	r1, #208	@ 0xd0
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff fde6 	bl	8002558 <i2c_Write_Accelerometer>

	//	DEBUG_PRINTLN(F("Enabling FIFO..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, true); //	setFIFOEnabled(true);
 800298c:	2301      	movs	r3, #1
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	2306      	movs	r3, #6
 8002992:	226a      	movs	r2, #106	@ 0x6a
 8002994:	21d0      	movs	r1, #208	@ 0xd0
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff fe20 	bl	80025dc <setBit>

	//	DEBUG_PRINTLN(F("Resetting DMP..."));
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true); //	resetDMP();
 800299c:	2301      	movs	r3, #1
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2303      	movs	r3, #3
 80029a2:	226a      	movs	r2, #106	@ 0x6a
 80029a4:	21d0      	movs	r1, #208	@ 0xd0
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff fe18 	bl	80025dc <setBit>

	//	DEBUG_PRINTLN(F("DMP is good to go! Finally."));
	//
	//	DEBUG_PRINTLN(F("Disabling DMP (you turn it on later)..."));
	setDMPEnabled(hi2c, false);
 80029ac:	2100      	movs	r1, #0
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f977 	bl	8002ca2 <setDMPEnabled>
	//
	//	DEBUG_PRINTLN(F("Setting up internal 42-byte (default) DMP packet buffer..."));
	dmpPacketSize = 42;
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <mpu6050_init_dmp+0x2c0>)
 80029b6:	222a      	movs	r2, #42	@ 0x2a
 80029b8:	801a      	strh	r2, [r3, #0]
	//
	//	DEBUG_PRINTLN(F("Resetting FIFO and clearing INT status one last time..."));
	resetFIFO(hi2c);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f9a2 	bl	8002d04 <resetFIFO>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_INT_STATUS, (uint8_t*) receive_buffer, 1);	//	getIntStatus();
 80029c0:	2301      	movs	r3, #1
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <mpu6050_init_dmp+0x2b8>)
 80029c6:	223a      	movs	r2, #58	@ 0x3a
 80029c8:	21d0      	movs	r1, #208	@ 0xd0
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fd76 	bl	80024bc <i2c_Read_Accelerometer>

	return 0;
 80029d0:	e000      	b.n	80029d4 <mpu6050_init_dmp+0x2b0>
		return 1; // Failed
 80029d2:	bf00      	nop
}
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000370 	.word	0x20000370
 80029e0:	0800cc88 	.word	0x0800cc88
 80029e4:	20000384 	.word	0x20000384

080029e8 <setMemoryBank>:

void setMemoryBank(I2C_HandleTypeDef *hi2c, uint8_t bank, bool prefetchEnabled, bool userBank)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	4608      	mov	r0, r1
 80029f2:	4611      	mov	r1, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	70fb      	strb	r3, [r7, #3]
 80029fa:	460b      	mov	r3, r1
 80029fc:	70bb      	strb	r3, [r7, #2]
 80029fe:	4613      	mov	r3, r2
 8002a00:	707b      	strb	r3, [r7, #1]
	bank &= 0x1F;
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	70fb      	strb	r3, [r7, #3]
	if (userBank)
 8002a0c:	787b      	ldrb	r3, [r7, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d004      	beq.n	8002a1c <setMemoryBank+0x34>
		bank |= 0x20;
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	f043 0320 	orr.w	r3, r3, #32
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	70fb      	strb	r3, [r7, #3]
	if (prefetchEnabled)
 8002a1c:	78bb      	ldrb	r3, [r7, #2]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <setMemoryBank+0x44>
		bank |= 0x40;
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	70fb      	strb	r3, [r7, #3]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_BANK_SEL, (uint8_t*) &bank, 1); //write to BANK_SEL = 0x6D register (not in register map documentation)
 8002a2c:	1cfb      	adds	r3, r7, #3
 8002a2e:	2201      	movs	r2, #1
 8002a30:	9200      	str	r2, [sp, #0]
 8002a32:	226d      	movs	r2, #109	@ 0x6d
 8002a34:	21d0      	movs	r1, #208	@ 0xd0
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff fd8e 	bl	8002558 <i2c_Write_Accelerometer>

}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <setMemoryStartAddress>:
void setMemoryStartAddress(I2C_HandleTypeDef *hi2c, uint8_t address)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	70fb      	strb	r3, [r7, #3]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_START_ADDR, (uint8_t*) &address, 1); //MPU6050_RA_MEM_START_ADDR = 0x6E, write the start address to this register
 8002a50:	1cfb      	adds	r3, r7, #3
 8002a52:	2201      	movs	r2, #1
 8002a54:	9200      	str	r2, [sp, #0]
 8002a56:	226e      	movs	r2, #110	@ 0x6e
 8002a58:	21d0      	movs	r1, #208	@ 0xd0
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff fd7c 	bl	8002558 <i2c_Write_Accelerometer>
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <getOTPBankValid>:
uint8_t getOTPBankValid(I2C_HandleTypeDef *hi2c)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	6078      	str	r0, [r7, #4]
	uint8_t temp_buf = 0; //bit 0 is MPU6050_TC_OTP_BNK_VLD_BIT, which is what we need to confirm if OTP bank is valid
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_XG_OFFS_TC, &temp_buf, 1); //MPU6050_RA_XG_OFFS_TC = 0x00
 8002a74:	f107 030f 	add.w	r3, r7, #15
 8002a78:	2201      	movs	r2, #1
 8002a7a:	9200      	str	r2, [sp, #0]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	21d0      	movs	r1, #208	@ 0xd0
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff fd1b 	bl	80024bc <i2c_Read_Accelerometer>

	return temp_buf;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <setIntEnabled>:
void setIntEnabled(I2C_HandleTypeDef *hi2c, uint8_t enabled)
{ //call this function to choose which interrupts are enabled
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	70fb      	strb	r3, [r7, #3]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_INT_ENABLE, (uint8_t*) &enabled, 1);
 8002a9c:	1cfb      	adds	r3, r7, #3
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	9200      	str	r2, [sp, #0]
 8002aa2:	2238      	movs	r2, #56	@ 0x38
 8002aa4:	21d0      	movs	r1, #208	@ 0xd0
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fd56 	bl	8002558 <i2c_Write_Accelerometer>
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <writeMemoryBlock>:
bool writeMemoryBlock(I2C_HandleTypeDef *hi2c, const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	@ 0x28
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	80fb      	strh	r3, [r7, #6]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	717b      	strb	r3, [r7, #5]
	setMemoryBank(hi2c, bank, false, false);
 8002aca:	7979      	ldrb	r1, [r7, #5]
 8002acc:	2300      	movs	r3, #0
 8002ace:	2200      	movs	r2, #0
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f7ff ff89 	bl	80029e8 <setMemoryBank>
	setMemoryStartAddress(hi2c, address);
 8002ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ada:	4619      	mov	r1, r3
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f7ff ffb1 	bl	8002a44 <setMemoryStartAddress>
	uint8_t chunkSize;
	uint8_t *verifyBuffer = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
	uint8_t *progBuffer = 0;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
	uint16_t i;
	uint8_t j;
	if (verify)
 8002aea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <writeMemoryBlock+0x48>
		verifyBuffer = (uint8_t*) malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002af2:	2010      	movs	r0, #16
 8002af4:	f008 ff50 	bl	800b998 <malloc>
 8002af8:	4603      	mov	r3, r0
 8002afa:	61bb      	str	r3, [r7, #24]
	if (useProgMem)
 8002afc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d004      	beq.n	8002b0e <writeMemoryBlock+0x5a>
		progBuffer = (uint8_t*) malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);
 8002b04:	2010      	movs	r0, #16
 8002b06:	f008 ff47 	bl	800b998 <malloc>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	617b      	str	r3, [r7, #20]
	for (i = 0; i < dataSize;)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	827b      	strh	r3, [r7, #18]
 8002b12:	e091      	b.n	8002c38 <writeMemoryBlock+0x184>
	{
		// determine correct chunk size according to bank position and data size
		chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;
 8002b14:	2310      	movs	r3, #16
 8002b16:	77fb      	strb	r3, [r7, #31]

		// make sure we don't go past the data size
		if (i + chunkSize > dataSize)
 8002b18:	8a7a      	ldrh	r2, [r7, #18]
 8002b1a:	7ffb      	ldrb	r3, [r7, #31]
 8002b1c:	441a      	add	r2, r3
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	dd05      	ble.n	8002b30 <writeMemoryBlock+0x7c>
			chunkSize = dataSize - i;
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	8a7b      	ldrh	r3, [r7, #18]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	77fb      	strb	r3, [r7, #31]

		// make sure this chunk doesn't go past the bank boundary (256 bytes)
		if (chunkSize > 256 - address)
 8002b30:	7ffa      	ldrb	r2, [r7, #31]
 8002b32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002b36:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	dd03      	ble.n	8002b46 <writeMemoryBlock+0x92>
			chunkSize = 256 - address;
 8002b3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002b42:	425b      	negs	r3, r3
 8002b44:	77fb      	strb	r3, [r7, #31]

		if (useProgMem)
 8002b46:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d014      	beq.n	8002b78 <writeMemoryBlock+0xc4>
		{
			// write the chunk of data as specified
			for (j = 0; j < chunkSize; j++)
 8002b4e:	2300      	movs	r3, #0
 8002b50:	747b      	strb	r3, [r7, #17]
 8002b52:	e00c      	b.n	8002b6e <writeMemoryBlock+0xba>
				progBuffer[j] = pgm_read_byte(data + i + j);
 8002b54:	8a7a      	ldrh	r2, [r7, #18]
 8002b56:	7c7b      	ldrb	r3, [r7, #17]
 8002b58:	4413      	add	r3, r2
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	441a      	add	r2, r3
 8002b5e:	7c7b      	ldrb	r3, [r7, #17]
 8002b60:	6979      	ldr	r1, [r7, #20]
 8002b62:	440b      	add	r3, r1
 8002b64:	7812      	ldrb	r2, [r2, #0]
 8002b66:	701a      	strb	r2, [r3, #0]
			for (j = 0; j < chunkSize; j++)
 8002b68:	7c7b      	ldrb	r3, [r7, #17]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	747b      	strb	r3, [r7, #17]
 8002b6e:	7c7a      	ldrb	r2, [r7, #17]
 8002b70:	7ffb      	ldrb	r3, [r7, #31]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d3ee      	bcc.n	8002b54 <writeMemoryBlock+0xa0>
 8002b76:	e003      	b.n	8002b80 <writeMemoryBlock+0xcc>
		}
		else
		{
			// write the chunk of data as specified
			progBuffer = (uint8_t*) data + i;
 8002b78:	8a7b      	ldrh	r3, [r7, #18]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]
		}

		i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_R_W, (uint8_t*) progBuffer, chunkSize);
 8002b80:	7ffb      	ldrb	r3, [r7, #31]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	226f      	movs	r2, #111	@ 0x6f
 8002b8a:	21d0      	movs	r1, #208	@ 0xd0
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f7ff fce3 	bl	8002558 <i2c_Write_Accelerometer>

		// verify data if needed
		if (verify && verifyBuffer)
 8002b92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d02c      	beq.n	8002bf4 <writeMemoryBlock+0x140>
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d029      	beq.n	8002bf4 <writeMemoryBlock+0x140>
		{
			setMemoryBank(hi2c, bank, false, false);
 8002ba0:	7979      	ldrb	r1, [r7, #5]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7ff ff1e 	bl	80029e8 <setMemoryBank>
			setMemoryStartAddress(hi2c, address);
 8002bac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f7ff ff46 	bl	8002a44 <setMemoryStartAddress>
			i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_MEM_R_W, (uint8_t*) verifyBuffer, chunkSize);
 8002bb8:	7ffb      	ldrb	r3, [r7, #31]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	226f      	movs	r2, #111	@ 0x6f
 8002bc2:	21d0      	movs	r1, #208	@ 0xd0
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7ff fc79 	bl	80024bc <i2c_Read_Accelerometer>
			if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0)
 8002bca:	7ffb      	ldrb	r3, [r7, #31]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	6978      	ldr	r0, [r7, #20]
 8002bd2:	f009 f997 	bl	800bf04 <memcmp>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00b      	beq.n	8002bf4 <writeMemoryBlock+0x140>
				 Serial.print(" 0x");
				 if (verifyBuffer[i + j] < 16) Serial.print("0");
				 Serial.print(verifyBuffer[i + j], HEX);
				 }
				 Serial.print("\n");*/
				free(verifyBuffer);
 8002bdc:	69b8      	ldr	r0, [r7, #24]
 8002bde:	f008 fee3 	bl	800b9a8 <free>
				if (useProgMem)
 8002be2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <writeMemoryBlock+0x13c>
					free(progBuffer);
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f008 fedc 	bl	800b9a8 <free>
				return false; // uh oh.
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e035      	b.n	8002c60 <writeMemoryBlock+0x1ac>
			}
		}

		// increase byte index by [chunkSize]
		i += chunkSize;
 8002bf4:	7ffb      	ldrb	r3, [r7, #31]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	8a7b      	ldrh	r3, [r7, #18]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	827b      	strh	r3, [r7, #18]

		// uint8_t automatically wraps to 0 at 256
		address += chunkSize;
 8002bfe:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002c02:	7ffb      	ldrb	r3, [r7, #31]
 8002c04:	4413      	add	r3, r2
 8002c06:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

		// if we aren't done, update bank (if necessary) and address
		if (i < dataSize)
 8002c0a:	8a7a      	ldrh	r2, [r7, #18]
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d212      	bcs.n	8002c38 <writeMemoryBlock+0x184>
		{
			if (address == 0)
 8002c12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d102      	bne.n	8002c20 <writeMemoryBlock+0x16c>
				bank++;
 8002c1a:	797b      	ldrb	r3, [r7, #5]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	717b      	strb	r3, [r7, #5]
			setMemoryBank(hi2c, bank, false, false);
 8002c20:	7979      	ldrb	r1, [r7, #5]
 8002c22:	2300      	movs	r3, #0
 8002c24:	2200      	movs	r2, #0
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7ff fede 	bl	80029e8 <setMemoryBank>
			setMemoryStartAddress(hi2c, address);
 8002c2c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002c30:	4619      	mov	r1, r3
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f7ff ff06 	bl	8002a44 <setMemoryStartAddress>
	for (i = 0; i < dataSize;)
 8002c38:	8a7a      	ldrh	r2, [r7, #18]
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	f4ff af69 	bcc.w	8002b14 <writeMemoryBlock+0x60>
		}
	}
	if (verify)
 8002c42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <writeMemoryBlock+0x19c>
		free(verifyBuffer);
 8002c4a:	69b8      	ldr	r0, [r7, #24]
 8002c4c:	f008 feac 	bl	800b9a8 <free>
	if (useProgMem)
 8002c50:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <writeMemoryBlock+0x1aa>
		free(progBuffer);
 8002c58:	6978      	ldr	r0, [r7, #20]
 8002c5a:	f008 fea5 	bl	800b9a8 <free>
	return true;
 8002c5e:	2301      	movs	r3, #1
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3720      	adds	r7, #32
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <writeProgMemoryBlock>:

bool writeProgMemoryBlock(I2C_HandleTypeDef *hi2c, const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af04      	add	r7, sp, #16
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	4611      	mov	r1, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	460b      	mov	r3, r1
 8002c78:	80fb      	strh	r3, [r7, #6]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	717b      	strb	r3, [r7, #5]
	return writeMemoryBlock(hi2c, data, dataSize, bank, address, verify, true);
 8002c7e:	7979      	ldrb	r1, [r7, #5]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	2301      	movs	r3, #1
 8002c84:	9302      	str	r3, [sp, #8]
 8002c86:	7f3b      	ldrb	r3, [r7, #28]
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	7e3b      	ldrb	r3, [r7, #24]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7ff ff0e 	bl	8002ab4 <writeMemoryBlock>
 8002c98:	4603      	mov	r3, r0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <setDMPEnabled>:

void setDMPEnabled(I2C_HandleTypeDef *hi2c, bool enabled)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af02      	add	r7, sp, #8
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	70fb      	strb	r3, [r7, #3]
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled); //	resetDMP();
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	226a      	movs	r2, #106	@ 0x6a
 8002cb6:	21d0      	movs	r1, #208	@ 0xd0
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff fc8f 	bl	80025dc <setBit>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <getFIFOCount>:
//    getFIFOBytes(data, length); //Get 1 packet
//    return 1;
//}

uint16_t getFIFOCount(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	6078      	str	r0, [r7, #4]
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_FIFO_COUNTH, (uint8_t*) receive_buffer, 2);
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002d00 <getFIFOCount+0x38>)
 8002cd6:	2272      	movs	r2, #114	@ 0x72
 8002cd8:	21d0      	movs	r1, #208	@ 0xd0
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff fbee 	bl	80024bc <i2c_Read_Accelerometer>
	return (((uint16_t) receive_buffer[0]) << 8) | receive_buffer[1];
 8002ce0:	4b07      	ldr	r3, [pc, #28]	@ (8002d00 <getFIFOCount+0x38>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	b21a      	sxth	r2, r3
 8002cea:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <getFIFOCount+0x38>)
 8002cec:	785b      	ldrb	r3, [r3, #1]
 8002cee:	b21b      	sxth	r3, r3
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	b21b      	sxth	r3, r3
 8002cf4:	b29b      	uxth	r3, r3
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000370 	.word	0x20000370

08002d04 <resetFIFO>:

void resetFIFO(I2C_HandleTypeDef *hi2c)
{ //reset FIFO when it overflows to make sure the data is synchronized.
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	6078      	str	r0, [r7, #4]
	setBit(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	2302      	movs	r3, #2
 8002d12:	226a      	movs	r2, #106	@ 0x6a
 8002d14:	21d0      	movs	r1, #208	@ 0xd0
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fc60 	bl	80025dc <setBit>
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <getFIFOBytes>:

void getFIFOBytes(I2C_HandleTypeDef *hi2c, uint8_t *data, uint8_t length)
{ //read Bytes from FIFO
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	71fb      	strb	r3, [r7, #7]
	if (length > 0)
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d009      	beq.n	8002d4c <getFIFOBytes+0x28>
	{
		i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, MPU6050_RA_FIFO_R_W, (uint8_t*) data, length);
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2274      	movs	r2, #116	@ 0x74
 8002d42:	21d0      	movs	r1, #208	@ 0xd0
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f7ff fbb9 	bl	80024bc <i2c_Read_Accelerometer>
	}
	else
	{
		*data = 0;
	}
}
 8002d4a:	e002      	b.n	8002d52 <getFIFOBytes+0x2e>
		*data = 0;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <dmpGetQuaternion>:

uint8_t dmpGetQuaternion(int16_t *data, const uint8_t *packet)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
	// TODO: accommodate different arrangements of sent data (ONLY default supported now)
	if (packet == 0)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <dmpGetQuaternion+0x16>
	{
		packet = dmpPacketBuffer;
 8002d6c:	4b21      	ldr	r3, [pc, #132]	@ (8002df4 <dmpGetQuaternion+0x98>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	603b      	str	r3, [r7, #0]
	}
	data[0] = ((packet[0] << 8) | packet[1]);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	b21b      	sxth	r3, r3
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	b21a      	sxth	r2, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b21b      	sxth	r3, r3
 8002d84:	4313      	orrs	r3, r2
 8002d86:	b21a      	sxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	801a      	strh	r2, [r3, #0]
	data[1] = ((packet[4] << 8) | packet[5]);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b21b      	sxth	r3, r3
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	b219      	sxth	r1, r3
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	3305      	adds	r3, #5
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	b21a      	sxth	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3302      	adds	r3, #2
 8002da4:	430a      	orrs	r2, r1
 8002da6:	b212      	sxth	r2, r2
 8002da8:	801a      	strh	r2, [r3, #0]
	data[2] = ((packet[8] << 8) | packet[9]);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	3308      	adds	r3, #8
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b21b      	sxth	r3, r3
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	b219      	sxth	r1, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	3309      	adds	r3, #9
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b21a      	sxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	b212      	sxth	r2, r2
 8002dc6:	801a      	strh	r2, [r3, #0]
	data[3] = ((packet[12] << 8) | packet[13]);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	330c      	adds	r3, #12
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	b21b      	sxth	r3, r3
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	b219      	sxth	r1, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	330d      	adds	r3, #13
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b21a      	sxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3306      	adds	r3, #6
 8002de0:	430a      	orrs	r2, r1
 8002de2:	b212      	sxth	r2, r2
 8002de4:	801a      	strh	r2, [r3, #0]
	return 0;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20000388 	.word	0x20000388

08002df8 <dmpGetQuaternionQuatStruct>:

uint8_t dmpGetQuaternionQuatStruct(Quaternion *q, const uint8_t *packet)
{ //returns data in struct format, which is more organized than dmpGetQuaternion
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
	// TODO: accommodate different arrangements of sent data (ONLY default supported now)
	int16_t qI[4];
	uint8_t status = dmpGetQuaternion(qI, packet);
 8002e02:	f107 030c 	add.w	r3, r7, #12
 8002e06:	6839      	ldr	r1, [r7, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ffa7 	bl	8002d5c <dmpGetQuaternion>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	75fb      	strb	r3, [r7, #23]
	if (status == 0)
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d13d      	bne.n	8002e94 <dmpGetQuaternionQuatStruct+0x9c>
	{
		q->w = (float) qI[0] / 16384.0f;
 8002e18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd ff0d 	bl	8000c3c <__aeabi_i2f>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe f80f 	bl	8000e4c <__aeabi_fdiv>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461a      	mov	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	601a      	str	r2, [r3, #0]
		q->x = (float) qI[1] / 16384.0f;
 8002e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fefe 	bl	8000c3c <__aeabi_i2f>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe f800 	bl	8000e4c <__aeabi_fdiv>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	461a      	mov	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	605a      	str	r2, [r3, #4]
		q->y = (float) qI[2] / 16384.0f;
 8002e54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd feef 	bl	8000c3c <__aeabi_i2f>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd fff1 	bl	8000e4c <__aeabi_fdiv>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	609a      	str	r2, [r3, #8]
		q->z = (float) qI[3] / 16384.0f;
 8002e72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd fee0 	bl	8000c3c <__aeabi_i2f>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd ffe2 	bl	8000e4c <__aeabi_fdiv>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]
		return 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	e000      	b.n	8002e96 <dmpGetQuaternionQuatStruct+0x9e>
	}
	return status; // int16 return value, indicates error if this line is reached
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <dmpGetGravity>:
uint8_t dmpGetGravity(VectorFloat *v, Quaternion *q) {
 8002e9e:	b590      	push	{r4, r7, lr}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
    v -> x = 2 * (q -> x*q -> z - q -> w*q -> y);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f7fd ff16 	bl	8000ce4 <__aeabi_fmul>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461c      	mov	r4, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	f7fd ff0c 	bl	8000ce4 <__aeabi_fmul>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f7fd fdfd 	bl	8000ad0 <__aeabi_fsub>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fdfa 	bl	8000ad4 <__addsf3>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	601a      	str	r2, [r3, #0]
    v -> y = 2 * (q -> w*q -> x + q -> y*q -> z);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	f7fd fef6 	bl	8000ce4 <__aeabi_fmul>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461c      	mov	r4, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f7fd feec 	bl	8000ce4 <__aeabi_fmul>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7fd fddf 	bl	8000ad4 <__addsf3>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fdda 	bl	8000ad4 <__addsf3>
 8002f20:	4603      	mov	r3, r0
 8002f22:	461a      	mov	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	605a      	str	r2, [r3, #4]
    v -> z = q -> w*q -> w - q -> x*q -> x - q -> y*q -> y + q -> z*q -> z;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7fd fed6 	bl	8000ce4 <__aeabi_fmul>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461c      	mov	r4, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7fd fecc 	bl	8000ce4 <__aeabi_fmul>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4620      	mov	r0, r4
 8002f52:	f7fd fdbd 	bl	8000ad0 <__aeabi_fsub>
 8002f56:	4603      	mov	r3, r0
 8002f58:	461c      	mov	r4, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	4619      	mov	r1, r3
 8002f64:	4610      	mov	r0, r2
 8002f66:	f7fd febd 	bl	8000ce4 <__aeabi_fmul>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7fd fdae 	bl	8000ad0 <__aeabi_fsub>
 8002f74:	4603      	mov	r3, r0
 8002f76:	461c      	mov	r4, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f7fd feae 	bl	8000ce4 <__aeabi_fmul>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f7fd fda1 	bl	8000ad4 <__addsf3>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	609a      	str	r2, [r3, #8]
    return 0;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd90      	pop	{r4, r7, pc}
 8002fa4:	0000      	movs	r0, r0
	...

08002fa8 <dmpGetYawPitchRoll>:
uint8_t dmpGetYawPitchRoll(float *data, Quaternion *q, VectorFloat *gravity) {
 8002fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
    // yaw: (about Z axis)
    data[0] = atan2(2*q -> x*q -> y - 2*q -> w*q -> z, 2*q -> w*q -> w + 2*q -> x*q -> x - 1);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fd8a 	bl	8000ad4 <__addsf3>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f7fd fe8a 	bl	8000ce4 <__aeabi_fmul>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461c      	mov	r4, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fd7a 	bl	8000ad4 <__addsf3>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f7fd fe7a 	bl	8000ce4 <__aeabi_fmul>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f7fd fd6b 	bl	8000ad0 <__aeabi_fsub>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fd fa0b 	bl	8000418 <__aeabi_f2d>
 8003002:	4604      	mov	r4, r0
 8003004:	460d      	mov	r5, r1
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4619      	mov	r1, r3
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd fd61 	bl	8000ad4 <__addsf3>
 8003012:	4603      	mov	r3, r0
 8003014:	461a      	mov	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4619      	mov	r1, r3
 800301c:	4610      	mov	r0, r2
 800301e:	f7fd fe61 	bl	8000ce4 <__aeabi_fmul>
 8003022:	4603      	mov	r3, r0
 8003024:	461e      	mov	r6, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4619      	mov	r1, r3
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fd51 	bl	8000ad4 <__addsf3>
 8003032:	4603      	mov	r3, r0
 8003034:	461a      	mov	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	4619      	mov	r1, r3
 800303c:	4610      	mov	r0, r2
 800303e:	f7fd fe51 	bl	8000ce4 <__aeabi_fmul>
 8003042:	4603      	mov	r3, r0
 8003044:	4619      	mov	r1, r3
 8003046:	4630      	mov	r0, r6
 8003048:	f7fd fd44 	bl	8000ad4 <__addsf3>
 800304c:	4603      	mov	r3, r0
 800304e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd fd3c 	bl	8000ad0 <__aeabi_fsub>
 8003058:	4603      	mov	r3, r0
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd f9dc 	bl	8000418 <__aeabi_f2d>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4620      	mov	r0, r4
 8003066:	4629      	mov	r1, r5
 8003068:	f009 f9c8 	bl	800c3fc <atan2>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	f7fd fcd8 	bl	8000a28 <__aeabi_d2f>
 8003078:	4602      	mov	r2, r0
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	601a      	str	r2, [r3, #0]
    // pitch: (nose up/down, about Y axis)
    data[1] = atan2(gravity -> x , sqrt(gravity -> y*gravity -> y + gravity -> z*gravity -> z));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd f9c8 	bl	8000418 <__aeabi_f2d>
 8003088:	4604      	mov	r4, r0
 800308a:	460d      	mov	r5, r1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f7fd fe24 	bl	8000ce4 <__aeabi_fmul>
 800309c:	4603      	mov	r3, r0
 800309e:	461e      	mov	r6, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	4619      	mov	r1, r3
 80030aa:	4610      	mov	r0, r2
 80030ac:	f7fd fe1a 	bl	8000ce4 <__aeabi_fmul>
 80030b0:	4603      	mov	r3, r0
 80030b2:	4619      	mov	r1, r3
 80030b4:	4630      	mov	r0, r6
 80030b6:	f7fd fd0d 	bl	8000ad4 <__addsf3>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd f9ab 	bl	8000418 <__aeabi_f2d>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4610      	mov	r0, r2
 80030c8:	4619      	mov	r1, r3
 80030ca:	f009 f999 	bl	800c400 <sqrt>
 80030ce:	4602      	mov	r2, r0
 80030d0:	460b      	mov	r3, r1
 80030d2:	4620      	mov	r0, r4
 80030d4:	4629      	mov	r1, r5
 80030d6:	f009 f991 	bl	800c3fc <atan2>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	68f9      	ldr	r1, [r7, #12]
 80030e0:	1d0c      	adds	r4, r1, #4
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	f7fd fc9f 	bl	8000a28 <__aeabi_d2f>
 80030ea:	4603      	mov	r3, r0
 80030ec:	6023      	str	r3, [r4, #0]
    // roll: (tilt left/right, about X axis)
    data[2] = atan2(gravity -> y , gravity -> z);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd f990 	bl	8000418 <__aeabi_f2d>
 80030f8:	4604      	mov	r4, r0
 80030fa:	460d      	mov	r5, r1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4618      	mov	r0, r3
 8003102:	f7fd f989 	bl	8000418 <__aeabi_f2d>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4620      	mov	r0, r4
 800310c:	4629      	mov	r1, r5
 800310e:	f009 f975 	bl	800c3fc <atan2>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	68f9      	ldr	r1, [r7, #12]
 8003118:	f101 0408 	add.w	r4, r1, #8
 800311c:	4610      	mov	r0, r2
 800311e:	4619      	mov	r1, r3
 8003120:	f7fd fc82 	bl	8000a28 <__aeabi_d2f>
 8003124:	4603      	mov	r3, r0
 8003126:	6023      	str	r3, [r4, #0]
    if (gravity -> z < 0) {
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f04f 0100 	mov.w	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd ff75 	bl	8001020 <__aeabi_fcmplt>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d039      	beq.n	80031b0 <dmpGetYawPitchRoll+0x208>
        if(data[1] > 0) {
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3304      	adds	r3, #4
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd ff88 	bl	800105c <__aeabi_fcmpgt>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d017      	beq.n	8003182 <dmpGetYawPitchRoll+0x1da>
            data[1] = PI - data[1];
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3304      	adds	r3, #4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd f95d 	bl	8000418 <__aeabi_f2d>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	a117      	add	r1, pc, #92	@ (adr r1, 80031c0 <dmpGetYawPitchRoll+0x218>)
 8003164:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003168:	f7fc fff6 	bl	8000158 <__aeabi_dsub>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1d1c      	adds	r4, r3, #4
 8003178:	f7fd fc56 	bl	8000a28 <__aeabi_d2f>
 800317c:	4603      	mov	r3, r0
 800317e:	6023      	str	r3, [r4, #0]
 8003180:	e016      	b.n	80031b0 <dmpGetYawPitchRoll+0x208>
        } else {
            data[1] = -PI - data[1];
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3304      	adds	r3, #4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7fd f945 	bl	8000418 <__aeabi_f2d>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	a10d      	add	r1, pc, #52	@ (adr r1, 80031c8 <dmpGetYawPitchRoll+0x220>)
 8003194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003198:	f7fc ffde 	bl	8000158 <__aeabi_dsub>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1d1c      	adds	r4, r3, #4
 80031a8:	f7fd fc3e 	bl	8000a28 <__aeabi_d2f>
 80031ac:	4603      	mov	r3, r0
 80031ae:	6023      	str	r3, [r4, #0]
        }
    }
    return 0;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ba:	bf00      	nop
 80031bc:	f3af 8000 	nop.w
 80031c0:	54442eea 	.word	0x54442eea
 80031c4:	400921fb 	.word	0x400921fb
 80031c8:	54442eea 	.word	0x54442eea
 80031cc:	c00921fb 	.word	0xc00921fb

080031d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031d6:	4b18      	ldr	r3, [pc, #96]	@ (8003238 <HAL_MspInit+0x68>)
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	4a17      	ldr	r2, [pc, #92]	@ (8003238 <HAL_MspInit+0x68>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6193      	str	r3, [r2, #24]
 80031e2:	4b15      	ldr	r3, [pc, #84]	@ (8003238 <HAL_MspInit+0x68>)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ee:	4b12      	ldr	r3, [pc, #72]	@ (8003238 <HAL_MspInit+0x68>)
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	4a11      	ldr	r2, [pc, #68]	@ (8003238 <HAL_MspInit+0x68>)
 80031f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	61d3      	str	r3, [r2, #28]
 80031fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003238 <HAL_MspInit+0x68>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	210f      	movs	r1, #15
 800320a:	f06f 0001 	mvn.w	r0, #1
 800320e:	f000 fc1c 	bl	8003a4a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003212:	4b0a      	ldr	r3, [pc, #40]	@ (800323c <HAL_MspInit+0x6c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	4a04      	ldr	r2, [pc, #16]	@ (800323c <HAL_MspInit+0x6c>)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40021000 	.word	0x40021000
 800323c:	40010000 	.word	0x40010000

08003240 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 0310 	add.w	r3, r7, #16
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a41      	ldr	r2, [pc, #260]	@ (8003360 <HAL_I2C_MspInit+0x120>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d17a      	bne.n	8003356 <HAL_I2C_MspInit+0x116>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003260:	4b40      	ldr	r3, [pc, #256]	@ (8003364 <HAL_I2C_MspInit+0x124>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	4a3f      	ldr	r2, [pc, #252]	@ (8003364 <HAL_I2C_MspInit+0x124>)
 8003266:	f043 0308 	orr.w	r3, r3, #8
 800326a:	6193      	str	r3, [r2, #24]
 800326c:	4b3d      	ldr	r3, [pc, #244]	@ (8003364 <HAL_I2C_MspInit+0x124>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003278:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800327c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800327e:	2312      	movs	r3, #18
 8003280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003282:	2303      	movs	r3, #3
 8003284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003286:	f107 0310 	add.w	r3, r7, #16
 800328a:	4619      	mov	r1, r3
 800328c:	4836      	ldr	r0, [pc, #216]	@ (8003368 <HAL_I2C_MspInit+0x128>)
 800328e:	f000 fe79 	bl	8003f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003292:	4b34      	ldr	r3, [pc, #208]	@ (8003364 <HAL_I2C_MspInit+0x124>)
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4a33      	ldr	r2, [pc, #204]	@ (8003364 <HAL_I2C_MspInit+0x124>)
 8003298:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800329c:	61d3      	str	r3, [r2, #28]
 800329e:	4b31      	ldr	r3, [pc, #196]	@ (8003364 <HAL_I2C_MspInit+0x124>)
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80032aa:	4b30      	ldr	r3, [pc, #192]	@ (800336c <HAL_I2C_MspInit+0x12c>)
 80032ac:	4a30      	ldr	r2, [pc, #192]	@ (8003370 <HAL_I2C_MspInit+0x130>)
 80032ae:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032b0:	4b2e      	ldr	r3, [pc, #184]	@ (800336c <HAL_I2C_MspInit+0x12c>)
 80032b2:	2210      	movs	r2, #16
 80032b4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032b6:	4b2d      	ldr	r3, [pc, #180]	@ (800336c <HAL_I2C_MspInit+0x12c>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032bc:	4b2b      	ldr	r3, [pc, #172]	@ (800336c <HAL_I2C_MspInit+0x12c>)
 80032be:	2280      	movs	r2, #128	@ 0x80
 80032c0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032c2:	4b2a      	ldr	r3, [pc, #168]	@ (800336c <HAL_I2C_MspInit+0x12c>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032c8:	4b28      	ldr	r3, [pc, #160]	@ (800336c <HAL_I2C_MspInit+0x12c>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80032ce:	4b27      	ldr	r3, [pc, #156]	@ (800336c <HAL_I2C_MspInit+0x12c>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80032d4:	4b25      	ldr	r3, [pc, #148]	@ (800336c <HAL_I2C_MspInit+0x12c>)
 80032d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80032da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80032dc:	4823      	ldr	r0, [pc, #140]	@ (800336c <HAL_I2C_MspInit+0x12c>)
 80032de:	f000 fbdf 	bl	8003aa0 <HAL_DMA_Init>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 80032e8:	f7ff f8e2 	bl	80024b0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a1f      	ldr	r2, [pc, #124]	@ (800336c <HAL_I2C_MspInit+0x12c>)
 80032f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80032f2:	4a1e      	ldr	r2, [pc, #120]	@ (800336c <HAL_I2C_MspInit+0x12c>)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80032f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003374 <HAL_I2C_MspInit+0x134>)
 80032fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003378 <HAL_I2C_MspInit+0x138>)
 80032fc:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003374 <HAL_I2C_MspInit+0x134>)
 8003300:	2200      	movs	r2, #0
 8003302:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003304:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_I2C_MspInit+0x134>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800330a:	4b1a      	ldr	r3, [pc, #104]	@ (8003374 <HAL_I2C_MspInit+0x134>)
 800330c:	2280      	movs	r2, #128	@ 0x80
 800330e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003310:	4b18      	ldr	r3, [pc, #96]	@ (8003374 <HAL_I2C_MspInit+0x134>)
 8003312:	2200      	movs	r2, #0
 8003314:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003316:	4b17      	ldr	r3, [pc, #92]	@ (8003374 <HAL_I2C_MspInit+0x134>)
 8003318:	2200      	movs	r2, #0
 800331a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800331c:	4b15      	ldr	r3, [pc, #84]	@ (8003374 <HAL_I2C_MspInit+0x134>)
 800331e:	2200      	movs	r2, #0
 8003320:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003322:	4b14      	ldr	r3, [pc, #80]	@ (8003374 <HAL_I2C_MspInit+0x134>)
 8003324:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003328:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800332a:	4812      	ldr	r0, [pc, #72]	@ (8003374 <HAL_I2C_MspInit+0x134>)
 800332c:	f000 fbb8 	bl	8003aa0 <HAL_DMA_Init>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8003336:	f7ff f8bb 	bl	80024b0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a0d      	ldr	r2, [pc, #52]	@ (8003374 <HAL_I2C_MspInit+0x134>)
 800333e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003340:	4a0c      	ldr	r2, [pc, #48]	@ (8003374 <HAL_I2C_MspInit+0x134>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8003346:	2200      	movs	r2, #0
 8003348:	2105      	movs	r1, #5
 800334a:	2021      	movs	r0, #33	@ 0x21
 800334c:	f000 fb7d 	bl	8003a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003350:	2021      	movs	r0, #33	@ 0x21
 8003352:	f000 fb96 	bl	8003a82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003356:	bf00      	nop
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40005800 	.word	0x40005800
 8003364:	40021000 	.word	0x40021000
 8003368:	40010c00 	.word	0x40010c00
 800336c:	200000dc 	.word	0x200000dc
 8003370:	40020044 	.word	0x40020044
 8003374:	20000120 	.word	0x20000120
 8003378:	40020058 	.word	0x40020058

0800337c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338c:	d113      	bne.n	80033b6 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800338e:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <HAL_TIM_PWM_MspInit+0x44>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	4a0b      	ldr	r2, [pc, #44]	@ (80033c0 <HAL_TIM_PWM_MspInit+0x44>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	61d3      	str	r3, [r2, #28]
 800339a:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <HAL_TIM_PWM_MspInit+0x44>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80033a6:	2200      	movs	r2, #0
 80033a8:	2105      	movs	r1, #5
 80033aa:	201c      	movs	r0, #28
 80033ac:	f000 fb4d 	bl	8003a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033b0:	201c      	movs	r0, #28
 80033b2:	f000 fb66 	bl	8003a82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000

080033c4 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	@ 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 0318 	add.w	r3, r7, #24
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a25      	ldr	r2, [pc, #148]	@ (8003474 <HAL_TIM_IC_MspInit+0xb0>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d143      	bne.n	800346c <HAL_TIM_IC_MspInit+0xa8>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033e4:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <HAL_TIM_IC_MspInit+0xb4>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	4a23      	ldr	r2, [pc, #140]	@ (8003478 <HAL_TIM_IC_MspInit+0xb4>)
 80033ea:	f043 0302 	orr.w	r3, r3, #2
 80033ee:	61d3      	str	r3, [r2, #28]
 80033f0:	4b21      	ldr	r3, [pc, #132]	@ (8003478 <HAL_TIM_IC_MspInit+0xb4>)
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003478 <HAL_TIM_IC_MspInit+0xb4>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	4a1d      	ldr	r2, [pc, #116]	@ (8003478 <HAL_TIM_IC_MspInit+0xb4>)
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	6193      	str	r3, [r2, #24]
 8003408:	4b1b      	ldr	r3, [pc, #108]	@ (8003478 <HAL_TIM_IC_MspInit+0xb4>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003414:	4b18      	ldr	r3, [pc, #96]	@ (8003478 <HAL_TIM_IC_MspInit+0xb4>)
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	4a17      	ldr	r2, [pc, #92]	@ (8003478 <HAL_TIM_IC_MspInit+0xb4>)
 800341a:	f043 0308 	orr.w	r3, r3, #8
 800341e:	6193      	str	r3, [r2, #24]
 8003420:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <HAL_TIM_IC_MspInit+0xb4>)
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800342c:	23c0      	movs	r3, #192	@ 0xc0
 800342e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003438:	f107 0318 	add.w	r3, r7, #24
 800343c:	4619      	mov	r1, r3
 800343e:	480f      	ldr	r0, [pc, #60]	@ (800347c <HAL_TIM_IC_MspInit+0xb8>)
 8003440:	f000 fda0 	bl	8003f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003444:	2303      	movs	r3, #3
 8003446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	2300      	movs	r3, #0
 800344e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003450:	f107 0318 	add.w	r3, r7, #24
 8003454:	4619      	mov	r1, r3
 8003456:	480a      	ldr	r0, [pc, #40]	@ (8003480 <HAL_TIM_IC_MspInit+0xbc>)
 8003458:	f000 fd94 	bl	8003f84 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800345c:	2200      	movs	r2, #0
 800345e:	2105      	movs	r1, #5
 8003460:	201d      	movs	r0, #29
 8003462:	f000 faf2 	bl	8003a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003466:	201d      	movs	r0, #29
 8003468:	f000 fb0b 	bl	8003a82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800346c:	bf00      	nop
 800346e:	3728      	adds	r7, #40	@ 0x28
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40000400 	.word	0x40000400
 8003478:	40021000 	.word	0x40021000
 800347c:	40010800 	.word	0x40010800
 8003480:	40010c00 	.word	0x40010c00

08003484 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348c:	f107 0310 	add.w	r3, r7, #16
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a2:	d117      	bne.n	80034d4 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a4:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <HAL_TIM_MspPostInit+0x58>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	4a0c      	ldr	r2, [pc, #48]	@ (80034dc <HAL_TIM_MspPostInit+0x58>)
 80034aa:	f043 0304 	orr.w	r3, r3, #4
 80034ae:	6193      	str	r3, [r2, #24]
 80034b0:	4b0a      	ldr	r3, [pc, #40]	@ (80034dc <HAL_TIM_MspPostInit+0x58>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80034bc:	230f      	movs	r3, #15
 80034be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c4:	2302      	movs	r3, #2
 80034c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c8:	f107 0310 	add.w	r3, r7, #16
 80034cc:	4619      	mov	r1, r3
 80034ce:	4804      	ldr	r0, [pc, #16]	@ (80034e0 <HAL_TIM_MspPostInit+0x5c>)
 80034d0:	f000 fd58 	bl	8003f84 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034d4:	bf00      	nop
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40010800 	.word	0x40010800

080034e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08e      	sub	sp, #56	@ 0x38
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80034fa:	4b34      	ldr	r3, [pc, #208]	@ (80035cc <HAL_InitTick+0xe8>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4a33      	ldr	r2, [pc, #204]	@ (80035cc <HAL_InitTick+0xe8>)
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	61d3      	str	r3, [r2, #28]
 8003506:	4b31      	ldr	r3, [pc, #196]	@ (80035cc <HAL_InitTick+0xe8>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003512:	f107 0210 	add.w	r2, r7, #16
 8003516:	f107 0314 	add.w	r3, r7, #20
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f003 fef9 	bl	8007314 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d103      	bne.n	8003534 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800352c:	f003 fede 	bl	80072ec <HAL_RCC_GetPCLK1Freq>
 8003530:	6378      	str	r0, [r7, #52]	@ 0x34
 8003532:	e004      	b.n	800353e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003534:	f003 feda 	bl	80072ec <HAL_RCC_GetPCLK1Freq>
 8003538:	4603      	mov	r3, r0
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800353e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003540:	4a23      	ldr	r2, [pc, #140]	@ (80035d0 <HAL_InitTick+0xec>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	0c9b      	lsrs	r3, r3, #18
 8003548:	3b01      	subs	r3, #1
 800354a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800354c:	4b21      	ldr	r3, [pc, #132]	@ (80035d4 <HAL_InitTick+0xf0>)
 800354e:	4a22      	ldr	r2, [pc, #136]	@ (80035d8 <HAL_InitTick+0xf4>)
 8003550:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003552:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <HAL_InitTick+0xf0>)
 8003554:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003558:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800355a:	4a1e      	ldr	r2, [pc, #120]	@ (80035d4 <HAL_InitTick+0xf0>)
 800355c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003560:	4b1c      	ldr	r3, [pc, #112]	@ (80035d4 <HAL_InitTick+0xf0>)
 8003562:	2200      	movs	r2, #0
 8003564:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003566:	4b1b      	ldr	r3, [pc, #108]	@ (80035d4 <HAL_InitTick+0xf0>)
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800356c:	4b19      	ldr	r3, [pc, #100]	@ (80035d4 <HAL_InitTick+0xf0>)
 800356e:	2200      	movs	r2, #0
 8003570:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003572:	4818      	ldr	r0, [pc, #96]	@ (80035d4 <HAL_InitTick+0xf0>)
 8003574:	f003 ff1c 	bl	80073b0 <HAL_TIM_Base_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800357e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11b      	bne.n	80035be <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003586:	4813      	ldr	r0, [pc, #76]	@ (80035d4 <HAL_InitTick+0xf0>)
 8003588:	f003 ff6a 	bl	8007460 <HAL_TIM_Base_Start_IT>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003592:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003596:	2b00      	cmp	r3, #0
 8003598:	d111      	bne.n	80035be <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800359a:	201e      	movs	r0, #30
 800359c:	f000 fa71 	bl	8003a82 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b0f      	cmp	r3, #15
 80035a4:	d808      	bhi.n	80035b8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80035a6:	2200      	movs	r2, #0
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	201e      	movs	r0, #30
 80035ac:	f000 fa4d 	bl	8003a4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035b0:	4a0a      	ldr	r2, [pc, #40]	@ (80035dc <HAL_InitTick+0xf8>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e002      	b.n	80035be <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80035be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3738      	adds	r7, #56	@ 0x38
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	431bde83 	.word	0x431bde83
 80035d4:	2000038c 	.word	0x2000038c
 80035d8:	40000800 	.word	0x40000800
 80035dc:	20000004 	.word	0x20000004

080035e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035e4:	bf00      	nop
 80035e6:	e7fd      	b.n	80035e4 <NMI_Handler+0x4>

080035e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035ec:	bf00      	nop
 80035ee:	e7fd      	b.n	80035ec <HardFault_Handler+0x4>

080035f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f4:	bf00      	nop
 80035f6:	e7fd      	b.n	80035f4 <MemManage_Handler+0x4>

080035f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035fc:	bf00      	nop
 80035fe:	e7fd      	b.n	80035fc <BusFault_Handler+0x4>

08003600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003604:	bf00      	nop
 8003606:	e7fd      	b.n	8003604 <UsageFault_Handler+0x4>

08003608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8003618:	4802      	ldr	r0, [pc, #8]	@ (8003624 <DMA1_Channel4_IRQHandler+0x10>)
 800361a:	f000 fb73 	bl	8003d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800361e:	bf00      	nop
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	200000dc 	.word	0x200000dc

08003628 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 800362c:	4802      	ldr	r0, [pc, #8]	@ (8003638 <DMA1_Channel5_IRQHandler+0x10>)
 800362e:	f000 fb69 	bl	8003d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000120 	.word	0x20000120

0800363c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003640:	4802      	ldr	r0, [pc, #8]	@ (800364c <TIM2_IRQHandler+0x10>)
 8003642:	f004 f9ad 	bl	80079a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000164 	.word	0x20000164

08003650 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003654:	4802      	ldr	r0, [pc, #8]	@ (8003660 <TIM3_IRQHandler+0x10>)
 8003656:	f004 f9a3 	bl	80079a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200001ac 	.word	0x200001ac

08003664 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003668:	4802      	ldr	r0, [pc, #8]	@ (8003674 <TIM4_IRQHandler+0x10>)
 800366a:	f004 f999 	bl	80079a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	2000038c 	.word	0x2000038c

08003678 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800367c:	4802      	ldr	r0, [pc, #8]	@ (8003688 <I2C2_EV_IRQHandler+0x10>)
 800367e:	f001 fd09 	bl	8005094 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000088 	.word	0x20000088

0800368c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003690:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003694:	f000 fe2c 	bl	80042f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}

0800369c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	e00a      	b.n	80036c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036ae:	f3af 8000 	nop.w
 80036b2:	4601      	mov	r1, r0
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	60ba      	str	r2, [r7, #8]
 80036ba:	b2ca      	uxtb	r2, r1
 80036bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	3301      	adds	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	dbf0      	blt.n	80036ae <_read+0x12>
  }

  return len;
 80036cc:	687b      	ldr	r3, [r7, #4]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b086      	sub	sp, #24
 80036da:	af00      	add	r7, sp, #0
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
 80036e6:	e009      	b.n	80036fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	1c5a      	adds	r2, r3, #1
 80036ec:	60ba      	str	r2, [r7, #8]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	3301      	adds	r3, #1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	dbf1      	blt.n	80036e8 <_write+0x12>
  }
  return len;
 8003704:	687b      	ldr	r3, [r7, #4]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <_close>:

int _close(int file)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr

08003724 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003734:	605a      	str	r2, [r3, #4]
  return 0;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <_isatty>:

int _isatty(int file)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800374a:	2301      	movs	r3, #1
}
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr

08003756 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003756:	b480      	push	{r7}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
	...

08003770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003778:	4a14      	ldr	r2, [pc, #80]	@ (80037cc <_sbrk+0x5c>)
 800377a:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <_sbrk+0x60>)
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003784:	4b13      	ldr	r3, [pc, #76]	@ (80037d4 <_sbrk+0x64>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800378c:	4b11      	ldr	r3, [pc, #68]	@ (80037d4 <_sbrk+0x64>)
 800378e:	4a12      	ldr	r2, [pc, #72]	@ (80037d8 <_sbrk+0x68>)
 8003790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003792:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <_sbrk+0x64>)
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	429a      	cmp	r2, r3
 800379e:	d207      	bcs.n	80037b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037a0:	f008 fc7c 	bl	800c09c <__errno>
 80037a4:	4603      	mov	r3, r0
 80037a6:	220c      	movs	r2, #12
 80037a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	e009      	b.n	80037c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037b0:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <_sbrk+0x64>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037b6:	4b07      	ldr	r3, [pc, #28]	@ (80037d4 <_sbrk+0x64>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	4a05      	ldr	r2, [pc, #20]	@ (80037d4 <_sbrk+0x64>)
 80037c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037c2:	68fb      	ldr	r3, [r7, #12]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20005000 	.word	0x20005000
 80037d0:	00000400 	.word	0x00000400
 80037d4:	200003d4 	.word	0x200003d4
 80037d8:	20001f10 	.word	0x20001f10

080037dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037e8:	f7ff fff8 	bl	80037dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037ec:	480b      	ldr	r0, [pc, #44]	@ (800381c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80037ee:	490c      	ldr	r1, [pc, #48]	@ (8003820 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80037f0:	4a0c      	ldr	r2, [pc, #48]	@ (8003824 <LoopFillZerobss+0x16>)
  movs r3, #0
 80037f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037f4:	e002      	b.n	80037fc <LoopCopyDataInit>

080037f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037fa:	3304      	adds	r3, #4

080037fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003800:	d3f9      	bcc.n	80037f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003802:	4a09      	ldr	r2, [pc, #36]	@ (8003828 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003804:	4c09      	ldr	r4, [pc, #36]	@ (800382c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003808:	e001      	b.n	800380e <LoopFillZerobss>

0800380a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800380a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800380c:	3204      	adds	r2, #4

0800380e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800380e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003810:	d3fb      	bcc.n	800380a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003812:	f008 fc49 	bl	800c0a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003816:	f7fd ff25 	bl	8001664 <main>
  bx lr
 800381a:	4770      	bx	lr
  ldr r0, =_sdata
 800381c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003820:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003824:	0800d41c 	.word	0x0800d41c
  ldr r2, =_sbss
 8003828:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800382c:	20001f10 	.word	0x20001f10

08003830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003830:	e7fe      	b.n	8003830 <ADC1_2_IRQHandler>
	...

08003834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003838:	4b08      	ldr	r3, [pc, #32]	@ (800385c <HAL_Init+0x28>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a07      	ldr	r2, [pc, #28]	@ (800385c <HAL_Init+0x28>)
 800383e:	f043 0310 	orr.w	r3, r3, #16
 8003842:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003844:	2003      	movs	r0, #3
 8003846:	f000 f8f5 	bl	8003a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800384a:	200f      	movs	r0, #15
 800384c:	f7ff fe4a 	bl	80034e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003850:	f7ff fcbe 	bl	80031d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40022000 	.word	0x40022000

08003860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003864:	4b05      	ldr	r3, [pc, #20]	@ (800387c <HAL_IncTick+0x1c>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <HAL_IncTick+0x20>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4413      	add	r3, r2
 8003870:	4a03      	ldr	r2, [pc, #12]	@ (8003880 <HAL_IncTick+0x20>)
 8003872:	6013      	str	r3, [r2, #0]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	20000008 	.word	0x20000008
 8003880:	200003d8 	.word	0x200003d8

08003884 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return uwTick;
 8003888:	4b02      	ldr	r3, [pc, #8]	@ (8003894 <HAL_GetTick+0x10>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	200003d8 	.word	0x200003d8

08003898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038a0:	f7ff fff0 	bl	8003884 <HAL_GetTick>
 80038a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d005      	beq.n	80038be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038b2:	4b0a      	ldr	r3, [pc, #40]	@ (80038dc <HAL_Delay+0x44>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038be:	bf00      	nop
 80038c0:	f7ff ffe0 	bl	8003884 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d8f7      	bhi.n	80038c0 <HAL_Delay+0x28>
  {
  }
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000008 	.word	0x20000008

080038e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038fc:	4013      	ands	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800390c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003912:	4a04      	ldr	r2, [pc, #16]	@ (8003924 <__NVIC_SetPriorityGrouping+0x44>)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	60d3      	str	r3, [r2, #12]
}
 8003918:	bf00      	nop
 800391a:	3714      	adds	r7, #20
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	e000ed00 	.word	0xe000ed00

08003928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800392c:	4b04      	ldr	r3, [pc, #16]	@ (8003940 <__NVIC_GetPriorityGrouping+0x18>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	f003 0307 	and.w	r3, r3, #7
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	2b00      	cmp	r3, #0
 8003954:	db0b      	blt.n	800396e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	f003 021f 	and.w	r2, r3, #31
 800395c:	4906      	ldr	r1, [pc, #24]	@ (8003978 <__NVIC_EnableIRQ+0x34>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2001      	movs	r0, #1
 8003966:	fa00 f202 	lsl.w	r2, r0, r2
 800396a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bc80      	pop	{r7}
 8003976:	4770      	bx	lr
 8003978:	e000e100 	.word	0xe000e100

0800397c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	6039      	str	r1, [r7, #0]
 8003986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	2b00      	cmp	r3, #0
 800398e:	db0a      	blt.n	80039a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	b2da      	uxtb	r2, r3
 8003994:	490c      	ldr	r1, [pc, #48]	@ (80039c8 <__NVIC_SetPriority+0x4c>)
 8003996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399a:	0112      	lsls	r2, r2, #4
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	440b      	add	r3, r1
 80039a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a4:	e00a      	b.n	80039bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	4908      	ldr	r1, [pc, #32]	@ (80039cc <__NVIC_SetPriority+0x50>)
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	3b04      	subs	r3, #4
 80039b4:	0112      	lsls	r2, r2, #4
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	440b      	add	r3, r1
 80039ba:	761a      	strb	r2, [r3, #24]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	e000e100 	.word	0xe000e100
 80039cc:	e000ed00 	.word	0xe000ed00

080039d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b089      	sub	sp, #36	@ 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f1c3 0307 	rsb	r3, r3, #7
 80039ea:	2b04      	cmp	r3, #4
 80039ec:	bf28      	it	cs
 80039ee:	2304      	movcs	r3, #4
 80039f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2b06      	cmp	r3, #6
 80039f8:	d902      	bls.n	8003a00 <NVIC_EncodePriority+0x30>
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	3b03      	subs	r3, #3
 80039fe:	e000      	b.n	8003a02 <NVIC_EncodePriority+0x32>
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	401a      	ands	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a18:	f04f 31ff 	mov.w	r1, #4294967295
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a22:	43d9      	mvns	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a28:	4313      	orrs	r3, r2
         );
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3724      	adds	r7, #36	@ 0x24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ff4f 	bl	80038e0 <__NVIC_SetPriorityGrouping>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b086      	sub	sp, #24
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	4603      	mov	r3, r0
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
 8003a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a5c:	f7ff ff64 	bl	8003928 <__NVIC_GetPriorityGrouping>
 8003a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68b9      	ldr	r1, [r7, #8]
 8003a66:	6978      	ldr	r0, [r7, #20]
 8003a68:	f7ff ffb2 	bl	80039d0 <NVIC_EncodePriority>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff81 	bl	800397c <__NVIC_SetPriority>
}
 8003a7a:	bf00      	nop
 8003a7c:	3718      	adds	r7, #24
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b082      	sub	sp, #8
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff57 	bl	8003944 <__NVIC_EnableIRQ>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e043      	b.n	8003b3e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	4b22      	ldr	r3, [pc, #136]	@ (8003b48 <HAL_DMA_Init+0xa8>)
 8003abe:	4413      	add	r3, r2
 8003ac0:	4a22      	ldr	r2, [pc, #136]	@ (8003b4c <HAL_DMA_Init+0xac>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	009a      	lsls	r2, r3, #2
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8003b50 <HAL_DMA_Init+0xb0>)
 8003ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003aea:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003aee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	bffdfff8 	.word	0xbffdfff8
 8003b4c:	cccccccd 	.word	0xcccccccd
 8003b50:	40020000 	.word	0x40020000

08003b54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_DMA_Start_IT+0x20>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e04b      	b.n	8003c0c <HAL_DMA_Start_IT+0xb8>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d13a      	bne.n	8003bfe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f9bc 	bl	8003f2a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d008      	beq.n	8003bcc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 020e 	orr.w	r2, r2, #14
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	e00f      	b.n	8003bec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0204 	bic.w	r2, r2, #4
 8003bda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 020a 	orr.w	r2, r2, #10
 8003bea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	e005      	b.n	8003c0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c06:	2302      	movs	r3, #2
 8003c08:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3718      	adds	r7, #24
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d005      	beq.n	8003c38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2204      	movs	r2, #4
 8003c30:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
 8003c36:	e051      	b.n	8003cdc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 020e 	bic.w	r2, r2, #14
 8003c46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0201 	bic.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a22      	ldr	r2, [pc, #136]	@ (8003ce8 <HAL_DMA_Abort_IT+0xd4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d029      	beq.n	8003cb6 <HAL_DMA_Abort_IT+0xa2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a21      	ldr	r2, [pc, #132]	@ (8003cec <HAL_DMA_Abort_IT+0xd8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <HAL_DMA_Abort_IT+0x9e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1f      	ldr	r2, [pc, #124]	@ (8003cf0 <HAL_DMA_Abort_IT+0xdc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d01a      	beq.n	8003cac <HAL_DMA_Abort_IT+0x98>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf4 <HAL_DMA_Abort_IT+0xe0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d012      	beq.n	8003ca6 <HAL_DMA_Abort_IT+0x92>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf8 <HAL_DMA_Abort_IT+0xe4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00a      	beq.n	8003ca0 <HAL_DMA_Abort_IT+0x8c>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cfc <HAL_DMA_Abort_IT+0xe8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d102      	bne.n	8003c9a <HAL_DMA_Abort_IT+0x86>
 8003c94:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003c98:	e00e      	b.n	8003cb8 <HAL_DMA_Abort_IT+0xa4>
 8003c9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c9e:	e00b      	b.n	8003cb8 <HAL_DMA_Abort_IT+0xa4>
 8003ca0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ca4:	e008      	b.n	8003cb8 <HAL_DMA_Abort_IT+0xa4>
 8003ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003caa:	e005      	b.n	8003cb8 <HAL_DMA_Abort_IT+0xa4>
 8003cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cb0:	e002      	b.n	8003cb8 <HAL_DMA_Abort_IT+0xa4>
 8003cb2:	2310      	movs	r3, #16
 8003cb4:	e000      	b.n	8003cb8 <HAL_DMA_Abort_IT+0xa4>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	4a11      	ldr	r2, [pc, #68]	@ (8003d00 <HAL_DMA_Abort_IT+0xec>)
 8003cba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
    } 
  }
  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40020008 	.word	0x40020008
 8003cec:	4002001c 	.word	0x4002001c
 8003cf0:	40020030 	.word	0x40020030
 8003cf4:	40020044 	.word	0x40020044
 8003cf8:	40020058 	.word	0x40020058
 8003cfc:	4002006c 	.word	0x4002006c
 8003d00:	40020000 	.word	0x40020000

08003d04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d20:	2204      	movs	r2, #4
 8003d22:	409a      	lsls	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d04f      	beq.n	8003dcc <HAL_DMA_IRQHandler+0xc8>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d04a      	beq.n	8003dcc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d107      	bne.n	8003d54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0204 	bic.w	r2, r2, #4
 8003d52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a66      	ldr	r2, [pc, #408]	@ (8003ef4 <HAL_DMA_IRQHandler+0x1f0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d029      	beq.n	8003db2 <HAL_DMA_IRQHandler+0xae>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a65      	ldr	r2, [pc, #404]	@ (8003ef8 <HAL_DMA_IRQHandler+0x1f4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <HAL_DMA_IRQHandler+0xaa>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a63      	ldr	r2, [pc, #396]	@ (8003efc <HAL_DMA_IRQHandler+0x1f8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01a      	beq.n	8003da8 <HAL_DMA_IRQHandler+0xa4>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a62      	ldr	r2, [pc, #392]	@ (8003f00 <HAL_DMA_IRQHandler+0x1fc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d012      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x9e>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a60      	ldr	r2, [pc, #384]	@ (8003f04 <HAL_DMA_IRQHandler+0x200>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00a      	beq.n	8003d9c <HAL_DMA_IRQHandler+0x98>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5f      	ldr	r2, [pc, #380]	@ (8003f08 <HAL_DMA_IRQHandler+0x204>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d102      	bne.n	8003d96 <HAL_DMA_IRQHandler+0x92>
 8003d90:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d94:	e00e      	b.n	8003db4 <HAL_DMA_IRQHandler+0xb0>
 8003d96:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003d9a:	e00b      	b.n	8003db4 <HAL_DMA_IRQHandler+0xb0>
 8003d9c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003da0:	e008      	b.n	8003db4 <HAL_DMA_IRQHandler+0xb0>
 8003da2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003da6:	e005      	b.n	8003db4 <HAL_DMA_IRQHandler+0xb0>
 8003da8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dac:	e002      	b.n	8003db4 <HAL_DMA_IRQHandler+0xb0>
 8003dae:	2340      	movs	r3, #64	@ 0x40
 8003db0:	e000      	b.n	8003db4 <HAL_DMA_IRQHandler+0xb0>
 8003db2:	2304      	movs	r3, #4
 8003db4:	4a55      	ldr	r2, [pc, #340]	@ (8003f0c <HAL_DMA_IRQHandler+0x208>)
 8003db6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8094 	beq.w	8003eea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003dca:	e08e      	b.n	8003eea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d056      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x186>
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d051      	beq.n	8003e8a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10b      	bne.n	8003e0c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 020a 	bic.w	r2, r2, #10
 8003e02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a38      	ldr	r2, [pc, #224]	@ (8003ef4 <HAL_DMA_IRQHandler+0x1f0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d029      	beq.n	8003e6a <HAL_DMA_IRQHandler+0x166>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a37      	ldr	r2, [pc, #220]	@ (8003ef8 <HAL_DMA_IRQHandler+0x1f4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d022      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x162>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a35      	ldr	r2, [pc, #212]	@ (8003efc <HAL_DMA_IRQHandler+0x1f8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d01a      	beq.n	8003e60 <HAL_DMA_IRQHandler+0x15c>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a34      	ldr	r2, [pc, #208]	@ (8003f00 <HAL_DMA_IRQHandler+0x1fc>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d012      	beq.n	8003e5a <HAL_DMA_IRQHandler+0x156>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a32      	ldr	r2, [pc, #200]	@ (8003f04 <HAL_DMA_IRQHandler+0x200>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d00a      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x150>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a31      	ldr	r2, [pc, #196]	@ (8003f08 <HAL_DMA_IRQHandler+0x204>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d102      	bne.n	8003e4e <HAL_DMA_IRQHandler+0x14a>
 8003e48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003e4c:	e00e      	b.n	8003e6c <HAL_DMA_IRQHandler+0x168>
 8003e4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e52:	e00b      	b.n	8003e6c <HAL_DMA_IRQHandler+0x168>
 8003e54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e58:	e008      	b.n	8003e6c <HAL_DMA_IRQHandler+0x168>
 8003e5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e5e:	e005      	b.n	8003e6c <HAL_DMA_IRQHandler+0x168>
 8003e60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e64:	e002      	b.n	8003e6c <HAL_DMA_IRQHandler+0x168>
 8003e66:	2320      	movs	r3, #32
 8003e68:	e000      	b.n	8003e6c <HAL_DMA_IRQHandler+0x168>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	4a27      	ldr	r2, [pc, #156]	@ (8003f0c <HAL_DMA_IRQHandler+0x208>)
 8003e6e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d034      	beq.n	8003eea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e88:	e02f      	b.n	8003eea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	2208      	movs	r2, #8
 8003e90:	409a      	lsls	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d028      	beq.n	8003eec <HAL_DMA_IRQHandler+0x1e8>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d023      	beq.n	8003eec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 020e 	bic.w	r2, r2, #14
 8003eb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d004      	beq.n	8003eec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	4798      	blx	r3
    }
  }
  return;
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
}
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40020008 	.word	0x40020008
 8003ef8:	4002001c 	.word	0x4002001c
 8003efc:	40020030 	.word	0x40020030
 8003f00:	40020044 	.word	0x40020044
 8003f04:	40020058 	.word	0x40020058
 8003f08:	4002006c 	.word	0x4002006c
 8003f0c:	40020000 	.word	0x40020000

08003f10 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f1e:	b2db      	uxtb	r3, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b085      	sub	sp, #20
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f40:	2101      	movs	r1, #1
 8003f42:	fa01 f202 	lsl.w	r2, r1, r2
 8003f46:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d108      	bne.n	8003f6a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f68:	e007      	b.n	8003f7a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	60da      	str	r2, [r3, #12]
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b08b      	sub	sp, #44	@ 0x2c
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f92:	2300      	movs	r3, #0
 8003f94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f96:	e169      	b.n	800426c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f98:	2201      	movs	r2, #1
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	f040 8158 	bne.w	8004266 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4a9a      	ldr	r2, [pc, #616]	@ (8004224 <HAL_GPIO_Init+0x2a0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d05e      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003fc0:	4a98      	ldr	r2, [pc, #608]	@ (8004224 <HAL_GPIO_Init+0x2a0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d875      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003fc6:	4a98      	ldr	r2, [pc, #608]	@ (8004228 <HAL_GPIO_Init+0x2a4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d058      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003fcc:	4a96      	ldr	r2, [pc, #600]	@ (8004228 <HAL_GPIO_Init+0x2a4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d86f      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003fd2:	4a96      	ldr	r2, [pc, #600]	@ (800422c <HAL_GPIO_Init+0x2a8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d052      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003fd8:	4a94      	ldr	r2, [pc, #592]	@ (800422c <HAL_GPIO_Init+0x2a8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d869      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003fde:	4a94      	ldr	r2, [pc, #592]	@ (8004230 <HAL_GPIO_Init+0x2ac>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d04c      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003fe4:	4a92      	ldr	r2, [pc, #584]	@ (8004230 <HAL_GPIO_Init+0x2ac>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d863      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003fea:	4a92      	ldr	r2, [pc, #584]	@ (8004234 <HAL_GPIO_Init+0x2b0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d046      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003ff0:	4a90      	ldr	r2, [pc, #576]	@ (8004234 <HAL_GPIO_Init+0x2b0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d85d      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003ff6:	2b12      	cmp	r3, #18
 8003ff8:	d82a      	bhi.n	8004050 <HAL_GPIO_Init+0xcc>
 8003ffa:	2b12      	cmp	r3, #18
 8003ffc:	d859      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8004004 <HAL_GPIO_Init+0x80>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	0800407f 	.word	0x0800407f
 8004008:	08004059 	.word	0x08004059
 800400c:	0800406b 	.word	0x0800406b
 8004010:	080040ad 	.word	0x080040ad
 8004014:	080040b3 	.word	0x080040b3
 8004018:	080040b3 	.word	0x080040b3
 800401c:	080040b3 	.word	0x080040b3
 8004020:	080040b3 	.word	0x080040b3
 8004024:	080040b3 	.word	0x080040b3
 8004028:	080040b3 	.word	0x080040b3
 800402c:	080040b3 	.word	0x080040b3
 8004030:	080040b3 	.word	0x080040b3
 8004034:	080040b3 	.word	0x080040b3
 8004038:	080040b3 	.word	0x080040b3
 800403c:	080040b3 	.word	0x080040b3
 8004040:	080040b3 	.word	0x080040b3
 8004044:	080040b3 	.word	0x080040b3
 8004048:	08004061 	.word	0x08004061
 800404c:	08004075 	.word	0x08004075
 8004050:	4a79      	ldr	r2, [pc, #484]	@ (8004238 <HAL_GPIO_Init+0x2b4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004056:	e02c      	b.n	80040b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	623b      	str	r3, [r7, #32]
          break;
 800405e:	e029      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	3304      	adds	r3, #4
 8004066:	623b      	str	r3, [r7, #32]
          break;
 8004068:	e024      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	3308      	adds	r3, #8
 8004070:	623b      	str	r3, [r7, #32]
          break;
 8004072:	e01f      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	330c      	adds	r3, #12
 800407a:	623b      	str	r3, [r7, #32]
          break;
 800407c:	e01a      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d102      	bne.n	800408c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004086:	2304      	movs	r3, #4
 8004088:	623b      	str	r3, [r7, #32]
          break;
 800408a:	e013      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004094:	2308      	movs	r3, #8
 8004096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	611a      	str	r2, [r3, #16]
          break;
 800409e:	e009      	b.n	80040b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040a0:	2308      	movs	r3, #8
 80040a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	615a      	str	r2, [r3, #20]
          break;
 80040aa:	e003      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80040ac:	2300      	movs	r3, #0
 80040ae:	623b      	str	r3, [r7, #32]
          break;
 80040b0:	e000      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          break;
 80040b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2bff      	cmp	r3, #255	@ 0xff
 80040b8:	d801      	bhi.n	80040be <HAL_GPIO_Init+0x13a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	e001      	b.n	80040c2 <HAL_GPIO_Init+0x13e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2bff      	cmp	r3, #255	@ 0xff
 80040c8:	d802      	bhi.n	80040d0 <HAL_GPIO_Init+0x14c>
 80040ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	e002      	b.n	80040d6 <HAL_GPIO_Init+0x152>
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	3b08      	subs	r3, #8
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	210f      	movs	r1, #15
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	401a      	ands	r2, r3
 80040e8:	6a39      	ldr	r1, [r7, #32]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	fa01 f303 	lsl.w	r3, r1, r3
 80040f0:	431a      	orrs	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80b1 	beq.w	8004266 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004104:	4b4d      	ldr	r3, [pc, #308]	@ (800423c <HAL_GPIO_Init+0x2b8>)
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	4a4c      	ldr	r2, [pc, #304]	@ (800423c <HAL_GPIO_Init+0x2b8>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6193      	str	r3, [r2, #24]
 8004110:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <HAL_GPIO_Init+0x2b8>)
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800411c:	4a48      	ldr	r2, [pc, #288]	@ (8004240 <HAL_GPIO_Init+0x2bc>)
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	3302      	adds	r3, #2
 8004124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	220f      	movs	r2, #15
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4013      	ands	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a40      	ldr	r2, [pc, #256]	@ (8004244 <HAL_GPIO_Init+0x2c0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d013      	beq.n	8004170 <HAL_GPIO_Init+0x1ec>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a3f      	ldr	r2, [pc, #252]	@ (8004248 <HAL_GPIO_Init+0x2c4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00d      	beq.n	800416c <HAL_GPIO_Init+0x1e8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a3e      	ldr	r2, [pc, #248]	@ (800424c <HAL_GPIO_Init+0x2c8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d007      	beq.n	8004168 <HAL_GPIO_Init+0x1e4>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a3d      	ldr	r2, [pc, #244]	@ (8004250 <HAL_GPIO_Init+0x2cc>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <HAL_GPIO_Init+0x1e0>
 8004160:	2303      	movs	r3, #3
 8004162:	e006      	b.n	8004172 <HAL_GPIO_Init+0x1ee>
 8004164:	2304      	movs	r3, #4
 8004166:	e004      	b.n	8004172 <HAL_GPIO_Init+0x1ee>
 8004168:	2302      	movs	r3, #2
 800416a:	e002      	b.n	8004172 <HAL_GPIO_Init+0x1ee>
 800416c:	2301      	movs	r3, #1
 800416e:	e000      	b.n	8004172 <HAL_GPIO_Init+0x1ee>
 8004170:	2300      	movs	r3, #0
 8004172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004174:	f002 0203 	and.w	r2, r2, #3
 8004178:	0092      	lsls	r2, r2, #2
 800417a:	4093      	lsls	r3, r2
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004182:	492f      	ldr	r1, [pc, #188]	@ (8004240 <HAL_GPIO_Init+0x2bc>)
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	3302      	adds	r3, #2
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d006      	beq.n	80041aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800419c:	4b2d      	ldr	r3, [pc, #180]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	492c      	ldr	r1, [pc, #176]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	608b      	str	r3, [r1, #8]
 80041a8:	e006      	b.n	80041b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041aa:	4b2a      	ldr	r3, [pc, #168]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	43db      	mvns	r3, r3
 80041b2:	4928      	ldr	r1, [pc, #160]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d006      	beq.n	80041d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041c4:	4b23      	ldr	r3, [pc, #140]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	4922      	ldr	r1, [pc, #136]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60cb      	str	r3, [r1, #12]
 80041d0:	e006      	b.n	80041e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041d2:	4b20      	ldr	r3, [pc, #128]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	43db      	mvns	r3, r3
 80041da:	491e      	ldr	r1, [pc, #120]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041dc:	4013      	ands	r3, r2
 80041de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d006      	beq.n	80041fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80041ec:	4b19      	ldr	r3, [pc, #100]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	4918      	ldr	r1, [pc, #96]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	604b      	str	r3, [r1, #4]
 80041f8:	e006      	b.n	8004208 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041fa:	4b16      	ldr	r3, [pc, #88]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	43db      	mvns	r3, r3
 8004202:	4914      	ldr	r1, [pc, #80]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 8004204:	4013      	ands	r3, r2
 8004206:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d021      	beq.n	8004258 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004214:	4b0f      	ldr	r3, [pc, #60]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	490e      	ldr	r1, [pc, #56]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]
 8004220:	e021      	b.n	8004266 <HAL_GPIO_Init+0x2e2>
 8004222:	bf00      	nop
 8004224:	10320000 	.word	0x10320000
 8004228:	10310000 	.word	0x10310000
 800422c:	10220000 	.word	0x10220000
 8004230:	10210000 	.word	0x10210000
 8004234:	10120000 	.word	0x10120000
 8004238:	10110000 	.word	0x10110000
 800423c:	40021000 	.word	0x40021000
 8004240:	40010000 	.word	0x40010000
 8004244:	40010800 	.word	0x40010800
 8004248:	40010c00 	.word	0x40010c00
 800424c:	40011000 	.word	0x40011000
 8004250:	40011400 	.word	0x40011400
 8004254:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004258:	4b0b      	ldr	r3, [pc, #44]	@ (8004288 <HAL_GPIO_Init+0x304>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	43db      	mvns	r3, r3
 8004260:	4909      	ldr	r1, [pc, #36]	@ (8004288 <HAL_GPIO_Init+0x304>)
 8004262:	4013      	ands	r3, r2
 8004264:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	3301      	adds	r3, #1
 800426a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004272:	fa22 f303 	lsr.w	r3, r2, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	f47f ae8e 	bne.w	8003f98 <HAL_GPIO_Init+0x14>
  }
}
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	372c      	adds	r7, #44	@ 0x2c
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr
 8004288:	40010400 	.word	0x40010400

0800428c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
 8004298:	4613      	mov	r3, r2
 800429a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800429c:	787b      	ldrb	r3, [r7, #1]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042a2:	887a      	ldrh	r2, [r7, #2]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80042a8:	e003      	b.n	80042b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	041a      	lsls	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	611a      	str	r2, [r3, #16]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	460b      	mov	r3, r1
 80042c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4013      	ands	r3, r2
 80042d4:	041a      	lsls	r2, r3, #16
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	43d9      	mvns	r1, r3
 80042da:	887b      	ldrh	r3, [r7, #2]
 80042dc:	400b      	ands	r3, r1
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	611a      	str	r2, [r3, #16]
}
 80042e4:	bf00      	nop
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr
	...

080042f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042fa:	4b08      	ldr	r3, [pc, #32]	@ (800431c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042fc:	695a      	ldr	r2, [r3, #20]
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d006      	beq.n	8004314 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004306:	4a05      	ldr	r2, [pc, #20]	@ (800431c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004308:	88fb      	ldrh	r3, [r7, #6]
 800430a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	4618      	mov	r0, r3
 8004310:	f7fd fd08 	bl	8001d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40010400 	.word	0x40010400

08004320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e12b      	b.n	800458a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fe ff7a 	bl	8003240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2224      	movs	r2, #36	@ 0x24
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 0201 	bic.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004372:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004382:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004384:	f002 ffb2 	bl	80072ec <HAL_RCC_GetPCLK1Freq>
 8004388:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4a81      	ldr	r2, [pc, #516]	@ (8004594 <HAL_I2C_Init+0x274>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d807      	bhi.n	80043a4 <HAL_I2C_Init+0x84>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4a80      	ldr	r2, [pc, #512]	@ (8004598 <HAL_I2C_Init+0x278>)
 8004398:	4293      	cmp	r3, r2
 800439a:	bf94      	ite	ls
 800439c:	2301      	movls	r3, #1
 800439e:	2300      	movhi	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e006      	b.n	80043b2 <HAL_I2C_Init+0x92>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a7d      	ldr	r2, [pc, #500]	@ (800459c <HAL_I2C_Init+0x27c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	bf94      	ite	ls
 80043ac:	2301      	movls	r3, #1
 80043ae:	2300      	movhi	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e0e7      	b.n	800458a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4a78      	ldr	r2, [pc, #480]	@ (80045a0 <HAL_I2C_Init+0x280>)
 80043be:	fba2 2303 	umull	r2, r3, r2, r3
 80043c2:	0c9b      	lsrs	r3, r3, #18
 80043c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	4a6a      	ldr	r2, [pc, #424]	@ (8004594 <HAL_I2C_Init+0x274>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d802      	bhi.n	80043f4 <HAL_I2C_Init+0xd4>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	3301      	adds	r3, #1
 80043f2:	e009      	b.n	8004408 <HAL_I2C_Init+0xe8>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	4a69      	ldr	r2, [pc, #420]	@ (80045a4 <HAL_I2C_Init+0x284>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	099b      	lsrs	r3, r3, #6
 8004406:	3301      	adds	r3, #1
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	430b      	orrs	r3, r1
 800440e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800441a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	495c      	ldr	r1, [pc, #368]	@ (8004594 <HAL_I2C_Init+0x274>)
 8004424:	428b      	cmp	r3, r1
 8004426:	d819      	bhi.n	800445c <HAL_I2C_Init+0x13c>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1e59      	subs	r1, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	fbb1 f3f3 	udiv	r3, r1, r3
 8004436:	1c59      	adds	r1, r3, #1
 8004438:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800443c:	400b      	ands	r3, r1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <HAL_I2C_Init+0x138>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1e59      	subs	r1, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004450:	3301      	adds	r3, #1
 8004452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004456:	e051      	b.n	80044fc <HAL_I2C_Init+0x1dc>
 8004458:	2304      	movs	r3, #4
 800445a:	e04f      	b.n	80044fc <HAL_I2C_Init+0x1dc>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d111      	bne.n	8004488 <HAL_I2C_Init+0x168>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1e58      	subs	r0, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	440b      	add	r3, r1
 8004472:	fbb0 f3f3 	udiv	r3, r0, r3
 8004476:	3301      	adds	r3, #1
 8004478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447c:	2b00      	cmp	r3, #0
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	e012      	b.n	80044ae <HAL_I2C_Init+0x18e>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1e58      	subs	r0, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6859      	ldr	r1, [r3, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	0099      	lsls	r1, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	fbb0 f3f3 	udiv	r3, r0, r3
 800449e:	3301      	adds	r3, #1
 80044a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_I2C_Init+0x196>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e022      	b.n	80044fc <HAL_I2C_Init+0x1dc>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10e      	bne.n	80044dc <HAL_I2C_Init+0x1bc>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1e58      	subs	r0, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6859      	ldr	r1, [r3, #4]
 80044c6:	460b      	mov	r3, r1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	440b      	add	r3, r1
 80044cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d0:	3301      	adds	r3, #1
 80044d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044da:	e00f      	b.n	80044fc <HAL_I2C_Init+0x1dc>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1e58      	subs	r0, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6859      	ldr	r1, [r3, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	0099      	lsls	r1, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	6809      	ldr	r1, [r1, #0]
 8004500:	4313      	orrs	r3, r2
 8004502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800452a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6911      	ldr	r1, [r2, #16]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68d2      	ldr	r2, [r2, #12]
 8004536:	4311      	orrs	r1, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	430b      	orrs	r3, r1
 800453e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	000186a0 	.word	0x000186a0
 8004598:	001e847f 	.word	0x001e847f
 800459c:	003d08ff 	.word	0x003d08ff
 80045a0:	431bde83 	.word	0x431bde83
 80045a4:	10624dd3 	.word	0x10624dd3

080045a8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ba:	2b80      	cmp	r3, #128	@ 0x80
 80045bc:	d103      	bne.n	80045c6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2200      	movs	r2, #0
 80045c4:	611a      	str	r2, [r3, #16]
  }
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	461a      	mov	r2, r3
 80045dc:	460b      	mov	r3, r1
 80045de:	817b      	strh	r3, [r7, #10]
 80045e0:	4613      	mov	r3, r2
 80045e2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b20      	cmp	r3, #32
 80045f2:	f040 8101 	bne.w	80047f8 <HAL_I2C_Master_Transmit_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80045f6:	4b83      	ldr	r3, [pc, #524]	@ (8004804 <HAL_I2C_Master_Transmit_DMA+0x234>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	08db      	lsrs	r3, r3, #3
 80045fc:	4a82      	ldr	r2, [pc, #520]	@ (8004808 <HAL_I2C_Master_Transmit_DMA+0x238>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	0a1a      	lsrs	r2, r3, #8
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	009a      	lsls	r2, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	3b01      	subs	r3, #1
 8004614:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d112      	bne.n	8004642 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2220      	movs	r2, #32
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	f043 0220 	orr.w	r2, r3, #32
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800463e:	2302      	movs	r3, #2
 8004640:	e0db      	b.n	80047fa <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b02      	cmp	r3, #2
 800464e:	d0df      	beq.n	8004610 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d101      	bne.n	800465e <HAL_I2C_Master_Transmit_DMA+0x8e>
 800465a:	2302      	movs	r3, #2
 800465c:	e0cd      	b.n	80047fa <HAL_I2C_Master_Transmit_DMA+0x22a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d007      	beq.n	8004684 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004692:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2221      	movs	r2, #33	@ 0x21
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2210      	movs	r2, #16
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	893a      	ldrh	r2, [r7, #8]
 80046b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a52      	ldr	r2, [pc, #328]	@ (800480c <HAL_I2C_Master_Transmit_DMA+0x23c>)
 80046c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80046c6:	897a      	ldrh	r2, [r7, #10]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d073      	beq.n	80047bc <HAL_I2C_Master_Transmit_DMA+0x1ec>
    {
      if (hi2c->hdmatx != NULL)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d022      	beq.n	8004722 <HAL_I2C_Master_Transmit_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004810 <HAL_I2C_Master_Transmit_DMA+0x240>)
 80046e2:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e8:	4a4a      	ldr	r2, [pc, #296]	@ (8004814 <HAL_I2C_Master_Transmit_DMA+0x244>)
 80046ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f0:	2200      	movs	r2, #0
 80046f2:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f8:	2200      	movs	r2, #0
 80046fa:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	4619      	mov	r1, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3310      	adds	r3, #16
 800470c:	461a      	mov	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004712:	f7ff fa1f 	bl	8003b54 <HAL_DMA_Start_IT>
 8004716:	4603      	mov	r3, r0
 8004718:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d139      	bne.n	8004794 <HAL_I2C_Master_Transmit_DMA+0x1c4>
 8004720:	e013      	b.n	800474a <HAL_I2C_Master_Transmit_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e057      	b.n	80047fa <HAL_I2C_Master_Transmit_DMA+0x22a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004760:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004770:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004780:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	e02f      	b.n	80047f4 <HAL_I2C_Master_Transmit_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a8:	f043 0210 	orr.w	r2, r3, #16
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e01e      	b.n	80047fa <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047ca:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047da:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80047f2:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	e000      	b.n	80047fa <HAL_I2C_Master_Transmit_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 80047f8:	2302      	movs	r3, #2
  }
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000000 	.word	0x20000000
 8004808:	14f8b589 	.word	0x14f8b589
 800480c:	ffff0000 	.word	0xffff0000
 8004810:	08006651 	.word	0x08006651
 8004814:	0800680f 	.word	0x0800680f

08004818 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	@ 0x28
 800481c:	af02      	add	r7, sp, #8
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	460b      	mov	r3, r1
 8004826:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004828:	f7ff f82c 	bl	8003884 <HAL_GetTick>
 800482c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b20      	cmp	r3, #32
 800483c:	f040 8111 	bne.w	8004a62 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	2319      	movs	r3, #25
 8004846:	2201      	movs	r2, #1
 8004848:	4988      	ldr	r1, [pc, #544]	@ (8004a6c <HAL_I2C_IsDeviceReady+0x254>)
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f002 f8be 	bl	80069cc <I2C_WaitOnFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
 8004858:	e104      	b.n	8004a64 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_I2C_IsDeviceReady+0x50>
 8004864:	2302      	movs	r3, #2
 8004866:	e0fd      	b.n	8004a64 <HAL_I2C_IsDeviceReady+0x24c>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b01      	cmp	r3, #1
 800487c:	d007      	beq.n	800488e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800489c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2224      	movs	r2, #36	@ 0x24
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4a70      	ldr	r2, [pc, #448]	@ (8004a70 <HAL_I2C_IsDeviceReady+0x258>)
 80048b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f002 f87c 	bl	80069cc <I2C_WaitOnFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00d      	beq.n	80048f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048e8:	d103      	bne.n	80048f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048f0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e0b6      	b.n	8004a64 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048f6:	897b      	ldrh	r3, [r7, #10]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004904:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004906:	f7fe ffbd 	bl	8003884 <HAL_GetTick>
 800490a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b02      	cmp	r3, #2
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800492c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004930:	bf0c      	ite	eq
 8004932:	2301      	moveq	r3, #1
 8004934:	2300      	movne	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800493a:	e025      	b.n	8004988 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800493c:	f7fe ffa2 	bl	8003884 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d302      	bcc.n	8004952 <HAL_I2C_IsDeviceReady+0x13a>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d103      	bne.n	800495a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	22a0      	movs	r2, #160	@ 0xa0
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b02      	cmp	r3, #2
 8004966:	bf0c      	ite	eq
 8004968:	2301      	moveq	r3, #1
 800496a:	2300      	movne	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800497a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2ba0      	cmp	r3, #160	@ 0xa0
 8004992:	d005      	beq.n	80049a0 <HAL_I2C_IsDeviceReady+0x188>
 8004994:	7dfb      	ldrb	r3, [r7, #23]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <HAL_I2C_IsDeviceReady+0x188>
 800499a:	7dbb      	ldrb	r3, [r7, #22]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0cd      	beq.n	800493c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d129      	bne.n	8004a0a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c6:	2300      	movs	r3, #0
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	613b      	str	r3, [r7, #16]
 80049da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	2319      	movs	r3, #25
 80049e2:	2201      	movs	r2, #1
 80049e4:	4921      	ldr	r1, [pc, #132]	@ (8004a6c <HAL_I2C_IsDeviceReady+0x254>)
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f001 fff0 	bl	80069cc <I2C_WaitOnFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e036      	b.n	8004a64 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e02c      	b.n	8004a64 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a18:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a22:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	2319      	movs	r3, #25
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	490f      	ldr	r1, [pc, #60]	@ (8004a6c <HAL_I2C_IsDeviceReady+0x254>)
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f001 ffcc 	bl	80069cc <I2C_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e012      	b.n	8004a64 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	3301      	adds	r3, #1
 8004a42:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	f4ff af32 	bcc.w	80048b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
  }
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	00100002 	.word	0x00100002
 8004a70:	ffff0000 	.word	0xffff0000

08004a74 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	607a      	str	r2, [r7, #4]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	460b      	mov	r3, r1
 8004a82:	817b      	strh	r3, [r7, #10]
 8004a84:	4613      	mov	r3, r2
 8004a86:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	f040 813c 	bne.w	8004d16 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a2>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aac:	d005      	beq.n	8004aba <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 8004aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d002      	beq.n	8004aba <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 8004ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d12c      	bne.n	8004b14 <HAL_I2C_Master_Seq_Transmit_DMA+0xa0>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004aba:	4b99      	ldr	r3, [pc, #612]	@ (8004d20 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	08db      	lsrs	r3, r3, #3
 8004ac0:	4a98      	ldr	r2, [pc, #608]	@ (8004d24 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 8004ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac6:	0a1a      	lsrs	r2, r3, #8
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009a      	lsls	r2, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d112      	bne.n	8004b06 <HAL_I2C_Master_Seq_Transmit_DMA+0x92>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	f043 0220 	orr.w	r2, r3, #32
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
 8004b04:	e108      	b.n	8004d18 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d0df      	beq.n	8004ad4 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_I2C_Master_Seq_Transmit_DMA+0xae>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e0fa      	b.n	8004d18 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d007      	beq.n	8004b48 <HAL_I2C_Master_Seq_Transmit_DMA+0xd4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2221      	movs	r2, #33	@ 0x21
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2210      	movs	r2, #16
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	893a      	ldrh	r2, [r7, #8]
 8004b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b88:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004b8a:	897a      	ldrh	r2, [r7, #10]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b94:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 808d 	beq.w	8004cba <HAL_I2C_Master_Seq_Transmit_DMA+0x246>
    {
      if (hi2c->hdmatx != NULL)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d022      	beq.n	8004bee <HAL_I2C_Master_Seq_Transmit_DMA+0x17a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bac:	4a5e      	ldr	r2, [pc, #376]	@ (8004d28 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 8004bae:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb4:	4a5d      	ldr	r2, [pc, #372]	@ (8004d2c <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 8004bb6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3310      	adds	r3, #16
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bde:	f7fe ffb9 	bl	8003b54 <HAL_DMA_Start_IT>
 8004be2:	4603      	mov	r3, r0
 8004be4:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004be6:	7ffb      	ldrb	r3, [r7, #31]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d152      	bne.n	8004c92 <HAL_I2C_Master_Seq_Transmit_DMA+0x21e>
 8004bec:	e013      	b.n	8004c16 <HAL_I2C_Master_Seq_Transmit_DMA+0x1a2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e080      	b.n	8004d18 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c24:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b11      	cmp	r3, #17
 8004c2a:	d10c      	bne.n	8004c46 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d2>
 8004c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004c32:	d003      	beq.n	8004c3c <HAL_I2C_Master_Seq_Transmit_DMA+0x1c8>
 8004c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c36:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004c3a:	d101      	bne.n	8004c40 <HAL_I2C_Master_Seq_Transmit_DMA+0x1cc>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ce>
 8004c40:	2300      	movs	r3, #0
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d107      	bne.n	8004c56 <HAL_I2C_Master_Seq_Transmit_DMA+0x1e2>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c54:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 8004c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d005      	beq.n	8004c70 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 8004c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d002      	beq.n	8004c70 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 8004c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d107      	bne.n	8004c80 <HAL_I2C_Master_Seq_Transmit_DMA+0x20c>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c7e:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004c8e:	605a      	str	r2, [r3, #4]
 8004c90:	e03f      	b.n	8004d12 <HAL_I2C_Master_Seq_Transmit_DMA+0x29e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	f043 0210 	orr.w	r2, r3, #16
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e02e      	b.n	8004d18 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004cc8:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b11      	cmp	r3, #17
 8004cce:	d10c      	bne.n	8004cea <HAL_I2C_Master_Seq_Transmit_DMA+0x276>
 8004cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004cd6:	d003      	beq.n	8004ce0 <HAL_I2C_Master_Seq_Transmit_DMA+0x26c>
 8004cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cda:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004cde:	d101      	bne.n	8004ce4 <HAL_I2C_Master_Seq_Transmit_DMA+0x270>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e000      	b.n	8004ce6 <HAL_I2C_Master_Seq_Transmit_DMA+0x272>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d107      	bne.n	8004cfa <HAL_I2C_Master_Seq_Transmit_DMA+0x286>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cf8:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004d10:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	e000      	b.n	8004d18 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
  }
  else
  {
    return HAL_BUSY;
 8004d16:	2302      	movs	r3, #2
  }
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20000000 	.word	0x20000000
 8004d24:	14f8b589 	.word	0x14f8b589
 8004d28:	08006651 	.word	0x08006651
 8004d2c:	0800680f 	.word	0x0800680f

08004d30 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	817b      	strh	r3, [r7, #10]
 8004d40:	4613      	mov	r3, r2
 8004d42:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d4c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8004d50:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	f040 8195 	bne.w	800508a <HAL_I2C_Master_Seq_Receive_DMA+0x35a>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d6e:	d005      	beq.n	8004d7c <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 8004d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d002      	beq.n	8004d7c <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 8004d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d12c      	bne.n	8004dd6 <HAL_I2C_Master_Seq_Receive_DMA+0xa6>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d7c:	4b8d      	ldr	r3, [pc, #564]	@ (8004fb4 <HAL_I2C_Master_Seq_Receive_DMA+0x284>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	08db      	lsrs	r3, r3, #3
 8004d82:	4a8d      	ldr	r2, [pc, #564]	@ (8004fb8 <HAL_I2C_Master_Seq_Receive_DMA+0x288>)
 8004d84:	fba2 2303 	umull	r2, r3, r2, r3
 8004d88:	0a1a      	lsrs	r2, r3, #8
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4413      	add	r3, r2
 8004d90:	009a      	lsls	r2, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d112      	bne.n	8004dc8 <HAL_I2C_Master_Seq_Receive_DMA+0x98>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	f043 0220 	orr.w	r2, r3, #32
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e161      	b.n	800508c <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d0df      	beq.n	8004d96 <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_I2C_Master_Seq_Receive_DMA+0xb4>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e153      	b.n	800508c <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d007      	beq.n	8004e0a <HAL_I2C_Master_Seq_Receive_DMA+0xda>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e18:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004e28:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2222      	movs	r2, #34	@ 0x22
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2210      	movs	r2, #16
 8004e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	893a      	ldrh	r2, [r7, #8]
 8004e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004e5c:	897a      	ldrh	r2, [r7, #10]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e66:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 80de 	beq.w	800502e <HAL_I2C_Master_Seq_Receive_DMA+0x2fe>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d12a      	bne.n	8004ed2 <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
 8004e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d002      	beq.n	8004e88 <HAL_I2C_Master_Seq_Receive_DMA+0x158>
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d124      	bne.n	8004ed2 <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b12      	cmp	r3, #18
 8004e8c:	d118      	bne.n	8004ec0 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e9c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eac:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ebc:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8004ebe:	e022      	b.n	8004f06 <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ece:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8004ed0:	e019      	b.n	8004f06 <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ee0:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d006      	beq.n	8004ef6 <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 8004ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eea:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004eee:	d002      	beq.n	8004ef6 <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 8004ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef2:	2b10      	cmp	r3, #16
 8004ef4:	d107      	bne.n	8004f06 <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004f04:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d022      	beq.n	8004f54 <HAL_I2C_Master_Seq_Receive_DMA+0x224>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f12:	4a2a      	ldr	r2, [pc, #168]	@ (8004fbc <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 8004f14:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1a:	4a29      	ldr	r2, [pc, #164]	@ (8004fc0 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 8004f1c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f22:	2200      	movs	r2, #0
 8004f24:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3310      	adds	r3, #16
 8004f38:	4619      	mov	r1, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f44:	f7fe fe06 	bl	8003b54 <HAL_DMA_Start_IT>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 8004f4c:	7efb      	ldrb	r3, [r7, #27]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d159      	bne.n	8005006 <HAL_I2C_Master_Seq_Receive_DMA+0x2d6>
 8004f52:	e013      	b.n	8004f7c <HAL_I2C_Master_Seq_Receive_DMA+0x24c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e087      	b.n	800508c <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2b12      	cmp	r3, #18
 8004f80:	d10c      	bne.n	8004f9c <HAL_I2C_Master_Seq_Receive_DMA+0x26c>
 8004f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f84:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004f88:	d003      	beq.n	8004f92 <HAL_I2C_Master_Seq_Receive_DMA+0x262>
 8004f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004f90:	d101      	bne.n	8004f96 <HAL_I2C_Master_Seq_Receive_DMA+0x266>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_I2C_Master_Seq_Receive_DMA+0x268>
 8004f96:	2300      	movs	r3, #0
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d113      	bne.n	8004fc4 <HAL_I2C_Master_Seq_Receive_DMA+0x294>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004faa:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 8004fac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	e00a      	b.n	8004fca <HAL_I2C_Master_Seq_Receive_DMA+0x29a>
 8004fb4:	20000000 	.word	0x20000000
 8004fb8:	14f8b589 	.word	0x14f8b589
 8004fbc:	08006651 	.word	0x08006651
 8004fc0:	0800680f 	.word	0x0800680f
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 8004fc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fc8:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 8004fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d005      	beq.n	8004fe4 <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 8004fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	d002      	beq.n	8004fe4 <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 8004fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe0:	2b10      	cmp	r3, #16
 8004fe2:	d107      	bne.n	8004ff4 <HAL_I2C_Master_Seq_Receive_DMA+0x2c4>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ff2:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6859      	ldr	r1, [r3, #4]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	e03f      	b.n	8005086 <HAL_I2C_Master_Seq_Receive_DMA+0x356>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	f043 0210 	orr.w	r2, r3, #16
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e02e      	b.n	800508c <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800503c:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b12      	cmp	r3, #18
 8005042:	d10c      	bne.n	800505e <HAL_I2C_Master_Seq_Receive_DMA+0x32e>
 8005044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005046:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800504a:	d003      	beq.n	8005054 <HAL_I2C_Master_Seq_Receive_DMA+0x324>
 800504c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005052:	d101      	bne.n	8005058 <HAL_I2C_Master_Seq_Receive_DMA+0x328>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <HAL_I2C_Master_Seq_Receive_DMA+0x32a>
 8005058:	2300      	movs	r3, #0
 800505a:	2b01      	cmp	r3, #1
 800505c:	d107      	bne.n	800506e <HAL_I2C_Master_Seq_Receive_DMA+0x33e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800506c:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6859      	ldr	r1, [r3, #4]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	e000      	b.n	800508c <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
  }
  else
  {
    return HAL_BUSY;
 800508a:	2302      	movs	r3, #2
  }
}
 800508c:	4618      	mov	r0, r3
 800508e:	3720      	adds	r7, #32
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d003      	beq.n	80050cc <HAL_I2C_EV_IRQHandler+0x38>
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b40      	cmp	r3, #64	@ 0x40
 80050c8:	f040 80c1 	bne.w	800524e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10d      	bne.n	8005102 <HAL_I2C_EV_IRQHandler+0x6e>
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80050ec:	d003      	beq.n	80050f6 <HAL_I2C_EV_IRQHandler+0x62>
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80050f4:	d101      	bne.n	80050fa <HAL_I2C_EV_IRQHandler+0x66>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <HAL_I2C_EV_IRQHandler+0x68>
 80050fa:	2300      	movs	r3, #0
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	f000 8132 	beq.w	8005366 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00c      	beq.n	8005126 <HAL_I2C_EV_IRQHandler+0x92>
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	0a5b      	lsrs	r3, r3, #9
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d006      	beq.n	8005126 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f001 fd03 	bl	8006b24 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fce5 	bl	8005aee <I2C_Master_SB>
 8005124:	e092      	b.n	800524c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	08db      	lsrs	r3, r3, #3
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d009      	beq.n	8005146 <HAL_I2C_EV_IRQHandler+0xb2>
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	0a5b      	lsrs	r3, r3, #9
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fd5a 	bl	8005bf8 <I2C_Master_ADD10>
 8005144:	e082      	b.n	800524c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_I2C_EV_IRQHandler+0xd2>
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	0a5b      	lsrs	r3, r3, #9
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fd73 	bl	8005c4a <I2C_Master_ADDR>
 8005164:	e072      	b.n	800524c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	089b      	lsrs	r3, r3, #2
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d03b      	beq.n	80051ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800517c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005180:	f000 80f3 	beq.w	800536a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	09db      	lsrs	r3, r3, #7
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00f      	beq.n	80051b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	0a9b      	lsrs	r3, r3, #10
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b00      	cmp	r3, #0
 800519a:	d009      	beq.n	80051b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	089b      	lsrs	r3, r3, #2
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d103      	bne.n	80051b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f93d 	bl	8005428 <I2C_MasterTransmit_TXE>
 80051ae:	e04d      	b.n	800524c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	089b      	lsrs	r3, r3, #2
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80d6 	beq.w	800536a <HAL_I2C_EV_IRQHandler+0x2d6>
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	0a5b      	lsrs	r3, r3, #9
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 80cf 	beq.w	800536a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80051cc:	7bbb      	ldrb	r3, [r7, #14]
 80051ce:	2b21      	cmp	r3, #33	@ 0x21
 80051d0:	d103      	bne.n	80051da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f9c4 	bl	8005560 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051d8:	e0c7      	b.n	800536a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	2b40      	cmp	r3, #64	@ 0x40
 80051de:	f040 80c4 	bne.w	800536a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fa32 	bl	800564c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051e8:	e0bf      	b.n	800536a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f8:	f000 80b7 	beq.w	800536a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	099b      	lsrs	r3, r3, #6
 8005200:	f003 0301 	and.w	r3, r3, #1
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00f      	beq.n	8005228 <HAL_I2C_EV_IRQHandler+0x194>
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	0a9b      	lsrs	r3, r3, #10
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d009      	beq.n	8005228 <HAL_I2C_EV_IRQHandler+0x194>
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d103      	bne.n	8005228 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 faab 	bl	800577c <I2C_MasterReceive_RXNE>
 8005226:	e011      	b.n	800524c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	089b      	lsrs	r3, r3, #2
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 809a 	beq.w	800536a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	0a5b      	lsrs	r3, r3, #9
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8093 	beq.w	800536a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fb61 	bl	800590c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800524a:	e08e      	b.n	800536a <HAL_I2C_EV_IRQHandler+0x2d6>
 800524c:	e08d      	b.n	800536a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005252:	2b00      	cmp	r3, #0
 8005254:	d004      	beq.n	8005260 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	e007      	b.n	8005270 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	085b      	lsrs	r3, r3, #1
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d012      	beq.n	80052a2 <HAL_I2C_EV_IRQHandler+0x20e>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	0a5b      	lsrs	r3, r3, #9
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00c      	beq.n	80052a2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005298:	69b9      	ldr	r1, [r7, #24]
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 ff2c 	bl	80060f8 <I2C_Slave_ADDR>
 80052a0:	e066      	b.n	8005370 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	091b      	lsrs	r3, r3, #4
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d009      	beq.n	80052c2 <HAL_I2C_EV_IRQHandler+0x22e>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	0a5b      	lsrs	r3, r3, #9
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 ff66 	bl	800618c <I2C_Slave_STOPF>
 80052c0:	e056      	b.n	8005370 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052c2:	7bbb      	ldrb	r3, [r7, #14]
 80052c4:	2b21      	cmp	r3, #33	@ 0x21
 80052c6:	d002      	beq.n	80052ce <HAL_I2C_EV_IRQHandler+0x23a>
 80052c8:	7bbb      	ldrb	r3, [r7, #14]
 80052ca:	2b29      	cmp	r3, #41	@ 0x29
 80052cc:	d125      	bne.n	800531a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	09db      	lsrs	r3, r3, #7
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00f      	beq.n	80052fa <HAL_I2C_EV_IRQHandler+0x266>
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	0a9b      	lsrs	r3, r3, #10
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d009      	beq.n	80052fa <HAL_I2C_EV_IRQHandler+0x266>
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	089b      	lsrs	r3, r3, #2
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d103      	bne.n	80052fa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fe44 	bl	8005f80 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052f8:	e039      	b.n	800536e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	089b      	lsrs	r3, r3, #2
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d033      	beq.n	800536e <HAL_I2C_EV_IRQHandler+0x2da>
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	0a5b      	lsrs	r3, r3, #9
 800530a:	f003 0301 	and.w	r3, r3, #1
 800530e:	2b00      	cmp	r3, #0
 8005310:	d02d      	beq.n	800536e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fe71 	bl	8005ffa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005318:	e029      	b.n	800536e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	099b      	lsrs	r3, r3, #6
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00f      	beq.n	8005346 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	0a9b      	lsrs	r3, r3, #10
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d009      	beq.n	8005346 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	089b      	lsrs	r3, r3, #2
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d103      	bne.n	8005346 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fe7b 	bl	800603a <I2C_SlaveReceive_RXNE>
 8005344:	e014      	b.n	8005370 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	089b      	lsrs	r3, r3, #2
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00e      	beq.n	8005370 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	0a5b      	lsrs	r3, r3, #9
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fea9 	bl	80060b6 <I2C_SlaveReceive_BTF>
 8005364:	e004      	b.n	8005370 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005366:	bf00      	nop
 8005368:	e002      	b.n	8005370 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800536a:	bf00      	nop
 800536c:	e000      	b.n	8005370 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800536e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	bc80      	pop	{r7}
 8005398:	4770      	bx	lr

0800539a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	460b      	mov	r3, r1
 80053a4:	70fb      	strb	r3, [r7, #3]
 80053a6:	4613      	mov	r3, r2
 80053a8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr

080053c6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	bc80      	pop	{r7}
 800540c:	4770      	bx	lr

0800540e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800541c:	b2db      	uxtb	r3, r3
}
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr

08005428 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005436:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800543e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005444:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800544a:	2b00      	cmp	r3, #0
 800544c:	d150      	bne.n	80054f0 <I2C_MasterTransmit_TXE+0xc8>
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b21      	cmp	r3, #33	@ 0x21
 8005452:	d14d      	bne.n	80054f0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b08      	cmp	r3, #8
 8005458:	d01d      	beq.n	8005496 <I2C_MasterTransmit_TXE+0x6e>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b20      	cmp	r3, #32
 800545e:	d01a      	beq.n	8005496 <I2C_MasterTransmit_TXE+0x6e>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005466:	d016      	beq.n	8005496 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005476:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2211      	movs	r2, #17
 800547c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fc fc2c 	bl	8001cec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005494:	e060      	b.n	8005558 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054a4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054b4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b40      	cmp	r3, #64	@ 0x40
 80054ce:	d107      	bne.n	80054e0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff ff74 	bl	80053c6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054de:	e03b      	b.n	8005558 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f7fc fbff 	bl	8001cec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054ee:	e033      	b.n	8005558 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
 80054f2:	2b21      	cmp	r3, #33	@ 0x21
 80054f4:	d005      	beq.n	8005502 <I2C_MasterTransmit_TXE+0xda>
 80054f6:	7bbb      	ldrb	r3, [r7, #14]
 80054f8:	2b40      	cmp	r3, #64	@ 0x40
 80054fa:	d12d      	bne.n	8005558 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	2b22      	cmp	r3, #34	@ 0x22
 8005500:	d12a      	bne.n	8005558 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d108      	bne.n	800551e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800551a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800551c:	e01c      	b.n	8005558 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b40      	cmp	r3, #64	@ 0x40
 8005528:	d103      	bne.n	8005532 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f88e 	bl	800564c <I2C_MemoryTransmit_TXE_BTF>
}
 8005530:	e012      	b.n	8005558 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005536:	781a      	ldrb	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005556:	e7ff      	b.n	8005558 <I2C_MasterTransmit_TXE+0x130>
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b21      	cmp	r3, #33	@ 0x21
 8005578:	d164      	bne.n	8005644 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d012      	beq.n	80055aa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005588:	781a      	ldrb	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80055a8:	e04c      	b.n	8005644 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d01d      	beq.n	80055ec <I2C_MasterTransmit_BTF+0x8c>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b20      	cmp	r3, #32
 80055b4:	d01a      	beq.n	80055ec <I2C_MasterTransmit_BTF+0x8c>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055bc:	d016      	beq.n	80055ec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055cc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2211      	movs	r2, #17
 80055d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fc fb81 	bl	8001cec <HAL_I2C_MasterTxCpltCallback>
}
 80055ea:	e02b      	b.n	8005644 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055fa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800560a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b40      	cmp	r3, #64	@ 0x40
 8005624:	d107      	bne.n	8005636 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7ff fec9 	bl	80053c6 <HAL_I2C_MemTxCpltCallback>
}
 8005634:	e006      	b.n	8005644 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fc fb54 	bl	8001cec <HAL_I2C_MasterTxCpltCallback>
}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800565a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005660:	2b00      	cmp	r3, #0
 8005662:	d11d      	bne.n	80056a0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005668:	2b01      	cmp	r3, #1
 800566a:	d10b      	bne.n	8005684 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005670:	b2da      	uxtb	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800567c:	1c9a      	adds	r2, r3, #2
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005682:	e077      	b.n	8005774 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005688:	b29b      	uxth	r3, r3
 800568a:	121b      	asrs	r3, r3, #8
 800568c:	b2da      	uxtb	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800569e:	e069      	b.n	8005774 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d10b      	bne.n	80056c0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056be:	e059      	b.n	8005774 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d152      	bne.n	800576e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
 80056ca:	2b22      	cmp	r3, #34	@ 0x22
 80056cc:	d10d      	bne.n	80056ea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056dc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056e8:	e044      	b.n	8005774 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d015      	beq.n	8005720 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	2b21      	cmp	r3, #33	@ 0x21
 80056f8:	d112      	bne.n	8005720 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056fe:	781a      	ldrb	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800571e:	e029      	b.n	8005774 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d124      	bne.n	8005774 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800572a:	7bfb      	ldrb	r3, [r7, #15]
 800572c:	2b21      	cmp	r3, #33	@ 0x21
 800572e:	d121      	bne.n	8005774 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800573e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800574e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff fe2d 	bl	80053c6 <HAL_I2C_MemTxCpltCallback>
}
 800576c:	e002      	b.n	8005774 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7fe ff1a 	bl	80045a8 <I2C_Flush_DR>
}
 8005774:	bf00      	nop
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b22      	cmp	r3, #34	@ 0x22
 800578e:	f040 80b9 	bne.w	8005904 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005796:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800579c:	b29b      	uxth	r3, r3
 800579e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d921      	bls.n	80057ea <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	f040 8096 	bne.w	8005904 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057e6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80057e8:	e08c      	b.n	8005904 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d07f      	beq.n	80058f2 <I2C_MasterReceive_RXNE+0x176>
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d002      	beq.n	80057fe <I2C_MasterReceive_RXNE+0x82>
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d179      	bne.n	80058f2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 f95e 	bl	8006ac0 <I2C_WaitOnSTOPRequestThroughIT>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d14c      	bne.n	80058a4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005818:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005828:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005846:	b29b      	uxth	r3, r3
 8005848:	3b01      	subs	r3, #1
 800584a:	b29a      	uxth	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b40      	cmp	r3, #64	@ 0x40
 8005862:	d10a      	bne.n	800587a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff fdb0 	bl	80053d8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005878:	e044      	b.n	8005904 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d002      	beq.n	800588e <I2C_MasterReceive_RXNE+0x112>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b20      	cmp	r3, #32
 800588c:	d103      	bne.n	8005896 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	631a      	str	r2, [r3, #48]	@ 0x30
 8005894:	e002      	b.n	800589c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2212      	movs	r2, #18
 800589a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7fc fa33 	bl	8001d08 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058a2:	e02f      	b.n	8005904 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7ff fd7d 	bl	80053ea <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058f0:	e008      	b.n	8005904 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005900:	605a      	str	r2, [r3, #4]
}
 8005902:	e7ff      	b.n	8005904 <I2C_MasterReceive_RXNE+0x188>
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005918:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b04      	cmp	r3, #4
 8005922:	d11b      	bne.n	800595c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005932:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800595a:	e0c4      	b.n	8005ae6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b03      	cmp	r3, #3
 8005964:	d129      	bne.n	80059ba <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005974:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b04      	cmp	r3, #4
 800597a:	d00a      	beq.n	8005992 <I2C_MasterReceive_BTF+0x86>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d007      	beq.n	8005992 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005990:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80059b8:	e095      	b.n	8005ae6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d17d      	bne.n	8005ac0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d002      	beq.n	80059d0 <I2C_MasterReceive_BTF+0xc4>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d108      	bne.n	80059e2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	e016      	b.n	8005a10 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d002      	beq.n	80059ee <I2C_MasterReceive_BTF+0xe2>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d108      	bne.n	8005a00 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e007      	b.n	8005a10 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a0e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a22:	1c5a      	adds	r2, r3, #1
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005a6a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b40      	cmp	r3, #64	@ 0x40
 8005a7e:	d10a      	bne.n	8005a96 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff fca2 	bl	80053d8 <HAL_I2C_MemRxCpltCallback>
}
 8005a94:	e027      	b.n	8005ae6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d002      	beq.n	8005aaa <I2C_MasterReceive_BTF+0x19e>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d103      	bne.n	8005ab2 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ab0:	e002      	b.n	8005ab8 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2212      	movs	r2, #18
 8005ab6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7fc f925 	bl	8001d08 <HAL_I2C_MasterRxCpltCallback>
}
 8005abe:	e012      	b.n	8005ae6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005ae6:	bf00      	nop
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b40      	cmp	r3, #64	@ 0x40
 8005b00:	d117      	bne.n	8005b32 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b1a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005b1c:	e067      	b.n	8005bee <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f043 0301 	orr.w	r3, r3, #1
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	611a      	str	r2, [r3, #16]
}
 8005b30:	e05d      	b.n	8005bee <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b3a:	d133      	bne.n	8005ba4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b21      	cmp	r3, #33	@ 0x21
 8005b46:	d109      	bne.n	8005b5c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b58:	611a      	str	r2, [r3, #16]
 8005b5a:	e008      	b.n	8005b6e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f043 0301 	orr.w	r3, r3, #1
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <I2C_Master_SB+0x92>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d108      	bne.n	8005b92 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d032      	beq.n	8005bee <I2C_Master_SB+0x100>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d02d      	beq.n	8005bee <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ba0:	605a      	str	r2, [r3, #4]
}
 8005ba2:	e024      	b.n	8005bee <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10e      	bne.n	8005bca <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	11db      	asrs	r3, r3, #7
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	f003 0306 	and.w	r3, r3, #6
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f063 030f 	orn	r3, r3, #15
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	611a      	str	r2, [r3, #16]
}
 8005bc8:	e011      	b.n	8005bee <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d10d      	bne.n	8005bee <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	11db      	asrs	r3, r3, #7
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	f003 0306 	and.w	r3, r3, #6
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f063 030e 	orn	r3, r3, #14
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	611a      	str	r2, [r3, #16]
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d004      	beq.n	8005c1e <I2C_Master_ADD10+0x26>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d108      	bne.n	8005c30 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00c      	beq.n	8005c40 <I2C_Master_ADD10+0x48>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d007      	beq.n	8005c40 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c3e:	605a      	str	r2, [r3, #4]
  }
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bc80      	pop	{r7}
 8005c48:	4770      	bx	lr

08005c4a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b091      	sub	sp, #68	@ 0x44
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c58:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c60:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c66:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b22      	cmp	r3, #34	@ 0x22
 8005c72:	f040 8174 	bne.w	8005f5e <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10f      	bne.n	8005c9e <I2C_Master_ADDR+0x54>
 8005c7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005c82:	2b40      	cmp	r3, #64	@ 0x40
 8005c84:	d10b      	bne.n	8005c9e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c86:	2300      	movs	r3, #0
 8005c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	e16b      	b.n	8005f76 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d11d      	bne.n	8005ce2 <I2C_Master_ADDR+0x98>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005cae:	d118      	bne.n	8005ce2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cd4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	651a      	str	r2, [r3, #80]	@ 0x50
 8005ce0:	e149      	b.n	8005f76 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d113      	bne.n	8005d14 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cec:	2300      	movs	r3, #0
 8005cee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e120      	b.n	8005f56 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	f040 808a 	bne.w	8005e34 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d26:	d137      	bne.n	8005d98 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d36:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d46:	d113      	bne.n	8005d70 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d56:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d58:	2300      	movs	r3, #0
 8005d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699b      	ldr	r3, [r3, #24]
 8005d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	e0f2      	b.n	8005f56 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d70:	2300      	movs	r3, #0
 8005d72:	623b      	str	r3, [r7, #32]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	623b      	str	r3, [r7, #32]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	623b      	str	r3, [r7, #32]
 8005d84:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e0de      	b.n	8005f56 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9a:	2b08      	cmp	r3, #8
 8005d9c:	d02e      	beq.n	8005dfc <I2C_Master_ADDR+0x1b2>
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d02b      	beq.n	8005dfc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da6:	2b12      	cmp	r3, #18
 8005da8:	d102      	bne.n	8005db0 <I2C_Master_ADDR+0x166>
 8005daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d125      	bne.n	8005dfc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db2:	2b04      	cmp	r3, #4
 8005db4:	d00e      	beq.n	8005dd4 <I2C_Master_ADDR+0x18a>
 8005db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d00b      	beq.n	8005dd4 <I2C_Master_ADDR+0x18a>
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbe:	2b10      	cmp	r3, #16
 8005dc0:	d008      	beq.n	8005dd4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e007      	b.n	8005de4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005de2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de4:	2300      	movs	r3, #0
 8005de6:	61fb      	str	r3, [r7, #28]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	e0ac      	b.n	8005f56 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e0a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	61bb      	str	r3, [r7, #24]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e30:	601a      	str	r2, [r3, #0]
 8005e32:	e090      	b.n	8005f56 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d158      	bne.n	8005ef0 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d021      	beq.n	8005e88 <I2C_Master_ADDR+0x23e>
 8005e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d01e      	beq.n	8005e88 <I2C_Master_ADDR+0x23e>
 8005e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4c:	2b10      	cmp	r3, #16
 8005e4e:	d01b      	beq.n	8005e88 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e5e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	e012      	b.n	8005eae <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e96:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	613b      	str	r3, [r7, #16]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	613b      	str	r3, [r7, #16]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	613b      	str	r3, [r7, #16]
 8005eac:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ebc:	d14b      	bne.n	8005f56 <I2C_Master_ADDR+0x30c>
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ec4:	d00b      	beq.n	8005ede <I2C_Master_ADDR+0x294>
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d008      	beq.n	8005ede <I2C_Master_ADDR+0x294>
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d005      	beq.n	8005ede <I2C_Master_ADDR+0x294>
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed4:	2b10      	cmp	r3, #16
 8005ed6:	d002      	beq.n	8005ede <I2C_Master_ADDR+0x294>
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d13b      	bne.n	8005f56 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005eec:	605a      	str	r2, [r3, #4]
 8005eee:	e032      	b.n	8005f56 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005efe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f0e:	d117      	bne.n	8005f40 <I2C_Master_ADDR+0x2f6>
 8005f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f16:	d00b      	beq.n	8005f30 <I2C_Master_ADDR+0x2e6>
 8005f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d008      	beq.n	8005f30 <I2C_Master_ADDR+0x2e6>
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d005      	beq.n	8005f30 <I2C_Master_ADDR+0x2e6>
 8005f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f26:	2b10      	cmp	r3, #16
 8005f28:	d002      	beq.n	8005f30 <I2C_Master_ADDR+0x2e6>
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d107      	bne.n	8005f40 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f3e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005f5c:	e00b      	b.n	8005f76 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	68bb      	ldr	r3, [r7, #8]
}
 8005f74:	e7ff      	b.n	8005f76 <I2C_Master_ADDR+0x32c>
 8005f76:	bf00      	nop
 8005f78:	3744      	adds	r7, #68	@ 0x44
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bc80      	pop	{r7}
 8005f7e:	4770      	bx	lr

08005f80 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d02b      	beq.n	8005ff2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9e:	781a      	ldrb	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d114      	bne.n	8005ff2 <I2C_SlaveTransmit_TXE+0x72>
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b29      	cmp	r3, #41	@ 0x29
 8005fcc:	d111      	bne.n	8005ff2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fdc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2221      	movs	r2, #33	@ 0x21
 8005fe2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2228      	movs	r2, #40	@ 0x28
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff f9c2 	bl	8005376 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005ff2:	bf00      	nop
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006006:	b29b      	uxth	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d011      	beq.n	8006030 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	781a      	ldrb	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr

0800603a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006048:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800604e:	b29b      	uxth	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d02c      	beq.n	80060ae <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800607e:	b29b      	uxth	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d114      	bne.n	80060ae <I2C_SlaveReceive_RXNE+0x74>
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	2b2a      	cmp	r3, #42	@ 0x2a
 8006088:	d111      	bne.n	80060ae <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006098:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2222      	movs	r2, #34	@ 0x22
 800609e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2228      	movs	r2, #40	@ 0x28
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff f96d 	bl	8005388 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80060ae:	bf00      	nop
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d012      	beq.n	80060ee <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr

080060f8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006102:	2300      	movs	r3, #0
 8006104:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800610c:	b2db      	uxtb	r3, r3
 800610e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006112:	2b28      	cmp	r3, #40	@ 0x28
 8006114:	d127      	bne.n	8006166 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006124:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	089b      	lsrs	r3, r3, #2
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006132:	2301      	movs	r3, #1
 8006134:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	09db      	lsrs	r3, r3, #7
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d103      	bne.n	800614a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	81bb      	strh	r3, [r7, #12]
 8006148:	e002      	b.n	8006150 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006158:	89ba      	ldrh	r2, [r7, #12]
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff f91b 	bl	800539a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006164:	e00e      	b.n	8006184 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006166:	2300      	movs	r3, #0
 8006168:	60bb      	str	r3, [r7, #8]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006184:	bf00      	nop
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800619a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80061aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80061ac:	2300      	movs	r3, #0
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	60bb      	str	r3, [r7, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061e8:	d172      	bne.n	80062d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	2b22      	cmp	r3, #34	@ 0x22
 80061ee:	d002      	beq.n	80061f6 <I2C_Slave_STOPF+0x6a>
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80061f4:	d135      	bne.n	8006262 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	b29a      	uxth	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d005      	beq.n	800621a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006212:	f043 0204 	orr.w	r2, r3, #4
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006228:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	4618      	mov	r0, r3
 8006230:	f7fd fe6e 	bl	8003f10 <HAL_DMA_GetState>
 8006234:	4603      	mov	r3, r0
 8006236:	2b01      	cmp	r3, #1
 8006238:	d049      	beq.n	80062ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623e:	4a69      	ldr	r2, [pc, #420]	@ (80063e4 <I2C_Slave_STOPF+0x258>)
 8006240:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006246:	4618      	mov	r0, r3
 8006248:	f7fd fce4 	bl	8003c14 <HAL_DMA_Abort_IT>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d03d      	beq.n	80062ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800625c:	4610      	mov	r0, r2
 800625e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006260:	e035      	b.n	80062ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006274:	b29b      	uxth	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	f043 0204 	orr.w	r2, r3, #4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006294:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800629a:	4618      	mov	r0, r3
 800629c:	f7fd fe38 	bl	8003f10 <HAL_DMA_GetState>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d014      	beq.n	80062d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062aa:	4a4e      	ldr	r2, [pc, #312]	@ (80063e4 <I2C_Slave_STOPF+0x258>)
 80062ac:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fd fcae 	bl	8003c14 <HAL_DMA_Abort_IT>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d008      	beq.n	80062d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80062c8:	4610      	mov	r0, r2
 80062ca:	4798      	blx	r3
 80062cc:	e000      	b.n	80062d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d03e      	beq.n	8006358 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d112      	bne.n	800630e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006304:	b29b      	uxth	r3, r3
 8006306:	3b01      	subs	r3, #1
 8006308:	b29a      	uxth	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006318:	2b40      	cmp	r3, #64	@ 0x40
 800631a:	d112      	bne.n	8006342 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691a      	ldr	r2, [r3, #16]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006350:	f043 0204 	orr.w	r2, r3, #4
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f843 	bl	80063ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006366:	e039      	b.n	80063dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	2b2a      	cmp	r3, #42	@ 0x2a
 800636c:	d109      	bne.n	8006382 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2228      	movs	r2, #40	@ 0x28
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff f803 	bl	8005388 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b28      	cmp	r3, #40	@ 0x28
 800638c:	d111      	bne.n	80063b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a15      	ldr	r2, [pc, #84]	@ (80063e8 <I2C_Slave_STOPF+0x25c>)
 8006392:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff f802 	bl	80053b4 <HAL_I2C_ListenCpltCallback>
}
 80063b0:	e014      	b.n	80063dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b6:	2b22      	cmp	r3, #34	@ 0x22
 80063b8:	d002      	beq.n	80063c0 <I2C_Slave_STOPF+0x234>
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	2b22      	cmp	r3, #34	@ 0x22
 80063be:	d10d      	bne.n	80063dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fe ffd6 	bl	8005388 <HAL_I2C_SlaveRxCpltCallback>
}
 80063dc:	bf00      	nop
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	0800687d 	.word	0x0800687d
 80063e8:	ffff0000 	.word	0xffff0000

080063ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006402:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	2b10      	cmp	r3, #16
 8006408:	d002      	beq.n	8006410 <I2C_ITError+0x24>
 800640a:	7bbb      	ldrb	r3, [r7, #14]
 800640c:	2b40      	cmp	r3, #64	@ 0x40
 800640e:	d10a      	bne.n	8006426 <I2C_ITError+0x3a>
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2b22      	cmp	r3, #34	@ 0x22
 8006414:	d107      	bne.n	8006426 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006424:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800642c:	2b28      	cmp	r3, #40	@ 0x28
 800642e:	d107      	bne.n	8006440 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2228      	movs	r2, #40	@ 0x28
 800643a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800643e:	e015      	b.n	800646c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800644a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800644e:	d00a      	beq.n	8006466 <I2C_ITError+0x7a>
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b60      	cmp	r3, #96	@ 0x60
 8006454:	d007      	beq.n	8006466 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800647a:	d162      	bne.n	8006542 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800648a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006490:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b01      	cmp	r3, #1
 8006498:	d020      	beq.n	80064dc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800649e:	4a6a      	ldr	r2, [pc, #424]	@ (8006648 <I2C_ITError+0x25c>)
 80064a0:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fd fbb4 	bl	8003c14 <HAL_DMA_Abort_IT>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 8089 	beq.w	80065c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0201 	bic.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80064d6:	4610      	mov	r0, r2
 80064d8:	4798      	blx	r3
 80064da:	e074      	b.n	80065c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e0:	4a59      	ldr	r2, [pc, #356]	@ (8006648 <I2C_ITError+0x25c>)
 80064e2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fd fb93 	bl	8003c14 <HAL_DMA_Abort_IT>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d068      	beq.n	80065c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fe:	2b40      	cmp	r3, #64	@ 0x40
 8006500:	d10b      	bne.n	800651a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0201 	bic.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800653c:	4610      	mov	r0, r2
 800653e:	4798      	blx	r3
 8006540:	e041      	b.n	80065c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b60      	cmp	r3, #96	@ 0x60
 800654c:	d125      	bne.n	800659a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006566:	2b40      	cmp	r3, #64	@ 0x40
 8006568:	d10b      	bne.n	8006582 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	691a      	ldr	r2, [r3, #16]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0201 	bic.w	r2, r2, #1
 8006590:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fe ff32 	bl	80053fc <HAL_I2C_AbortCpltCallback>
 8006598:	e015      	b.n	80065c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a4:	2b40      	cmp	r3, #64	@ 0x40
 80065a6:	d10b      	bne.n	80065c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7fe ff12 	bl	80053ea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10e      	bne.n	80065f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d109      	bne.n	80065f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006602:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800660a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b04      	cmp	r3, #4
 8006616:	d113      	bne.n	8006640 <I2C_ITError+0x254>
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	2b28      	cmp	r3, #40	@ 0x28
 800661c:	d110      	bne.n	8006640 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a0a      	ldr	r2, [pc, #40]	@ (800664c <I2C_ITError+0x260>)
 8006622:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fe feba 	bl	80053b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006640:	bf00      	nop
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	0800687d 	.word	0x0800687d
 800664c:	ffff0000 	.word	0xffff0000

08006650 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006664:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800666c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006672:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006682:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006690:	2200      	movs	r2, #0
 8006692:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a0:	2200      	movs	r2, #0
 80066a2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80066a4:	7cfb      	ldrb	r3, [r7, #19]
 80066a6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80066aa:	2b21      	cmp	r3, #33	@ 0x21
 80066ac:	d007      	beq.n	80066be <I2C_DMAXferCplt+0x6e>
 80066ae:	7cfb      	ldrb	r3, [r7, #19]
 80066b0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80066b4:	2b22      	cmp	r3, #34	@ 0x22
 80066b6:	d131      	bne.n	800671c <I2C_DMAXferCplt+0xcc>
 80066b8:	7cbb      	ldrb	r3, [r7, #18]
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d12e      	bne.n	800671c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066cc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2200      	movs	r2, #0
 80066d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80066d4:	7cfb      	ldrb	r3, [r7, #19]
 80066d6:	2b29      	cmp	r3, #41	@ 0x29
 80066d8:	d10a      	bne.n	80066f0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2221      	movs	r2, #33	@ 0x21
 80066de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2228      	movs	r2, #40	@ 0x28
 80066e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066e8:	6978      	ldr	r0, [r7, #20]
 80066ea:	f7fe fe44 	bl	8005376 <HAL_I2C_SlaveTxCpltCallback>
 80066ee:	e00c      	b.n	800670a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80066f0:	7cfb      	ldrb	r3, [r7, #19]
 80066f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80066f4:	d109      	bne.n	800670a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2222      	movs	r2, #34	@ 0x22
 80066fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	2228      	movs	r2, #40	@ 0x28
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006704:	6978      	ldr	r0, [r7, #20]
 8006706:	f7fe fe3f 	bl	8005388 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006718:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800671a:	e074      	b.n	8006806 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d06e      	beq.n	8006806 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b01      	cmp	r3, #1
 8006730:	d107      	bne.n	8006742 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006740:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006750:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006758:	d009      	beq.n	800676e <I2C_DMAXferCplt+0x11e>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b08      	cmp	r3, #8
 800675e:	d006      	beq.n	800676e <I2C_DMAXferCplt+0x11e>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006766:	d002      	beq.n	800676e <I2C_DMAXferCplt+0x11e>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b20      	cmp	r3, #32
 800676c:	d107      	bne.n	800677e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800677c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800678c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800679c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2200      	movs	r2, #0
 80067a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80067ac:	6978      	ldr	r0, [r7, #20]
 80067ae:	f7fe fe1c 	bl	80053ea <HAL_I2C_ErrorCallback>
}
 80067b2:	e028      	b.n	8006806 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b40      	cmp	r3, #64	@ 0x40
 80067c6:	d10a      	bne.n	80067de <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	2200      	movs	r2, #0
 80067d4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80067d6:	6978      	ldr	r0, [r7, #20]
 80067d8:	f7fe fdfe 	bl	80053d8 <HAL_I2C_MemRxCpltCallback>
}
 80067dc:	e013      	b.n	8006806 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d002      	beq.n	80067f2 <I2C_DMAXferCplt+0x1a2>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	d103      	bne.n	80067fa <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2200      	movs	r2, #0
 80067f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80067f8:	e002      	b.n	8006800 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2212      	movs	r2, #18
 80067fe:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006800:	6978      	ldr	r0, [r7, #20]
 8006802:	f7fb fa81 	bl	8001d08 <HAL_I2C_MasterRxCpltCallback>
}
 8006806:	bf00      	nop
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006828:	2200      	movs	r2, #0
 800682a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006838:	2200      	movs	r2, #0
 800683a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800684a:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2220      	movs	r2, #32
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006866:	f043 0210 	orr.w	r2, r3, #16
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7fe fdbb 	bl	80053ea <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006874:	bf00      	nop
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006894:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006896:	4b4b      	ldr	r3, [pc, #300]	@ (80069c4 <I2C_DMAAbort+0x148>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	08db      	lsrs	r3, r3, #3
 800689c:	4a4a      	ldr	r2, [pc, #296]	@ (80069c8 <I2C_DMAAbort+0x14c>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	0a1a      	lsrs	r2, r3, #8
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	00da      	lsls	r2, r3, #3
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ba:	f043 0220 	orr.w	r2, r3, #32
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80068c2:	e00a      	b.n	80068da <I2C_DMAAbort+0x5e>
    }
    count--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068d8:	d0ea      	beq.n	80068b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068e6:	2200      	movs	r2, #0
 80068e8:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f6:	2200      	movs	r2, #0
 80068f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006908:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2200      	movs	r2, #0
 800690e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006914:	2b00      	cmp	r3, #0
 8006916:	d003      	beq.n	8006920 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800691c:	2200      	movs	r2, #0
 800691e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692c:	2200      	movs	r2, #0
 800692e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0201 	bic.w	r2, r2, #1
 800693e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b60      	cmp	r3, #96	@ 0x60
 800694a:	d10e      	bne.n	800696a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2220      	movs	r2, #32
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2200      	movs	r2, #0
 8006960:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006962:	6978      	ldr	r0, [r7, #20]
 8006964:	f7fe fd4a 	bl	80053fc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006968:	e027      	b.n	80069ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800696a:	7cfb      	ldrb	r3, [r7, #19]
 800696c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006970:	2b28      	cmp	r3, #40	@ 0x28
 8006972:	d117      	bne.n	80069a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0201 	orr.w	r2, r2, #1
 8006982:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006992:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2200      	movs	r2, #0
 8006998:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2228      	movs	r2, #40	@ 0x28
 800699e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80069a2:	e007      	b.n	80069b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80069b4:	6978      	ldr	r0, [r7, #20]
 80069b6:	f7fe fd18 	bl	80053ea <HAL_I2C_ErrorCallback>
}
 80069ba:	bf00      	nop
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000000 	.word	0x20000000
 80069c8:	14f8b589 	.word	0x14f8b589

080069cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	4613      	mov	r3, r2
 80069da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069dc:	e048      	b.n	8006a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d044      	beq.n	8006a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e6:	f7fc ff4d 	bl	8003884 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d302      	bcc.n	80069fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d139      	bne.n	8006a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	0c1b      	lsrs	r3, r3, #16
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d10d      	bne.n	8006a22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	43da      	mvns	r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4013      	ands	r3, r2
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bf0c      	ite	eq
 8006a18:	2301      	moveq	r3, #1
 8006a1a:	2300      	movne	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	e00c      	b.n	8006a3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	43da      	mvns	r2, r3
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bf0c      	ite	eq
 8006a34:	2301      	moveq	r3, #1
 8006a36:	2300      	movne	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	79fb      	ldrb	r3, [r7, #7]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d116      	bne.n	8006a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5c:	f043 0220 	orr.w	r2, r3, #32
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e023      	b.n	8006ab8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	0c1b      	lsrs	r3, r3, #16
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d10d      	bne.n	8006a96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	43da      	mvns	r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	4013      	ands	r3, r2
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bf0c      	ite	eq
 8006a8c:	2301      	moveq	r3, #1
 8006a8e:	2300      	movne	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	e00c      	b.n	8006ab0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	43da      	mvns	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bf0c      	ite	eq
 8006aa8:	2301      	moveq	r3, #1
 8006aaa:	2300      	movne	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d093      	beq.n	80069de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006acc:	4b13      	ldr	r3, [pc, #76]	@ (8006b1c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	08db      	lsrs	r3, r3, #3
 8006ad2:	4a13      	ldr	r2, [pc, #76]	@ (8006b20 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad8:	0a1a      	lsrs	r2, r3, #8
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d107      	bne.n	8006afe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af2:	f043 0220 	orr.w	r2, r3, #32
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e008      	b.n	8006b10 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b0c:	d0e9      	beq.n	8006ae2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc80      	pop	{r7}
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	20000000 	.word	0x20000000
 8006b20:	14f8b589 	.word	0x14f8b589

08006b24 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b30:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006b34:	d103      	bne.n	8006b3e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b3c:	e007      	b.n	8006b4e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b42:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006b46:	d102      	bne.n	8006b4e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2208      	movs	r2, #8
 8006b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr

08006b58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e272      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 8087 	beq.w	8006c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b78:	4b92      	ldr	r3, [pc, #584]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f003 030c 	and.w	r3, r3, #12
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d00c      	beq.n	8006b9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006b84:	4b8f      	ldr	r3, [pc, #572]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f003 030c 	and.w	r3, r3, #12
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d112      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x5e>
 8006b90:	4b8c      	ldr	r3, [pc, #560]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b9c:	d10b      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b9e:	4b89      	ldr	r3, [pc, #548]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d06c      	beq.n	8006c84 <HAL_RCC_OscConfig+0x12c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d168      	bne.n	8006c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e24c      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bbe:	d106      	bne.n	8006bce <HAL_RCC_OscConfig+0x76>
 8006bc0:	4b80      	ldr	r3, [pc, #512]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a7f      	ldr	r2, [pc, #508]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bca:	6013      	str	r3, [r2, #0]
 8006bcc:	e02e      	b.n	8006c2c <HAL_RCC_OscConfig+0xd4>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10c      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x98>
 8006bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a7a      	ldr	r2, [pc, #488]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006bdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	4b78      	ldr	r3, [pc, #480]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a77      	ldr	r2, [pc, #476]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006be8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	e01d      	b.n	8006c2c <HAL_RCC_OscConfig+0xd4>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bf8:	d10c      	bne.n	8006c14 <HAL_RCC_OscConfig+0xbc>
 8006bfa:	4b72      	ldr	r3, [pc, #456]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a71      	ldr	r2, [pc, #452]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	4b6f      	ldr	r3, [pc, #444]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a6e      	ldr	r2, [pc, #440]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	e00b      	b.n	8006c2c <HAL_RCC_OscConfig+0xd4>
 8006c14:	4b6b      	ldr	r3, [pc, #428]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a6a      	ldr	r2, [pc, #424]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	4b68      	ldr	r3, [pc, #416]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a67      	ldr	r2, [pc, #412]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006c26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d013      	beq.n	8006c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c34:	f7fc fe26 	bl	8003884 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c3c:	f7fc fe22 	bl	8003884 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b64      	cmp	r3, #100	@ 0x64
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e200      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0f0      	beq.n	8006c3c <HAL_RCC_OscConfig+0xe4>
 8006c5a:	e014      	b.n	8006c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c5c:	f7fc fe12 	bl	8003884 <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c64:	f7fc fe0e 	bl	8003884 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b64      	cmp	r3, #100	@ 0x64
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e1ec      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c76:	4b53      	ldr	r3, [pc, #332]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f0      	bne.n	8006c64 <HAL_RCC_OscConfig+0x10c>
 8006c82:	e000      	b.n	8006c86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d063      	beq.n	8006d5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c92:	4b4c      	ldr	r3, [pc, #304]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f003 030c 	and.w	r3, r3, #12
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00b      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006c9e:	4b49      	ldr	r3, [pc, #292]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f003 030c 	and.w	r3, r3, #12
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	d11c      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x18c>
 8006caa:	4b46      	ldr	r3, [pc, #280]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d116      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cb6:	4b43      	ldr	r3, [pc, #268]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0302 	and.w	r3, r3, #2
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <HAL_RCC_OscConfig+0x176>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d001      	beq.n	8006cce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e1c0      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cce:	4b3d      	ldr	r3, [pc, #244]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	4939      	ldr	r1, [pc, #228]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ce2:	e03a      	b.n	8006d5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d020      	beq.n	8006d2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cec:	4b36      	ldr	r3, [pc, #216]	@ (8006dc8 <HAL_RCC_OscConfig+0x270>)
 8006cee:	2201      	movs	r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cf2:	f7fc fdc7 	bl	8003884 <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cfa:	f7fc fdc3 	bl	8003884 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e1a1      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0f0      	beq.n	8006cfa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d18:	4b2a      	ldr	r3, [pc, #168]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	00db      	lsls	r3, r3, #3
 8006d26:	4927      	ldr	r1, [pc, #156]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	600b      	str	r3, [r1, #0]
 8006d2c:	e015      	b.n	8006d5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d2e:	4b26      	ldr	r3, [pc, #152]	@ (8006dc8 <HAL_RCC_OscConfig+0x270>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d34:	f7fc fda6 	bl	8003884 <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d3c:	f7fc fda2 	bl	8003884 <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e180      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1f0      	bne.n	8006d3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d03a      	beq.n	8006ddc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d019      	beq.n	8006da2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d6e:	4b17      	ldr	r3, [pc, #92]	@ (8006dcc <HAL_RCC_OscConfig+0x274>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d74:	f7fc fd86 	bl	8003884 <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d7c:	f7fc fd82 	bl	8003884 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e160      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc4 <HAL_RCC_OscConfig+0x26c>)
 8006d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0f0      	beq.n	8006d7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	f000 faea 	bl	8007374 <RCC_Delay>
 8006da0:	e01c      	b.n	8006ddc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006da2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dcc <HAL_RCC_OscConfig+0x274>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006da8:	f7fc fd6c 	bl	8003884 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dae:	e00f      	b.n	8006dd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006db0:	f7fc fd68 	bl	8003884 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d908      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e146      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
 8006dc2:	bf00      	nop
 8006dc4:	40021000 	.word	0x40021000
 8006dc8:	42420000 	.word	0x42420000
 8006dcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd0:	4b92      	ldr	r3, [pc, #584]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e9      	bne.n	8006db0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0304 	and.w	r3, r3, #4
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 80a6 	beq.w	8006f36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dea:	2300      	movs	r3, #0
 8006dec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dee:	4b8b      	ldr	r3, [pc, #556]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10d      	bne.n	8006e16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006dfa:	4b88      	ldr	r3, [pc, #544]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	4a87      	ldr	r2, [pc, #540]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e04:	61d3      	str	r3, [r2, #28]
 8006e06:	4b85      	ldr	r3, [pc, #532]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e0e:	60bb      	str	r3, [r7, #8]
 8006e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e12:	2301      	movs	r3, #1
 8006e14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e16:	4b82      	ldr	r3, [pc, #520]	@ (8007020 <HAL_RCC_OscConfig+0x4c8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d118      	bne.n	8006e54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e22:	4b7f      	ldr	r3, [pc, #508]	@ (8007020 <HAL_RCC_OscConfig+0x4c8>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a7e      	ldr	r2, [pc, #504]	@ (8007020 <HAL_RCC_OscConfig+0x4c8>)
 8006e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e2e:	f7fc fd29 	bl	8003884 <HAL_GetTick>
 8006e32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e34:	e008      	b.n	8006e48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e36:	f7fc fd25 	bl	8003884 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b64      	cmp	r3, #100	@ 0x64
 8006e42:	d901      	bls.n	8006e48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e103      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e48:	4b75      	ldr	r3, [pc, #468]	@ (8007020 <HAL_RCC_OscConfig+0x4c8>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d0f0      	beq.n	8006e36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d106      	bne.n	8006e6a <HAL_RCC_OscConfig+0x312>
 8006e5c:	4b6f      	ldr	r3, [pc, #444]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	4a6e      	ldr	r2, [pc, #440]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006e62:	f043 0301 	orr.w	r3, r3, #1
 8006e66:	6213      	str	r3, [r2, #32]
 8006e68:	e02d      	b.n	8006ec6 <HAL_RCC_OscConfig+0x36e>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10c      	bne.n	8006e8c <HAL_RCC_OscConfig+0x334>
 8006e72:	4b6a      	ldr	r3, [pc, #424]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	4a69      	ldr	r2, [pc, #420]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	6213      	str	r3, [r2, #32]
 8006e7e:	4b67      	ldr	r3, [pc, #412]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	4a66      	ldr	r2, [pc, #408]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006e84:	f023 0304 	bic.w	r3, r3, #4
 8006e88:	6213      	str	r3, [r2, #32]
 8006e8a:	e01c      	b.n	8006ec6 <HAL_RCC_OscConfig+0x36e>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	2b05      	cmp	r3, #5
 8006e92:	d10c      	bne.n	8006eae <HAL_RCC_OscConfig+0x356>
 8006e94:	4b61      	ldr	r3, [pc, #388]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	4a60      	ldr	r2, [pc, #384]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006e9a:	f043 0304 	orr.w	r3, r3, #4
 8006e9e:	6213      	str	r3, [r2, #32]
 8006ea0:	4b5e      	ldr	r3, [pc, #376]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	4a5d      	ldr	r2, [pc, #372]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006ea6:	f043 0301 	orr.w	r3, r3, #1
 8006eaa:	6213      	str	r3, [r2, #32]
 8006eac:	e00b      	b.n	8006ec6 <HAL_RCC_OscConfig+0x36e>
 8006eae:	4b5b      	ldr	r3, [pc, #364]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	4a5a      	ldr	r2, [pc, #360]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	6213      	str	r3, [r2, #32]
 8006eba:	4b58      	ldr	r3, [pc, #352]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	4a57      	ldr	r2, [pc, #348]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006ec0:	f023 0304 	bic.w	r3, r3, #4
 8006ec4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d015      	beq.n	8006efa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ece:	f7fc fcd9 	bl	8003884 <HAL_GetTick>
 8006ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed4:	e00a      	b.n	8006eec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed6:	f7fc fcd5 	bl	8003884 <HAL_GetTick>
 8006eda:	4602      	mov	r2, r0
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	1ad3      	subs	r3, r2, r3
 8006ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d901      	bls.n	8006eec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e0b1      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eec:	4b4b      	ldr	r3, [pc, #300]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006eee:	6a1b      	ldr	r3, [r3, #32]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d0ee      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x37e>
 8006ef8:	e014      	b.n	8006f24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006efa:	f7fc fcc3 	bl	8003884 <HAL_GetTick>
 8006efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f00:	e00a      	b.n	8006f18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f02:	f7fc fcbf 	bl	8003884 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d901      	bls.n	8006f18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e09b      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f18:	4b40      	ldr	r3, [pc, #256]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1ee      	bne.n	8006f02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f24:	7dfb      	ldrb	r3, [r7, #23]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d105      	bne.n	8006f36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006f2c:	69db      	ldr	r3, [r3, #28]
 8006f2e:	4a3b      	ldr	r2, [pc, #236]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f000 8087 	beq.w	800704e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f40:	4b36      	ldr	r3, [pc, #216]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f003 030c 	and.w	r3, r3, #12
 8006f48:	2b08      	cmp	r3, #8
 8006f4a:	d061      	beq.n	8007010 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	69db      	ldr	r3, [r3, #28]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d146      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f54:	4b33      	ldr	r3, [pc, #204]	@ (8007024 <HAL_RCC_OscConfig+0x4cc>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f5a:	f7fc fc93 	bl	8003884 <HAL_GetTick>
 8006f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f60:	e008      	b.n	8006f74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f62:	f7fc fc8f 	bl	8003884 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d901      	bls.n	8006f74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e06d      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f74:	4b29      	ldr	r3, [pc, #164]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1f0      	bne.n	8006f62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f88:	d108      	bne.n	8006f9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006f8a:	4b24      	ldr	r3, [pc, #144]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	4921      	ldr	r1, [pc, #132]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a19      	ldr	r1, [r3, #32]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fac:	430b      	orrs	r3, r1
 8006fae:	491b      	ldr	r1, [pc, #108]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8007024 <HAL_RCC_OscConfig+0x4cc>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fba:	f7fc fc63 	bl	8003884 <HAL_GetTick>
 8006fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fc2:	f7fc fc5f 	bl	8003884 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d901      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e03d      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006fd4:	4b11      	ldr	r3, [pc, #68]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0f0      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x46a>
 8006fe0:	e035      	b.n	800704e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fe2:	4b10      	ldr	r3, [pc, #64]	@ (8007024 <HAL_RCC_OscConfig+0x4cc>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe8:	f7fc fc4c 	bl	8003884 <HAL_GetTick>
 8006fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006fee:	e008      	b.n	8007002 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ff0:	f7fc fc48 	bl	8003884 <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e026      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007002:	4b06      	ldr	r3, [pc, #24]	@ (800701c <HAL_RCC_OscConfig+0x4c4>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1f0      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x498>
 800700e:	e01e      	b.n	800704e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	69db      	ldr	r3, [r3, #28]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d107      	bne.n	8007028 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e019      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
 800701c:	40021000 	.word	0x40021000
 8007020:	40007000 	.word	0x40007000
 8007024:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007028:	4b0b      	ldr	r3, [pc, #44]	@ (8007058 <HAL_RCC_OscConfig+0x500>)
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	429a      	cmp	r2, r3
 800703a:	d106      	bne.n	800704a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007046:	429a      	cmp	r2, r3
 8007048:	d001      	beq.n	800704e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e000      	b.n	8007050 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	40021000 	.word	0x40021000

0800705c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e0d0      	b.n	8007212 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007070:	4b6a      	ldr	r3, [pc, #424]	@ (800721c <HAL_RCC_ClockConfig+0x1c0>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d910      	bls.n	80070a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707e:	4b67      	ldr	r3, [pc, #412]	@ (800721c <HAL_RCC_ClockConfig+0x1c0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f023 0207 	bic.w	r2, r3, #7
 8007086:	4965      	ldr	r1, [pc, #404]	@ (800721c <HAL_RCC_ClockConfig+0x1c0>)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	4313      	orrs	r3, r2
 800708c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800708e:	4b63      	ldr	r3, [pc, #396]	@ (800721c <HAL_RCC_ClockConfig+0x1c0>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	429a      	cmp	r2, r3
 800709a:	d001      	beq.n	80070a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e0b8      	b.n	8007212 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d020      	beq.n	80070ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070b8:	4b59      	ldr	r3, [pc, #356]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	4a58      	ldr	r2, [pc, #352]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 80070be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80070c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0308 	and.w	r3, r3, #8
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070d0:	4b53      	ldr	r3, [pc, #332]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	4a52      	ldr	r2, [pc, #328]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 80070d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80070da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070dc:	4b50      	ldr	r3, [pc, #320]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	494d      	ldr	r1, [pc, #308]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d040      	beq.n	800717c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d107      	bne.n	8007112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007102:	4b47      	ldr	r3, [pc, #284]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d115      	bne.n	800713a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e07f      	b.n	8007212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2b02      	cmp	r3, #2
 8007118:	d107      	bne.n	800712a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800711a:	4b41      	ldr	r3, [pc, #260]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e073      	b.n	8007212 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800712a:	4b3d      	ldr	r3, [pc, #244]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e06b      	b.n	8007212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800713a:	4b39      	ldr	r3, [pc, #228]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f023 0203 	bic.w	r2, r3, #3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	4936      	ldr	r1, [pc, #216]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 8007148:	4313      	orrs	r3, r2
 800714a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800714c:	f7fc fb9a 	bl	8003884 <HAL_GetTick>
 8007150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007152:	e00a      	b.n	800716a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007154:	f7fc fb96 	bl	8003884 <HAL_GetTick>
 8007158:	4602      	mov	r2, r0
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	1ad3      	subs	r3, r2, r3
 800715e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007162:	4293      	cmp	r3, r2
 8007164:	d901      	bls.n	800716a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e053      	b.n	8007212 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716a:	4b2d      	ldr	r3, [pc, #180]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f003 020c 	and.w	r2, r3, #12
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	429a      	cmp	r2, r3
 800717a:	d1eb      	bne.n	8007154 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800717c:	4b27      	ldr	r3, [pc, #156]	@ (800721c <HAL_RCC_ClockConfig+0x1c0>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d210      	bcs.n	80071ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718a:	4b24      	ldr	r3, [pc, #144]	@ (800721c <HAL_RCC_ClockConfig+0x1c0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f023 0207 	bic.w	r2, r3, #7
 8007192:	4922      	ldr	r1, [pc, #136]	@ (800721c <HAL_RCC_ClockConfig+0x1c0>)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	4313      	orrs	r3, r2
 8007198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800719a:	4b20      	ldr	r3, [pc, #128]	@ (800721c <HAL_RCC_ClockConfig+0x1c0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d001      	beq.n	80071ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e032      	b.n	8007212 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071b8:	4b19      	ldr	r3, [pc, #100]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	4916      	ldr	r1, [pc, #88]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0308 	and.w	r3, r3, #8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d009      	beq.n	80071ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80071d6:	4b12      	ldr	r3, [pc, #72]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	00db      	lsls	r3, r3, #3
 80071e4:	490e      	ldr	r1, [pc, #56]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071ea:	f000 f821 	bl	8007230 <HAL_RCC_GetSysClockFreq>
 80071ee:	4602      	mov	r2, r0
 80071f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007220 <HAL_RCC_ClockConfig+0x1c4>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	091b      	lsrs	r3, r3, #4
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	490a      	ldr	r1, [pc, #40]	@ (8007224 <HAL_RCC_ClockConfig+0x1c8>)
 80071fc:	5ccb      	ldrb	r3, [r1, r3]
 80071fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007202:	4a09      	ldr	r2, [pc, #36]	@ (8007228 <HAL_RCC_ClockConfig+0x1cc>)
 8007204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007206:	4b09      	ldr	r3, [pc, #36]	@ (800722c <HAL_RCC_ClockConfig+0x1d0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4618      	mov	r0, r3
 800720c:	f7fc f96a 	bl	80034e4 <HAL_InitTick>

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	40022000 	.word	0x40022000
 8007220:	40021000 	.word	0x40021000
 8007224:	0800cbdc 	.word	0x0800cbdc
 8007228:	20000000 	.word	0x20000000
 800722c:	20000004 	.word	0x20000004

08007230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	2300      	movs	r3, #0
 800723c:	60bb      	str	r3, [r7, #8]
 800723e:	2300      	movs	r3, #0
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	2300      	movs	r3, #0
 8007244:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800724a:	4b1e      	ldr	r3, [pc, #120]	@ (80072c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f003 030c 	and.w	r3, r3, #12
 8007256:	2b04      	cmp	r3, #4
 8007258:	d002      	beq.n	8007260 <HAL_RCC_GetSysClockFreq+0x30>
 800725a:	2b08      	cmp	r3, #8
 800725c:	d003      	beq.n	8007266 <HAL_RCC_GetSysClockFreq+0x36>
 800725e:	e027      	b.n	80072b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007260:	4b19      	ldr	r3, [pc, #100]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007262:	613b      	str	r3, [r7, #16]
      break;
 8007264:	e027      	b.n	80072b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	0c9b      	lsrs	r3, r3, #18
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	4a17      	ldr	r2, [pc, #92]	@ (80072cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8007270:	5cd3      	ldrb	r3, [r2, r3]
 8007272:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d010      	beq.n	80072a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800727e:	4b11      	ldr	r3, [pc, #68]	@ (80072c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	0c5b      	lsrs	r3, r3, #17
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	4a11      	ldr	r2, [pc, #68]	@ (80072d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800728a:	5cd3      	ldrb	r3, [r2, r3]
 800728c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4a0d      	ldr	r2, [pc, #52]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007292:	fb03 f202 	mul.w	r2, r3, r2
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	fbb2 f3f3 	udiv	r3, r2, r3
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	e004      	b.n	80072aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a0c      	ldr	r2, [pc, #48]	@ (80072d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80072a4:	fb02 f303 	mul.w	r3, r2, r3
 80072a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	613b      	str	r3, [r7, #16]
      break;
 80072ae:	e002      	b.n	80072b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80072b0:	4b05      	ldr	r3, [pc, #20]	@ (80072c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80072b2:	613b      	str	r3, [r7, #16]
      break;
 80072b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072b6:	693b      	ldr	r3, [r7, #16]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	40021000 	.word	0x40021000
 80072c8:	007a1200 	.word	0x007a1200
 80072cc:	0800cbf4 	.word	0x0800cbf4
 80072d0:	0800cc04 	.word	0x0800cc04
 80072d4:	003d0900 	.word	0x003d0900

080072d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072dc:	4b02      	ldr	r3, [pc, #8]	@ (80072e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80072de:	681b      	ldr	r3, [r3, #0]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bc80      	pop	{r7}
 80072e6:	4770      	bx	lr
 80072e8:	20000000 	.word	0x20000000

080072ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072f0:	f7ff fff2 	bl	80072d8 <HAL_RCC_GetHCLKFreq>
 80072f4:	4602      	mov	r2, r0
 80072f6:	4b05      	ldr	r3, [pc, #20]	@ (800730c <HAL_RCC_GetPCLK1Freq+0x20>)
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	0a1b      	lsrs	r3, r3, #8
 80072fc:	f003 0307 	and.w	r3, r3, #7
 8007300:	4903      	ldr	r1, [pc, #12]	@ (8007310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007302:	5ccb      	ldrb	r3, [r1, r3]
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007308:	4618      	mov	r0, r3
 800730a:	bd80      	pop	{r7, pc}
 800730c:	40021000 	.word	0x40021000
 8007310:	0800cbec 	.word	0x0800cbec

08007314 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	220f      	movs	r2, #15
 8007322:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007324:	4b11      	ldr	r3, [pc, #68]	@ (800736c <HAL_RCC_GetClockConfig+0x58>)
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f003 0203 	and.w	r2, r3, #3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007330:	4b0e      	ldr	r3, [pc, #56]	@ (800736c <HAL_RCC_GetClockConfig+0x58>)
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800733c:	4b0b      	ldr	r3, [pc, #44]	@ (800736c <HAL_RCC_GetClockConfig+0x58>)
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007348:	4b08      	ldr	r3, [pc, #32]	@ (800736c <HAL_RCC_GetClockConfig+0x58>)
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	08db      	lsrs	r3, r3, #3
 800734e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007356:	4b06      	ldr	r3, [pc, #24]	@ (8007370 <HAL_RCC_GetClockConfig+0x5c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0207 	and.w	r2, r3, #7
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8007362:	bf00      	nop
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr
 800736c:	40021000 	.word	0x40021000
 8007370:	40022000 	.word	0x40022000

08007374 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800737c:	4b0a      	ldr	r3, [pc, #40]	@ (80073a8 <RCC_Delay+0x34>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a0a      	ldr	r2, [pc, #40]	@ (80073ac <RCC_Delay+0x38>)
 8007382:	fba2 2303 	umull	r2, r3, r2, r3
 8007386:	0a5b      	lsrs	r3, r3, #9
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	fb02 f303 	mul.w	r3, r2, r3
 800738e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007390:	bf00      	nop
  }
  while (Delay --);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	1e5a      	subs	r2, r3, #1
 8007396:	60fa      	str	r2, [r7, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1f9      	bne.n	8007390 <RCC_Delay+0x1c>
}
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bc80      	pop	{r7}
 80073a6:	4770      	bx	lr
 80073a8:	20000000 	.word	0x20000000
 80073ac:	10624dd3 	.word	0x10624dd3

080073b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d101      	bne.n	80073c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e041      	b.n	8007446 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f839 	bl	800744e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f000 fd84 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	bc80      	pop	{r7}
 800745e:	4770      	bx	lr

08007460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b01      	cmp	r3, #1
 8007472:	d001      	beq.n	8007478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e03a      	b.n	80074ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f042 0201 	orr.w	r2, r2, #1
 800748e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a18      	ldr	r2, [pc, #96]	@ (80074f8 <HAL_TIM_Base_Start_IT+0x98>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d00e      	beq.n	80074b8 <HAL_TIM_Base_Start_IT+0x58>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074a2:	d009      	beq.n	80074b8 <HAL_TIM_Base_Start_IT+0x58>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a14      	ldr	r2, [pc, #80]	@ (80074fc <HAL_TIM_Base_Start_IT+0x9c>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d004      	beq.n	80074b8 <HAL_TIM_Base_Start_IT+0x58>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a13      	ldr	r2, [pc, #76]	@ (8007500 <HAL_TIM_Base_Start_IT+0xa0>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d111      	bne.n	80074dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b06      	cmp	r3, #6
 80074c8:	d010      	beq.n	80074ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f042 0201 	orr.w	r2, r2, #1
 80074d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074da:	e007      	b.n	80074ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f042 0201 	orr.w	r2, r2, #1
 80074ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bc80      	pop	{r7}
 80074f6:	4770      	bx	lr
 80074f8:	40012c00 	.word	0x40012c00
 80074fc:	40000400 	.word	0x40000400
 8007500:	40000800 	.word	0x40000800

08007504 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e041      	b.n	800759a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800751c:	b2db      	uxtb	r3, r3
 800751e:	2b00      	cmp	r3, #0
 8007520:	d106      	bne.n	8007530 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fb ff26 	bl	800337c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3304      	adds	r3, #4
 8007540:	4619      	mov	r1, r3
 8007542:	4610      	mov	r0, r2
 8007544:	f000 fcda 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <HAL_TIM_PWM_Start+0x24>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	bf14      	ite	ne
 80075c0:	2301      	movne	r3, #1
 80075c2:	2300      	moveq	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	e022      	b.n	800760e <HAL_TIM_PWM_Start+0x6a>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b04      	cmp	r3, #4
 80075cc:	d109      	bne.n	80075e2 <HAL_TIM_PWM_Start+0x3e>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	bf14      	ite	ne
 80075da:	2301      	movne	r3, #1
 80075dc:	2300      	moveq	r3, #0
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	e015      	b.n	800760e <HAL_TIM_PWM_Start+0x6a>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b08      	cmp	r3, #8
 80075e6:	d109      	bne.n	80075fc <HAL_TIM_PWM_Start+0x58>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	bf14      	ite	ne
 80075f4:	2301      	movne	r3, #1
 80075f6:	2300      	moveq	r3, #0
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	e008      	b.n	800760e <HAL_TIM_PWM_Start+0x6a>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b01      	cmp	r3, #1
 8007606:	bf14      	ite	ne
 8007608:	2301      	movne	r3, #1
 800760a:	2300      	moveq	r3, #0
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e05e      	b.n	80076d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <HAL_TIM_PWM_Start+0x82>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007624:	e013      	b.n	800764e <HAL_TIM_PWM_Start+0xaa>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b04      	cmp	r3, #4
 800762a:	d104      	bne.n	8007636 <HAL_TIM_PWM_Start+0x92>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007634:	e00b      	b.n	800764e <HAL_TIM_PWM_Start+0xaa>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b08      	cmp	r3, #8
 800763a:	d104      	bne.n	8007646 <HAL_TIM_PWM_Start+0xa2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007644:	e003      	b.n	800764e <HAL_TIM_PWM_Start+0xaa>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2202      	movs	r2, #2
 800764a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2201      	movs	r2, #1
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 ff53 	bl	8008502 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1e      	ldr	r2, [pc, #120]	@ (80076dc <HAL_TIM_PWM_Start+0x138>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d107      	bne.n	8007676 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007674:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a18      	ldr	r2, [pc, #96]	@ (80076dc <HAL_TIM_PWM_Start+0x138>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00e      	beq.n	800769e <HAL_TIM_PWM_Start+0xfa>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007688:	d009      	beq.n	800769e <HAL_TIM_PWM_Start+0xfa>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a14      	ldr	r2, [pc, #80]	@ (80076e0 <HAL_TIM_PWM_Start+0x13c>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d004      	beq.n	800769e <HAL_TIM_PWM_Start+0xfa>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a12      	ldr	r2, [pc, #72]	@ (80076e4 <HAL_TIM_PWM_Start+0x140>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d111      	bne.n	80076c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2b06      	cmp	r3, #6
 80076ae:	d010      	beq.n	80076d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0201 	orr.w	r2, r2, #1
 80076be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c0:	e007      	b.n	80076d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0201 	orr.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	40012c00 	.word	0x40012c00
 80076e0:	40000400 	.word	0x40000400
 80076e4:	40000800 	.word	0x40000800

080076e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d101      	bne.n	80076fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e041      	b.n	800777e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d106      	bne.n	8007714 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7fb fe58 	bl	80033c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3304      	adds	r3, #4
 8007724:	4619      	mov	r1, r3
 8007726:	4610      	mov	r0, r2
 8007728:	f000 fbe8 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
	...

08007788 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007792:	2300      	movs	r3, #0
 8007794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d104      	bne.n	80077a6 <HAL_TIM_IC_Start_IT+0x1e>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	e013      	b.n	80077ce <HAL_TIM_IC_Start_IT+0x46>
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b04      	cmp	r3, #4
 80077aa:	d104      	bne.n	80077b6 <HAL_TIM_IC_Start_IT+0x2e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	e00b      	b.n	80077ce <HAL_TIM_IC_Start_IT+0x46>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b08      	cmp	r3, #8
 80077ba:	d104      	bne.n	80077c6 <HAL_TIM_IC_Start_IT+0x3e>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	e003      	b.n	80077ce <HAL_TIM_IC_Start_IT+0x46>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d104      	bne.n	80077e0 <HAL_TIM_IC_Start_IT+0x58>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	e013      	b.n	8007808 <HAL_TIM_IC_Start_IT+0x80>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	d104      	bne.n	80077f0 <HAL_TIM_IC_Start_IT+0x68>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	e00b      	b.n	8007808 <HAL_TIM_IC_Start_IT+0x80>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b08      	cmp	r3, #8
 80077f4:	d104      	bne.n	8007800 <HAL_TIM_IC_Start_IT+0x78>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	e003      	b.n	8007808 <HAL_TIM_IC_Start_IT+0x80>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007806:	b2db      	uxtb	r3, r3
 8007808:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d102      	bne.n	8007816 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007810:	7b7b      	ldrb	r3, [r7, #13]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d001      	beq.n	800781a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e0b8      	b.n	800798c <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d104      	bne.n	800782a <HAL_TIM_IC_Start_IT+0xa2>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007828:	e013      	b.n	8007852 <HAL_TIM_IC_Start_IT+0xca>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b04      	cmp	r3, #4
 800782e:	d104      	bne.n	800783a <HAL_TIM_IC_Start_IT+0xb2>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2202      	movs	r2, #2
 8007834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007838:	e00b      	b.n	8007852 <HAL_TIM_IC_Start_IT+0xca>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b08      	cmp	r3, #8
 800783e:	d104      	bne.n	800784a <HAL_TIM_IC_Start_IT+0xc2>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007848:	e003      	b.n	8007852 <HAL_TIM_IC_Start_IT+0xca>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2202      	movs	r2, #2
 800784e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d104      	bne.n	8007862 <HAL_TIM_IC_Start_IT+0xda>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007860:	e013      	b.n	800788a <HAL_TIM_IC_Start_IT+0x102>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b04      	cmp	r3, #4
 8007866:	d104      	bne.n	8007872 <HAL_TIM_IC_Start_IT+0xea>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2202      	movs	r2, #2
 800786c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007870:	e00b      	b.n	800788a <HAL_TIM_IC_Start_IT+0x102>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b08      	cmp	r3, #8
 8007876:	d104      	bne.n	8007882 <HAL_TIM_IC_Start_IT+0xfa>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007880:	e003      	b.n	800788a <HAL_TIM_IC_Start_IT+0x102>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2202      	movs	r2, #2
 8007886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b0c      	cmp	r3, #12
 800788e:	d841      	bhi.n	8007914 <HAL_TIM_IC_Start_IT+0x18c>
 8007890:	a201      	add	r2, pc, #4	@ (adr r2, 8007898 <HAL_TIM_IC_Start_IT+0x110>)
 8007892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007896:	bf00      	nop
 8007898:	080078cd 	.word	0x080078cd
 800789c:	08007915 	.word	0x08007915
 80078a0:	08007915 	.word	0x08007915
 80078a4:	08007915 	.word	0x08007915
 80078a8:	080078df 	.word	0x080078df
 80078ac:	08007915 	.word	0x08007915
 80078b0:	08007915 	.word	0x08007915
 80078b4:	08007915 	.word	0x08007915
 80078b8:	080078f1 	.word	0x080078f1
 80078bc:	08007915 	.word	0x08007915
 80078c0:	08007915 	.word	0x08007915
 80078c4:	08007915 	.word	0x08007915
 80078c8:	08007903 	.word	0x08007903
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68da      	ldr	r2, [r3, #12]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0202 	orr.w	r2, r2, #2
 80078da:	60da      	str	r2, [r3, #12]
      break;
 80078dc:	e01d      	b.n	800791a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68da      	ldr	r2, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f042 0204 	orr.w	r2, r2, #4
 80078ec:	60da      	str	r2, [r3, #12]
      break;
 80078ee:	e014      	b.n	800791a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0208 	orr.w	r2, r2, #8
 80078fe:	60da      	str	r2, [r3, #12]
      break;
 8007900:	e00b      	b.n	800791a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f042 0210 	orr.w	r2, r2, #16
 8007910:	60da      	str	r2, [r3, #12]
      break;
 8007912:	e002      	b.n	800791a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	73fb      	strb	r3, [r7, #15]
      break;
 8007918:	bf00      	nop
  }

  if (status == HAL_OK)
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d134      	bne.n	800798a <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2201      	movs	r2, #1
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fdea 	bl	8008502 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a18      	ldr	r2, [pc, #96]	@ (8007994 <HAL_TIM_IC_Start_IT+0x20c>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d00e      	beq.n	8007956 <HAL_TIM_IC_Start_IT+0x1ce>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007940:	d009      	beq.n	8007956 <HAL_TIM_IC_Start_IT+0x1ce>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a14      	ldr	r2, [pc, #80]	@ (8007998 <HAL_TIM_IC_Start_IT+0x210>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d004      	beq.n	8007956 <HAL_TIM_IC_Start_IT+0x1ce>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a12      	ldr	r2, [pc, #72]	@ (800799c <HAL_TIM_IC_Start_IT+0x214>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d111      	bne.n	800797a <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f003 0307 	and.w	r3, r3, #7
 8007960:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b06      	cmp	r3, #6
 8007966:	d010      	beq.n	800798a <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f042 0201 	orr.w	r2, r2, #1
 8007976:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007978:	e007      	b.n	800798a <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f042 0201 	orr.w	r2, r2, #1
 8007988:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800798a:	7bfb      	ldrb	r3, [r7, #15]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	40012c00 	.word	0x40012c00
 8007998:	40000400 	.word	0x40000400
 800799c:	40000800 	.word	0x40000800

080079a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d020      	beq.n	8007a04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01b      	beq.n	8007a04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f06f 0202 	mvn.w	r2, #2
 80079d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	f003 0303 	and.w	r3, r3, #3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fa f9ae 	bl	8001d4c <HAL_TIM_IC_CaptureCallback>
 80079f0:	e005      	b.n	80079fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fa66 	bl	8007ec4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 fa6c 	bl	8007ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f003 0304 	and.w	r3, r3, #4
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d020      	beq.n	8007a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d01b      	beq.n	8007a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f06f 0204 	mvn.w	r2, #4
 8007a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2202      	movs	r2, #2
 8007a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fa f988 	bl	8001d4c <HAL_TIM_IC_CaptureCallback>
 8007a3c:	e005      	b.n	8007a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fa40 	bl	8007ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fa46 	bl	8007ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f003 0308 	and.w	r3, r3, #8
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d020      	beq.n	8007a9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01b      	beq.n	8007a9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f06f 0208 	mvn.w	r2, #8
 8007a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2204      	movs	r2, #4
 8007a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7fa f962 	bl	8001d4c <HAL_TIM_IC_CaptureCallback>
 8007a88:	e005      	b.n	8007a96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fa1a 	bl	8007ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fa20 	bl	8007ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f003 0310 	and.w	r3, r3, #16
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d020      	beq.n	8007ae8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f003 0310 	and.w	r3, r3, #16
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01b      	beq.n	8007ae8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0210 	mvn.w	r2, #16
 8007ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2208      	movs	r2, #8
 8007abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fa f93c 	bl	8001d4c <HAL_TIM_IC_CaptureCallback>
 8007ad4:	e005      	b.n	8007ae2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f9f4 	bl	8007ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f9fa 	bl	8007ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00c      	beq.n	8007b0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d007      	beq.n	8007b0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f06f 0201 	mvn.w	r2, #1
 8007b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7fa fcc0 	bl	800248c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00c      	beq.n	8007b30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d007      	beq.n	8007b30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fd75 	bl	800861a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00c      	beq.n	8007b54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d007      	beq.n	8007b54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f9ca 	bl	8007ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f003 0320 	and.w	r3, r3, #32
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00c      	beq.n	8007b78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f003 0320 	and.w	r3, r3, #32
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f06f 0220 	mvn.w	r2, #32
 8007b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fd48 	bl	8008608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b78:	bf00      	nop
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d101      	bne.n	8007b9e <HAL_TIM_IC_ConfigChannel+0x1e>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e088      	b.n	8007cb0 <HAL_TIM_IC_ConfigChannel+0x130>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d11b      	bne.n	8007be4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007bbc:	f000 fb94 	bl	80082e8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 020c 	bic.w	r2, r2, #12
 8007bce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6999      	ldr	r1, [r3, #24]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	619a      	str	r2, [r3, #24]
 8007be2:	e060      	b.n	8007ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d11c      	bne.n	8007c24 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007bfa:	f000 fbcf 	bl	800839c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	699a      	ldr	r2, [r3, #24]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007c0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6999      	ldr	r1, [r3, #24]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	021a      	lsls	r2, r3, #8
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	619a      	str	r2, [r3, #24]
 8007c22:	e040      	b.n	8007ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	d11b      	bne.n	8007c62 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007c3a:	f000 fbeb 	bl	8008414 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69da      	ldr	r2, [r3, #28]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 020c 	bic.w	r2, r2, #12
 8007c4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69d9      	ldr	r1, [r3, #28]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	61da      	str	r2, [r3, #28]
 8007c60:	e021      	b.n	8007ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b0c      	cmp	r3, #12
 8007c66:	d11c      	bne.n	8007ca2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007c78:	f000 fc07 	bl	800848a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69da      	ldr	r2, [r3, #28]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007c8a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	69d9      	ldr	r1, [r3, #28]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	021a      	lsls	r2, r3, #8
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	61da      	str	r2, [r3, #28]
 8007ca0:	e001      	b.n	8007ca6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d101      	bne.n	8007cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	e0ae      	b.n	8007e34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b0c      	cmp	r3, #12
 8007ce2:	f200 809f 	bhi.w	8007e24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cec:	08007d21 	.word	0x08007d21
 8007cf0:	08007e25 	.word	0x08007e25
 8007cf4:	08007e25 	.word	0x08007e25
 8007cf8:	08007e25 	.word	0x08007e25
 8007cfc:	08007d61 	.word	0x08007d61
 8007d00:	08007e25 	.word	0x08007e25
 8007d04:	08007e25 	.word	0x08007e25
 8007d08:	08007e25 	.word	0x08007e25
 8007d0c:	08007da3 	.word	0x08007da3
 8007d10:	08007e25 	.word	0x08007e25
 8007d14:	08007e25 	.word	0x08007e25
 8007d18:	08007e25 	.word	0x08007e25
 8007d1c:	08007de3 	.word	0x08007de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68b9      	ldr	r1, [r7, #8]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 f956 	bl	8007fd8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699a      	ldr	r2, [r3, #24]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f042 0208 	orr.w	r2, r2, #8
 8007d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	699a      	ldr	r2, [r3, #24]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f022 0204 	bic.w	r2, r2, #4
 8007d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6999      	ldr	r1, [r3, #24]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	691a      	ldr	r2, [r3, #16]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	619a      	str	r2, [r3, #24]
      break;
 8007d5e:	e064      	b.n	8007e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68b9      	ldr	r1, [r7, #8]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 f99c 	bl	80080a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6999      	ldr	r1, [r3, #24]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	021a      	lsls	r2, r3, #8
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	619a      	str	r2, [r3, #24]
      break;
 8007da0:	e043      	b.n	8007e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 f9e5 	bl	8008178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69da      	ldr	r2, [r3, #28]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f042 0208 	orr.w	r2, r2, #8
 8007dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69da      	ldr	r2, [r3, #28]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0204 	bic.w	r2, r2, #4
 8007dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69d9      	ldr	r1, [r3, #28]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	691a      	ldr	r2, [r3, #16]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	61da      	str	r2, [r3, #28]
      break;
 8007de0:	e023      	b.n	8007e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 fa2f 	bl	800824c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	69da      	ldr	r2, [r3, #28]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69da      	ldr	r2, [r3, #28]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	69d9      	ldr	r1, [r3, #28]
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	021a      	lsls	r2, r3, #8
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	61da      	str	r2, [r3, #28]
      break;
 8007e22:	e002      	b.n	8007e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	75fb      	strb	r3, [r7, #23]
      break;
 8007e28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b0c      	cmp	r3, #12
 8007e4e:	d831      	bhi.n	8007eb4 <HAL_TIM_ReadCapturedValue+0x78>
 8007e50:	a201      	add	r2, pc, #4	@ (adr r2, 8007e58 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e56:	bf00      	nop
 8007e58:	08007e8d 	.word	0x08007e8d
 8007e5c:	08007eb5 	.word	0x08007eb5
 8007e60:	08007eb5 	.word	0x08007eb5
 8007e64:	08007eb5 	.word	0x08007eb5
 8007e68:	08007e97 	.word	0x08007e97
 8007e6c:	08007eb5 	.word	0x08007eb5
 8007e70:	08007eb5 	.word	0x08007eb5
 8007e74:	08007eb5 	.word	0x08007eb5
 8007e78:	08007ea1 	.word	0x08007ea1
 8007e7c:	08007eb5 	.word	0x08007eb5
 8007e80:	08007eb5 	.word	0x08007eb5
 8007e84:	08007eb5 	.word	0x08007eb5
 8007e88:	08007eab 	.word	0x08007eab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e92:	60fb      	str	r3, [r7, #12]

      break;
 8007e94:	e00f      	b.n	8007eb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e9c:	60fb      	str	r3, [r7, #12]

      break;
 8007e9e:	e00a      	b.n	8007eb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ea6:	60fb      	str	r3, [r7, #12]

      break;
 8007ea8:	e005      	b.n	8007eb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb0:	60fb      	str	r3, [r7, #12]

      break;
 8007eb2:	e000      	b.n	8007eb6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007eb4:	bf00      	nop
  }

  return tmpreg;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bc80      	pop	{r7}
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop

08007ec4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bc80      	pop	{r7}
 8007ed4:	4770      	bx	lr

08007ed6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bc80      	pop	{r7}
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc80      	pop	{r7}
 8007ef8:	4770      	bx	lr
	...

08007efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a2f      	ldr	r2, [pc, #188]	@ (8007fcc <TIM_Base_SetConfig+0xd0>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00b      	beq.n	8007f2c <TIM_Base_SetConfig+0x30>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f1a:	d007      	beq.n	8007f2c <TIM_Base_SetConfig+0x30>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8007fd0 <TIM_Base_SetConfig+0xd4>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_Base_SetConfig+0x30>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a2b      	ldr	r2, [pc, #172]	@ (8007fd4 <TIM_Base_SetConfig+0xd8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d108      	bne.n	8007f3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a22      	ldr	r2, [pc, #136]	@ (8007fcc <TIM_Base_SetConfig+0xd0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00b      	beq.n	8007f5e <TIM_Base_SetConfig+0x62>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f4c:	d007      	beq.n	8007f5e <TIM_Base_SetConfig+0x62>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a1f      	ldr	r2, [pc, #124]	@ (8007fd0 <TIM_Base_SetConfig+0xd4>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d003      	beq.n	8007f5e <TIM_Base_SetConfig+0x62>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a1e      	ldr	r2, [pc, #120]	@ (8007fd4 <TIM_Base_SetConfig+0xd8>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d108      	bne.n	8007f70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a0d      	ldr	r2, [pc, #52]	@ (8007fcc <TIM_Base_SetConfig+0xd0>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d103      	bne.n	8007fa4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d005      	beq.n	8007fc2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f023 0201 	bic.w	r2, r3, #1
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	611a      	str	r2, [r3, #16]
  }
}
 8007fc2:	bf00      	nop
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bc80      	pop	{r7}
 8007fca:	4770      	bx	lr
 8007fcc:	40012c00 	.word	0x40012c00
 8007fd0:	40000400 	.word	0x40000400
 8007fd4:	40000800 	.word	0x40000800

08007fd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a1b      	ldr	r3, [r3, #32]
 8007fec:	f023 0201 	bic.w	r2, r3, #1
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0303 	bic.w	r3, r3, #3
 800800e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f023 0302 	bic.w	r3, r3, #2
 8008020:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	697a      	ldr	r2, [r7, #20]
 8008028:	4313      	orrs	r3, r2
 800802a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a1c      	ldr	r2, [pc, #112]	@ (80080a0 <TIM_OC1_SetConfig+0xc8>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d10c      	bne.n	800804e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f023 0308 	bic.w	r3, r3, #8
 800803a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	4313      	orrs	r3, r2
 8008044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f023 0304 	bic.w	r3, r3, #4
 800804c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a13      	ldr	r2, [pc, #76]	@ (80080a0 <TIM_OC1_SetConfig+0xc8>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d111      	bne.n	800807a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800805c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	4313      	orrs	r3, r2
 800806e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	4313      	orrs	r3, r2
 8008078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	621a      	str	r2, [r3, #32]
}
 8008094:	bf00      	nop
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	bc80      	pop	{r7}
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	40012c00 	.word	0x40012c00

080080a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	f023 0210 	bic.w	r2, r3, #16
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	021b      	lsls	r3, r3, #8
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f023 0320 	bic.w	r3, r3, #32
 80080ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	011b      	lsls	r3, r3, #4
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008174 <TIM_OC2_SetConfig+0xd0>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d10d      	bne.n	8008120 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800810a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800811e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a14      	ldr	r2, [pc, #80]	@ (8008174 <TIM_OC2_SetConfig+0xd0>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d113      	bne.n	8008150 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800812e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008136:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4313      	orrs	r3, r2
 8008142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	4313      	orrs	r3, r2
 800814e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	621a      	str	r2, [r3, #32]
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr
 8008174:	40012c00 	.word	0x40012c00

08008178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a1b      	ldr	r3, [r3, #32]
 800818c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0303 	bic.w	r3, r3, #3
 80081ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	021b      	lsls	r3, r3, #8
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008248 <TIM_OC3_SetConfig+0xd0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d10d      	bne.n	80081f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	021b      	lsls	r3, r3, #8
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a14      	ldr	r2, [pc, #80]	@ (8008248 <TIM_OC3_SetConfig+0xd0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d113      	bne.n	8008222 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	011b      	lsls	r3, r3, #4
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	4313      	orrs	r3, r2
 8008214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	4313      	orrs	r3, r2
 8008220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	621a      	str	r2, [r3, #32]
}
 800823c:	bf00      	nop
 800823e:	371c      	adds	r7, #28
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	40012c00 	.word	0x40012c00

0800824c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800827a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	021b      	lsls	r3, r3, #8
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4313      	orrs	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	031b      	lsls	r3, r3, #12
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a0f      	ldr	r2, [pc, #60]	@ (80082e4 <TIM_OC4_SetConfig+0x98>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d109      	bne.n	80082c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	019b      	lsls	r3, r3, #6
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	621a      	str	r2, [r3, #32]
}
 80082da:	bf00      	nop
 80082dc:	371c      	adds	r7, #28
 80082de:	46bd      	mov	sp, r7
 80082e0:	bc80      	pop	{r7}
 80082e2:	4770      	bx	lr
 80082e4:	40012c00 	.word	0x40012c00

080082e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	f023 0201 	bic.w	r2, r3, #1
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4a1f      	ldr	r2, [pc, #124]	@ (8008390 <TIM_TI1_SetConfig+0xa8>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d00b      	beq.n	800832e <TIM_TI1_SetConfig+0x46>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800831c:	d007      	beq.n	800832e <TIM_TI1_SetConfig+0x46>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	4a1c      	ldr	r2, [pc, #112]	@ (8008394 <TIM_TI1_SetConfig+0xac>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d003      	beq.n	800832e <TIM_TI1_SetConfig+0x46>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4a1b      	ldr	r2, [pc, #108]	@ (8008398 <TIM_TI1_SetConfig+0xb0>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d101      	bne.n	8008332 <TIM_TI1_SetConfig+0x4a>
 800832e:	2301      	movs	r3, #1
 8008330:	e000      	b.n	8008334 <TIM_TI1_SetConfig+0x4c>
 8008332:	2300      	movs	r3, #0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d008      	beq.n	800834a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	f023 0303 	bic.w	r3, r3, #3
 800833e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4313      	orrs	r3, r2
 8008346:	617b      	str	r3, [r7, #20]
 8008348:	e003      	b.n	8008352 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f043 0301 	orr.w	r3, r3, #1
 8008350:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008358:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	011b      	lsls	r3, r3, #4
 800835e:	b2db      	uxtb	r3, r3
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	4313      	orrs	r3, r2
 8008364:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	f023 030a 	bic.w	r3, r3, #10
 800836c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f003 030a 	and.w	r3, r3, #10
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	4313      	orrs	r3, r2
 8008378:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	621a      	str	r2, [r3, #32]
}
 8008386:	bf00      	nop
 8008388:	371c      	adds	r7, #28
 800838a:	46bd      	mov	sp, r7
 800838c:	bc80      	pop	{r7}
 800838e:	4770      	bx	lr
 8008390:	40012c00 	.word	0x40012c00
 8008394:	40000400 	.word	0x40000400
 8008398:	40000800 	.word	0x40000800

0800839c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800839c:	b480      	push	{r7}
 800839e:	b087      	sub	sp, #28
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
 80083a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6a1b      	ldr	r3, [r3, #32]
 80083ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	f023 0210 	bic.w	r2, r3, #16
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	021b      	lsls	r3, r3, #8
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80083da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	031b      	lsls	r3, r3, #12
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80083ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	621a      	str	r2, [r3, #32]
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	bc80      	pop	{r7}
 8008412:	4770      	bx	lr

08008414 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6a1b      	ldr	r3, [r3, #32]
 800842c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f023 0303 	bic.w	r3, r3, #3
 8008440:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4313      	orrs	r3, r2
 8008448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008450:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	011b      	lsls	r3, r3, #4
 8008456:	b2db      	uxtb	r3, r3
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	4313      	orrs	r3, r2
 800845c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008464:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	021b      	lsls	r3, r3, #8
 800846a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	4313      	orrs	r3, r2
 8008472:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	621a      	str	r2, [r3, #32]
}
 8008480:	bf00      	nop
 8008482:	371c      	adds	r7, #28
 8008484:	46bd      	mov	sp, r7
 8008486:	bc80      	pop	{r7}
 8008488:	4770      	bx	lr

0800848a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800848a:	b480      	push	{r7}
 800848c:	b087      	sub	sp, #28
 800848e:	af00      	add	r7, sp, #0
 8008490:	60f8      	str	r0, [r7, #12]
 8008492:	60b9      	str	r1, [r7, #8]
 8008494:	607a      	str	r2, [r7, #4]
 8008496:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	69db      	ldr	r3, [r3, #28]
 80084ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084b6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	021b      	lsls	r3, r3, #8
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	4313      	orrs	r3, r2
 80084c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	031b      	lsls	r3, r3, #12
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084dc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	031b      	lsls	r3, r3, #12
 80084e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	621a      	str	r2, [r3, #32]
}
 80084f8:	bf00      	nop
 80084fa:	371c      	adds	r7, #28
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bc80      	pop	{r7}
 8008500:	4770      	bx	lr

08008502 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008502:	b480      	push	{r7}
 8008504:	b087      	sub	sp, #28
 8008506:	af00      	add	r7, sp, #0
 8008508:	60f8      	str	r0, [r7, #12]
 800850a:	60b9      	str	r1, [r7, #8]
 800850c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f003 031f 	and.w	r3, r3, #31
 8008514:	2201      	movs	r2, #1
 8008516:	fa02 f303 	lsl.w	r3, r2, r3
 800851a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a1a      	ldr	r2, [r3, #32]
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	43db      	mvns	r3, r3
 8008524:	401a      	ands	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6a1a      	ldr	r2, [r3, #32]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	f003 031f 	and.w	r3, r3, #31
 8008534:	6879      	ldr	r1, [r7, #4]
 8008536:	fa01 f303 	lsl.w	r3, r1, r3
 800853a:	431a      	orrs	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	621a      	str	r2, [r3, #32]
}
 8008540:	bf00      	nop
 8008542:	371c      	adds	r7, #28
 8008544:	46bd      	mov	sp, r7
 8008546:	bc80      	pop	{r7}
 8008548:	4770      	bx	lr
	...

0800854c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800855c:	2b01      	cmp	r3, #1
 800855e:	d101      	bne.n	8008564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008560:	2302      	movs	r3, #2
 8008562:	e046      	b.n	80085f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800858a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	4313      	orrs	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a16      	ldr	r2, [pc, #88]	@ (80085fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d00e      	beq.n	80085c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085b0:	d009      	beq.n	80085c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a12      	ldr	r2, [pc, #72]	@ (8008600 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d004      	beq.n	80085c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a10      	ldr	r2, [pc, #64]	@ (8008604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d10c      	bne.n	80085e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bc80      	pop	{r7}
 80085fa:	4770      	bx	lr
 80085fc:	40012c00 	.word	0x40012c00
 8008600:	40000400 	.word	0x40000400
 8008604:	40000800 	.word	0x40000800

08008608 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	bc80      	pop	{r7}
 8008618:	4770      	bx	lr

0800861a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	bc80      	pop	{r7}
 800862a:	4770      	bx	lr

0800862c <__NVIC_SetPriority>:
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800863c:	2b00      	cmp	r3, #0
 800863e:	db0a      	blt.n	8008656 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	b2da      	uxtb	r2, r3
 8008644:	490c      	ldr	r1, [pc, #48]	@ (8008678 <__NVIC_SetPriority+0x4c>)
 8008646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800864a:	0112      	lsls	r2, r2, #4
 800864c:	b2d2      	uxtb	r2, r2
 800864e:	440b      	add	r3, r1
 8008650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008654:	e00a      	b.n	800866c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	b2da      	uxtb	r2, r3
 800865a:	4908      	ldr	r1, [pc, #32]	@ (800867c <__NVIC_SetPriority+0x50>)
 800865c:	79fb      	ldrb	r3, [r7, #7]
 800865e:	f003 030f 	and.w	r3, r3, #15
 8008662:	3b04      	subs	r3, #4
 8008664:	0112      	lsls	r2, r2, #4
 8008666:	b2d2      	uxtb	r2, r2
 8008668:	440b      	add	r3, r1
 800866a:	761a      	strb	r2, [r3, #24]
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	bc80      	pop	{r7}
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	e000e100 	.word	0xe000e100
 800867c:	e000ed00 	.word	0xe000ed00

08008680 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008684:	4b05      	ldr	r3, [pc, #20]	@ (800869c <SysTick_Handler+0x1c>)
 8008686:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008688:	f002 f870 	bl	800a76c <xTaskGetSchedulerState>
 800868c:	4603      	mov	r3, r0
 800868e:	2b01      	cmp	r3, #1
 8008690:	d001      	beq.n	8008696 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008692:	f002 ff11 	bl	800b4b8 <xPortSysTickHandler>
  }
}
 8008696:	bf00      	nop
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	e000e010 	.word	0xe000e010

080086a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80086a4:	2100      	movs	r1, #0
 80086a6:	f06f 0004 	mvn.w	r0, #4
 80086aa:	f7ff ffbf 	bl	800862c <__NVIC_SetPriority>
#endif
}
 80086ae:	bf00      	nop
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086ba:	f3ef 8305 	mrs	r3, IPSR
 80086be:	603b      	str	r3, [r7, #0]
  return(result);
 80086c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d003      	beq.n	80086ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80086c6:	f06f 0305 	mvn.w	r3, #5
 80086ca:	607b      	str	r3, [r7, #4]
 80086cc:	e00c      	b.n	80086e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80086ce:	4b09      	ldr	r3, [pc, #36]	@ (80086f4 <osKernelInitialize+0x40>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d105      	bne.n	80086e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80086d6:	4b07      	ldr	r3, [pc, #28]	@ (80086f4 <osKernelInitialize+0x40>)
 80086d8:	2201      	movs	r2, #1
 80086da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80086dc:	2300      	movs	r3, #0
 80086de:	607b      	str	r3, [r7, #4]
 80086e0:	e002      	b.n	80086e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80086e2:	f04f 33ff 	mov.w	r3, #4294967295
 80086e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80086e8:	687b      	ldr	r3, [r7, #4]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bc80      	pop	{r7}
 80086f2:	4770      	bx	lr
 80086f4:	200003dc 	.word	0x200003dc

080086f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086fe:	f3ef 8305 	mrs	r3, IPSR
 8008702:	603b      	str	r3, [r7, #0]
  return(result);
 8008704:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <osKernelStart+0x1a>
    stat = osErrorISR;
 800870a:	f06f 0305 	mvn.w	r3, #5
 800870e:	607b      	str	r3, [r7, #4]
 8008710:	e010      	b.n	8008734 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008712:	4b0b      	ldr	r3, [pc, #44]	@ (8008740 <osKernelStart+0x48>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d109      	bne.n	800872e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800871a:	f7ff ffc1 	bl	80086a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800871e:	4b08      	ldr	r3, [pc, #32]	@ (8008740 <osKernelStart+0x48>)
 8008720:	2202      	movs	r2, #2
 8008722:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008724:	f001 fbb4 	bl	8009e90 <vTaskStartScheduler>
      stat = osOK;
 8008728:	2300      	movs	r3, #0
 800872a:	607b      	str	r3, [r7, #4]
 800872c:	e002      	b.n	8008734 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800872e:	f04f 33ff 	mov.w	r3, #4294967295
 8008732:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008734:	687b      	ldr	r3, [r7, #4]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	200003dc 	.word	0x200003dc

08008744 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008744:	b580      	push	{r7, lr}
 8008746:	b08e      	sub	sp, #56	@ 0x38
 8008748:	af04      	add	r7, sp, #16
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008750:	2300      	movs	r3, #0
 8008752:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008754:	f3ef 8305 	mrs	r3, IPSR
 8008758:	617b      	str	r3, [r7, #20]
  return(result);
 800875a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800875c:	2b00      	cmp	r3, #0
 800875e:	d17e      	bne.n	800885e <osThreadNew+0x11a>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d07b      	beq.n	800885e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008766:	2380      	movs	r3, #128	@ 0x80
 8008768:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800876a:	2318      	movs	r3, #24
 800876c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800876e:	2300      	movs	r3, #0
 8008770:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008772:	f04f 33ff 	mov.w	r3, #4294967295
 8008776:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d045      	beq.n	800880a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d002      	beq.n	800878c <osThreadNew+0x48>
        name = attr->name;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d008      	beq.n	80087b2 <osThreadNew+0x6e>
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	2b38      	cmp	r3, #56	@ 0x38
 80087a4:	d805      	bhi.n	80087b2 <osThreadNew+0x6e>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f003 0301 	and.w	r3, r3, #1
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <osThreadNew+0x72>
        return (NULL);
 80087b2:	2300      	movs	r3, #0
 80087b4:	e054      	b.n	8008860 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	089b      	lsrs	r3, r3, #2
 80087c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00e      	beq.n	80087ec <osThreadNew+0xa8>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	2ba7      	cmp	r3, #167	@ 0xa7
 80087d4:	d90a      	bls.n	80087ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d006      	beq.n	80087ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <osThreadNew+0xa8>
        mem = 1;
 80087e6:	2301      	movs	r3, #1
 80087e8:	61bb      	str	r3, [r7, #24]
 80087ea:	e010      	b.n	800880e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10c      	bne.n	800880e <osThreadNew+0xca>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d108      	bne.n	800880e <osThreadNew+0xca>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d104      	bne.n	800880e <osThreadNew+0xca>
          mem = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	61bb      	str	r3, [r7, #24]
 8008808:	e001      	b.n	800880e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d110      	bne.n	8008836 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800881c:	9202      	str	r2, [sp, #8]
 800881e:	9301      	str	r3, [sp, #4]
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	6a3a      	ldr	r2, [r7, #32]
 8008828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f001 f93c 	bl	8009aa8 <xTaskCreateStatic>
 8008830:	4603      	mov	r3, r0
 8008832:	613b      	str	r3, [r7, #16]
 8008834:	e013      	b.n	800885e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d110      	bne.n	800885e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	b29a      	uxth	r2, r3
 8008840:	f107 0310 	add.w	r3, r7, #16
 8008844:	9301      	str	r3, [sp, #4]
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f001 f98a 	bl	8009b68 <xTaskCreate>
 8008854:	4603      	mov	r3, r0
 8008856:	2b01      	cmp	r3, #1
 8008858:	d001      	beq.n	800885e <osThreadNew+0x11a>
            hTask = NULL;
 800885a:	2300      	movs	r3, #0
 800885c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800885e:	693b      	ldr	r3, [r7, #16]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3728      	adds	r7, #40	@ 0x28
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008870:	f3ef 8305 	mrs	r3, IPSR
 8008874:	60bb      	str	r3, [r7, #8]
  return(result);
 8008876:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <osDelay+0x1c>
    stat = osErrorISR;
 800887c:	f06f 0305 	mvn.w	r3, #5
 8008880:	60fb      	str	r3, [r7, #12]
 8008882:	e007      	b.n	8008894 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008884:	2300      	movs	r3, #0
 8008886:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d002      	beq.n	8008894 <osDelay+0x2c>
      vTaskDelay(ticks);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f001 fac8 	bl	8009e24 <vTaskDelay>
    }
  }

  return (stat);
 8008894:	68fb      	ldr	r3, [r7, #12]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800889e:	b580      	push	{r7, lr}
 80088a0:	b088      	sub	sp, #32
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088aa:	f3ef 8305 	mrs	r3, IPSR
 80088ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80088b0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d174      	bne.n	80089a0 <osMutexNew+0x102>
    if (attr != NULL) {
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d003      	beq.n	80088c4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	61bb      	str	r3, [r7, #24]
 80088c2:	e001      	b.n	80088c8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <osMutexNew+0x3a>
      rmtx = 1U;
 80088d2:	2301      	movs	r3, #1
 80088d4:	617b      	str	r3, [r7, #20]
 80088d6:	e001      	b.n	80088dc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	f003 0308 	and.w	r3, r3, #8
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d15c      	bne.n	80089a0 <osMutexNew+0x102>
      mem = -1;
 80088e6:	f04f 33ff 	mov.w	r3, #4294967295
 80088ea:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d015      	beq.n	800891e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d006      	beq.n	8008908 <osMutexNew+0x6a>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	2b4f      	cmp	r3, #79	@ 0x4f
 8008900:	d902      	bls.n	8008908 <osMutexNew+0x6a>
          mem = 1;
 8008902:	2301      	movs	r3, #1
 8008904:	613b      	str	r3, [r7, #16]
 8008906:	e00c      	b.n	8008922 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d108      	bne.n	8008922 <osMutexNew+0x84>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d104      	bne.n	8008922 <osMutexNew+0x84>
            mem = 0;
 8008918:	2300      	movs	r3, #0
 800891a:	613b      	str	r3, [r7, #16]
 800891c:	e001      	b.n	8008922 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	2b01      	cmp	r3, #1
 8008926:	d112      	bne.n	800894e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d007      	beq.n	800893e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	4619      	mov	r1, r3
 8008934:	2004      	movs	r0, #4
 8008936:	f000 fb1a 	bl	8008f6e <xQueueCreateMutexStatic>
 800893a:	61f8      	str	r0, [r7, #28]
 800893c:	e016      	b.n	800896c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	4619      	mov	r1, r3
 8008944:	2001      	movs	r0, #1
 8008946:	f000 fb12 	bl	8008f6e <xQueueCreateMutexStatic>
 800894a:	61f8      	str	r0, [r7, #28]
 800894c:	e00e      	b.n	800896c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d10b      	bne.n	800896c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d004      	beq.n	8008964 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800895a:	2004      	movs	r0, #4
 800895c:	f000 faef 	bl	8008f3e <xQueueCreateMutex>
 8008960:	61f8      	str	r0, [r7, #28]
 8008962:	e003      	b.n	800896c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008964:	2001      	movs	r0, #1
 8008966:	f000 faea 	bl	8008f3e <xQueueCreateMutex>
 800896a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00c      	beq.n	800898c <osMutexNew+0xee>
        if (attr != NULL) {
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d003      	beq.n	8008980 <osMutexNew+0xe2>
          name = attr->name;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	e001      	b.n	8008984 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008980:	2300      	movs	r3, #0
 8008982:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008984:	68f9      	ldr	r1, [r7, #12]
 8008986:	69f8      	ldr	r0, [r7, #28]
 8008988:	f001 f832 	bl	80099f0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d006      	beq.n	80089a0 <osMutexNew+0x102>
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	f043 0301 	orr.w	r3, r3, #1
 800899e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80089a0:	69fb      	ldr	r3, [r7, #28]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3720      	adds	r7, #32
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b086      	sub	sp, #24
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
 80089b2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f023 0301 	bic.w	r3, r3, #1
 80089ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089c8:	f3ef 8305 	mrs	r3, IPSR
 80089cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80089ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80089d4:	f06f 0305 	mvn.w	r3, #5
 80089d8:	617b      	str	r3, [r7, #20]
 80089da:	e02c      	b.n	8008a36 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d103      	bne.n	80089ea <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80089e2:	f06f 0303 	mvn.w	r3, #3
 80089e6:	617b      	str	r3, [r7, #20]
 80089e8:	e025      	b.n	8008a36 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d011      	beq.n	8008a14 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80089f0:	6839      	ldr	r1, [r7, #0]
 80089f2:	6938      	ldr	r0, [r7, #16]
 80089f4:	f000 fb0b 	bl	800900e <xQueueTakeMutexRecursive>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d01b      	beq.n	8008a36 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d003      	beq.n	8008a0c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008a04:	f06f 0301 	mvn.w	r3, #1
 8008a08:	617b      	str	r3, [r7, #20]
 8008a0a:	e014      	b.n	8008a36 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008a0c:	f06f 0302 	mvn.w	r3, #2
 8008a10:	617b      	str	r3, [r7, #20]
 8008a12:	e010      	b.n	8008a36 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6938      	ldr	r0, [r7, #16]
 8008a18:	f000 fdb2 	bl	8009580 <xQueueSemaphoreTake>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d009      	beq.n	8008a36 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d003      	beq.n	8008a30 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008a28:	f06f 0301 	mvn.w	r3, #1
 8008a2c:	617b      	str	r3, [r7, #20]
 8008a2e:	e002      	b.n	8008a36 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008a30:	f06f 0302 	mvn.w	r3, #2
 8008a34:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008a36:	697b      	ldr	r3, [r7, #20]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f023 0301 	bic.w	r3, r3, #1
 8008a4e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a5c:	f3ef 8305 	mrs	r3, IPSR
 8008a60:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a62:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008a68:	f06f 0305 	mvn.w	r3, #5
 8008a6c:	617b      	str	r3, [r7, #20]
 8008a6e:	e01f      	b.n	8008ab0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d103      	bne.n	8008a7e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008a76:	f06f 0303 	mvn.w	r3, #3
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	e018      	b.n	8008ab0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d009      	beq.n	8008a98 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008a84:	6938      	ldr	r0, [r7, #16]
 8008a86:	f000 fa8d 	bl	8008fa4 <xQueueGiveMutexRecursive>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d00f      	beq.n	8008ab0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008a90:	f06f 0302 	mvn.w	r3, #2
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	e00b      	b.n	8008ab0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008a98:	2300      	movs	r3, #0
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	6938      	ldr	r0, [r7, #16]
 8008aa0:	f000 faec 	bl	800907c <xQueueGenericSend>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d002      	beq.n	8008ab0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008aaa:	f06f 0302 	mvn.w	r3, #2
 8008aae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008ab0:	697b      	ldr	r3, [r7, #20]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3718      	adds	r7, #24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	4a06      	ldr	r2, [pc, #24]	@ (8008ae4 <vApplicationGetIdleTaskMemory+0x28>)
 8008acc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	4a05      	ldr	r2, [pc, #20]	@ (8008ae8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ad2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2280      	movs	r2, #128	@ 0x80
 8008ad8:	601a      	str	r2, [r3, #0]
}
 8008ada:	bf00      	nop
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bc80      	pop	{r7}
 8008ae2:	4770      	bx	lr
 8008ae4:	200003e0 	.word	0x200003e0
 8008ae8:	20000488 	.word	0x20000488

08008aec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4a07      	ldr	r2, [pc, #28]	@ (8008b18 <vApplicationGetTimerTaskMemory+0x2c>)
 8008afc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	4a06      	ldr	r2, [pc, #24]	@ (8008b1c <vApplicationGetTimerTaskMemory+0x30>)
 8008b02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b0a:	601a      	str	r2, [r3, #0]
}
 8008b0c:	bf00      	nop
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bc80      	pop	{r7}
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	20000688 	.word	0x20000688
 8008b1c:	20000730 	.word	0x20000730

08008b20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f103 0208 	add.w	r2, r3, #8
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f04f 32ff 	mov.w	r2, #4294967295
 8008b38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f103 0208 	add.w	r2, r3, #8
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f103 0208 	add.w	r2, r3, #8
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bc80      	pop	{r7}
 8008b5c:	4770      	bx	lr

08008b5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bc80      	pop	{r7}
 8008b74:	4770      	bx	lr

08008b76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	601a      	str	r2, [r3, #0]
}
 8008bb2:	bf00      	nop
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bc80      	pop	{r7}
 8008bba:	4770      	bx	lr

08008bbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd2:	d103      	bne.n	8008bdc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	e00c      	b.n	8008bf6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3308      	adds	r3, #8
 8008be0:	60fb      	str	r3, [r7, #12]
 8008be2:	e002      	b.n	8008bea <vListInsert+0x2e>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	60fb      	str	r3, [r7, #12]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d2f6      	bcs.n	8008be4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	1c5a      	adds	r2, r3, #1
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	601a      	str	r2, [r3, #0]
}
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bc80      	pop	{r7}
 8008c2a:	4770      	bx	lr

08008c2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	6892      	ldr	r2, [r2, #8]
 8008c42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	6852      	ldr	r2, [r2, #4]
 8008c4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d103      	bne.n	8008c60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	1e5a      	subs	r2, r3, #1
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bc80      	pop	{r7}
 8008c7c:	4770      	bx	lr
	...

08008c80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10b      	bne.n	8008cac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008ca6:	bf00      	nop
 8008ca8:	bf00      	nop
 8008caa:	e7fd      	b.n	8008ca8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008cac:	f002 fb86 	bl	800b3bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb8:	68f9      	ldr	r1, [r7, #12]
 8008cba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008cbc:	fb01 f303 	mul.w	r3, r1, r3
 8008cc0:	441a      	add	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	68f9      	ldr	r1, [r7, #12]
 8008ce0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008ce2:	fb01 f303 	mul.w	r3, r1, r3
 8008ce6:	441a      	add	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	22ff      	movs	r2, #255	@ 0xff
 8008cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	22ff      	movs	r2, #255	@ 0xff
 8008cf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d114      	bne.n	8008d2c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d01a      	beq.n	8008d40 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	3310      	adds	r3, #16
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f001 fb58 	bl	800a3c4 <xTaskRemoveFromEventList>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d012      	beq.n	8008d40 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d50 <xQueueGenericReset+0xd0>)
 8008d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	e009      	b.n	8008d40 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	3310      	adds	r3, #16
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff fef5 	bl	8008b20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	3324      	adds	r3, #36	@ 0x24
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7ff fef0 	bl	8008b20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d40:	f002 fb6c 	bl	800b41c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d44:	2301      	movs	r3, #1
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	e000ed04 	.word	0xe000ed04

08008d54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08e      	sub	sp, #56	@ 0x38
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10b      	bne.n	8008d80 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d7a:	bf00      	nop
 8008d7c:	bf00      	nop
 8008d7e:	e7fd      	b.n	8008d7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10b      	bne.n	8008d9e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d98:	bf00      	nop
 8008d9a:	bf00      	nop
 8008d9c:	e7fd      	b.n	8008d9a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <xQueueGenericCreateStatic+0x56>
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <xQueueGenericCreateStatic+0x5a>
 8008daa:	2301      	movs	r3, #1
 8008dac:	e000      	b.n	8008db0 <xQueueGenericCreateStatic+0x5c>
 8008dae:	2300      	movs	r3, #0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10b      	bne.n	8008dcc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	623b      	str	r3, [r7, #32]
}
 8008dc6:	bf00      	nop
 8008dc8:	bf00      	nop
 8008dca:	e7fd      	b.n	8008dc8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d102      	bne.n	8008dd8 <xQueueGenericCreateStatic+0x84>
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <xQueueGenericCreateStatic+0x88>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e000      	b.n	8008dde <xQueueGenericCreateStatic+0x8a>
 8008ddc:	2300      	movs	r3, #0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10b      	bne.n	8008dfa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de6:	f383 8811 	msr	BASEPRI, r3
 8008dea:	f3bf 8f6f 	isb	sy
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	61fb      	str	r3, [r7, #28]
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop
 8008df8:	e7fd      	b.n	8008df6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008dfa:	2350      	movs	r3, #80	@ 0x50
 8008dfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	2b50      	cmp	r3, #80	@ 0x50
 8008e02:	d00b      	beq.n	8008e1c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	61bb      	str	r3, [r7, #24]
}
 8008e16:	bf00      	nop
 8008e18:	bf00      	nop
 8008e1a:	e7fd      	b.n	8008e18 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00d      	beq.n	8008e44 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e30:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e36:	9300      	str	r3, [sp, #0]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	68b9      	ldr	r1, [r7, #8]
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 f840 	bl	8008ec4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3730      	adds	r7, #48	@ 0x30
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b08a      	sub	sp, #40	@ 0x28
 8008e52:	af02      	add	r7, sp, #8
 8008e54:	60f8      	str	r0, [r7, #12]
 8008e56:	60b9      	str	r1, [r7, #8]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10b      	bne.n	8008e7a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	613b      	str	r3, [r7, #16]
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop
 8008e78:	e7fd      	b.n	8008e76 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	fb02 f303 	mul.w	r3, r2, r3
 8008e82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	3350      	adds	r3, #80	@ 0x50
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f002 fb99 	bl	800b5c0 <pvPortMalloc>
 8008e8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d011      	beq.n	8008eba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	3350      	adds	r3, #80	@ 0x50
 8008e9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ea8:	79fa      	ldrb	r2, [r7, #7]
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	697a      	ldr	r2, [r7, #20]
 8008eb2:	68b9      	ldr	r1, [r7, #8]
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 f805 	bl	8008ec4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008eba:	69bb      	ldr	r3, [r7, #24]
	}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3720      	adds	r7, #32
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d103      	bne.n	8008ee0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ed8:	69bb      	ldr	r3, [r7, #24]
 8008eda:	69ba      	ldr	r2, [r7, #24]
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	e002      	b.n	8008ee6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	69b8      	ldr	r0, [r7, #24]
 8008ef6:	f7ff fec3 	bl	8008c80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	78fa      	ldrb	r2, [r7, #3]
 8008efe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00e      	beq.n	8008f36 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2100      	movs	r1, #0
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f8a3 	bl	800907c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008f36:	bf00      	nop
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b086      	sub	sp, #24
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	4603      	mov	r3, r0
 8008f46:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	617b      	str	r3, [r7, #20]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	461a      	mov	r2, r3
 8008f54:	6939      	ldr	r1, [r7, #16]
 8008f56:	6978      	ldr	r0, [r7, #20]
 8008f58:	f7ff ff79 	bl	8008e4e <xQueueGenericCreate>
 8008f5c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f7ff ffd3 	bl	8008f0a <prvInitialiseMutex>

		return xNewQueue;
 8008f64:	68fb      	ldr	r3, [r7, #12]
	}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3718      	adds	r7, #24
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b088      	sub	sp, #32
 8008f72:	af02      	add	r7, sp, #8
 8008f74:	4603      	mov	r3, r0
 8008f76:	6039      	str	r1, [r7, #0]
 8008f78:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	617b      	str	r3, [r7, #20]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	6939      	ldr	r1, [r7, #16]
 8008f8c:	6978      	ldr	r0, [r7, #20]
 8008f8e:	f7ff fee1 	bl	8008d54 <xQueueGenericCreateStatic>
 8008f92:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f7ff ffb8 	bl	8008f0a <prvInitialiseMutex>

		return xNewQueue;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
	}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3718      	adds	r7, #24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008fa4:	b590      	push	{r4, r7, lr}
 8008fa6:	b087      	sub	sp, #28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10b      	bne.n	8008fce <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	60fb      	str	r3, [r7, #12]
}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	e7fd      	b.n	8008fca <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	689c      	ldr	r4, [r3, #8]
 8008fd2:	f001 fbbd 	bl	800a750 <xTaskGetCurrentTaskHandle>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	429c      	cmp	r4, r3
 8008fda:	d111      	bne.n	8009000 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	1e5a      	subs	r2, r3, #1
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	68db      	ldr	r3, [r3, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d105      	bne.n	8008ffa <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008fee:	2300      	movs	r3, #0
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	6938      	ldr	r0, [r7, #16]
 8008ff6:	f000 f841 	bl	800907c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e001      	b.n	8009004 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009000:	2300      	movs	r3, #0
 8009002:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009004:	697b      	ldr	r3, [r7, #20]
	}
 8009006:	4618      	mov	r0, r3
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	bd90      	pop	{r4, r7, pc}

0800900e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800900e:	b590      	push	{r4, r7, lr}
 8009010:	b087      	sub	sp, #28
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10b      	bne.n	800903a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	60fb      	str	r3, [r7, #12]
}
 8009034:	bf00      	nop
 8009036:	bf00      	nop
 8009038:	e7fd      	b.n	8009036 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	689c      	ldr	r4, [r3, #8]
 800903e:	f001 fb87 	bl	800a750 <xTaskGetCurrentTaskHandle>
 8009042:	4603      	mov	r3, r0
 8009044:	429c      	cmp	r4, r3
 8009046:	d107      	bne.n	8009058 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	1c5a      	adds	r2, r3, #1
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009052:	2301      	movs	r3, #1
 8009054:	617b      	str	r3, [r7, #20]
 8009056:	e00c      	b.n	8009072 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6938      	ldr	r0, [r7, #16]
 800905c:	f000 fa90 	bl	8009580 <xQueueSemaphoreTake>
 8009060:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d004      	beq.n	8009072 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	1c5a      	adds	r2, r3, #1
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009072:	697b      	ldr	r3, [r7, #20]
	}
 8009074:	4618      	mov	r0, r3
 8009076:	371c      	adds	r7, #28
 8009078:	46bd      	mov	sp, r7
 800907a:	bd90      	pop	{r4, r7, pc}

0800907c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08e      	sub	sp, #56	@ 0x38
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800908a:	2300      	movs	r3, #0
 800908c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10b      	bne.n	80090b0 <xQueueGenericSend+0x34>
	__asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80090aa:	bf00      	nop
 80090ac:	bf00      	nop
 80090ae:	e7fd      	b.n	80090ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d103      	bne.n	80090be <xQueueGenericSend+0x42>
 80090b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <xQueueGenericSend+0x46>
 80090be:	2301      	movs	r3, #1
 80090c0:	e000      	b.n	80090c4 <xQueueGenericSend+0x48>
 80090c2:	2300      	movs	r3, #0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10b      	bne.n	80090e0 <xQueueGenericSend+0x64>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80090da:	bf00      	nop
 80090dc:	bf00      	nop
 80090de:	e7fd      	b.n	80090dc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d103      	bne.n	80090ee <xQueueGenericSend+0x72>
 80090e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d101      	bne.n	80090f2 <xQueueGenericSend+0x76>
 80090ee:	2301      	movs	r3, #1
 80090f0:	e000      	b.n	80090f4 <xQueueGenericSend+0x78>
 80090f2:	2300      	movs	r3, #0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10b      	bne.n	8009110 <xQueueGenericSend+0x94>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	623b      	str	r3, [r7, #32]
}
 800910a:	bf00      	nop
 800910c:	bf00      	nop
 800910e:	e7fd      	b.n	800910c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009110:	f001 fb2c 	bl	800a76c <xTaskGetSchedulerState>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d102      	bne.n	8009120 <xQueueGenericSend+0xa4>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <xQueueGenericSend+0xa8>
 8009120:	2301      	movs	r3, #1
 8009122:	e000      	b.n	8009126 <xQueueGenericSend+0xaa>
 8009124:	2300      	movs	r3, #0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10b      	bne.n	8009142 <xQueueGenericSend+0xc6>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	61fb      	str	r3, [r7, #28]
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	e7fd      	b.n	800913e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009142:	f002 f93b 	bl	800b3bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800914a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800914e:	429a      	cmp	r2, r3
 8009150:	d302      	bcc.n	8009158 <xQueueGenericSend+0xdc>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b02      	cmp	r3, #2
 8009156:	d129      	bne.n	80091ac <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	68b9      	ldr	r1, [r7, #8]
 800915c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800915e:	f000 fb36 	bl	80097ce <prvCopyDataToQueue>
 8009162:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009168:	2b00      	cmp	r3, #0
 800916a:	d010      	beq.n	800918e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800916c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916e:	3324      	adds	r3, #36	@ 0x24
 8009170:	4618      	mov	r0, r3
 8009172:	f001 f927 	bl	800a3c4 <xTaskRemoveFromEventList>
 8009176:	4603      	mov	r3, r0
 8009178:	2b00      	cmp	r3, #0
 800917a:	d013      	beq.n	80091a4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800917c:	4b3f      	ldr	r3, [pc, #252]	@ (800927c <xQueueGenericSend+0x200>)
 800917e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009182:	601a      	str	r2, [r3, #0]
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	e00a      	b.n	80091a4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800918e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009190:	2b00      	cmp	r3, #0
 8009192:	d007      	beq.n	80091a4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009194:	4b39      	ldr	r3, [pc, #228]	@ (800927c <xQueueGenericSend+0x200>)
 8009196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80091a4:	f002 f93a 	bl	800b41c <vPortExitCritical>
				return pdPASS;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e063      	b.n	8009274 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d103      	bne.n	80091ba <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091b2:	f002 f933 	bl	800b41c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	e05c      	b.n	8009274 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d106      	bne.n	80091ce <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091c0:	f107 0314 	add.w	r3, r7, #20
 80091c4:	4618      	mov	r0, r3
 80091c6:	f001 f961 	bl	800a48c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091ca:	2301      	movs	r3, #1
 80091cc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091ce:	f002 f925 	bl	800b41c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091d2:	f000 fecd 	bl	8009f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091d6:	f002 f8f1 	bl	800b3bc <vPortEnterCritical>
 80091da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091e0:	b25b      	sxtb	r3, r3
 80091e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e6:	d103      	bne.n	80091f0 <xQueueGenericSend+0x174>
 80091e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091f6:	b25b      	sxtb	r3, r3
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fc:	d103      	bne.n	8009206 <xQueueGenericSend+0x18a>
 80091fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009200:	2200      	movs	r2, #0
 8009202:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009206:	f002 f909 	bl	800b41c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800920a:	1d3a      	adds	r2, r7, #4
 800920c:	f107 0314 	add.w	r3, r7, #20
 8009210:	4611      	mov	r1, r2
 8009212:	4618      	mov	r0, r3
 8009214:	f001 f950 	bl	800a4b8 <xTaskCheckForTimeOut>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d124      	bne.n	8009268 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800921e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009220:	f000 fbcd 	bl	80099be <prvIsQueueFull>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d018      	beq.n	800925c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800922a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922c:	3310      	adds	r3, #16
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	4611      	mov	r1, r2
 8009232:	4618      	mov	r0, r3
 8009234:	f001 f874 	bl	800a320 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009238:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800923a:	f000 fb58 	bl	80098ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800923e:	f000 fea5 	bl	8009f8c <xTaskResumeAll>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	f47f af7c 	bne.w	8009142 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800924a:	4b0c      	ldr	r3, [pc, #48]	@ (800927c <xQueueGenericSend+0x200>)
 800924c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	e772      	b.n	8009142 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800925c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800925e:	f000 fb46 	bl	80098ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009262:	f000 fe93 	bl	8009f8c <xTaskResumeAll>
 8009266:	e76c      	b.n	8009142 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800926a:	f000 fb40 	bl	80098ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800926e:	f000 fe8d 	bl	8009f8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009272:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009274:	4618      	mov	r0, r3
 8009276:	3738      	adds	r7, #56	@ 0x38
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	e000ed04 	.word	0xe000ed04

08009280 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b090      	sub	sp, #64	@ 0x40
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
 800928c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10b      	bne.n	80092b0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929c:	f383 8811 	msr	BASEPRI, r3
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80092aa:	bf00      	nop
 80092ac:	bf00      	nop
 80092ae:	e7fd      	b.n	80092ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d103      	bne.n	80092be <xQueueGenericSendFromISR+0x3e>
 80092b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <xQueueGenericSendFromISR+0x42>
 80092be:	2301      	movs	r3, #1
 80092c0:	e000      	b.n	80092c4 <xQueueGenericSendFromISR+0x44>
 80092c2:	2300      	movs	r3, #0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10b      	bne.n	80092e0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80092c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80092da:	bf00      	nop
 80092dc:	bf00      	nop
 80092de:	e7fd      	b.n	80092dc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d103      	bne.n	80092ee <xQueueGenericSendFromISR+0x6e>
 80092e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d101      	bne.n	80092f2 <xQueueGenericSendFromISR+0x72>
 80092ee:	2301      	movs	r3, #1
 80092f0:	e000      	b.n	80092f4 <xQueueGenericSendFromISR+0x74>
 80092f2:	2300      	movs	r3, #0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10b      	bne.n	8009310 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80092f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fc:	f383 8811 	msr	BASEPRI, r3
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	623b      	str	r3, [r7, #32]
}
 800930a:	bf00      	nop
 800930c:	bf00      	nop
 800930e:	e7fd      	b.n	800930c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009310:	f002 f916 	bl	800b540 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009314:	f3ef 8211 	mrs	r2, BASEPRI
 8009318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	61fa      	str	r2, [r7, #28]
 800932a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800932c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800932e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009332:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009338:	429a      	cmp	r2, r3
 800933a:	d302      	bcc.n	8009342 <xQueueGenericSendFromISR+0xc2>
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2b02      	cmp	r3, #2
 8009340:	d12f      	bne.n	80093a2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009344:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009348:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800934c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009350:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	68b9      	ldr	r1, [r7, #8]
 8009356:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009358:	f000 fa39 	bl	80097ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800935c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009364:	d112      	bne.n	800938c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800936a:	2b00      	cmp	r3, #0
 800936c:	d016      	beq.n	800939c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800936e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009370:	3324      	adds	r3, #36	@ 0x24
 8009372:	4618      	mov	r0, r3
 8009374:	f001 f826 	bl	800a3c4 <xTaskRemoveFromEventList>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00e      	beq.n	800939c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00b      	beq.n	800939c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2201      	movs	r2, #1
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	e007      	b.n	800939c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800938c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009390:	3301      	adds	r3, #1
 8009392:	b2db      	uxtb	r3, r3
 8009394:	b25a      	sxtb	r2, r3
 8009396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800939c:	2301      	movs	r3, #1
 800939e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80093a0:	e001      	b.n	80093a6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80093b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3740      	adds	r7, #64	@ 0x40
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08c      	sub	sp, #48	@ 0x30
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80093c8:	2300      	movs	r3, #0
 80093ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80093d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10b      	bne.n	80093ee <xQueueReceive+0x32>
	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	623b      	str	r3, [r7, #32]
}
 80093e8:	bf00      	nop
 80093ea:	bf00      	nop
 80093ec:	e7fd      	b.n	80093ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d103      	bne.n	80093fc <xQueueReceive+0x40>
 80093f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <xQueueReceive+0x44>
 80093fc:	2301      	movs	r3, #1
 80093fe:	e000      	b.n	8009402 <xQueueReceive+0x46>
 8009400:	2300      	movs	r3, #0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10b      	bne.n	800941e <xQueueReceive+0x62>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	61fb      	str	r3, [r7, #28]
}
 8009418:	bf00      	nop
 800941a:	bf00      	nop
 800941c:	e7fd      	b.n	800941a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800941e:	f001 f9a5 	bl	800a76c <xTaskGetSchedulerState>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d102      	bne.n	800942e <xQueueReceive+0x72>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <xQueueReceive+0x76>
 800942e:	2301      	movs	r3, #1
 8009430:	e000      	b.n	8009434 <xQueueReceive+0x78>
 8009432:	2300      	movs	r3, #0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10b      	bne.n	8009450 <xQueueReceive+0x94>
	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	61bb      	str	r3, [r7, #24]
}
 800944a:	bf00      	nop
 800944c:	bf00      	nop
 800944e:	e7fd      	b.n	800944c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009450:	f001 ffb4 	bl	800b3bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009458:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945c:	2b00      	cmp	r3, #0
 800945e:	d01f      	beq.n	80094a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009460:	68b9      	ldr	r1, [r7, #8]
 8009462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009464:	f000 fa1d 	bl	80098a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946a:	1e5a      	subs	r2, r3, #1
 800946c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00f      	beq.n	8009498 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947a:	3310      	adds	r3, #16
 800947c:	4618      	mov	r0, r3
 800947e:	f000 ffa1 	bl	800a3c4 <xTaskRemoveFromEventList>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d007      	beq.n	8009498 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009488:	4b3c      	ldr	r3, [pc, #240]	@ (800957c <xQueueReceive+0x1c0>)
 800948a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009498:	f001 ffc0 	bl	800b41c <vPortExitCritical>
				return pdPASS;
 800949c:	2301      	movs	r3, #1
 800949e:	e069      	b.n	8009574 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d103      	bne.n	80094ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094a6:	f001 ffb9 	bl	800b41c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80094aa:	2300      	movs	r3, #0
 80094ac:	e062      	b.n	8009574 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d106      	bne.n	80094c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094b4:	f107 0310 	add.w	r3, r7, #16
 80094b8:	4618      	mov	r0, r3
 80094ba:	f000 ffe7 	bl	800a48c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094be:	2301      	movs	r3, #1
 80094c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094c2:	f001 ffab 	bl	800b41c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094c6:	f000 fd53 	bl	8009f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094ca:	f001 ff77 	bl	800b3bc <vPortEnterCritical>
 80094ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094d4:	b25b      	sxtb	r3, r3
 80094d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094da:	d103      	bne.n	80094e4 <xQueueReceive+0x128>
 80094dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094ea:	b25b      	sxtb	r3, r3
 80094ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f0:	d103      	bne.n	80094fa <xQueueReceive+0x13e>
 80094f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094fa:	f001 ff8f 	bl	800b41c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094fe:	1d3a      	adds	r2, r7, #4
 8009500:	f107 0310 	add.w	r3, r7, #16
 8009504:	4611      	mov	r1, r2
 8009506:	4618      	mov	r0, r3
 8009508:	f000 ffd6 	bl	800a4b8 <xTaskCheckForTimeOut>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d123      	bne.n	800955a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009514:	f000 fa3d 	bl	8009992 <prvIsQueueEmpty>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d017      	beq.n	800954e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800951e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009520:	3324      	adds	r3, #36	@ 0x24
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	4611      	mov	r1, r2
 8009526:	4618      	mov	r0, r3
 8009528:	f000 fefa 	bl	800a320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800952c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800952e:	f000 f9de 	bl	80098ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009532:	f000 fd2b 	bl	8009f8c <xTaskResumeAll>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d189      	bne.n	8009450 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800953c:	4b0f      	ldr	r3, [pc, #60]	@ (800957c <xQueueReceive+0x1c0>)
 800953e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	e780      	b.n	8009450 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800954e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009550:	f000 f9cd 	bl	80098ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009554:	f000 fd1a 	bl	8009f8c <xTaskResumeAll>
 8009558:	e77a      	b.n	8009450 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800955a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800955c:	f000 f9c7 	bl	80098ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009560:	f000 fd14 	bl	8009f8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009564:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009566:	f000 fa14 	bl	8009992 <prvIsQueueEmpty>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	f43f af6f 	beq.w	8009450 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009572:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009574:	4618      	mov	r0, r3
 8009576:	3730      	adds	r7, #48	@ 0x30
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	e000ed04 	.word	0xe000ed04

08009580 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b08e      	sub	sp, #56	@ 0x38
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800958a:	2300      	movs	r3, #0
 800958c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009592:	2300      	movs	r3, #0
 8009594:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009598:	2b00      	cmp	r3, #0
 800959a:	d10b      	bne.n	80095b4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800959c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a0:	f383 8811 	msr	BASEPRI, r3
 80095a4:	f3bf 8f6f 	isb	sy
 80095a8:	f3bf 8f4f 	dsb	sy
 80095ac:	623b      	str	r3, [r7, #32]
}
 80095ae:	bf00      	nop
 80095b0:	bf00      	nop
 80095b2:	e7fd      	b.n	80095b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80095b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00b      	beq.n	80095d4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	61fb      	str	r3, [r7, #28]
}
 80095ce:	bf00      	nop
 80095d0:	bf00      	nop
 80095d2:	e7fd      	b.n	80095d0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80095d4:	f001 f8ca 	bl	800a76c <xTaskGetSchedulerState>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d102      	bne.n	80095e4 <xQueueSemaphoreTake+0x64>
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <xQueueSemaphoreTake+0x68>
 80095e4:	2301      	movs	r3, #1
 80095e6:	e000      	b.n	80095ea <xQueueSemaphoreTake+0x6a>
 80095e8:	2300      	movs	r3, #0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d10b      	bne.n	8009606 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	61bb      	str	r3, [r7, #24]
}
 8009600:	bf00      	nop
 8009602:	bf00      	nop
 8009604:	e7fd      	b.n	8009602 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009606:	f001 fed9 	bl	800b3bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800960a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800960c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009612:	2b00      	cmp	r3, #0
 8009614:	d024      	beq.n	8009660 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009618:	1e5a      	subs	r2, r3, #1
 800961a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800961e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d104      	bne.n	8009630 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009626:	f001 fa1b 	bl	800aa60 <pvTaskIncrementMutexHeldCount>
 800962a:	4602      	mov	r2, r0
 800962c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00f      	beq.n	8009658 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800963a:	3310      	adds	r3, #16
 800963c:	4618      	mov	r0, r3
 800963e:	f000 fec1 	bl	800a3c4 <xTaskRemoveFromEventList>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d007      	beq.n	8009658 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009648:	4b54      	ldr	r3, [pc, #336]	@ (800979c <xQueueSemaphoreTake+0x21c>)
 800964a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009658:	f001 fee0 	bl	800b41c <vPortExitCritical>
				return pdPASS;
 800965c:	2301      	movs	r3, #1
 800965e:	e098      	b.n	8009792 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d112      	bne.n	800968c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00b      	beq.n	8009684 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	617b      	str	r3, [r7, #20]
}
 800967e:	bf00      	nop
 8009680:	bf00      	nop
 8009682:	e7fd      	b.n	8009680 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009684:	f001 feca 	bl	800b41c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009688:	2300      	movs	r3, #0
 800968a:	e082      	b.n	8009792 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800968c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800968e:	2b00      	cmp	r3, #0
 8009690:	d106      	bne.n	80096a0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009692:	f107 030c 	add.w	r3, r7, #12
 8009696:	4618      	mov	r0, r3
 8009698:	f000 fef8 	bl	800a48c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800969c:	2301      	movs	r3, #1
 800969e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096a0:	f001 febc 	bl	800b41c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096a4:	f000 fc64 	bl	8009f70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096a8:	f001 fe88 	bl	800b3bc <vPortEnterCritical>
 80096ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80096b2:	b25b      	sxtb	r3, r3
 80096b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b8:	d103      	bne.n	80096c2 <xQueueSemaphoreTake+0x142>
 80096ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096c8:	b25b      	sxtb	r3, r3
 80096ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ce:	d103      	bne.n	80096d8 <xQueueSemaphoreTake+0x158>
 80096d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096d8:	f001 fea0 	bl	800b41c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80096dc:	463a      	mov	r2, r7
 80096de:	f107 030c 	add.w	r3, r7, #12
 80096e2:	4611      	mov	r1, r2
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 fee7 	bl	800a4b8 <xTaskCheckForTimeOut>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d132      	bne.n	8009756 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80096f2:	f000 f94e 	bl	8009992 <prvIsQueueEmpty>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d026      	beq.n	800974a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d109      	bne.n	8009718 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009704:	f001 fe5a 	bl	800b3bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	4618      	mov	r0, r3
 800970e:	f001 f84b 	bl	800a7a8 <xTaskPriorityInherit>
 8009712:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009714:	f001 fe82 	bl	800b41c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971a:	3324      	adds	r3, #36	@ 0x24
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f000 fdfd 	bl	800a320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009726:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009728:	f000 f8e1 	bl	80098ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800972c:	f000 fc2e 	bl	8009f8c <xTaskResumeAll>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	f47f af67 	bne.w	8009606 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009738:	4b18      	ldr	r3, [pc, #96]	@ (800979c <xQueueSemaphoreTake+0x21c>)
 800973a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800973e:	601a      	str	r2, [r3, #0]
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	e75d      	b.n	8009606 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800974a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800974c:	f000 f8cf 	bl	80098ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009750:	f000 fc1c 	bl	8009f8c <xTaskResumeAll>
 8009754:	e757      	b.n	8009606 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009756:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009758:	f000 f8c9 	bl	80098ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800975c:	f000 fc16 	bl	8009f8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009760:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009762:	f000 f916 	bl	8009992 <prvIsQueueEmpty>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	f43f af4c 	beq.w	8009606 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800976e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00d      	beq.n	8009790 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009774:	f001 fe22 	bl	800b3bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009778:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800977a:	f000 f811 	bl	80097a0 <prvGetDisinheritPriorityAfterTimeout>
 800977e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009786:	4618      	mov	r0, r3
 8009788:	f001 f8e6 	bl	800a958 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800978c:	f001 fe46 	bl	800b41c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009790:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009792:	4618      	mov	r0, r3
 8009794:	3738      	adds	r7, #56	@ 0x38
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	e000ed04 	.word	0xe000ed04

080097a0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d006      	beq.n	80097be <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	e001      	b.n	80097c2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80097c2:	68fb      	ldr	r3, [r7, #12]
	}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bc80      	pop	{r7}
 80097cc:	4770      	bx	lr

080097ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b086      	sub	sp, #24
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	60f8      	str	r0, [r7, #12]
 80097d6:	60b9      	str	r1, [r7, #8]
 80097d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80097da:	2300      	movs	r3, #0
 80097dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10d      	bne.n	8009808 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d14d      	bne.n	8009890 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f001 f83d 	bl	800a878 <xTaskPriorityDisinherit>
 80097fe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2200      	movs	r2, #0
 8009804:	609a      	str	r2, [r3, #8]
 8009806:	e043      	b.n	8009890 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d119      	bne.n	8009842 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6858      	ldr	r0, [r3, #4]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009816:	461a      	mov	r2, r3
 8009818:	68b9      	ldr	r1, [r7, #8]
 800981a:	f002 fc6c 	bl	800c0f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	685a      	ldr	r2, [r3, #4]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009826:	441a      	add	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	685a      	ldr	r2, [r3, #4]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	429a      	cmp	r2, r3
 8009836:	d32b      	bcc.n	8009890 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	605a      	str	r2, [r3, #4]
 8009840:	e026      	b.n	8009890 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	68d8      	ldr	r0, [r3, #12]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800984a:	461a      	mov	r2, r3
 800984c:	68b9      	ldr	r1, [r7, #8]
 800984e:	f002 fc52 	bl	800c0f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	68da      	ldr	r2, [r3, #12]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800985a:	425b      	negs	r3, r3
 800985c:	441a      	add	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	68da      	ldr	r2, [r3, #12]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	429a      	cmp	r2, r3
 800986c:	d207      	bcs.n	800987e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	689a      	ldr	r2, [r3, #8]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009876:	425b      	negs	r3, r3
 8009878:	441a      	add	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b02      	cmp	r3, #2
 8009882:	d105      	bne.n	8009890 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d002      	beq.n	8009890 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	3b01      	subs	r3, #1
 800988e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009898:	697b      	ldr	r3, [r7, #20]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d018      	beq.n	80098e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68da      	ldr	r2, [r3, #12]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098bc:	441a      	add	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d303      	bcc.n	80098d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	68d9      	ldr	r1, [r3, #12]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098de:	461a      	mov	r2, r3
 80098e0:	6838      	ldr	r0, [r7, #0]
 80098e2:	f002 fc08 	bl	800c0f6 <memcpy>
	}
}
 80098e6:	bf00      	nop
 80098e8:	3708      	adds	r7, #8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80098f6:	f001 fd61 	bl	800b3bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009900:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009902:	e011      	b.n	8009928 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009908:	2b00      	cmp	r3, #0
 800990a:	d012      	beq.n	8009932 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3324      	adds	r3, #36	@ 0x24
 8009910:	4618      	mov	r0, r3
 8009912:	f000 fd57 	bl	800a3c4 <xTaskRemoveFromEventList>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d001      	beq.n	8009920 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800991c:	f000 fe30 	bl	800a580 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009920:	7bfb      	ldrb	r3, [r7, #15]
 8009922:	3b01      	subs	r3, #1
 8009924:	b2db      	uxtb	r3, r3
 8009926:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800992c:	2b00      	cmp	r3, #0
 800992e:	dce9      	bgt.n	8009904 <prvUnlockQueue+0x16>
 8009930:	e000      	b.n	8009934 <prvUnlockQueue+0x46>
					break;
 8009932:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	22ff      	movs	r2, #255	@ 0xff
 8009938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800993c:	f001 fd6e 	bl	800b41c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009940:	f001 fd3c 	bl	800b3bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800994a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800994c:	e011      	b.n	8009972 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d012      	beq.n	800997c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	3310      	adds	r3, #16
 800995a:	4618      	mov	r0, r3
 800995c:	f000 fd32 	bl	800a3c4 <xTaskRemoveFromEventList>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009966:	f000 fe0b 	bl	800a580 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800996a:	7bbb      	ldrb	r3, [r7, #14]
 800996c:	3b01      	subs	r3, #1
 800996e:	b2db      	uxtb	r3, r3
 8009970:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009976:	2b00      	cmp	r3, #0
 8009978:	dce9      	bgt.n	800994e <prvUnlockQueue+0x60>
 800997a:	e000      	b.n	800997e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800997c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	22ff      	movs	r2, #255	@ 0xff
 8009982:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009986:	f001 fd49 	bl	800b41c <vPortExitCritical>
}
 800998a:	bf00      	nop
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b084      	sub	sp, #16
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800999a:	f001 fd0f 	bl	800b3bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d102      	bne.n	80099ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80099a6:	2301      	movs	r3, #1
 80099a8:	60fb      	str	r3, [r7, #12]
 80099aa:	e001      	b.n	80099b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80099ac:	2300      	movs	r3, #0
 80099ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099b0:	f001 fd34 	bl	800b41c <vPortExitCritical>

	return xReturn;
 80099b4:	68fb      	ldr	r3, [r7, #12]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80099c6:	f001 fcf9 	bl	800b3bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d102      	bne.n	80099dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80099d6:	2301      	movs	r3, #1
 80099d8:	60fb      	str	r3, [r7, #12]
 80099da:	e001      	b.n	80099e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80099dc:	2300      	movs	r3, #0
 80099de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099e0:	f001 fd1c 	bl	800b41c <vPortExitCritical>

	return xReturn;
 80099e4:	68fb      	ldr	r3, [r7, #12]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
	...

080099f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80099f0:	b480      	push	{r7}
 80099f2:	b085      	sub	sp, #20
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099fa:	2300      	movs	r3, #0
 80099fc:	60fb      	str	r3, [r7, #12]
 80099fe:	e014      	b.n	8009a2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a00:	4a0e      	ldr	r2, [pc, #56]	@ (8009a3c <vQueueAddToRegistry+0x4c>)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10b      	bne.n	8009a24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a0c:	490b      	ldr	r1, [pc, #44]	@ (8009a3c <vQueueAddToRegistry+0x4c>)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a16:	4a09      	ldr	r2, [pc, #36]	@ (8009a3c <vQueueAddToRegistry+0x4c>)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	00db      	lsls	r3, r3, #3
 8009a1c:	4413      	add	r3, r2
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a22:	e006      	b.n	8009a32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	3301      	adds	r3, #1
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2b07      	cmp	r3, #7
 8009a2e:	d9e7      	bls.n	8009a00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009a30:	bf00      	nop
 8009a32:	bf00      	nop
 8009a34:	3714      	adds	r7, #20
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bc80      	pop	{r7}
 8009a3a:	4770      	bx	lr
 8009a3c:	20000b30 	.word	0x20000b30

08009a40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009a50:	f001 fcb4 	bl	800b3bc <vPortEnterCritical>
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a5a:	b25b      	sxtb	r3, r3
 8009a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a60:	d103      	bne.n	8009a6a <vQueueWaitForMessageRestricted+0x2a>
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009a70:	b25b      	sxtb	r3, r3
 8009a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a76:	d103      	bne.n	8009a80 <vQueueWaitForMessageRestricted+0x40>
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a80:	f001 fccc 	bl	800b41c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d106      	bne.n	8009a9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	3324      	adds	r3, #36	@ 0x24
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	68b9      	ldr	r1, [r7, #8]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 fc69 	bl	800a36c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a9a:	6978      	ldr	r0, [r7, #20]
 8009a9c:	f7ff ff27 	bl	80098ee <prvUnlockQueue>
	}
 8009aa0:	bf00      	nop
 8009aa2:	3718      	adds	r7, #24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b08e      	sub	sp, #56	@ 0x38
 8009aac:	af04      	add	r7, sp, #16
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
 8009ab4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10b      	bne.n	8009ad4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	623b      	str	r3, [r7, #32]
}
 8009ace:	bf00      	nop
 8009ad0:	bf00      	nop
 8009ad2:	e7fd      	b.n	8009ad0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10b      	bne.n	8009af2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ade:	f383 8811 	msr	BASEPRI, r3
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	f3bf 8f4f 	dsb	sy
 8009aea:	61fb      	str	r3, [r7, #28]
}
 8009aec:	bf00      	nop
 8009aee:	bf00      	nop
 8009af0:	e7fd      	b.n	8009aee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009af2:	23a8      	movs	r3, #168	@ 0xa8
 8009af4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	2ba8      	cmp	r3, #168	@ 0xa8
 8009afa:	d00b      	beq.n	8009b14 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	61bb      	str	r3, [r7, #24]
}
 8009b0e:	bf00      	nop
 8009b10:	bf00      	nop
 8009b12:	e7fd      	b.n	8009b10 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009b14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01e      	beq.n	8009b5a <xTaskCreateStatic+0xb2>
 8009b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d01b      	beq.n	8009b5a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b24:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b2a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2e:	2202      	movs	r2, #2
 8009b30:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009b34:	2300      	movs	r3, #0
 8009b36:	9303      	str	r3, [sp, #12]
 8009b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3a:	9302      	str	r3, [sp, #8]
 8009b3c:	f107 0314 	add.w	r3, r7, #20
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	68b9      	ldr	r1, [r7, #8]
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 f851 	bl	8009bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009b54:	f000 f8f6 	bl	8009d44 <prvAddNewTaskToReadyList>
 8009b58:	e001      	b.n	8009b5e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b5e:	697b      	ldr	r3, [r7, #20]
	}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3728      	adds	r7, #40	@ 0x28
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08c      	sub	sp, #48	@ 0x30
 8009b6c:	af04      	add	r7, sp, #16
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	603b      	str	r3, [r7, #0]
 8009b74:	4613      	mov	r3, r2
 8009b76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b78:	88fb      	ldrh	r3, [r7, #6]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f001 fd1f 	bl	800b5c0 <pvPortMalloc>
 8009b82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00e      	beq.n	8009ba8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b8a:	20a8      	movs	r0, #168	@ 0xa8
 8009b8c:	f001 fd18 	bl	800b5c0 <pvPortMalloc>
 8009b90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d003      	beq.n	8009ba0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8009b9e:	e005      	b.n	8009bac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ba0:	6978      	ldr	r0, [r7, #20]
 8009ba2:	f001 fddb 	bl	800b75c <vPortFree>
 8009ba6:	e001      	b.n	8009bac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d017      	beq.n	8009be2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009bba:	88fa      	ldrh	r2, [r7, #6]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	9303      	str	r3, [sp, #12]
 8009bc0:	69fb      	ldr	r3, [r7, #28]
 8009bc2:	9302      	str	r3, [sp, #8]
 8009bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bc6:	9301      	str	r3, [sp, #4]
 8009bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bca:	9300      	str	r3, [sp, #0]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	68b9      	ldr	r1, [r7, #8]
 8009bd0:	68f8      	ldr	r0, [r7, #12]
 8009bd2:	f000 f80f 	bl	8009bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bd6:	69f8      	ldr	r0, [r7, #28]
 8009bd8:	f000 f8b4 	bl	8009d44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	61bb      	str	r3, [r7, #24]
 8009be0:	e002      	b.n	8009be8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009be2:	f04f 33ff 	mov.w	r3, #4294967295
 8009be6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009be8:	69bb      	ldr	r3, [r7, #24]
	}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3720      	adds	r7, #32
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
 8009c00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c04:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	21a5      	movs	r1, #165	@ 0xa5
 8009c0e:	f002 f989 	bl	800bf24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c24:	69bb      	ldr	r3, [r7, #24]
 8009c26:	f023 0307 	bic.w	r3, r3, #7
 8009c2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	f003 0307 	and.w	r3, r3, #7
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00b      	beq.n	8009c4e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	617b      	str	r3, [r7, #20]
}
 8009c48:	bf00      	nop
 8009c4a:	bf00      	nop
 8009c4c:	e7fd      	b.n	8009c4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d01f      	beq.n	8009c94 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c54:	2300      	movs	r3, #0
 8009c56:	61fb      	str	r3, [r7, #28]
 8009c58:	e012      	b.n	8009c80 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	4413      	add	r3, r2
 8009c60:	7819      	ldrb	r1, [r3, #0]
 8009c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	4413      	add	r3, r2
 8009c68:	3334      	adds	r3, #52	@ 0x34
 8009c6a:	460a      	mov	r2, r1
 8009c6c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	4413      	add	r3, r2
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d006      	beq.n	8009c88 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	61fb      	str	r3, [r7, #28]
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	2b0f      	cmp	r3, #15
 8009c84:	d9e9      	bls.n	8009c5a <prvInitialiseNewTask+0x66>
 8009c86:	e000      	b.n	8009c8a <prvInitialiseNewTask+0x96>
			{
				break;
 8009c88:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009c92:	e003      	b.n	8009c9c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c9e:	2b37      	cmp	r3, #55	@ 0x37
 8009ca0:	d901      	bls.n	8009ca6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ca2:	2337      	movs	r3, #55	@ 0x37
 8009ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009caa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009cb0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cba:	3304      	adds	r3, #4
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fe ff4e 	bl	8008b5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc4:	3318      	adds	r3, #24
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe ff49 	bl	8008b5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cd0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cda:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ce0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cf4:	3354      	adds	r3, #84	@ 0x54
 8009cf6:	224c      	movs	r2, #76	@ 0x4c
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f002 f912 	bl	800bf24 <memset>
 8009d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d02:	4a0d      	ldr	r2, [pc, #52]	@ (8009d38 <prvInitialiseNewTask+0x144>)
 8009d04:	659a      	str	r2, [r3, #88]	@ 0x58
 8009d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d08:	4a0c      	ldr	r2, [pc, #48]	@ (8009d3c <prvInitialiseNewTask+0x148>)
 8009d0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8009d40 <prvInitialiseNewTask+0x14c>)
 8009d10:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d12:	683a      	ldr	r2, [r7, #0]
 8009d14:	68f9      	ldr	r1, [r7, #12]
 8009d16:	69b8      	ldr	r0, [r7, #24]
 8009d18:	f001 fa62 	bl	800b1e0 <pxPortInitialiseStack>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d2e:	bf00      	nop
 8009d30:	3720      	adds	r7, #32
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	20001dcc 	.word	0x20001dcc
 8009d3c:	20001e34 	.word	0x20001e34
 8009d40:	20001e9c 	.word	0x20001e9c

08009d44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009d4c:	f001 fb36 	bl	800b3bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d50:	4b2d      	ldr	r3, [pc, #180]	@ (8009e08 <prvAddNewTaskToReadyList+0xc4>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3301      	adds	r3, #1
 8009d56:	4a2c      	ldr	r2, [pc, #176]	@ (8009e08 <prvAddNewTaskToReadyList+0xc4>)
 8009d58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d109      	bne.n	8009d76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d62:	4a2a      	ldr	r2, [pc, #168]	@ (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d68:	4b27      	ldr	r3, [pc, #156]	@ (8009e08 <prvAddNewTaskToReadyList+0xc4>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d110      	bne.n	8009d92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d70:	f000 fc2a 	bl	800a5c8 <prvInitialiseTaskLists>
 8009d74:	e00d      	b.n	8009d92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d76:	4b26      	ldr	r3, [pc, #152]	@ (8009e10 <prvAddNewTaskToReadyList+0xcc>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d109      	bne.n	8009d92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d7e:	4b23      	ldr	r3, [pc, #140]	@ (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d802      	bhi.n	8009d92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d92:	4b20      	ldr	r3, [pc, #128]	@ (8009e14 <prvAddNewTaskToReadyList+0xd0>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	3301      	adds	r3, #1
 8009d98:	4a1e      	ldr	r2, [pc, #120]	@ (8009e14 <prvAddNewTaskToReadyList+0xd0>)
 8009d9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8009e14 <prvAddNewTaskToReadyList+0xd0>)
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da8:	4b1b      	ldr	r3, [pc, #108]	@ (8009e18 <prvAddNewTaskToReadyList+0xd4>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d903      	bls.n	8009db8 <prvAddNewTaskToReadyList+0x74>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009db4:	4a18      	ldr	r2, [pc, #96]	@ (8009e18 <prvAddNewTaskToReadyList+0xd4>)
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	4413      	add	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4a15      	ldr	r2, [pc, #84]	@ (8009e1c <prvAddNewTaskToReadyList+0xd8>)
 8009dc6:	441a      	add	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4610      	mov	r0, r2
 8009dd0:	f7fe fed1 	bl	8008b76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009dd4:	f001 fb22 	bl	800b41c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8009e10 <prvAddNewTaskToReadyList+0xcc>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00e      	beq.n	8009dfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009de0:	4b0a      	ldr	r3, [pc, #40]	@ (8009e0c <prvAddNewTaskToReadyList+0xc8>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d207      	bcs.n	8009dfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009dee:	4b0c      	ldr	r3, [pc, #48]	@ (8009e20 <prvAddNewTaskToReadyList+0xdc>)
 8009df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20001044 	.word	0x20001044
 8009e0c:	20000b70 	.word	0x20000b70
 8009e10:	20001050 	.word	0x20001050
 8009e14:	20001060 	.word	0x20001060
 8009e18:	2000104c 	.word	0x2000104c
 8009e1c:	20000b74 	.word	0x20000b74
 8009e20:	e000ed04 	.word	0xe000ed04

08009e24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d018      	beq.n	8009e68 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e36:	4b14      	ldr	r3, [pc, #80]	@ (8009e88 <vTaskDelay+0x64>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00b      	beq.n	8009e56 <vTaskDelay+0x32>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	60bb      	str	r3, [r7, #8]
}
 8009e50:	bf00      	nop
 8009e52:	bf00      	nop
 8009e54:	e7fd      	b.n	8009e52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009e56:	f000 f88b 	bl	8009f70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fe13 	bl	800aa88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e62:	f000 f893 	bl	8009f8c <xTaskResumeAll>
 8009e66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d107      	bne.n	8009e7e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009e6e:	4b07      	ldr	r3, [pc, #28]	@ (8009e8c <vTaskDelay+0x68>)
 8009e70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e7e:	bf00      	nop
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	2000106c 	.word	0x2000106c
 8009e8c:	e000ed04 	.word	0xe000ed04

08009e90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08a      	sub	sp, #40	@ 0x28
 8009e94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e9e:	463a      	mov	r2, r7
 8009ea0:	1d39      	adds	r1, r7, #4
 8009ea2:	f107 0308 	add.w	r3, r7, #8
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe fe08 	bl	8008abc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	9202      	str	r2, [sp, #8]
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	2300      	movs	r3, #0
 8009ebc:	460a      	mov	r2, r1
 8009ebe:	4924      	ldr	r1, [pc, #144]	@ (8009f50 <vTaskStartScheduler+0xc0>)
 8009ec0:	4824      	ldr	r0, [pc, #144]	@ (8009f54 <vTaskStartScheduler+0xc4>)
 8009ec2:	f7ff fdf1 	bl	8009aa8 <xTaskCreateStatic>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	4a23      	ldr	r2, [pc, #140]	@ (8009f58 <vTaskStartScheduler+0xc8>)
 8009eca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ecc:	4b22      	ldr	r3, [pc, #136]	@ (8009f58 <vTaskStartScheduler+0xc8>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d002      	beq.n	8009eda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	617b      	str	r3, [r7, #20]
 8009ed8:	e001      	b.n	8009ede <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009eda:	2300      	movs	r3, #0
 8009edc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d102      	bne.n	8009eea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ee4:	f000 fe24 	bl	800ab30 <xTimerCreateTimerTask>
 8009ee8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d11b      	bne.n	8009f28 <vTaskStartScheduler+0x98>
	__asm volatile
 8009ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef4:	f383 8811 	msr	BASEPRI, r3
 8009ef8:	f3bf 8f6f 	isb	sy
 8009efc:	f3bf 8f4f 	dsb	sy
 8009f00:	613b      	str	r3, [r7, #16]
}
 8009f02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f04:	4b15      	ldr	r3, [pc, #84]	@ (8009f5c <vTaskStartScheduler+0xcc>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	3354      	adds	r3, #84	@ 0x54
 8009f0a:	4a15      	ldr	r2, [pc, #84]	@ (8009f60 <vTaskStartScheduler+0xd0>)
 8009f0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f0e:	4b15      	ldr	r3, [pc, #84]	@ (8009f64 <vTaskStartScheduler+0xd4>)
 8009f10:	f04f 32ff 	mov.w	r2, #4294967295
 8009f14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f16:	4b14      	ldr	r3, [pc, #80]	@ (8009f68 <vTaskStartScheduler+0xd8>)
 8009f18:	2201      	movs	r2, #1
 8009f1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f1c:	4b13      	ldr	r3, [pc, #76]	@ (8009f6c <vTaskStartScheduler+0xdc>)
 8009f1e:	2200      	movs	r2, #0
 8009f20:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f22:	f001 f9d9 	bl	800b2d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f26:	e00f      	b.n	8009f48 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2e:	d10b      	bne.n	8009f48 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	60fb      	str	r3, [r7, #12]
}
 8009f42:	bf00      	nop
 8009f44:	bf00      	nop
 8009f46:	e7fd      	b.n	8009f44 <vTaskStartScheduler+0xb4>
}
 8009f48:	bf00      	nop
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	0800cb24 	.word	0x0800cb24
 8009f54:	0800a599 	.word	0x0800a599
 8009f58:	20001068 	.word	0x20001068
 8009f5c:	20000b70 	.word	0x20000b70
 8009f60:	2000001c 	.word	0x2000001c
 8009f64:	20001064 	.word	0x20001064
 8009f68:	20001050 	.word	0x20001050
 8009f6c:	20001048 	.word	0x20001048

08009f70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f70:	b480      	push	{r7}
 8009f72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009f74:	4b04      	ldr	r3, [pc, #16]	@ (8009f88 <vTaskSuspendAll+0x18>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	4a03      	ldr	r2, [pc, #12]	@ (8009f88 <vTaskSuspendAll+0x18>)
 8009f7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009f7e:	bf00      	nop
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bc80      	pop	{r7}
 8009f84:	4770      	bx	lr
 8009f86:	bf00      	nop
 8009f88:	2000106c 	.word	0x2000106c

08009f8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f92:	2300      	movs	r3, #0
 8009f94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f96:	2300      	movs	r3, #0
 8009f98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f9a:	4b42      	ldr	r3, [pc, #264]	@ (800a0a4 <xTaskResumeAll+0x118>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10b      	bne.n	8009fba <xTaskResumeAll+0x2e>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	603b      	str	r3, [r7, #0]
}
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop
 8009fb8:	e7fd      	b.n	8009fb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009fba:	f001 f9ff 	bl	800b3bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009fbe:	4b39      	ldr	r3, [pc, #228]	@ (800a0a4 <xTaskResumeAll+0x118>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	4a37      	ldr	r2, [pc, #220]	@ (800a0a4 <xTaskResumeAll+0x118>)
 8009fc6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fc8:	4b36      	ldr	r3, [pc, #216]	@ (800a0a4 <xTaskResumeAll+0x118>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d162      	bne.n	800a096 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009fd0:	4b35      	ldr	r3, [pc, #212]	@ (800a0a8 <xTaskResumeAll+0x11c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d05e      	beq.n	800a096 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fd8:	e02f      	b.n	800a03a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fda:	4b34      	ldr	r3, [pc, #208]	@ (800a0ac <xTaskResumeAll+0x120>)
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3318      	adds	r3, #24
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe fe20 	bl	8008c2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	3304      	adds	r3, #4
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fe fe1b 	bl	8008c2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ffa:	4b2d      	ldr	r3, [pc, #180]	@ (800a0b0 <xTaskResumeAll+0x124>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d903      	bls.n	800a00a <xTaskResumeAll+0x7e>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a006:	4a2a      	ldr	r2, [pc, #168]	@ (800a0b0 <xTaskResumeAll+0x124>)
 800a008:	6013      	str	r3, [r2, #0]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a00e:	4613      	mov	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4a27      	ldr	r2, [pc, #156]	@ (800a0b4 <xTaskResumeAll+0x128>)
 800a018:	441a      	add	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3304      	adds	r3, #4
 800a01e:	4619      	mov	r1, r3
 800a020:	4610      	mov	r0, r2
 800a022:	f7fe fda8 	bl	8008b76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a02a:	4b23      	ldr	r3, [pc, #140]	@ (800a0b8 <xTaskResumeAll+0x12c>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a030:	429a      	cmp	r2, r3
 800a032:	d302      	bcc.n	800a03a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a034:	4b21      	ldr	r3, [pc, #132]	@ (800a0bc <xTaskResumeAll+0x130>)
 800a036:	2201      	movs	r2, #1
 800a038:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a03a:	4b1c      	ldr	r3, [pc, #112]	@ (800a0ac <xTaskResumeAll+0x120>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1cb      	bne.n	8009fda <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a048:	f000 fb62 	bl	800a710 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a04c:	4b1c      	ldr	r3, [pc, #112]	@ (800a0c0 <xTaskResumeAll+0x134>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d010      	beq.n	800a07a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a058:	f000 f844 	bl	800a0e4 <xTaskIncrementTick>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d002      	beq.n	800a068 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a062:	4b16      	ldr	r3, [pc, #88]	@ (800a0bc <xTaskResumeAll+0x130>)
 800a064:	2201      	movs	r2, #1
 800a066:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1f1      	bne.n	800a058 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a074:	4b12      	ldr	r3, [pc, #72]	@ (800a0c0 <xTaskResumeAll+0x134>)
 800a076:	2200      	movs	r2, #0
 800a078:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a07a:	4b10      	ldr	r3, [pc, #64]	@ (800a0bc <xTaskResumeAll+0x130>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d009      	beq.n	800a096 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a082:	2301      	movs	r3, #1
 800a084:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a086:	4b0f      	ldr	r3, [pc, #60]	@ (800a0c4 <xTaskResumeAll+0x138>)
 800a088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a08c:	601a      	str	r2, [r3, #0]
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a096:	f001 f9c1 	bl	800b41c <vPortExitCritical>

	return xAlreadyYielded;
 800a09a:	68bb      	ldr	r3, [r7, #8]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	2000106c 	.word	0x2000106c
 800a0a8:	20001044 	.word	0x20001044
 800a0ac:	20001004 	.word	0x20001004
 800a0b0:	2000104c 	.word	0x2000104c
 800a0b4:	20000b74 	.word	0x20000b74
 800a0b8:	20000b70 	.word	0x20000b70
 800a0bc:	20001058 	.word	0x20001058
 800a0c0:	20001054 	.word	0x20001054
 800a0c4:	e000ed04 	.word	0xe000ed04

0800a0c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a0ce:	4b04      	ldr	r3, [pc, #16]	@ (800a0e0 <xTaskGetTickCount+0x18>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a0d4:	687b      	ldr	r3, [r7, #4]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bc80      	pop	{r7}
 800a0de:	4770      	bx	lr
 800a0e0:	20001048 	.word	0x20001048

0800a0e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0ee:	4b4f      	ldr	r3, [pc, #316]	@ (800a22c <xTaskIncrementTick+0x148>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	f040 8090 	bne.w	800a218 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a0f8:	4b4d      	ldr	r3, [pc, #308]	@ (800a230 <xTaskIncrementTick+0x14c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a100:	4a4b      	ldr	r2, [pc, #300]	@ (800a230 <xTaskIncrementTick+0x14c>)
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d121      	bne.n	800a150 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a10c:	4b49      	ldr	r3, [pc, #292]	@ (800a234 <xTaskIncrementTick+0x150>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00b      	beq.n	800a12e <xTaskIncrementTick+0x4a>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	603b      	str	r3, [r7, #0]
}
 800a128:	bf00      	nop
 800a12a:	bf00      	nop
 800a12c:	e7fd      	b.n	800a12a <xTaskIncrementTick+0x46>
 800a12e:	4b41      	ldr	r3, [pc, #260]	@ (800a234 <xTaskIncrementTick+0x150>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	60fb      	str	r3, [r7, #12]
 800a134:	4b40      	ldr	r3, [pc, #256]	@ (800a238 <xTaskIncrementTick+0x154>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a3e      	ldr	r2, [pc, #248]	@ (800a234 <xTaskIncrementTick+0x150>)
 800a13a:	6013      	str	r3, [r2, #0]
 800a13c:	4a3e      	ldr	r2, [pc, #248]	@ (800a238 <xTaskIncrementTick+0x154>)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6013      	str	r3, [r2, #0]
 800a142:	4b3e      	ldr	r3, [pc, #248]	@ (800a23c <xTaskIncrementTick+0x158>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3301      	adds	r3, #1
 800a148:	4a3c      	ldr	r2, [pc, #240]	@ (800a23c <xTaskIncrementTick+0x158>)
 800a14a:	6013      	str	r3, [r2, #0]
 800a14c:	f000 fae0 	bl	800a710 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a150:	4b3b      	ldr	r3, [pc, #236]	@ (800a240 <xTaskIncrementTick+0x15c>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	429a      	cmp	r2, r3
 800a158:	d349      	bcc.n	800a1ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a15a:	4b36      	ldr	r3, [pc, #216]	@ (800a234 <xTaskIncrementTick+0x150>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d104      	bne.n	800a16e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a164:	4b36      	ldr	r3, [pc, #216]	@ (800a240 <xTaskIncrementTick+0x15c>)
 800a166:	f04f 32ff 	mov.w	r2, #4294967295
 800a16a:	601a      	str	r2, [r3, #0]
					break;
 800a16c:	e03f      	b.n	800a1ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a16e:	4b31      	ldr	r3, [pc, #196]	@ (800a234 <xTaskIncrementTick+0x150>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	429a      	cmp	r2, r3
 800a184:	d203      	bcs.n	800a18e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a186:	4a2e      	ldr	r2, [pc, #184]	@ (800a240 <xTaskIncrementTick+0x15c>)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a18c:	e02f      	b.n	800a1ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	3304      	adds	r3, #4
 800a192:	4618      	mov	r0, r3
 800a194:	f7fe fd4a 	bl	8008c2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d004      	beq.n	800a1aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	3318      	adds	r3, #24
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fe fd41 	bl	8008c2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1ae:	4b25      	ldr	r3, [pc, #148]	@ (800a244 <xTaskIncrementTick+0x160>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d903      	bls.n	800a1be <xTaskIncrementTick+0xda>
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ba:	4a22      	ldr	r2, [pc, #136]	@ (800a244 <xTaskIncrementTick+0x160>)
 800a1bc:	6013      	str	r3, [r2, #0]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	4413      	add	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4a1f      	ldr	r2, [pc, #124]	@ (800a248 <xTaskIncrementTick+0x164>)
 800a1cc:	441a      	add	r2, r3
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	4610      	mov	r0, r2
 800a1d6:	f7fe fcce 	bl	8008b76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1de:	4b1b      	ldr	r3, [pc, #108]	@ (800a24c <xTaskIncrementTick+0x168>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d3b8      	bcc.n	800a15a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1ec:	e7b5      	b.n	800a15a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a1ee:	4b17      	ldr	r3, [pc, #92]	@ (800a24c <xTaskIncrementTick+0x168>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1f4:	4914      	ldr	r1, [pc, #80]	@ (800a248 <xTaskIncrementTick+0x164>)
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	440b      	add	r3, r1
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d901      	bls.n	800a20a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a206:	2301      	movs	r3, #1
 800a208:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a20a:	4b11      	ldr	r3, [pc, #68]	@ (800a250 <xTaskIncrementTick+0x16c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d007      	beq.n	800a222 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a212:	2301      	movs	r3, #1
 800a214:	617b      	str	r3, [r7, #20]
 800a216:	e004      	b.n	800a222 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a218:	4b0e      	ldr	r3, [pc, #56]	@ (800a254 <xTaskIncrementTick+0x170>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3301      	adds	r3, #1
 800a21e:	4a0d      	ldr	r2, [pc, #52]	@ (800a254 <xTaskIncrementTick+0x170>)
 800a220:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a222:	697b      	ldr	r3, [r7, #20]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	2000106c 	.word	0x2000106c
 800a230:	20001048 	.word	0x20001048
 800a234:	20000ffc 	.word	0x20000ffc
 800a238:	20001000 	.word	0x20001000
 800a23c:	2000105c 	.word	0x2000105c
 800a240:	20001064 	.word	0x20001064
 800a244:	2000104c 	.word	0x2000104c
 800a248:	20000b74 	.word	0x20000b74
 800a24c:	20000b70 	.word	0x20000b70
 800a250:	20001058 	.word	0x20001058
 800a254:	20001054 	.word	0x20001054

0800a258 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a25e:	4b2a      	ldr	r3, [pc, #168]	@ (800a308 <vTaskSwitchContext+0xb0>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a266:	4b29      	ldr	r3, [pc, #164]	@ (800a30c <vTaskSwitchContext+0xb4>)
 800a268:	2201      	movs	r2, #1
 800a26a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a26c:	e047      	b.n	800a2fe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a26e:	4b27      	ldr	r3, [pc, #156]	@ (800a30c <vTaskSwitchContext+0xb4>)
 800a270:	2200      	movs	r2, #0
 800a272:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a274:	4b26      	ldr	r3, [pc, #152]	@ (800a310 <vTaskSwitchContext+0xb8>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	e011      	b.n	800a2a0 <vTaskSwitchContext+0x48>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10b      	bne.n	800a29a <vTaskSwitchContext+0x42>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	607b      	str	r3, [r7, #4]
}
 800a294:	bf00      	nop
 800a296:	bf00      	nop
 800a298:	e7fd      	b.n	800a296 <vTaskSwitchContext+0x3e>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	3b01      	subs	r3, #1
 800a29e:	60fb      	str	r3, [r7, #12]
 800a2a0:	491c      	ldr	r1, [pc, #112]	@ (800a314 <vTaskSwitchContext+0xbc>)
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	440b      	add	r3, r1
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d0e3      	beq.n	800a27c <vTaskSwitchContext+0x24>
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4413      	add	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4a15      	ldr	r2, [pc, #84]	@ (800a314 <vTaskSwitchContext+0xbc>)
 800a2c0:	4413      	add	r3, r2
 800a2c2:	60bb      	str	r3, [r7, #8]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	685a      	ldr	r2, [r3, #4]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	605a      	str	r2, [r3, #4]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	685a      	ldr	r2, [r3, #4]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	3308      	adds	r3, #8
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d104      	bne.n	800a2e4 <vTaskSwitchContext+0x8c>
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	605a      	str	r2, [r3, #4]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	4a0b      	ldr	r2, [pc, #44]	@ (800a318 <vTaskSwitchContext+0xc0>)
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	4a08      	ldr	r2, [pc, #32]	@ (800a310 <vTaskSwitchContext+0xb8>)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a2f4:	4b08      	ldr	r3, [pc, #32]	@ (800a318 <vTaskSwitchContext+0xc0>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3354      	adds	r3, #84	@ 0x54
 800a2fa:	4a08      	ldr	r2, [pc, #32]	@ (800a31c <vTaskSwitchContext+0xc4>)
 800a2fc:	6013      	str	r3, [r2, #0]
}
 800a2fe:	bf00      	nop
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	bc80      	pop	{r7}
 800a306:	4770      	bx	lr
 800a308:	2000106c 	.word	0x2000106c
 800a30c:	20001058 	.word	0x20001058
 800a310:	2000104c 	.word	0x2000104c
 800a314:	20000b74 	.word	0x20000b74
 800a318:	20000b70 	.word	0x20000b70
 800a31c:	2000001c 	.word	0x2000001c

0800a320 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10b      	bne.n	800a348 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a334:	f383 8811 	msr	BASEPRI, r3
 800a338:	f3bf 8f6f 	isb	sy
 800a33c:	f3bf 8f4f 	dsb	sy
 800a340:	60fb      	str	r3, [r7, #12]
}
 800a342:	bf00      	nop
 800a344:	bf00      	nop
 800a346:	e7fd      	b.n	800a344 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a348:	4b07      	ldr	r3, [pc, #28]	@ (800a368 <vTaskPlaceOnEventList+0x48>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3318      	adds	r3, #24
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7fe fc33 	bl	8008bbc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a356:	2101      	movs	r1, #1
 800a358:	6838      	ldr	r0, [r7, #0]
 800a35a:	f000 fb95 	bl	800aa88 <prvAddCurrentTaskToDelayedList>
}
 800a35e:	bf00      	nop
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20000b70 	.word	0x20000b70

0800a36c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10b      	bne.n	800a396 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	617b      	str	r3, [r7, #20]
}
 800a390:	bf00      	nop
 800a392:	bf00      	nop
 800a394:	e7fd      	b.n	800a392 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a396:	4b0a      	ldr	r3, [pc, #40]	@ (800a3c0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	3318      	adds	r3, #24
 800a39c:	4619      	mov	r1, r3
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f7fe fbe9 	bl	8008b76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d002      	beq.n	800a3b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a3b0:	6879      	ldr	r1, [r7, #4]
 800a3b2:	68b8      	ldr	r0, [r7, #8]
 800a3b4:	f000 fb68 	bl	800aa88 <prvAddCurrentTaskToDelayedList>
	}
 800a3b8:	bf00      	nop
 800a3ba:	3718      	adds	r7, #24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	20000b70 	.word	0x20000b70

0800a3c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	68db      	ldr	r3, [r3, #12]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10b      	bne.n	800a3f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3de:	f383 8811 	msr	BASEPRI, r3
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	f3bf 8f4f 	dsb	sy
 800a3ea:	60fb      	str	r3, [r7, #12]
}
 800a3ec:	bf00      	nop
 800a3ee:	bf00      	nop
 800a3f0:	e7fd      	b.n	800a3ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	3318      	adds	r3, #24
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe fc18 	bl	8008c2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3fc:	4b1d      	ldr	r3, [pc, #116]	@ (800a474 <xTaskRemoveFromEventList+0xb0>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d11d      	bne.n	800a440 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	3304      	adds	r3, #4
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fe fc0f 	bl	8008c2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a412:	4b19      	ldr	r3, [pc, #100]	@ (800a478 <xTaskRemoveFromEventList+0xb4>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	429a      	cmp	r2, r3
 800a418:	d903      	bls.n	800a422 <xTaskRemoveFromEventList+0x5e>
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a41e:	4a16      	ldr	r2, [pc, #88]	@ (800a478 <xTaskRemoveFromEventList+0xb4>)
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a426:	4613      	mov	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4a13      	ldr	r2, [pc, #76]	@ (800a47c <xTaskRemoveFromEventList+0xb8>)
 800a430:	441a      	add	r2, r3
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	3304      	adds	r3, #4
 800a436:	4619      	mov	r1, r3
 800a438:	4610      	mov	r0, r2
 800a43a:	f7fe fb9c 	bl	8008b76 <vListInsertEnd>
 800a43e:	e005      	b.n	800a44c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	3318      	adds	r3, #24
 800a444:	4619      	mov	r1, r3
 800a446:	480e      	ldr	r0, [pc, #56]	@ (800a480 <xTaskRemoveFromEventList+0xbc>)
 800a448:	f7fe fb95 	bl	8008b76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a450:	4b0c      	ldr	r3, [pc, #48]	@ (800a484 <xTaskRemoveFromEventList+0xc0>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a456:	429a      	cmp	r2, r3
 800a458:	d905      	bls.n	800a466 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a45a:	2301      	movs	r3, #1
 800a45c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a45e:	4b0a      	ldr	r3, [pc, #40]	@ (800a488 <xTaskRemoveFromEventList+0xc4>)
 800a460:	2201      	movs	r2, #1
 800a462:	601a      	str	r2, [r3, #0]
 800a464:	e001      	b.n	800a46a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a466:	2300      	movs	r3, #0
 800a468:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a46a:	697b      	ldr	r3, [r7, #20]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3718      	adds	r7, #24
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	2000106c 	.word	0x2000106c
 800a478:	2000104c 	.word	0x2000104c
 800a47c:	20000b74 	.word	0x20000b74
 800a480:	20001004 	.word	0x20001004
 800a484:	20000b70 	.word	0x20000b70
 800a488:	20001058 	.word	0x20001058

0800a48c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a494:	4b06      	ldr	r3, [pc, #24]	@ (800a4b0 <vTaskInternalSetTimeOutState+0x24>)
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a49c:	4b05      	ldr	r3, [pc, #20]	@ (800a4b4 <vTaskInternalSetTimeOutState+0x28>)
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	605a      	str	r2, [r3, #4]
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bc80      	pop	{r7}
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	2000105c 	.word	0x2000105c
 800a4b4:	20001048 	.word	0x20001048

0800a4b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b088      	sub	sp, #32
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10b      	bne.n	800a4e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	613b      	str	r3, [r7, #16]
}
 800a4da:	bf00      	nop
 800a4dc:	bf00      	nop
 800a4de:	e7fd      	b.n	800a4dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10b      	bne.n	800a4fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	60fb      	str	r3, [r7, #12]
}
 800a4f8:	bf00      	nop
 800a4fa:	bf00      	nop
 800a4fc:	e7fd      	b.n	800a4fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a4fe:	f000 ff5d 	bl	800b3bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a502:	4b1d      	ldr	r3, [pc, #116]	@ (800a578 <xTaskCheckForTimeOut+0xc0>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	69ba      	ldr	r2, [r7, #24]
 800a50e:	1ad3      	subs	r3, r2, r3
 800a510:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51a:	d102      	bne.n	800a522 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a51c:	2300      	movs	r3, #0
 800a51e:	61fb      	str	r3, [r7, #28]
 800a520:	e023      	b.n	800a56a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	4b15      	ldr	r3, [pc, #84]	@ (800a57c <xTaskCheckForTimeOut+0xc4>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d007      	beq.n	800a53e <xTaskCheckForTimeOut+0x86>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	69ba      	ldr	r2, [r7, #24]
 800a534:	429a      	cmp	r2, r3
 800a536:	d302      	bcc.n	800a53e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a538:	2301      	movs	r3, #1
 800a53a:	61fb      	str	r3, [r7, #28]
 800a53c:	e015      	b.n	800a56a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	429a      	cmp	r2, r3
 800a546:	d20b      	bcs.n	800a560 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	1ad2      	subs	r2, r2, r3
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff ff99 	bl	800a48c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a55a:	2300      	movs	r3, #0
 800a55c:	61fb      	str	r3, [r7, #28]
 800a55e:	e004      	b.n	800a56a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	2200      	movs	r2, #0
 800a564:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a566:	2301      	movs	r3, #1
 800a568:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a56a:	f000 ff57 	bl	800b41c <vPortExitCritical>

	return xReturn;
 800a56e:	69fb      	ldr	r3, [r7, #28]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3720      	adds	r7, #32
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	20001048 	.word	0x20001048
 800a57c:	2000105c 	.word	0x2000105c

0800a580 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a580:	b480      	push	{r7}
 800a582:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a584:	4b03      	ldr	r3, [pc, #12]	@ (800a594 <vTaskMissedYield+0x14>)
 800a586:	2201      	movs	r2, #1
 800a588:	601a      	str	r2, [r3, #0]
}
 800a58a:	bf00      	nop
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bc80      	pop	{r7}
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	20001058 	.word	0x20001058

0800a598 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a5a0:	f000 f852 	bl	800a648 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5a4:	4b06      	ldr	r3, [pc, #24]	@ (800a5c0 <prvIdleTask+0x28>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d9f9      	bls.n	800a5a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a5ac:	4b05      	ldr	r3, [pc, #20]	@ (800a5c4 <prvIdleTask+0x2c>)
 800a5ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5b2:	601a      	str	r2, [r3, #0]
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a5bc:	e7f0      	b.n	800a5a0 <prvIdleTask+0x8>
 800a5be:	bf00      	nop
 800a5c0:	20000b74 	.word	0x20000b74
 800a5c4:	e000ed04 	.word	0xe000ed04

0800a5c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	607b      	str	r3, [r7, #4]
 800a5d2:	e00c      	b.n	800a5ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	4413      	add	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4a12      	ldr	r2, [pc, #72]	@ (800a628 <prvInitialiseTaskLists+0x60>)
 800a5e0:	4413      	add	r3, r2
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fe fa9c 	bl	8008b20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	607b      	str	r3, [r7, #4]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2b37      	cmp	r3, #55	@ 0x37
 800a5f2:	d9ef      	bls.n	800a5d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a5f4:	480d      	ldr	r0, [pc, #52]	@ (800a62c <prvInitialiseTaskLists+0x64>)
 800a5f6:	f7fe fa93 	bl	8008b20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a5fa:	480d      	ldr	r0, [pc, #52]	@ (800a630 <prvInitialiseTaskLists+0x68>)
 800a5fc:	f7fe fa90 	bl	8008b20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a600:	480c      	ldr	r0, [pc, #48]	@ (800a634 <prvInitialiseTaskLists+0x6c>)
 800a602:	f7fe fa8d 	bl	8008b20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a606:	480c      	ldr	r0, [pc, #48]	@ (800a638 <prvInitialiseTaskLists+0x70>)
 800a608:	f7fe fa8a 	bl	8008b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a60c:	480b      	ldr	r0, [pc, #44]	@ (800a63c <prvInitialiseTaskLists+0x74>)
 800a60e:	f7fe fa87 	bl	8008b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a612:	4b0b      	ldr	r3, [pc, #44]	@ (800a640 <prvInitialiseTaskLists+0x78>)
 800a614:	4a05      	ldr	r2, [pc, #20]	@ (800a62c <prvInitialiseTaskLists+0x64>)
 800a616:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a618:	4b0a      	ldr	r3, [pc, #40]	@ (800a644 <prvInitialiseTaskLists+0x7c>)
 800a61a:	4a05      	ldr	r2, [pc, #20]	@ (800a630 <prvInitialiseTaskLists+0x68>)
 800a61c:	601a      	str	r2, [r3, #0]
}
 800a61e:	bf00      	nop
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	20000b74 	.word	0x20000b74
 800a62c:	20000fd4 	.word	0x20000fd4
 800a630:	20000fe8 	.word	0x20000fe8
 800a634:	20001004 	.word	0x20001004
 800a638:	20001018 	.word	0x20001018
 800a63c:	20001030 	.word	0x20001030
 800a640:	20000ffc 	.word	0x20000ffc
 800a644:	20001000 	.word	0x20001000

0800a648 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a64e:	e019      	b.n	800a684 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a650:	f000 feb4 	bl	800b3bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a654:	4b10      	ldr	r3, [pc, #64]	@ (800a698 <prvCheckTasksWaitingTermination+0x50>)
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	3304      	adds	r3, #4
 800a660:	4618      	mov	r0, r3
 800a662:	f7fe fae3 	bl	8008c2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a666:	4b0d      	ldr	r3, [pc, #52]	@ (800a69c <prvCheckTasksWaitingTermination+0x54>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	4a0b      	ldr	r2, [pc, #44]	@ (800a69c <prvCheckTasksWaitingTermination+0x54>)
 800a66e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a670:	4b0b      	ldr	r3, [pc, #44]	@ (800a6a0 <prvCheckTasksWaitingTermination+0x58>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	3b01      	subs	r3, #1
 800a676:	4a0a      	ldr	r2, [pc, #40]	@ (800a6a0 <prvCheckTasksWaitingTermination+0x58>)
 800a678:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a67a:	f000 fecf 	bl	800b41c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 f810 	bl	800a6a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a684:	4b06      	ldr	r3, [pc, #24]	@ (800a6a0 <prvCheckTasksWaitingTermination+0x58>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d1e1      	bne.n	800a650 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a68c:	bf00      	nop
 800a68e:	bf00      	nop
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	20001018 	.word	0x20001018
 800a69c:	20001044 	.word	0x20001044
 800a6a0:	2000102c 	.word	0x2000102c

0800a6a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	3354      	adds	r3, #84	@ 0x54
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f001 fc4f 	bl	800bf54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d108      	bne.n	800a6d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f001 f849 	bl	800b75c <vPortFree>
				vPortFree( pxTCB );
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f001 f846 	bl	800b75c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a6d0:	e019      	b.n	800a706 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d103      	bne.n	800a6e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f001 f83d 	bl	800b75c <vPortFree>
	}
 800a6e2:	e010      	b.n	800a706 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a6ea:	2b02      	cmp	r3, #2
 800a6ec:	d00b      	beq.n	800a706 <prvDeleteTCB+0x62>
	__asm volatile
 800a6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f2:	f383 8811 	msr	BASEPRI, r3
 800a6f6:	f3bf 8f6f 	isb	sy
 800a6fa:	f3bf 8f4f 	dsb	sy
 800a6fe:	60fb      	str	r3, [r7, #12]
}
 800a700:	bf00      	nop
 800a702:	bf00      	nop
 800a704:	e7fd      	b.n	800a702 <prvDeleteTCB+0x5e>
	}
 800a706:	bf00      	nop
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
	...

0800a710 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a716:	4b0c      	ldr	r3, [pc, #48]	@ (800a748 <prvResetNextTaskUnblockTime+0x38>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d104      	bne.n	800a72a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a720:	4b0a      	ldr	r3, [pc, #40]	@ (800a74c <prvResetNextTaskUnblockTime+0x3c>)
 800a722:	f04f 32ff 	mov.w	r2, #4294967295
 800a726:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a728:	e008      	b.n	800a73c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a72a:	4b07      	ldr	r3, [pc, #28]	@ (800a748 <prvResetNextTaskUnblockTime+0x38>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	4a04      	ldr	r2, [pc, #16]	@ (800a74c <prvResetNextTaskUnblockTime+0x3c>)
 800a73a:	6013      	str	r3, [r2, #0]
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	bc80      	pop	{r7}
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	20000ffc 	.word	0x20000ffc
 800a74c:	20001064 	.word	0x20001064

0800a750 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a756:	4b04      	ldr	r3, [pc, #16]	@ (800a768 <xTaskGetCurrentTaskHandle+0x18>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a75c:	687b      	ldr	r3, [r7, #4]
	}
 800a75e:	4618      	mov	r0, r3
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	bc80      	pop	{r7}
 800a766:	4770      	bx	lr
 800a768:	20000b70 	.word	0x20000b70

0800a76c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a772:	4b0b      	ldr	r3, [pc, #44]	@ (800a7a0 <xTaskGetSchedulerState+0x34>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d102      	bne.n	800a780 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a77a:	2301      	movs	r3, #1
 800a77c:	607b      	str	r3, [r7, #4]
 800a77e:	e008      	b.n	800a792 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a780:	4b08      	ldr	r3, [pc, #32]	@ (800a7a4 <xTaskGetSchedulerState+0x38>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d102      	bne.n	800a78e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a788:	2302      	movs	r3, #2
 800a78a:	607b      	str	r3, [r7, #4]
 800a78c:	e001      	b.n	800a792 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a78e:	2300      	movs	r3, #0
 800a790:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a792:	687b      	ldr	r3, [r7, #4]
	}
 800a794:	4618      	mov	r0, r3
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	bc80      	pop	{r7}
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	20001050 	.word	0x20001050
 800a7a4:	2000106c 	.word	0x2000106c

0800a7a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d051      	beq.n	800a862 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7c2:	4b2a      	ldr	r3, [pc, #168]	@ (800a86c <xTaskPriorityInherit+0xc4>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d241      	bcs.n	800a850 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	db06      	blt.n	800a7e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7d4:	4b25      	ldr	r3, [pc, #148]	@ (800a86c <xTaskPriorityInherit+0xc4>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	6959      	ldr	r1, [r3, #20]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4a1f      	ldr	r2, [pc, #124]	@ (800a870 <xTaskPriorityInherit+0xc8>)
 800a7f4:	4413      	add	r3, r2
 800a7f6:	4299      	cmp	r1, r3
 800a7f8:	d122      	bne.n	800a840 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fe fa14 	bl	8008c2c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a804:	4b19      	ldr	r3, [pc, #100]	@ (800a86c <xTaskPriorityInherit+0xc4>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a812:	4b18      	ldr	r3, [pc, #96]	@ (800a874 <xTaskPriorityInherit+0xcc>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	429a      	cmp	r2, r3
 800a818:	d903      	bls.n	800a822 <xTaskPriorityInherit+0x7a>
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a81e:	4a15      	ldr	r2, [pc, #84]	@ (800a874 <xTaskPriorityInherit+0xcc>)
 800a820:	6013      	str	r3, [r2, #0]
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a826:	4613      	mov	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4413      	add	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	4a10      	ldr	r2, [pc, #64]	@ (800a870 <xTaskPriorityInherit+0xc8>)
 800a830:	441a      	add	r2, r3
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	3304      	adds	r3, #4
 800a836:	4619      	mov	r1, r3
 800a838:	4610      	mov	r0, r2
 800a83a:	f7fe f99c 	bl	8008b76 <vListInsertEnd>
 800a83e:	e004      	b.n	800a84a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a840:	4b0a      	ldr	r3, [pc, #40]	@ (800a86c <xTaskPriorityInherit+0xc4>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a84a:	2301      	movs	r3, #1
 800a84c:	60fb      	str	r3, [r7, #12]
 800a84e:	e008      	b.n	800a862 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a854:	4b05      	ldr	r3, [pc, #20]	@ (800a86c <xTaskPriorityInherit+0xc4>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d201      	bcs.n	800a862 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a85e:	2301      	movs	r3, #1
 800a860:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a862:	68fb      	ldr	r3, [r7, #12]
	}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	20000b70 	.word	0x20000b70
 800a870:	20000b74 	.word	0x20000b74
 800a874:	2000104c 	.word	0x2000104c

0800a878 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b086      	sub	sp, #24
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a884:	2300      	movs	r3, #0
 800a886:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d058      	beq.n	800a940 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a88e:	4b2f      	ldr	r3, [pc, #188]	@ (800a94c <xTaskPriorityDisinherit+0xd4>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	429a      	cmp	r2, r3
 800a896:	d00b      	beq.n	800a8b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	60fb      	str	r3, [r7, #12]
}
 800a8aa:	bf00      	nop
 800a8ac:	bf00      	nop
 800a8ae:	e7fd      	b.n	800a8ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10b      	bne.n	800a8d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	60bb      	str	r3, [r7, #8]
}
 800a8ca:	bf00      	nop
 800a8cc:	bf00      	nop
 800a8ce:	e7fd      	b.n	800a8cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8d4:	1e5a      	subs	r2, r3, #1
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d02c      	beq.n	800a940 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d128      	bne.n	800a940 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fe f99a 	bl	8008c2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a904:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a910:	4b0f      	ldr	r3, [pc, #60]	@ (800a950 <xTaskPriorityDisinherit+0xd8>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	429a      	cmp	r2, r3
 800a916:	d903      	bls.n	800a920 <xTaskPriorityDisinherit+0xa8>
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a91c:	4a0c      	ldr	r2, [pc, #48]	@ (800a950 <xTaskPriorityDisinherit+0xd8>)
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a924:	4613      	mov	r3, r2
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4a09      	ldr	r2, [pc, #36]	@ (800a954 <xTaskPriorityDisinherit+0xdc>)
 800a92e:	441a      	add	r2, r3
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	3304      	adds	r3, #4
 800a934:	4619      	mov	r1, r3
 800a936:	4610      	mov	r0, r2
 800a938:	f7fe f91d 	bl	8008b76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a93c:	2301      	movs	r3, #1
 800a93e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a940:	697b      	ldr	r3, [r7, #20]
	}
 800a942:	4618      	mov	r0, r3
 800a944:	3718      	adds	r7, #24
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	20000b70 	.word	0x20000b70
 800a950:	2000104c 	.word	0x2000104c
 800a954:	20000b74 	.word	0x20000b74

0800a958 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b088      	sub	sp, #32
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a966:	2301      	movs	r3, #1
 800a968:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d06c      	beq.n	800aa4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10b      	bne.n	800a990 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a97c:	f383 8811 	msr	BASEPRI, r3
 800a980:	f3bf 8f6f 	isb	sy
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	60fb      	str	r3, [r7, #12]
}
 800a98a:	bf00      	nop
 800a98c:	bf00      	nop
 800a98e:	e7fd      	b.n	800a98c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a994:	683a      	ldr	r2, [r7, #0]
 800a996:	429a      	cmp	r2, r3
 800a998:	d902      	bls.n	800a9a0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	61fb      	str	r3, [r7, #28]
 800a99e:	e002      	b.n	800a9a6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9a4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9aa:	69fa      	ldr	r2, [r7, #28]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d04c      	beq.n	800aa4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a9b0:	69bb      	ldr	r3, [r7, #24]
 800a9b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9b4:	697a      	ldr	r2, [r7, #20]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d147      	bne.n	800aa4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a9ba:	4b26      	ldr	r3, [pc, #152]	@ (800aa54 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	69ba      	ldr	r2, [r7, #24]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d10b      	bne.n	800a9dc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	60bb      	str	r3, [r7, #8]
}
 800a9d6:	bf00      	nop
 800a9d8:	bf00      	nop
 800a9da:	e7fd      	b.n	800a9d8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	69fa      	ldr	r2, [r7, #28]
 800a9e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	db04      	blt.n	800a9fa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	6959      	ldr	r1, [r3, #20]
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	4613      	mov	r3, r2
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4413      	add	r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	4a13      	ldr	r2, [pc, #76]	@ (800aa58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aa0a:	4413      	add	r3, r2
 800aa0c:	4299      	cmp	r1, r3
 800aa0e:	d11c      	bne.n	800aa4a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	3304      	adds	r3, #4
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fe f909 	bl	8008c2c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa1e:	4b0f      	ldr	r3, [pc, #60]	@ (800aa5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d903      	bls.n	800aa2e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa2a:	4a0c      	ldr	r2, [pc, #48]	@ (800aa5c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa32:	4613      	mov	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4a07      	ldr	r2, [pc, #28]	@ (800aa58 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800aa3c:	441a      	add	r2, r3
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	3304      	adds	r3, #4
 800aa42:	4619      	mov	r1, r3
 800aa44:	4610      	mov	r0, r2
 800aa46:	f7fe f896 	bl	8008b76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa4a:	bf00      	nop
 800aa4c:	3720      	adds	r7, #32
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	20000b70 	.word	0x20000b70
 800aa58:	20000b74 	.word	0x20000b74
 800aa5c:	2000104c 	.word	0x2000104c

0800aa60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aa60:	b480      	push	{r7}
 800aa62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aa64:	4b07      	ldr	r3, [pc, #28]	@ (800aa84 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d004      	beq.n	800aa76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aa6c:	4b05      	ldr	r3, [pc, #20]	@ (800aa84 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa72:	3201      	adds	r2, #1
 800aa74:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800aa76:	4b03      	ldr	r3, [pc, #12]	@ (800aa84 <pvTaskIncrementMutexHeldCount+0x24>)
 800aa78:	681b      	ldr	r3, [r3, #0]
	}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bc80      	pop	{r7}
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	20000b70 	.word	0x20000b70

0800aa88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa92:	4b21      	ldr	r3, [pc, #132]	@ (800ab18 <prvAddCurrentTaskToDelayedList+0x90>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa98:	4b20      	ldr	r3, [pc, #128]	@ (800ab1c <prvAddCurrentTaskToDelayedList+0x94>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe f8c4 	bl	8008c2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaaa:	d10a      	bne.n	800aac2 <prvAddCurrentTaskToDelayedList+0x3a>
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d007      	beq.n	800aac2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aab2:	4b1a      	ldr	r3, [pc, #104]	@ (800ab1c <prvAddCurrentTaskToDelayedList+0x94>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	3304      	adds	r3, #4
 800aab8:	4619      	mov	r1, r3
 800aaba:	4819      	ldr	r0, [pc, #100]	@ (800ab20 <prvAddCurrentTaskToDelayedList+0x98>)
 800aabc:	f7fe f85b 	bl	8008b76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aac0:	e026      	b.n	800ab10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4413      	add	r3, r2
 800aac8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aaca:	4b14      	ldr	r3, [pc, #80]	@ (800ab1c <prvAddCurrentTaskToDelayedList+0x94>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d209      	bcs.n	800aaee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aada:	4b12      	ldr	r3, [pc, #72]	@ (800ab24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	4b0f      	ldr	r3, [pc, #60]	@ (800ab1c <prvAddCurrentTaskToDelayedList+0x94>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3304      	adds	r3, #4
 800aae4:	4619      	mov	r1, r3
 800aae6:	4610      	mov	r0, r2
 800aae8:	f7fe f868 	bl	8008bbc <vListInsert>
}
 800aaec:	e010      	b.n	800ab10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaee:	4b0e      	ldr	r3, [pc, #56]	@ (800ab28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ab1c <prvAddCurrentTaskToDelayedList+0x94>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	3304      	adds	r3, #4
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4610      	mov	r0, r2
 800aafc:	f7fe f85e 	bl	8008bbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab00:	4b0a      	ldr	r3, [pc, #40]	@ (800ab2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d202      	bcs.n	800ab10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab0a:	4a08      	ldr	r2, [pc, #32]	@ (800ab2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	6013      	str	r3, [r2, #0]
}
 800ab10:	bf00      	nop
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	20001048 	.word	0x20001048
 800ab1c:	20000b70 	.word	0x20000b70
 800ab20:	20001030 	.word	0x20001030
 800ab24:	20001000 	.word	0x20001000
 800ab28:	20000ffc 	.word	0x20000ffc
 800ab2c:	20001064 	.word	0x20001064

0800ab30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b08a      	sub	sp, #40	@ 0x28
 800ab34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab36:	2300      	movs	r3, #0
 800ab38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab3a:	f000 fb11 	bl	800b160 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab3e:	4b1d      	ldr	r3, [pc, #116]	@ (800abb4 <xTimerCreateTimerTask+0x84>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d021      	beq.n	800ab8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab46:	2300      	movs	r3, #0
 800ab48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab4e:	1d3a      	adds	r2, r7, #4
 800ab50:	f107 0108 	add.w	r1, r7, #8
 800ab54:	f107 030c 	add.w	r3, r7, #12
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7fd ffc7 	bl	8008aec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab5e:	6879      	ldr	r1, [r7, #4]
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	9202      	str	r2, [sp, #8]
 800ab66:	9301      	str	r3, [sp, #4]
 800ab68:	2302      	movs	r3, #2
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	460a      	mov	r2, r1
 800ab70:	4911      	ldr	r1, [pc, #68]	@ (800abb8 <xTimerCreateTimerTask+0x88>)
 800ab72:	4812      	ldr	r0, [pc, #72]	@ (800abbc <xTimerCreateTimerTask+0x8c>)
 800ab74:	f7fe ff98 	bl	8009aa8 <xTaskCreateStatic>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	4a11      	ldr	r2, [pc, #68]	@ (800abc0 <xTimerCreateTimerTask+0x90>)
 800ab7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ab7e:	4b10      	ldr	r3, [pc, #64]	@ (800abc0 <xTimerCreateTimerTask+0x90>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d001      	beq.n	800ab8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ab86:	2301      	movs	r3, #1
 800ab88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10b      	bne.n	800aba8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	613b      	str	r3, [r7, #16]
}
 800aba2:	bf00      	nop
 800aba4:	bf00      	nop
 800aba6:	e7fd      	b.n	800aba4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aba8:	697b      	ldr	r3, [r7, #20]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3718      	adds	r7, #24
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	200010a0 	.word	0x200010a0
 800abb8:	0800cb2c 	.word	0x0800cb2c
 800abbc:	0800acfd 	.word	0x0800acfd
 800abc0:	200010a4 	.word	0x200010a4

0800abc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08a      	sub	sp, #40	@ 0x28
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
 800abd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10b      	bne.n	800abf4 <xTimerGenericCommand+0x30>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	623b      	str	r3, [r7, #32]
}
 800abee:	bf00      	nop
 800abf0:	bf00      	nop
 800abf2:	e7fd      	b.n	800abf0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800abf4:	4b19      	ldr	r3, [pc, #100]	@ (800ac5c <xTimerGenericCommand+0x98>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d02a      	beq.n	800ac52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	2b05      	cmp	r3, #5
 800ac0c:	dc18      	bgt.n	800ac40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac0e:	f7ff fdad 	bl	800a76c <xTaskGetSchedulerState>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d109      	bne.n	800ac2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac18:	4b10      	ldr	r3, [pc, #64]	@ (800ac5c <xTimerGenericCommand+0x98>)
 800ac1a:	6818      	ldr	r0, [r3, #0]
 800ac1c:	f107 0110 	add.w	r1, r7, #16
 800ac20:	2300      	movs	r3, #0
 800ac22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac24:	f7fe fa2a 	bl	800907c <xQueueGenericSend>
 800ac28:	6278      	str	r0, [r7, #36]	@ 0x24
 800ac2a:	e012      	b.n	800ac52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ac5c <xTimerGenericCommand+0x98>)
 800ac2e:	6818      	ldr	r0, [r3, #0]
 800ac30:	f107 0110 	add.w	r1, r7, #16
 800ac34:	2300      	movs	r3, #0
 800ac36:	2200      	movs	r2, #0
 800ac38:	f7fe fa20 	bl	800907c <xQueueGenericSend>
 800ac3c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ac3e:	e008      	b.n	800ac52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac40:	4b06      	ldr	r3, [pc, #24]	@ (800ac5c <xTimerGenericCommand+0x98>)
 800ac42:	6818      	ldr	r0, [r3, #0]
 800ac44:	f107 0110 	add.w	r1, r7, #16
 800ac48:	2300      	movs	r3, #0
 800ac4a:	683a      	ldr	r2, [r7, #0]
 800ac4c:	f7fe fb18 	bl	8009280 <xQueueGenericSendFromISR>
 800ac50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3728      	adds	r7, #40	@ 0x28
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	200010a0 	.word	0x200010a0

0800ac60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b088      	sub	sp, #32
 800ac64:	af02      	add	r7, sp, #8
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac6a:	4b23      	ldr	r3, [pc, #140]	@ (800acf8 <prvProcessExpiredTimer+0x98>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	3304      	adds	r3, #4
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7fd ffd7 	bl	8008c2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac84:	f003 0304 	and.w	r3, r3, #4
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d023      	beq.n	800acd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	699a      	ldr	r2, [r3, #24]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	18d1      	adds	r1, r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	6978      	ldr	r0, [r7, #20]
 800ac9a:	f000 f8d3 	bl	800ae44 <prvInsertTimerInActiveList>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d020      	beq.n	800ace6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aca4:	2300      	movs	r3, #0
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	2300      	movs	r3, #0
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	2100      	movs	r1, #0
 800acae:	6978      	ldr	r0, [r7, #20]
 800acb0:	f7ff ff88 	bl	800abc4 <xTimerGenericCommand>
 800acb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d114      	bne.n	800ace6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800acbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc0:	f383 8811 	msr	BASEPRI, r3
 800acc4:	f3bf 8f6f 	isb	sy
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	60fb      	str	r3, [r7, #12]
}
 800acce:	bf00      	nop
 800acd0:	bf00      	nop
 800acd2:	e7fd      	b.n	800acd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acda:	f023 0301 	bic.w	r3, r3, #1
 800acde:	b2da      	uxtb	r2, r3
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	6978      	ldr	r0, [r7, #20]
 800acec:	4798      	blx	r3
}
 800acee:	bf00      	nop
 800acf0:	3718      	adds	r7, #24
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
 800acf6:	bf00      	nop
 800acf8:	20001098 	.word	0x20001098

0800acfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad04:	f107 0308 	add.w	r3, r7, #8
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f000 f859 	bl	800adc0 <prvGetNextExpireTime>
 800ad0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	4619      	mov	r1, r3
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f805 	bl	800ad24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad1a:	f000 f8d5 	bl	800aec8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad1e:	bf00      	nop
 800ad20:	e7f0      	b.n	800ad04 <prvTimerTask+0x8>
	...

0800ad24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad2e:	f7ff f91f 	bl	8009f70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad32:	f107 0308 	add.w	r3, r7, #8
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 f864 	bl	800ae04 <prvSampleTimeNow>
 800ad3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d130      	bne.n	800ada6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10a      	bne.n	800ad60 <prvProcessTimerOrBlockTask+0x3c>
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d806      	bhi.n	800ad60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad52:	f7ff f91b 	bl	8009f8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad56:	68f9      	ldr	r1, [r7, #12]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff ff81 	bl	800ac60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad5e:	e024      	b.n	800adaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d008      	beq.n	800ad78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad66:	4b13      	ldr	r3, [pc, #76]	@ (800adb4 <prvProcessTimerOrBlockTask+0x90>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d101      	bne.n	800ad74 <prvProcessTimerOrBlockTask+0x50>
 800ad70:	2301      	movs	r3, #1
 800ad72:	e000      	b.n	800ad76 <prvProcessTimerOrBlockTask+0x52>
 800ad74:	2300      	movs	r3, #0
 800ad76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad78:	4b0f      	ldr	r3, [pc, #60]	@ (800adb8 <prvProcessTimerOrBlockTask+0x94>)
 800ad7a:	6818      	ldr	r0, [r3, #0]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	4619      	mov	r1, r3
 800ad86:	f7fe fe5b 	bl	8009a40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad8a:	f7ff f8ff 	bl	8009f8c <xTaskResumeAll>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10a      	bne.n	800adaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad94:	4b09      	ldr	r3, [pc, #36]	@ (800adbc <prvProcessTimerOrBlockTask+0x98>)
 800ad96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad9a:	601a      	str	r2, [r3, #0]
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	f3bf 8f6f 	isb	sy
}
 800ada4:	e001      	b.n	800adaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ada6:	f7ff f8f1 	bl	8009f8c <xTaskResumeAll>
}
 800adaa:	bf00      	nop
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	2000109c 	.word	0x2000109c
 800adb8:	200010a0 	.word	0x200010a0
 800adbc:	e000ed04 	.word	0xe000ed04

0800adc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800adc8:	4b0d      	ldr	r3, [pc, #52]	@ (800ae00 <prvGetNextExpireTime+0x40>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <prvGetNextExpireTime+0x16>
 800add2:	2201      	movs	r2, #1
 800add4:	e000      	b.n	800add8 <prvGetNextExpireTime+0x18>
 800add6:	2200      	movs	r2, #0
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d105      	bne.n	800adf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ade4:	4b06      	ldr	r3, [pc, #24]	@ (800ae00 <prvGetNextExpireTime+0x40>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	60fb      	str	r3, [r7, #12]
 800adee:	e001      	b.n	800adf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800adf0:	2300      	movs	r3, #0
 800adf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800adf4:	68fb      	ldr	r3, [r7, #12]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3714      	adds	r7, #20
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bc80      	pop	{r7}
 800adfe:	4770      	bx	lr
 800ae00:	20001098 	.word	0x20001098

0800ae04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae0c:	f7ff f95c 	bl	800a0c8 <xTaskGetTickCount>
 800ae10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae12:	4b0b      	ldr	r3, [pc, #44]	@ (800ae40 <prvSampleTimeNow+0x3c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d205      	bcs.n	800ae28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae1c:	f000 f93a 	bl	800b094 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2201      	movs	r2, #1
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	e002      	b.n	800ae2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae2e:	4a04      	ldr	r2, [pc, #16]	@ (800ae40 <prvSampleTimeNow+0x3c>)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae34:	68fb      	ldr	r3, [r7, #12]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	200010a8 	.word	0x200010a8

0800ae44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
 800ae50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae52:	2300      	movs	r3, #0
 800ae54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d812      	bhi.n	800ae90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	1ad2      	subs	r2, r2, r3
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d302      	bcc.n	800ae7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	617b      	str	r3, [r7, #20]
 800ae7c:	e01b      	b.n	800aeb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae7e:	4b10      	ldr	r3, [pc, #64]	@ (800aec0 <prvInsertTimerInActiveList+0x7c>)
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3304      	adds	r3, #4
 800ae86:	4619      	mov	r1, r3
 800ae88:	4610      	mov	r0, r2
 800ae8a:	f7fd fe97 	bl	8008bbc <vListInsert>
 800ae8e:	e012      	b.n	800aeb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d206      	bcs.n	800aea6 <prvInsertTimerInActiveList+0x62>
 800ae98:	68ba      	ldr	r2, [r7, #8]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d302      	bcc.n	800aea6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aea0:	2301      	movs	r3, #1
 800aea2:	617b      	str	r3, [r7, #20]
 800aea4:	e007      	b.n	800aeb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aea6:	4b07      	ldr	r3, [pc, #28]	@ (800aec4 <prvInsertTimerInActiveList+0x80>)
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3304      	adds	r3, #4
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	f7fd fe83 	bl	8008bbc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aeb6:	697b      	ldr	r3, [r7, #20]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3718      	adds	r7, #24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	2000109c 	.word	0x2000109c
 800aec4:	20001098 	.word	0x20001098

0800aec8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b08e      	sub	sp, #56	@ 0x38
 800aecc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aece:	e0ce      	b.n	800b06e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	da19      	bge.n	800af0a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aed6:	1d3b      	adds	r3, r7, #4
 800aed8:	3304      	adds	r3, #4
 800aeda:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d10b      	bne.n	800aefa <prvProcessReceivedCommands+0x32>
	__asm volatile
 800aee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee6:	f383 8811 	msr	BASEPRI, r3
 800aeea:	f3bf 8f6f 	isb	sy
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	61fb      	str	r3, [r7, #28]
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop
 800aef8:	e7fd      	b.n	800aef6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aefa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af00:	6850      	ldr	r0, [r2, #4]
 800af02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af04:	6892      	ldr	r2, [r2, #8]
 800af06:	4611      	mov	r1, r2
 800af08:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f2c0 80ae 	blt.w	800b06e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af18:	695b      	ldr	r3, [r3, #20]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d004      	beq.n	800af28 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af20:	3304      	adds	r3, #4
 800af22:	4618      	mov	r0, r3
 800af24:	f7fd fe82 	bl	8008c2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af28:	463b      	mov	r3, r7
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7ff ff6a 	bl	800ae04 <prvSampleTimeNow>
 800af30:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b09      	cmp	r3, #9
 800af36:	f200 8097 	bhi.w	800b068 <prvProcessReceivedCommands+0x1a0>
 800af3a:	a201      	add	r2, pc, #4	@ (adr r2, 800af40 <prvProcessReceivedCommands+0x78>)
 800af3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af40:	0800af69 	.word	0x0800af69
 800af44:	0800af69 	.word	0x0800af69
 800af48:	0800af69 	.word	0x0800af69
 800af4c:	0800afdf 	.word	0x0800afdf
 800af50:	0800aff3 	.word	0x0800aff3
 800af54:	0800b03f 	.word	0x0800b03f
 800af58:	0800af69 	.word	0x0800af69
 800af5c:	0800af69 	.word	0x0800af69
 800af60:	0800afdf 	.word	0x0800afdf
 800af64:	0800aff3 	.word	0x0800aff3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af6e:	f043 0301 	orr.w	r3, r3, #1
 800af72:	b2da      	uxtb	r2, r3
 800af74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	18d1      	adds	r1, r2, r3
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af88:	f7ff ff5c 	bl	800ae44 <prvInsertTimerInActiveList>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d06c      	beq.n	800b06c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afa0:	f003 0304 	and.w	r3, r3, #4
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d061      	beq.n	800b06c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afac:	699b      	ldr	r3, [r3, #24]
 800afae:	441a      	add	r2, r3
 800afb0:	2300      	movs	r3, #0
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	2300      	movs	r3, #0
 800afb6:	2100      	movs	r1, #0
 800afb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afba:	f7ff fe03 	bl	800abc4 <xTimerGenericCommand>
 800afbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800afc0:	6a3b      	ldr	r3, [r7, #32]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d152      	bne.n	800b06c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800afc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	61bb      	str	r3, [r7, #24]
}
 800afd8:	bf00      	nop
 800afda:	bf00      	nop
 800afdc:	e7fd      	b.n	800afda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afe4:	f023 0301 	bic.w	r3, r3, #1
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800aff0:	e03d      	b.n	800b06e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aff8:	f043 0301 	orr.w	r3, r3, #1
 800affc:	b2da      	uxtb	r2, r3
 800affe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b000:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b008:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00c:	699b      	ldr	r3, [r3, #24]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10b      	bne.n	800b02a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b016:	f383 8811 	msr	BASEPRI, r3
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	617b      	str	r3, [r7, #20]
}
 800b024:	bf00      	nop
 800b026:	bf00      	nop
 800b028:	e7fd      	b.n	800b026 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b02c:	699a      	ldr	r2, [r3, #24]
 800b02e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b030:	18d1      	adds	r1, r2, r3
 800b032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b038:	f7ff ff04 	bl	800ae44 <prvInsertTimerInActiveList>
					break;
 800b03c:	e017      	b.n	800b06e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b044:	f003 0302 	and.w	r3, r3, #2
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d103      	bne.n	800b054 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b04c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b04e:	f000 fb85 	bl	800b75c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b052:	e00c      	b.n	800b06e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b056:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b05a:	f023 0301 	bic.w	r3, r3, #1
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b062:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b066:	e002      	b.n	800b06e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b068:	bf00      	nop
 800b06a:	e000      	b.n	800b06e <prvProcessReceivedCommands+0x1a6>
					break;
 800b06c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b06e:	4b08      	ldr	r3, [pc, #32]	@ (800b090 <prvProcessReceivedCommands+0x1c8>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	1d39      	adds	r1, r7, #4
 800b074:	2200      	movs	r2, #0
 800b076:	4618      	mov	r0, r3
 800b078:	f7fe f9a0 	bl	80093bc <xQueueReceive>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f47f af26 	bne.w	800aed0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop
 800b088:	3730      	adds	r7, #48	@ 0x30
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	200010a0 	.word	0x200010a0

0800b094 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b088      	sub	sp, #32
 800b098:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b09a:	e049      	b.n	800b130 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b09c:	4b2e      	ldr	r3, [pc, #184]	@ (800b158 <prvSwitchTimerLists+0xc4>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0a6:	4b2c      	ldr	r3, [pc, #176]	@ (800b158 <prvSwitchTimerLists+0xc4>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fd fdb9 	bl	8008c2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6a1b      	ldr	r3, [r3, #32]
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b0c8:	f003 0304 	and.w	r3, r3, #4
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d02f      	beq.n	800b130 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	699b      	ldr	r3, [r3, #24]
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	4413      	add	r3, r2
 800b0d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b0da:	68ba      	ldr	r2, [r7, #8]
 800b0dc:	693b      	ldr	r3, [r7, #16]
 800b0de:	429a      	cmp	r2, r3
 800b0e0:	d90e      	bls.n	800b100 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b158 <prvSwitchTimerLists+0xc4>)
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	f7fd fd5f 	bl	8008bbc <vListInsert>
 800b0fe:	e017      	b.n	800b130 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b100:	2300      	movs	r3, #0
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	2300      	movs	r3, #0
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	2100      	movs	r1, #0
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f7ff fd5a 	bl	800abc4 <xTimerGenericCommand>
 800b110:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d10b      	bne.n	800b130 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b11c:	f383 8811 	msr	BASEPRI, r3
 800b120:	f3bf 8f6f 	isb	sy
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	603b      	str	r3, [r7, #0]
}
 800b12a:	bf00      	nop
 800b12c:	bf00      	nop
 800b12e:	e7fd      	b.n	800b12c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b130:	4b09      	ldr	r3, [pc, #36]	@ (800b158 <prvSwitchTimerLists+0xc4>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1b0      	bne.n	800b09c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b13a:	4b07      	ldr	r3, [pc, #28]	@ (800b158 <prvSwitchTimerLists+0xc4>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b140:	4b06      	ldr	r3, [pc, #24]	@ (800b15c <prvSwitchTimerLists+0xc8>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a04      	ldr	r2, [pc, #16]	@ (800b158 <prvSwitchTimerLists+0xc4>)
 800b146:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b148:	4a04      	ldr	r2, [pc, #16]	@ (800b15c <prvSwitchTimerLists+0xc8>)
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	6013      	str	r3, [r2, #0]
}
 800b14e:	bf00      	nop
 800b150:	3718      	adds	r7, #24
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	20001098 	.word	0x20001098
 800b15c:	2000109c 	.word	0x2000109c

0800b160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b166:	f000 f929 	bl	800b3bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b16a:	4b15      	ldr	r3, [pc, #84]	@ (800b1c0 <prvCheckForValidListAndQueue+0x60>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d120      	bne.n	800b1b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b172:	4814      	ldr	r0, [pc, #80]	@ (800b1c4 <prvCheckForValidListAndQueue+0x64>)
 800b174:	f7fd fcd4 	bl	8008b20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b178:	4813      	ldr	r0, [pc, #76]	@ (800b1c8 <prvCheckForValidListAndQueue+0x68>)
 800b17a:	f7fd fcd1 	bl	8008b20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b17e:	4b13      	ldr	r3, [pc, #76]	@ (800b1cc <prvCheckForValidListAndQueue+0x6c>)
 800b180:	4a10      	ldr	r2, [pc, #64]	@ (800b1c4 <prvCheckForValidListAndQueue+0x64>)
 800b182:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b184:	4b12      	ldr	r3, [pc, #72]	@ (800b1d0 <prvCheckForValidListAndQueue+0x70>)
 800b186:	4a10      	ldr	r2, [pc, #64]	@ (800b1c8 <prvCheckForValidListAndQueue+0x68>)
 800b188:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b18a:	2300      	movs	r3, #0
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	4b11      	ldr	r3, [pc, #68]	@ (800b1d4 <prvCheckForValidListAndQueue+0x74>)
 800b190:	4a11      	ldr	r2, [pc, #68]	@ (800b1d8 <prvCheckForValidListAndQueue+0x78>)
 800b192:	2110      	movs	r1, #16
 800b194:	200a      	movs	r0, #10
 800b196:	f7fd fddd 	bl	8008d54 <xQueueGenericCreateStatic>
 800b19a:	4603      	mov	r3, r0
 800b19c:	4a08      	ldr	r2, [pc, #32]	@ (800b1c0 <prvCheckForValidListAndQueue+0x60>)
 800b19e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b1a0:	4b07      	ldr	r3, [pc, #28]	@ (800b1c0 <prvCheckForValidListAndQueue+0x60>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d005      	beq.n	800b1b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b1a8:	4b05      	ldr	r3, [pc, #20]	@ (800b1c0 <prvCheckForValidListAndQueue+0x60>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	490b      	ldr	r1, [pc, #44]	@ (800b1dc <prvCheckForValidListAndQueue+0x7c>)
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fe fc1e 	bl	80099f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1b4:	f000 f932 	bl	800b41c <vPortExitCritical>
}
 800b1b8:	bf00      	nop
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	200010a0 	.word	0x200010a0
 800b1c4:	20001070 	.word	0x20001070
 800b1c8:	20001084 	.word	0x20001084
 800b1cc:	20001098 	.word	0x20001098
 800b1d0:	2000109c 	.word	0x2000109c
 800b1d4:	2000114c 	.word	0x2000114c
 800b1d8:	200010ac 	.word	0x200010ac
 800b1dc:	0800cb34 	.word	0x0800cb34

0800b1e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b085      	sub	sp, #20
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3b04      	subs	r3, #4
 800b1f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b1f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3b04      	subs	r3, #4
 800b1fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	f023 0201 	bic.w	r2, r3, #1
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3b04      	subs	r3, #4
 800b20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b210:	4a08      	ldr	r2, [pc, #32]	@ (800b234 <pxPortInitialiseStack+0x54>)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3b14      	subs	r3, #20
 800b21a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	3b20      	subs	r3, #32
 800b226:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b228:	68fb      	ldr	r3, [r7, #12]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	bc80      	pop	{r7}
 800b232:	4770      	bx	lr
 800b234:	0800b239 	.word	0x0800b239

0800b238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800b23e:	2300      	movs	r3, #0
 800b240:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b242:	4b12      	ldr	r3, [pc, #72]	@ (800b28c <prvTaskExitError+0x54>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b24a:	d00b      	beq.n	800b264 <prvTaskExitError+0x2c>
	__asm volatile
 800b24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b250:	f383 8811 	msr	BASEPRI, r3
 800b254:	f3bf 8f6f 	isb	sy
 800b258:	f3bf 8f4f 	dsb	sy
 800b25c:	60fb      	str	r3, [r7, #12]
}
 800b25e:	bf00      	nop
 800b260:	bf00      	nop
 800b262:	e7fd      	b.n	800b260 <prvTaskExitError+0x28>
	__asm volatile
 800b264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	60bb      	str	r3, [r7, #8]
}
 800b276:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b278:	bf00      	nop
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d0fc      	beq.n	800b27a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b280:	bf00      	nop
 800b282:	bf00      	nop
 800b284:	3714      	adds	r7, #20
 800b286:	46bd      	mov	sp, r7
 800b288:	bc80      	pop	{r7}
 800b28a:	4770      	bx	lr
 800b28c:	2000000c 	.word	0x2000000c

0800b290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b290:	4b07      	ldr	r3, [pc, #28]	@ (800b2b0 <pxCurrentTCBConst2>)
 800b292:	6819      	ldr	r1, [r3, #0]
 800b294:	6808      	ldr	r0, [r1, #0]
 800b296:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b29a:	f380 8809 	msr	PSP, r0
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f04f 0000 	mov.w	r0, #0
 800b2a6:	f380 8811 	msr	BASEPRI, r0
 800b2aa:	f04e 0e0d 	orr.w	lr, lr, #13
 800b2ae:	4770      	bx	lr

0800b2b0 <pxCurrentTCBConst2>:
 800b2b0:	20000b70 	.word	0x20000b70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b2b4:	bf00      	nop
 800b2b6:	bf00      	nop

0800b2b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800b2b8:	4806      	ldr	r0, [pc, #24]	@ (800b2d4 <prvPortStartFirstTask+0x1c>)
 800b2ba:	6800      	ldr	r0, [r0, #0]
 800b2bc:	6800      	ldr	r0, [r0, #0]
 800b2be:	f380 8808 	msr	MSP, r0
 800b2c2:	b662      	cpsie	i
 800b2c4:	b661      	cpsie	f
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	df00      	svc	0
 800b2d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b2d2:	bf00      	nop
 800b2d4:	e000ed08 	.word	0xe000ed08

0800b2d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b2de:	4b32      	ldr	r3, [pc, #200]	@ (800b3a8 <xPortStartScheduler+0xd0>)
 800b2e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	22ff      	movs	r2, #255	@ 0xff
 800b2ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2f8:	78fb      	ldrb	r3, [r7, #3]
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b300:	b2da      	uxtb	r2, r3
 800b302:	4b2a      	ldr	r3, [pc, #168]	@ (800b3ac <xPortStartScheduler+0xd4>)
 800b304:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b306:	4b2a      	ldr	r3, [pc, #168]	@ (800b3b0 <xPortStartScheduler+0xd8>)
 800b308:	2207      	movs	r2, #7
 800b30a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b30c:	e009      	b.n	800b322 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b30e:	4b28      	ldr	r3, [pc, #160]	@ (800b3b0 <xPortStartScheduler+0xd8>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3b01      	subs	r3, #1
 800b314:	4a26      	ldr	r2, [pc, #152]	@ (800b3b0 <xPortStartScheduler+0xd8>)
 800b316:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b318:	78fb      	ldrb	r3, [r7, #3]
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	005b      	lsls	r3, r3, #1
 800b31e:	b2db      	uxtb	r3, r3
 800b320:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b322:	78fb      	ldrb	r3, [r7, #3]
 800b324:	b2db      	uxtb	r3, r3
 800b326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b32a:	2b80      	cmp	r3, #128	@ 0x80
 800b32c:	d0ef      	beq.n	800b30e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b32e:	4b20      	ldr	r3, [pc, #128]	@ (800b3b0 <xPortStartScheduler+0xd8>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f1c3 0307 	rsb	r3, r3, #7
 800b336:	2b04      	cmp	r3, #4
 800b338:	d00b      	beq.n	800b352 <xPortStartScheduler+0x7a>
	__asm volatile
 800b33a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b33e:	f383 8811 	msr	BASEPRI, r3
 800b342:	f3bf 8f6f 	isb	sy
 800b346:	f3bf 8f4f 	dsb	sy
 800b34a:	60bb      	str	r3, [r7, #8]
}
 800b34c:	bf00      	nop
 800b34e:	bf00      	nop
 800b350:	e7fd      	b.n	800b34e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b352:	4b17      	ldr	r3, [pc, #92]	@ (800b3b0 <xPortStartScheduler+0xd8>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	021b      	lsls	r3, r3, #8
 800b358:	4a15      	ldr	r2, [pc, #84]	@ (800b3b0 <xPortStartScheduler+0xd8>)
 800b35a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b35c:	4b14      	ldr	r3, [pc, #80]	@ (800b3b0 <xPortStartScheduler+0xd8>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b364:	4a12      	ldr	r2, [pc, #72]	@ (800b3b0 <xPortStartScheduler+0xd8>)
 800b366:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	b2da      	uxtb	r2, r3
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b370:	4b10      	ldr	r3, [pc, #64]	@ (800b3b4 <xPortStartScheduler+0xdc>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a0f      	ldr	r2, [pc, #60]	@ (800b3b4 <xPortStartScheduler+0xdc>)
 800b376:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b37a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b37c:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b4 <xPortStartScheduler+0xdc>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a0c      	ldr	r2, [pc, #48]	@ (800b3b4 <xPortStartScheduler+0xdc>)
 800b382:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b386:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b388:	f000 f8b8 	bl	800b4fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b38c:	4b0a      	ldr	r3, [pc, #40]	@ (800b3b8 <xPortStartScheduler+0xe0>)
 800b38e:	2200      	movs	r2, #0
 800b390:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b392:	f7ff ff91 	bl	800b2b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b396:	f7fe ff5f 	bl	800a258 <vTaskSwitchContext>
	prvTaskExitError();
 800b39a:	f7ff ff4d 	bl	800b238 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	e000e400 	.word	0xe000e400
 800b3ac:	2000119c 	.word	0x2000119c
 800b3b0:	200011a0 	.word	0x200011a0
 800b3b4:	e000ed20 	.word	0xe000ed20
 800b3b8:	2000000c 	.word	0x2000000c

0800b3bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
	__asm volatile
 800b3c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3c6:	f383 8811 	msr	BASEPRI, r3
 800b3ca:	f3bf 8f6f 	isb	sy
 800b3ce:	f3bf 8f4f 	dsb	sy
 800b3d2:	607b      	str	r3, [r7, #4]
}
 800b3d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3d6:	4b0f      	ldr	r3, [pc, #60]	@ (800b414 <vPortEnterCritical+0x58>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	4a0d      	ldr	r2, [pc, #52]	@ (800b414 <vPortEnterCritical+0x58>)
 800b3de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b414 <vPortEnterCritical+0x58>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d110      	bne.n	800b40a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3e8:	4b0b      	ldr	r3, [pc, #44]	@ (800b418 <vPortEnterCritical+0x5c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00b      	beq.n	800b40a <vPortEnterCritical+0x4e>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	603b      	str	r3, [r7, #0]
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop
 800b408:	e7fd      	b.n	800b406 <vPortEnterCritical+0x4a>
	}
}
 800b40a:	bf00      	nop
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	bc80      	pop	{r7}
 800b412:	4770      	bx	lr
 800b414:	2000000c 	.word	0x2000000c
 800b418:	e000ed04 	.word	0xe000ed04

0800b41c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b422:	4b12      	ldr	r3, [pc, #72]	@ (800b46c <vPortExitCritical+0x50>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10b      	bne.n	800b442 <vPortExitCritical+0x26>
	__asm volatile
 800b42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b42e:	f383 8811 	msr	BASEPRI, r3
 800b432:	f3bf 8f6f 	isb	sy
 800b436:	f3bf 8f4f 	dsb	sy
 800b43a:	607b      	str	r3, [r7, #4]
}
 800b43c:	bf00      	nop
 800b43e:	bf00      	nop
 800b440:	e7fd      	b.n	800b43e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b442:	4b0a      	ldr	r3, [pc, #40]	@ (800b46c <vPortExitCritical+0x50>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	3b01      	subs	r3, #1
 800b448:	4a08      	ldr	r2, [pc, #32]	@ (800b46c <vPortExitCritical+0x50>)
 800b44a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b44c:	4b07      	ldr	r3, [pc, #28]	@ (800b46c <vPortExitCritical+0x50>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d105      	bne.n	800b460 <vPortExitCritical+0x44>
 800b454:	2300      	movs	r3, #0
 800b456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	f383 8811 	msr	BASEPRI, r3
}
 800b45e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b460:	bf00      	nop
 800b462:	370c      	adds	r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	bc80      	pop	{r7}
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	2000000c 	.word	0x2000000c

0800b470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b470:	f3ef 8009 	mrs	r0, PSP
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	4b0d      	ldr	r3, [pc, #52]	@ (800b4b0 <pxCurrentTCBConst>)
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b480:	6010      	str	r0, [r2, #0]
 800b482:	e92d 4008 	stmdb	sp!, {r3, lr}
 800b486:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b48a:	f380 8811 	msr	BASEPRI, r0
 800b48e:	f7fe fee3 	bl	800a258 <vTaskSwitchContext>
 800b492:	f04f 0000 	mov.w	r0, #0
 800b496:	f380 8811 	msr	BASEPRI, r0
 800b49a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b49e:	6819      	ldr	r1, [r3, #0]
 800b4a0:	6808      	ldr	r0, [r1, #0]
 800b4a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800b4a6:	f380 8809 	msr	PSP, r0
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	4770      	bx	lr

0800b4b0 <pxCurrentTCBConst>:
 800b4b0:	20000b70 	.word	0x20000b70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop

0800b4b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	607b      	str	r3, [r7, #4]
}
 800b4d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4d2:	f7fe fe07 	bl	800a0e4 <xTaskIncrementTick>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4dc:	4b06      	ldr	r3, [pc, #24]	@ (800b4f8 <xPortSysTickHandler+0x40>)
 800b4de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	f383 8811 	msr	BASEPRI, r3
}
 800b4ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	e000ed04 	.word	0xe000ed04

0800b4fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b500:	4b0a      	ldr	r3, [pc, #40]	@ (800b52c <vPortSetupTimerInterrupt+0x30>)
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b506:	4b0a      	ldr	r3, [pc, #40]	@ (800b530 <vPortSetupTimerInterrupt+0x34>)
 800b508:	2200      	movs	r2, #0
 800b50a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b50c:	4b09      	ldr	r3, [pc, #36]	@ (800b534 <vPortSetupTimerInterrupt+0x38>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a09      	ldr	r2, [pc, #36]	@ (800b538 <vPortSetupTimerInterrupt+0x3c>)
 800b512:	fba2 2303 	umull	r2, r3, r2, r3
 800b516:	099b      	lsrs	r3, r3, #6
 800b518:	4a08      	ldr	r2, [pc, #32]	@ (800b53c <vPortSetupTimerInterrupt+0x40>)
 800b51a:	3b01      	subs	r3, #1
 800b51c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b51e:	4b03      	ldr	r3, [pc, #12]	@ (800b52c <vPortSetupTimerInterrupt+0x30>)
 800b520:	2207      	movs	r2, #7
 800b522:	601a      	str	r2, [r3, #0]
}
 800b524:	bf00      	nop
 800b526:	46bd      	mov	sp, r7
 800b528:	bc80      	pop	{r7}
 800b52a:	4770      	bx	lr
 800b52c:	e000e010 	.word	0xe000e010
 800b530:	e000e018 	.word	0xe000e018
 800b534:	20000000 	.word	0x20000000
 800b538:	10624dd3 	.word	0x10624dd3
 800b53c:	e000e014 	.word	0xe000e014

0800b540 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b546:	f3ef 8305 	mrs	r3, IPSR
 800b54a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2b0f      	cmp	r3, #15
 800b550:	d915      	bls.n	800b57e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b552:	4a17      	ldr	r2, [pc, #92]	@ (800b5b0 <vPortValidateInterruptPriority+0x70>)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	4413      	add	r3, r2
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b55c:	4b15      	ldr	r3, [pc, #84]	@ (800b5b4 <vPortValidateInterruptPriority+0x74>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	7afa      	ldrb	r2, [r7, #11]
 800b562:	429a      	cmp	r2, r3
 800b564:	d20b      	bcs.n	800b57e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b56a:	f383 8811 	msr	BASEPRI, r3
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f3bf 8f4f 	dsb	sy
 800b576:	607b      	str	r3, [r7, #4]
}
 800b578:	bf00      	nop
 800b57a:	bf00      	nop
 800b57c:	e7fd      	b.n	800b57a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b57e:	4b0e      	ldr	r3, [pc, #56]	@ (800b5b8 <vPortValidateInterruptPriority+0x78>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b586:	4b0d      	ldr	r3, [pc, #52]	@ (800b5bc <vPortValidateInterruptPriority+0x7c>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d90b      	bls.n	800b5a6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b592:	f383 8811 	msr	BASEPRI, r3
 800b596:	f3bf 8f6f 	isb	sy
 800b59a:	f3bf 8f4f 	dsb	sy
 800b59e:	603b      	str	r3, [r7, #0]
}
 800b5a0:	bf00      	nop
 800b5a2:	bf00      	nop
 800b5a4:	e7fd      	b.n	800b5a2 <vPortValidateInterruptPriority+0x62>
	}
 800b5a6:	bf00      	nop
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bc80      	pop	{r7}
 800b5ae:	4770      	bx	lr
 800b5b0:	e000e3f0 	.word	0xe000e3f0
 800b5b4:	2000119c 	.word	0x2000119c
 800b5b8:	e000ed0c 	.word	0xe000ed0c
 800b5bc:	200011a0 	.word	0x200011a0

0800b5c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b08a      	sub	sp, #40	@ 0x28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5cc:	f7fe fcd0 	bl	8009f70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5d0:	4b5c      	ldr	r3, [pc, #368]	@ (800b744 <pvPortMalloc+0x184>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d101      	bne.n	800b5dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5d8:	f000 f924 	bl	800b824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5dc:	4b5a      	ldr	r3, [pc, #360]	@ (800b748 <pvPortMalloc+0x188>)
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f040 8095 	bne.w	800b714 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d01e      	beq.n	800b62e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b5f0:	2208      	movs	r2, #8
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f003 0307 	and.w	r3, r3, #7
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d015      	beq.n	800b62e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f023 0307 	bic.w	r3, r3, #7
 800b608:	3308      	adds	r3, #8
 800b60a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f003 0307 	and.w	r3, r3, #7
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00b      	beq.n	800b62e <pvPortMalloc+0x6e>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	617b      	str	r3, [r7, #20]
}
 800b628:	bf00      	nop
 800b62a:	bf00      	nop
 800b62c:	e7fd      	b.n	800b62a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d06f      	beq.n	800b714 <pvPortMalloc+0x154>
 800b634:	4b45      	ldr	r3, [pc, #276]	@ (800b74c <pvPortMalloc+0x18c>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d86a      	bhi.n	800b714 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b63e:	4b44      	ldr	r3, [pc, #272]	@ (800b750 <pvPortMalloc+0x190>)
 800b640:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b642:	4b43      	ldr	r3, [pc, #268]	@ (800b750 <pvPortMalloc+0x190>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b648:	e004      	b.n	800b654 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b64e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d903      	bls.n	800b666 <pvPortMalloc+0xa6>
 800b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1f1      	bne.n	800b64a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b666:	4b37      	ldr	r3, [pc, #220]	@ (800b744 <pvPortMalloc+0x184>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d051      	beq.n	800b714 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2208      	movs	r2, #8
 800b676:	4413      	add	r3, r2
 800b678:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	6a3b      	ldr	r3, [r7, #32]
 800b680:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	1ad2      	subs	r2, r2, r3
 800b68a:	2308      	movs	r3, #8
 800b68c:	005b      	lsls	r3, r3, #1
 800b68e:	429a      	cmp	r2, r3
 800b690:	d920      	bls.n	800b6d4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4413      	add	r3, r2
 800b698:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	f003 0307 	and.w	r3, r3, #7
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d00b      	beq.n	800b6bc <pvPortMalloc+0xfc>
	__asm volatile
 800b6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	613b      	str	r3, [r7, #16]
}
 800b6b6:	bf00      	nop
 800b6b8:	bf00      	nop
 800b6ba:	e7fd      	b.n	800b6b8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6be:	685a      	ldr	r2, [r3, #4]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	1ad2      	subs	r2, r2, r3
 800b6c4:	69bb      	ldr	r3, [r7, #24]
 800b6c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6ce:	69b8      	ldr	r0, [r7, #24]
 800b6d0:	f000 f90a 	bl	800b8e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6d4:	4b1d      	ldr	r3, [pc, #116]	@ (800b74c <pvPortMalloc+0x18c>)
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	1ad3      	subs	r3, r2, r3
 800b6de:	4a1b      	ldr	r2, [pc, #108]	@ (800b74c <pvPortMalloc+0x18c>)
 800b6e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6e2:	4b1a      	ldr	r3, [pc, #104]	@ (800b74c <pvPortMalloc+0x18c>)
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	4b1b      	ldr	r3, [pc, #108]	@ (800b754 <pvPortMalloc+0x194>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d203      	bcs.n	800b6f6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6ee:	4b17      	ldr	r3, [pc, #92]	@ (800b74c <pvPortMalloc+0x18c>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a18      	ldr	r2, [pc, #96]	@ (800b754 <pvPortMalloc+0x194>)
 800b6f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f8:	685a      	ldr	r2, [r3, #4]
 800b6fa:	4b13      	ldr	r3, [pc, #76]	@ (800b748 <pvPortMalloc+0x188>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	431a      	orrs	r2, r3
 800b700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b702:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b706:	2200      	movs	r2, #0
 800b708:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b70a:	4b13      	ldr	r3, [pc, #76]	@ (800b758 <pvPortMalloc+0x198>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	3301      	adds	r3, #1
 800b710:	4a11      	ldr	r2, [pc, #68]	@ (800b758 <pvPortMalloc+0x198>)
 800b712:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b714:	f7fe fc3a 	bl	8009f8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	f003 0307 	and.w	r3, r3, #7
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00b      	beq.n	800b73a <pvPortMalloc+0x17a>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b726:	f383 8811 	msr	BASEPRI, r3
 800b72a:	f3bf 8f6f 	isb	sy
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	60fb      	str	r3, [r7, #12]
}
 800b734:	bf00      	nop
 800b736:	bf00      	nop
 800b738:	e7fd      	b.n	800b736 <pvPortMalloc+0x176>
	return pvReturn;
 800b73a:	69fb      	ldr	r3, [r7, #28]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3728      	adds	r7, #40	@ 0x28
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	20001dac 	.word	0x20001dac
 800b748:	20001dc0 	.word	0x20001dc0
 800b74c:	20001db0 	.word	0x20001db0
 800b750:	20001da4 	.word	0x20001da4
 800b754:	20001db4 	.word	0x20001db4
 800b758:	20001db8 	.word	0x20001db8

0800b75c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d04f      	beq.n	800b80e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b76e:	2308      	movs	r3, #8
 800b770:	425b      	negs	r3, r3
 800b772:	697a      	ldr	r2, [r7, #20]
 800b774:	4413      	add	r3, r2
 800b776:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	4b25      	ldr	r3, [pc, #148]	@ (800b818 <vPortFree+0xbc>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4013      	ands	r3, r2
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10b      	bne.n	800b7a2 <vPortFree+0x46>
	__asm volatile
 800b78a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	60fb      	str	r3, [r7, #12]
}
 800b79c:	bf00      	nop
 800b79e:	bf00      	nop
 800b7a0:	e7fd      	b.n	800b79e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00b      	beq.n	800b7c2 <vPortFree+0x66>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	60bb      	str	r3, [r7, #8]
}
 800b7bc:	bf00      	nop
 800b7be:	bf00      	nop
 800b7c0:	e7fd      	b.n	800b7be <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	685a      	ldr	r2, [r3, #4]
 800b7c6:	4b14      	ldr	r3, [pc, #80]	@ (800b818 <vPortFree+0xbc>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d01e      	beq.n	800b80e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d11a      	bne.n	800b80e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	685a      	ldr	r2, [r3, #4]
 800b7dc:	4b0e      	ldr	r3, [pc, #56]	@ (800b818 <vPortFree+0xbc>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	43db      	mvns	r3, r3
 800b7e2:	401a      	ands	r2, r3
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7e8:	f7fe fbc2 	bl	8009f70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	685a      	ldr	r2, [r3, #4]
 800b7f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b81c <vPortFree+0xc0>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	4a09      	ldr	r2, [pc, #36]	@ (800b81c <vPortFree+0xc0>)
 800b7f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7fa:	6938      	ldr	r0, [r7, #16]
 800b7fc:	f000 f874 	bl	800b8e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b800:	4b07      	ldr	r3, [pc, #28]	@ (800b820 <vPortFree+0xc4>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	3301      	adds	r3, #1
 800b806:	4a06      	ldr	r2, [pc, #24]	@ (800b820 <vPortFree+0xc4>)
 800b808:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b80a:	f7fe fbbf 	bl	8009f8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b80e:	bf00      	nop
 800b810:	3718      	adds	r7, #24
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	20001dc0 	.word	0x20001dc0
 800b81c:	20001db0 	.word	0x20001db0
 800b820:	20001dbc 	.word	0x20001dbc

0800b824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b82a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800b82e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b830:	4b27      	ldr	r3, [pc, #156]	@ (800b8d0 <prvHeapInit+0xac>)
 800b832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f003 0307 	and.w	r3, r3, #7
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00c      	beq.n	800b858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	3307      	adds	r3, #7
 800b842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f023 0307 	bic.w	r3, r3, #7
 800b84a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	1ad3      	subs	r3, r2, r3
 800b852:	4a1f      	ldr	r2, [pc, #124]	@ (800b8d0 <prvHeapInit+0xac>)
 800b854:	4413      	add	r3, r2
 800b856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b85c:	4a1d      	ldr	r2, [pc, #116]	@ (800b8d4 <prvHeapInit+0xb0>)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b862:	4b1c      	ldr	r3, [pc, #112]	@ (800b8d4 <prvHeapInit+0xb0>)
 800b864:	2200      	movs	r2, #0
 800b866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	4413      	add	r3, r2
 800b86e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b870:	2208      	movs	r2, #8
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	1a9b      	subs	r3, r3, r2
 800b876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f023 0307 	bic.w	r3, r3, #7
 800b87e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	4a15      	ldr	r2, [pc, #84]	@ (800b8d8 <prvHeapInit+0xb4>)
 800b884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b886:	4b14      	ldr	r3, [pc, #80]	@ (800b8d8 <prvHeapInit+0xb4>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2200      	movs	r2, #0
 800b88c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b88e:	4b12      	ldr	r3, [pc, #72]	@ (800b8d8 <prvHeapInit+0xb4>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2200      	movs	r2, #0
 800b894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	1ad2      	subs	r2, r2, r3
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b8d8 <prvHeapInit+0xb4>)
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	4a0a      	ldr	r2, [pc, #40]	@ (800b8dc <prvHeapInit+0xb8>)
 800b8b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	4a09      	ldr	r2, [pc, #36]	@ (800b8e0 <prvHeapInit+0xbc>)
 800b8ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8bc:	4b09      	ldr	r3, [pc, #36]	@ (800b8e4 <prvHeapInit+0xc0>)
 800b8be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b8c2:	601a      	str	r2, [r3, #0]
}
 800b8c4:	bf00      	nop
 800b8c6:	3714      	adds	r7, #20
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bc80      	pop	{r7}
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	200011a4 	.word	0x200011a4
 800b8d4:	20001da4 	.word	0x20001da4
 800b8d8:	20001dac 	.word	0x20001dac
 800b8dc:	20001db4 	.word	0x20001db4
 800b8e0:	20001db0 	.word	0x20001db0
 800b8e4:	20001dc0 	.word	0x20001dc0

0800b8e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b8f0:	4b27      	ldr	r3, [pc, #156]	@ (800b990 <prvInsertBlockIntoFreeList+0xa8>)
 800b8f2:	60fb      	str	r3, [r7, #12]
 800b8f4:	e002      	b.n	800b8fc <prvInsertBlockIntoFreeList+0x14>
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	60fb      	str	r3, [r7, #12]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	429a      	cmp	r2, r3
 800b904:	d8f7      	bhi.n	800b8f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	4413      	add	r3, r2
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	429a      	cmp	r2, r3
 800b916:	d108      	bne.n	800b92a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	441a      	add	r2, r3
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	68ba      	ldr	r2, [r7, #8]
 800b934:	441a      	add	r2, r3
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d118      	bne.n	800b970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	4b14      	ldr	r3, [pc, #80]	@ (800b994 <prvInsertBlockIntoFreeList+0xac>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	429a      	cmp	r2, r3
 800b948:	d00d      	beq.n	800b966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685a      	ldr	r2, [r3, #4]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	685b      	ldr	r3, [r3, #4]
 800b954:	441a      	add	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	e008      	b.n	800b978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b966:	4b0b      	ldr	r3, [pc, #44]	@ (800b994 <prvInsertBlockIntoFreeList+0xac>)
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	601a      	str	r2, [r3, #0]
 800b96e:	e003      	b.n	800b978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d002      	beq.n	800b986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b986:	bf00      	nop
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bc80      	pop	{r7}
 800b98e:	4770      	bx	lr
 800b990:	20001da4 	.word	0x20001da4
 800b994:	20001dac 	.word	0x20001dac

0800b998 <malloc>:
 800b998:	4b02      	ldr	r3, [pc, #8]	@ (800b9a4 <malloc+0xc>)
 800b99a:	4601      	mov	r1, r0
 800b99c:	6818      	ldr	r0, [r3, #0]
 800b99e:	f000 b82d 	b.w	800b9fc <_malloc_r>
 800b9a2:	bf00      	nop
 800b9a4:	2000001c 	.word	0x2000001c

0800b9a8 <free>:
 800b9a8:	4b02      	ldr	r3, [pc, #8]	@ (800b9b4 <free+0xc>)
 800b9aa:	4601      	mov	r1, r0
 800b9ac:	6818      	ldr	r0, [r3, #0]
 800b9ae:	f000 bbb1 	b.w	800c114 <_free_r>
 800b9b2:	bf00      	nop
 800b9b4:	2000001c 	.word	0x2000001c

0800b9b8 <sbrk_aligned>:
 800b9b8:	b570      	push	{r4, r5, r6, lr}
 800b9ba:	4e0f      	ldr	r6, [pc, #60]	@ (800b9f8 <sbrk_aligned+0x40>)
 800b9bc:	460c      	mov	r4, r1
 800b9be:	6831      	ldr	r1, [r6, #0]
 800b9c0:	4605      	mov	r5, r0
 800b9c2:	b911      	cbnz	r1, 800b9ca <sbrk_aligned+0x12>
 800b9c4:	f000 fb48 	bl	800c058 <_sbrk_r>
 800b9c8:	6030      	str	r0, [r6, #0]
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	f000 fb43 	bl	800c058 <_sbrk_r>
 800b9d2:	1c43      	adds	r3, r0, #1
 800b9d4:	d103      	bne.n	800b9de <sbrk_aligned+0x26>
 800b9d6:	f04f 34ff 	mov.w	r4, #4294967295
 800b9da:	4620      	mov	r0, r4
 800b9dc:	bd70      	pop	{r4, r5, r6, pc}
 800b9de:	1cc4      	adds	r4, r0, #3
 800b9e0:	f024 0403 	bic.w	r4, r4, #3
 800b9e4:	42a0      	cmp	r0, r4
 800b9e6:	d0f8      	beq.n	800b9da <sbrk_aligned+0x22>
 800b9e8:	1a21      	subs	r1, r4, r0
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	f000 fb34 	bl	800c058 <_sbrk_r>
 800b9f0:	3001      	adds	r0, #1
 800b9f2:	d1f2      	bne.n	800b9da <sbrk_aligned+0x22>
 800b9f4:	e7ef      	b.n	800b9d6 <sbrk_aligned+0x1e>
 800b9f6:	bf00      	nop
 800b9f8:	20001dc4 	.word	0x20001dc4

0800b9fc <_malloc_r>:
 800b9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba00:	1ccd      	adds	r5, r1, #3
 800ba02:	f025 0503 	bic.w	r5, r5, #3
 800ba06:	3508      	adds	r5, #8
 800ba08:	2d0c      	cmp	r5, #12
 800ba0a:	bf38      	it	cc
 800ba0c:	250c      	movcc	r5, #12
 800ba0e:	2d00      	cmp	r5, #0
 800ba10:	4606      	mov	r6, r0
 800ba12:	db01      	blt.n	800ba18 <_malloc_r+0x1c>
 800ba14:	42a9      	cmp	r1, r5
 800ba16:	d904      	bls.n	800ba22 <_malloc_r+0x26>
 800ba18:	230c      	movs	r3, #12
 800ba1a:	6033      	str	r3, [r6, #0]
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800baf8 <_malloc_r+0xfc>
 800ba26:	f000 f869 	bl	800bafc <__malloc_lock>
 800ba2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba2e:	461c      	mov	r4, r3
 800ba30:	bb44      	cbnz	r4, 800ba84 <_malloc_r+0x88>
 800ba32:	4629      	mov	r1, r5
 800ba34:	4630      	mov	r0, r6
 800ba36:	f7ff ffbf 	bl	800b9b8 <sbrk_aligned>
 800ba3a:	1c43      	adds	r3, r0, #1
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	d158      	bne.n	800baf2 <_malloc_r+0xf6>
 800ba40:	f8d8 4000 	ldr.w	r4, [r8]
 800ba44:	4627      	mov	r7, r4
 800ba46:	2f00      	cmp	r7, #0
 800ba48:	d143      	bne.n	800bad2 <_malloc_r+0xd6>
 800ba4a:	2c00      	cmp	r4, #0
 800ba4c:	d04b      	beq.n	800bae6 <_malloc_r+0xea>
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	4639      	mov	r1, r7
 800ba52:	4630      	mov	r0, r6
 800ba54:	eb04 0903 	add.w	r9, r4, r3
 800ba58:	f000 fafe 	bl	800c058 <_sbrk_r>
 800ba5c:	4581      	cmp	r9, r0
 800ba5e:	d142      	bne.n	800bae6 <_malloc_r+0xea>
 800ba60:	6821      	ldr	r1, [r4, #0]
 800ba62:	4630      	mov	r0, r6
 800ba64:	1a6d      	subs	r5, r5, r1
 800ba66:	4629      	mov	r1, r5
 800ba68:	f7ff ffa6 	bl	800b9b8 <sbrk_aligned>
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	d03a      	beq.n	800bae6 <_malloc_r+0xea>
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	442b      	add	r3, r5
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	f8d8 3000 	ldr.w	r3, [r8]
 800ba7a:	685a      	ldr	r2, [r3, #4]
 800ba7c:	bb62      	cbnz	r2, 800bad8 <_malloc_r+0xdc>
 800ba7e:	f8c8 7000 	str.w	r7, [r8]
 800ba82:	e00f      	b.n	800baa4 <_malloc_r+0xa8>
 800ba84:	6822      	ldr	r2, [r4, #0]
 800ba86:	1b52      	subs	r2, r2, r5
 800ba88:	d420      	bmi.n	800bacc <_malloc_r+0xd0>
 800ba8a:	2a0b      	cmp	r2, #11
 800ba8c:	d917      	bls.n	800babe <_malloc_r+0xc2>
 800ba8e:	1961      	adds	r1, r4, r5
 800ba90:	42a3      	cmp	r3, r4
 800ba92:	6025      	str	r5, [r4, #0]
 800ba94:	bf18      	it	ne
 800ba96:	6059      	strne	r1, [r3, #4]
 800ba98:	6863      	ldr	r3, [r4, #4]
 800ba9a:	bf08      	it	eq
 800ba9c:	f8c8 1000 	streq.w	r1, [r8]
 800baa0:	5162      	str	r2, [r4, r5]
 800baa2:	604b      	str	r3, [r1, #4]
 800baa4:	4630      	mov	r0, r6
 800baa6:	f000 f82f 	bl	800bb08 <__malloc_unlock>
 800baaa:	f104 000b 	add.w	r0, r4, #11
 800baae:	1d23      	adds	r3, r4, #4
 800bab0:	f020 0007 	bic.w	r0, r0, #7
 800bab4:	1ac2      	subs	r2, r0, r3
 800bab6:	bf1c      	itt	ne
 800bab8:	1a1b      	subne	r3, r3, r0
 800baba:	50a3      	strne	r3, [r4, r2]
 800babc:	e7af      	b.n	800ba1e <_malloc_r+0x22>
 800babe:	6862      	ldr	r2, [r4, #4]
 800bac0:	42a3      	cmp	r3, r4
 800bac2:	bf0c      	ite	eq
 800bac4:	f8c8 2000 	streq.w	r2, [r8]
 800bac8:	605a      	strne	r2, [r3, #4]
 800baca:	e7eb      	b.n	800baa4 <_malloc_r+0xa8>
 800bacc:	4623      	mov	r3, r4
 800bace:	6864      	ldr	r4, [r4, #4]
 800bad0:	e7ae      	b.n	800ba30 <_malloc_r+0x34>
 800bad2:	463c      	mov	r4, r7
 800bad4:	687f      	ldr	r7, [r7, #4]
 800bad6:	e7b6      	b.n	800ba46 <_malloc_r+0x4a>
 800bad8:	461a      	mov	r2, r3
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	42a3      	cmp	r3, r4
 800bade:	d1fb      	bne.n	800bad8 <_malloc_r+0xdc>
 800bae0:	2300      	movs	r3, #0
 800bae2:	6053      	str	r3, [r2, #4]
 800bae4:	e7de      	b.n	800baa4 <_malloc_r+0xa8>
 800bae6:	230c      	movs	r3, #12
 800bae8:	4630      	mov	r0, r6
 800baea:	6033      	str	r3, [r6, #0]
 800baec:	f000 f80c 	bl	800bb08 <__malloc_unlock>
 800baf0:	e794      	b.n	800ba1c <_malloc_r+0x20>
 800baf2:	6005      	str	r5, [r0, #0]
 800baf4:	e7d6      	b.n	800baa4 <_malloc_r+0xa8>
 800baf6:	bf00      	nop
 800baf8:	20001dc8 	.word	0x20001dc8

0800bafc <__malloc_lock>:
 800bafc:	4801      	ldr	r0, [pc, #4]	@ (800bb04 <__malloc_lock+0x8>)
 800bafe:	f000 baf8 	b.w	800c0f2 <__retarget_lock_acquire_recursive>
 800bb02:	bf00      	nop
 800bb04:	20001f0c 	.word	0x20001f0c

0800bb08 <__malloc_unlock>:
 800bb08:	4801      	ldr	r0, [pc, #4]	@ (800bb10 <__malloc_unlock+0x8>)
 800bb0a:	f000 baf3 	b.w	800c0f4 <__retarget_lock_release_recursive>
 800bb0e:	bf00      	nop
 800bb10:	20001f0c 	.word	0x20001f0c

0800bb14 <std>:
 800bb14:	2300      	movs	r3, #0
 800bb16:	b510      	push	{r4, lr}
 800bb18:	4604      	mov	r4, r0
 800bb1a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb22:	6083      	str	r3, [r0, #8]
 800bb24:	8181      	strh	r1, [r0, #12]
 800bb26:	6643      	str	r3, [r0, #100]	@ 0x64
 800bb28:	81c2      	strh	r2, [r0, #14]
 800bb2a:	6183      	str	r3, [r0, #24]
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	2208      	movs	r2, #8
 800bb30:	305c      	adds	r0, #92	@ 0x5c
 800bb32:	f000 f9f7 	bl	800bf24 <memset>
 800bb36:	4b0d      	ldr	r3, [pc, #52]	@ (800bb6c <std+0x58>)
 800bb38:	6224      	str	r4, [r4, #32]
 800bb3a:	6263      	str	r3, [r4, #36]	@ 0x24
 800bb3c:	4b0c      	ldr	r3, [pc, #48]	@ (800bb70 <std+0x5c>)
 800bb3e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bb40:	4b0c      	ldr	r3, [pc, #48]	@ (800bb74 <std+0x60>)
 800bb42:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bb44:	4b0c      	ldr	r3, [pc, #48]	@ (800bb78 <std+0x64>)
 800bb46:	6323      	str	r3, [r4, #48]	@ 0x30
 800bb48:	4b0c      	ldr	r3, [pc, #48]	@ (800bb7c <std+0x68>)
 800bb4a:	429c      	cmp	r4, r3
 800bb4c:	d006      	beq.n	800bb5c <std+0x48>
 800bb4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bb52:	4294      	cmp	r4, r2
 800bb54:	d002      	beq.n	800bb5c <std+0x48>
 800bb56:	33d0      	adds	r3, #208	@ 0xd0
 800bb58:	429c      	cmp	r4, r3
 800bb5a:	d105      	bne.n	800bb68 <std+0x54>
 800bb5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb64:	f000 bac4 	b.w	800c0f0 <__retarget_lock_init_recursive>
 800bb68:	bd10      	pop	{r4, pc}
 800bb6a:	bf00      	nop
 800bb6c:	0800bd55 	.word	0x0800bd55
 800bb70:	0800bd77 	.word	0x0800bd77
 800bb74:	0800bdaf 	.word	0x0800bdaf
 800bb78:	0800bdd3 	.word	0x0800bdd3
 800bb7c:	20001dcc 	.word	0x20001dcc

0800bb80 <stdio_exit_handler>:
 800bb80:	4a02      	ldr	r2, [pc, #8]	@ (800bb8c <stdio_exit_handler+0xc>)
 800bb82:	4903      	ldr	r1, [pc, #12]	@ (800bb90 <stdio_exit_handler+0x10>)
 800bb84:	4803      	ldr	r0, [pc, #12]	@ (800bb94 <stdio_exit_handler+0x14>)
 800bb86:	f000 b869 	b.w	800bc5c <_fwalk_sglue>
 800bb8a:	bf00      	nop
 800bb8c:	20000010 	.word	0x20000010
 800bb90:	0800c2a5 	.word	0x0800c2a5
 800bb94:	20000020 	.word	0x20000020

0800bb98 <cleanup_stdio>:
 800bb98:	6841      	ldr	r1, [r0, #4]
 800bb9a:	4b0c      	ldr	r3, [pc, #48]	@ (800bbcc <cleanup_stdio+0x34>)
 800bb9c:	b510      	push	{r4, lr}
 800bb9e:	4299      	cmp	r1, r3
 800bba0:	4604      	mov	r4, r0
 800bba2:	d001      	beq.n	800bba8 <cleanup_stdio+0x10>
 800bba4:	f000 fb7e 	bl	800c2a4 <_fflush_r>
 800bba8:	68a1      	ldr	r1, [r4, #8]
 800bbaa:	4b09      	ldr	r3, [pc, #36]	@ (800bbd0 <cleanup_stdio+0x38>)
 800bbac:	4299      	cmp	r1, r3
 800bbae:	d002      	beq.n	800bbb6 <cleanup_stdio+0x1e>
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f000 fb77 	bl	800c2a4 <_fflush_r>
 800bbb6:	68e1      	ldr	r1, [r4, #12]
 800bbb8:	4b06      	ldr	r3, [pc, #24]	@ (800bbd4 <cleanup_stdio+0x3c>)
 800bbba:	4299      	cmp	r1, r3
 800bbbc:	d004      	beq.n	800bbc8 <cleanup_stdio+0x30>
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbc4:	f000 bb6e 	b.w	800c2a4 <_fflush_r>
 800bbc8:	bd10      	pop	{r4, pc}
 800bbca:	bf00      	nop
 800bbcc:	20001dcc 	.word	0x20001dcc
 800bbd0:	20001e34 	.word	0x20001e34
 800bbd4:	20001e9c 	.word	0x20001e9c

0800bbd8 <global_stdio_init.part.0>:
 800bbd8:	b510      	push	{r4, lr}
 800bbda:	4b0b      	ldr	r3, [pc, #44]	@ (800bc08 <global_stdio_init.part.0+0x30>)
 800bbdc:	4c0b      	ldr	r4, [pc, #44]	@ (800bc0c <global_stdio_init.part.0+0x34>)
 800bbde:	4a0c      	ldr	r2, [pc, #48]	@ (800bc10 <global_stdio_init.part.0+0x38>)
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	2104      	movs	r1, #4
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	f7ff ff94 	bl	800bb14 <std>
 800bbec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	2109      	movs	r1, #9
 800bbf4:	f7ff ff8e 	bl	800bb14 <std>
 800bbf8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bbfc:	2202      	movs	r2, #2
 800bbfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc02:	2112      	movs	r1, #18
 800bc04:	f7ff bf86 	b.w	800bb14 <std>
 800bc08:	20001f04 	.word	0x20001f04
 800bc0c:	20001dcc 	.word	0x20001dcc
 800bc10:	0800bb81 	.word	0x0800bb81

0800bc14 <__sfp_lock_acquire>:
 800bc14:	4801      	ldr	r0, [pc, #4]	@ (800bc1c <__sfp_lock_acquire+0x8>)
 800bc16:	f000 ba6c 	b.w	800c0f2 <__retarget_lock_acquire_recursive>
 800bc1a:	bf00      	nop
 800bc1c:	20001f0d 	.word	0x20001f0d

0800bc20 <__sfp_lock_release>:
 800bc20:	4801      	ldr	r0, [pc, #4]	@ (800bc28 <__sfp_lock_release+0x8>)
 800bc22:	f000 ba67 	b.w	800c0f4 <__retarget_lock_release_recursive>
 800bc26:	bf00      	nop
 800bc28:	20001f0d 	.word	0x20001f0d

0800bc2c <__sinit>:
 800bc2c:	b510      	push	{r4, lr}
 800bc2e:	4604      	mov	r4, r0
 800bc30:	f7ff fff0 	bl	800bc14 <__sfp_lock_acquire>
 800bc34:	6a23      	ldr	r3, [r4, #32]
 800bc36:	b11b      	cbz	r3, 800bc40 <__sinit+0x14>
 800bc38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc3c:	f7ff bff0 	b.w	800bc20 <__sfp_lock_release>
 800bc40:	4b04      	ldr	r3, [pc, #16]	@ (800bc54 <__sinit+0x28>)
 800bc42:	6223      	str	r3, [r4, #32]
 800bc44:	4b04      	ldr	r3, [pc, #16]	@ (800bc58 <__sinit+0x2c>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1f5      	bne.n	800bc38 <__sinit+0xc>
 800bc4c:	f7ff ffc4 	bl	800bbd8 <global_stdio_init.part.0>
 800bc50:	e7f2      	b.n	800bc38 <__sinit+0xc>
 800bc52:	bf00      	nop
 800bc54:	0800bb99 	.word	0x0800bb99
 800bc58:	20001f04 	.word	0x20001f04

0800bc5c <_fwalk_sglue>:
 800bc5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc60:	4607      	mov	r7, r0
 800bc62:	4688      	mov	r8, r1
 800bc64:	4614      	mov	r4, r2
 800bc66:	2600      	movs	r6, #0
 800bc68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc6c:	f1b9 0901 	subs.w	r9, r9, #1
 800bc70:	d505      	bpl.n	800bc7e <_fwalk_sglue+0x22>
 800bc72:	6824      	ldr	r4, [r4, #0]
 800bc74:	2c00      	cmp	r4, #0
 800bc76:	d1f7      	bne.n	800bc68 <_fwalk_sglue+0xc>
 800bc78:	4630      	mov	r0, r6
 800bc7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc7e:	89ab      	ldrh	r3, [r5, #12]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d907      	bls.n	800bc94 <_fwalk_sglue+0x38>
 800bc84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc88:	3301      	adds	r3, #1
 800bc8a:	d003      	beq.n	800bc94 <_fwalk_sglue+0x38>
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	4638      	mov	r0, r7
 800bc90:	47c0      	blx	r8
 800bc92:	4306      	orrs	r6, r0
 800bc94:	3568      	adds	r5, #104	@ 0x68
 800bc96:	e7e9      	b.n	800bc6c <_fwalk_sglue+0x10>

0800bc98 <_puts_r>:
 800bc98:	6a03      	ldr	r3, [r0, #32]
 800bc9a:	b570      	push	{r4, r5, r6, lr}
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	460e      	mov	r6, r1
 800bca0:	6884      	ldr	r4, [r0, #8]
 800bca2:	b90b      	cbnz	r3, 800bca8 <_puts_r+0x10>
 800bca4:	f7ff ffc2 	bl	800bc2c <__sinit>
 800bca8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bcaa:	07db      	lsls	r3, r3, #31
 800bcac:	d405      	bmi.n	800bcba <_puts_r+0x22>
 800bcae:	89a3      	ldrh	r3, [r4, #12]
 800bcb0:	0598      	lsls	r0, r3, #22
 800bcb2:	d402      	bmi.n	800bcba <_puts_r+0x22>
 800bcb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcb6:	f000 fa1c 	bl	800c0f2 <__retarget_lock_acquire_recursive>
 800bcba:	89a3      	ldrh	r3, [r4, #12]
 800bcbc:	0719      	lsls	r1, r3, #28
 800bcbe:	d502      	bpl.n	800bcc6 <_puts_r+0x2e>
 800bcc0:	6923      	ldr	r3, [r4, #16]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d135      	bne.n	800bd32 <_puts_r+0x9a>
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	4628      	mov	r0, r5
 800bcca:	f000 f8c5 	bl	800be58 <__swsetup_r>
 800bcce:	b380      	cbz	r0, 800bd32 <_puts_r+0x9a>
 800bcd0:	f04f 35ff 	mov.w	r5, #4294967295
 800bcd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bcd6:	07da      	lsls	r2, r3, #31
 800bcd8:	d405      	bmi.n	800bce6 <_puts_r+0x4e>
 800bcda:	89a3      	ldrh	r3, [r4, #12]
 800bcdc:	059b      	lsls	r3, r3, #22
 800bcde:	d402      	bmi.n	800bce6 <_puts_r+0x4e>
 800bce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bce2:	f000 fa07 	bl	800c0f4 <__retarget_lock_release_recursive>
 800bce6:	4628      	mov	r0, r5
 800bce8:	bd70      	pop	{r4, r5, r6, pc}
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	da04      	bge.n	800bcf8 <_puts_r+0x60>
 800bcee:	69a2      	ldr	r2, [r4, #24]
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	dc17      	bgt.n	800bd24 <_puts_r+0x8c>
 800bcf4:	290a      	cmp	r1, #10
 800bcf6:	d015      	beq.n	800bd24 <_puts_r+0x8c>
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	1c5a      	adds	r2, r3, #1
 800bcfc:	6022      	str	r2, [r4, #0]
 800bcfe:	7019      	strb	r1, [r3, #0]
 800bd00:	68a3      	ldr	r3, [r4, #8]
 800bd02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd06:	3b01      	subs	r3, #1
 800bd08:	60a3      	str	r3, [r4, #8]
 800bd0a:	2900      	cmp	r1, #0
 800bd0c:	d1ed      	bne.n	800bcea <_puts_r+0x52>
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	da11      	bge.n	800bd36 <_puts_r+0x9e>
 800bd12:	4622      	mov	r2, r4
 800bd14:	210a      	movs	r1, #10
 800bd16:	4628      	mov	r0, r5
 800bd18:	f000 f85f 	bl	800bdda <__swbuf_r>
 800bd1c:	3001      	adds	r0, #1
 800bd1e:	d0d7      	beq.n	800bcd0 <_puts_r+0x38>
 800bd20:	250a      	movs	r5, #10
 800bd22:	e7d7      	b.n	800bcd4 <_puts_r+0x3c>
 800bd24:	4622      	mov	r2, r4
 800bd26:	4628      	mov	r0, r5
 800bd28:	f000 f857 	bl	800bdda <__swbuf_r>
 800bd2c:	3001      	adds	r0, #1
 800bd2e:	d1e7      	bne.n	800bd00 <_puts_r+0x68>
 800bd30:	e7ce      	b.n	800bcd0 <_puts_r+0x38>
 800bd32:	3e01      	subs	r6, #1
 800bd34:	e7e4      	b.n	800bd00 <_puts_r+0x68>
 800bd36:	6823      	ldr	r3, [r4, #0]
 800bd38:	1c5a      	adds	r2, r3, #1
 800bd3a:	6022      	str	r2, [r4, #0]
 800bd3c:	220a      	movs	r2, #10
 800bd3e:	701a      	strb	r2, [r3, #0]
 800bd40:	e7ee      	b.n	800bd20 <_puts_r+0x88>
	...

0800bd44 <puts>:
 800bd44:	4b02      	ldr	r3, [pc, #8]	@ (800bd50 <puts+0xc>)
 800bd46:	4601      	mov	r1, r0
 800bd48:	6818      	ldr	r0, [r3, #0]
 800bd4a:	f7ff bfa5 	b.w	800bc98 <_puts_r>
 800bd4e:	bf00      	nop
 800bd50:	2000001c 	.word	0x2000001c

0800bd54 <__sread>:
 800bd54:	b510      	push	{r4, lr}
 800bd56:	460c      	mov	r4, r1
 800bd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd5c:	f000 f96a 	bl	800c034 <_read_r>
 800bd60:	2800      	cmp	r0, #0
 800bd62:	bfab      	itete	ge
 800bd64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bd66:	89a3      	ldrhlt	r3, [r4, #12]
 800bd68:	181b      	addge	r3, r3, r0
 800bd6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bd6e:	bfac      	ite	ge
 800bd70:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bd72:	81a3      	strhlt	r3, [r4, #12]
 800bd74:	bd10      	pop	{r4, pc}

0800bd76 <__swrite>:
 800bd76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd7a:	461f      	mov	r7, r3
 800bd7c:	898b      	ldrh	r3, [r1, #12]
 800bd7e:	4605      	mov	r5, r0
 800bd80:	05db      	lsls	r3, r3, #23
 800bd82:	460c      	mov	r4, r1
 800bd84:	4616      	mov	r6, r2
 800bd86:	d505      	bpl.n	800bd94 <__swrite+0x1e>
 800bd88:	2302      	movs	r3, #2
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd90:	f000 f93e 	bl	800c010 <_lseek_r>
 800bd94:	89a3      	ldrh	r3, [r4, #12]
 800bd96:	4632      	mov	r2, r6
 800bd98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd9c:	81a3      	strh	r3, [r4, #12]
 800bd9e:	4628      	mov	r0, r5
 800bda0:	463b      	mov	r3, r7
 800bda2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdaa:	f000 b965 	b.w	800c078 <_write_r>

0800bdae <__sseek>:
 800bdae:	b510      	push	{r4, lr}
 800bdb0:	460c      	mov	r4, r1
 800bdb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb6:	f000 f92b 	bl	800c010 <_lseek_r>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	89a3      	ldrh	r3, [r4, #12]
 800bdbe:	bf15      	itete	ne
 800bdc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bdc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bdc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bdca:	81a3      	strheq	r3, [r4, #12]
 800bdcc:	bf18      	it	ne
 800bdce:	81a3      	strhne	r3, [r4, #12]
 800bdd0:	bd10      	pop	{r4, pc}

0800bdd2 <__sclose>:
 800bdd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdd6:	f000 b8ad 	b.w	800bf34 <_close_r>

0800bdda <__swbuf_r>:
 800bdda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bddc:	460e      	mov	r6, r1
 800bdde:	4614      	mov	r4, r2
 800bde0:	4605      	mov	r5, r0
 800bde2:	b118      	cbz	r0, 800bdec <__swbuf_r+0x12>
 800bde4:	6a03      	ldr	r3, [r0, #32]
 800bde6:	b90b      	cbnz	r3, 800bdec <__swbuf_r+0x12>
 800bde8:	f7ff ff20 	bl	800bc2c <__sinit>
 800bdec:	69a3      	ldr	r3, [r4, #24]
 800bdee:	60a3      	str	r3, [r4, #8]
 800bdf0:	89a3      	ldrh	r3, [r4, #12]
 800bdf2:	071a      	lsls	r2, r3, #28
 800bdf4:	d501      	bpl.n	800bdfa <__swbuf_r+0x20>
 800bdf6:	6923      	ldr	r3, [r4, #16]
 800bdf8:	b943      	cbnz	r3, 800be0c <__swbuf_r+0x32>
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	f000 f82b 	bl	800be58 <__swsetup_r>
 800be02:	b118      	cbz	r0, 800be0c <__swbuf_r+0x32>
 800be04:	f04f 37ff 	mov.w	r7, #4294967295
 800be08:	4638      	mov	r0, r7
 800be0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	6922      	ldr	r2, [r4, #16]
 800be10:	b2f6      	uxtb	r6, r6
 800be12:	1a98      	subs	r0, r3, r2
 800be14:	6963      	ldr	r3, [r4, #20]
 800be16:	4637      	mov	r7, r6
 800be18:	4283      	cmp	r3, r0
 800be1a:	dc05      	bgt.n	800be28 <__swbuf_r+0x4e>
 800be1c:	4621      	mov	r1, r4
 800be1e:	4628      	mov	r0, r5
 800be20:	f000 fa40 	bl	800c2a4 <_fflush_r>
 800be24:	2800      	cmp	r0, #0
 800be26:	d1ed      	bne.n	800be04 <__swbuf_r+0x2a>
 800be28:	68a3      	ldr	r3, [r4, #8]
 800be2a:	3b01      	subs	r3, #1
 800be2c:	60a3      	str	r3, [r4, #8]
 800be2e:	6823      	ldr	r3, [r4, #0]
 800be30:	1c5a      	adds	r2, r3, #1
 800be32:	6022      	str	r2, [r4, #0]
 800be34:	701e      	strb	r6, [r3, #0]
 800be36:	6962      	ldr	r2, [r4, #20]
 800be38:	1c43      	adds	r3, r0, #1
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d004      	beq.n	800be48 <__swbuf_r+0x6e>
 800be3e:	89a3      	ldrh	r3, [r4, #12]
 800be40:	07db      	lsls	r3, r3, #31
 800be42:	d5e1      	bpl.n	800be08 <__swbuf_r+0x2e>
 800be44:	2e0a      	cmp	r6, #10
 800be46:	d1df      	bne.n	800be08 <__swbuf_r+0x2e>
 800be48:	4621      	mov	r1, r4
 800be4a:	4628      	mov	r0, r5
 800be4c:	f000 fa2a 	bl	800c2a4 <_fflush_r>
 800be50:	2800      	cmp	r0, #0
 800be52:	d0d9      	beq.n	800be08 <__swbuf_r+0x2e>
 800be54:	e7d6      	b.n	800be04 <__swbuf_r+0x2a>
	...

0800be58 <__swsetup_r>:
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	4b29      	ldr	r3, [pc, #164]	@ (800bf00 <__swsetup_r+0xa8>)
 800be5c:	4605      	mov	r5, r0
 800be5e:	6818      	ldr	r0, [r3, #0]
 800be60:	460c      	mov	r4, r1
 800be62:	b118      	cbz	r0, 800be6c <__swsetup_r+0x14>
 800be64:	6a03      	ldr	r3, [r0, #32]
 800be66:	b90b      	cbnz	r3, 800be6c <__swsetup_r+0x14>
 800be68:	f7ff fee0 	bl	800bc2c <__sinit>
 800be6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be70:	0719      	lsls	r1, r3, #28
 800be72:	d422      	bmi.n	800beba <__swsetup_r+0x62>
 800be74:	06da      	lsls	r2, r3, #27
 800be76:	d407      	bmi.n	800be88 <__swsetup_r+0x30>
 800be78:	2209      	movs	r2, #9
 800be7a:	602a      	str	r2, [r5, #0]
 800be7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be80:	f04f 30ff 	mov.w	r0, #4294967295
 800be84:	81a3      	strh	r3, [r4, #12]
 800be86:	e033      	b.n	800bef0 <__swsetup_r+0x98>
 800be88:	0758      	lsls	r0, r3, #29
 800be8a:	d512      	bpl.n	800beb2 <__swsetup_r+0x5a>
 800be8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be8e:	b141      	cbz	r1, 800bea2 <__swsetup_r+0x4a>
 800be90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be94:	4299      	cmp	r1, r3
 800be96:	d002      	beq.n	800be9e <__swsetup_r+0x46>
 800be98:	4628      	mov	r0, r5
 800be9a:	f000 f93b 	bl	800c114 <_free_r>
 800be9e:	2300      	movs	r3, #0
 800bea0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bea2:	89a3      	ldrh	r3, [r4, #12]
 800bea4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bea8:	81a3      	strh	r3, [r4, #12]
 800beaa:	2300      	movs	r3, #0
 800beac:	6063      	str	r3, [r4, #4]
 800beae:	6923      	ldr	r3, [r4, #16]
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	89a3      	ldrh	r3, [r4, #12]
 800beb4:	f043 0308 	orr.w	r3, r3, #8
 800beb8:	81a3      	strh	r3, [r4, #12]
 800beba:	6923      	ldr	r3, [r4, #16]
 800bebc:	b94b      	cbnz	r3, 800bed2 <__swsetup_r+0x7a>
 800bebe:	89a3      	ldrh	r3, [r4, #12]
 800bec0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bec8:	d003      	beq.n	800bed2 <__swsetup_r+0x7a>
 800beca:	4621      	mov	r1, r4
 800becc:	4628      	mov	r0, r5
 800bece:	f000 fa36 	bl	800c33e <__smakebuf_r>
 800bed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bed6:	f013 0201 	ands.w	r2, r3, #1
 800beda:	d00a      	beq.n	800bef2 <__swsetup_r+0x9a>
 800bedc:	2200      	movs	r2, #0
 800bede:	60a2      	str	r2, [r4, #8]
 800bee0:	6962      	ldr	r2, [r4, #20]
 800bee2:	4252      	negs	r2, r2
 800bee4:	61a2      	str	r2, [r4, #24]
 800bee6:	6922      	ldr	r2, [r4, #16]
 800bee8:	b942      	cbnz	r2, 800befc <__swsetup_r+0xa4>
 800beea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800beee:	d1c5      	bne.n	800be7c <__swsetup_r+0x24>
 800bef0:	bd38      	pop	{r3, r4, r5, pc}
 800bef2:	0799      	lsls	r1, r3, #30
 800bef4:	bf58      	it	pl
 800bef6:	6962      	ldrpl	r2, [r4, #20]
 800bef8:	60a2      	str	r2, [r4, #8]
 800befa:	e7f4      	b.n	800bee6 <__swsetup_r+0x8e>
 800befc:	2000      	movs	r0, #0
 800befe:	e7f7      	b.n	800bef0 <__swsetup_r+0x98>
 800bf00:	2000001c 	.word	0x2000001c

0800bf04 <memcmp>:
 800bf04:	b510      	push	{r4, lr}
 800bf06:	3901      	subs	r1, #1
 800bf08:	4402      	add	r2, r0
 800bf0a:	4290      	cmp	r0, r2
 800bf0c:	d101      	bne.n	800bf12 <memcmp+0xe>
 800bf0e:	2000      	movs	r0, #0
 800bf10:	e005      	b.n	800bf1e <memcmp+0x1a>
 800bf12:	7803      	ldrb	r3, [r0, #0]
 800bf14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bf18:	42a3      	cmp	r3, r4
 800bf1a:	d001      	beq.n	800bf20 <memcmp+0x1c>
 800bf1c:	1b18      	subs	r0, r3, r4
 800bf1e:	bd10      	pop	{r4, pc}
 800bf20:	3001      	adds	r0, #1
 800bf22:	e7f2      	b.n	800bf0a <memcmp+0x6>

0800bf24 <memset>:
 800bf24:	4603      	mov	r3, r0
 800bf26:	4402      	add	r2, r0
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d100      	bne.n	800bf2e <memset+0xa>
 800bf2c:	4770      	bx	lr
 800bf2e:	f803 1b01 	strb.w	r1, [r3], #1
 800bf32:	e7f9      	b.n	800bf28 <memset+0x4>

0800bf34 <_close_r>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	2300      	movs	r3, #0
 800bf38:	4d05      	ldr	r5, [pc, #20]	@ (800bf50 <_close_r+0x1c>)
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	4608      	mov	r0, r1
 800bf3e:	602b      	str	r3, [r5, #0]
 800bf40:	f7f7 fbe5 	bl	800370e <_close>
 800bf44:	1c43      	adds	r3, r0, #1
 800bf46:	d102      	bne.n	800bf4e <_close_r+0x1a>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	b103      	cbz	r3, 800bf4e <_close_r+0x1a>
 800bf4c:	6023      	str	r3, [r4, #0]
 800bf4e:	bd38      	pop	{r3, r4, r5, pc}
 800bf50:	20001f08 	.word	0x20001f08

0800bf54 <_reclaim_reent>:
 800bf54:	4b2d      	ldr	r3, [pc, #180]	@ (800c00c <_reclaim_reent+0xb8>)
 800bf56:	b570      	push	{r4, r5, r6, lr}
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	4283      	cmp	r3, r0
 800bf5e:	d053      	beq.n	800c008 <_reclaim_reent+0xb4>
 800bf60:	69c3      	ldr	r3, [r0, #28]
 800bf62:	b31b      	cbz	r3, 800bfac <_reclaim_reent+0x58>
 800bf64:	68db      	ldr	r3, [r3, #12]
 800bf66:	b163      	cbz	r3, 800bf82 <_reclaim_reent+0x2e>
 800bf68:	2500      	movs	r5, #0
 800bf6a:	69e3      	ldr	r3, [r4, #28]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	5959      	ldr	r1, [r3, r5]
 800bf70:	b9b1      	cbnz	r1, 800bfa0 <_reclaim_reent+0x4c>
 800bf72:	3504      	adds	r5, #4
 800bf74:	2d80      	cmp	r5, #128	@ 0x80
 800bf76:	d1f8      	bne.n	800bf6a <_reclaim_reent+0x16>
 800bf78:	69e3      	ldr	r3, [r4, #28]
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	68d9      	ldr	r1, [r3, #12]
 800bf7e:	f000 f8c9 	bl	800c114 <_free_r>
 800bf82:	69e3      	ldr	r3, [r4, #28]
 800bf84:	6819      	ldr	r1, [r3, #0]
 800bf86:	b111      	cbz	r1, 800bf8e <_reclaim_reent+0x3a>
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f000 f8c3 	bl	800c114 <_free_r>
 800bf8e:	69e3      	ldr	r3, [r4, #28]
 800bf90:	689d      	ldr	r5, [r3, #8]
 800bf92:	b15d      	cbz	r5, 800bfac <_reclaim_reent+0x58>
 800bf94:	4629      	mov	r1, r5
 800bf96:	4620      	mov	r0, r4
 800bf98:	682d      	ldr	r5, [r5, #0]
 800bf9a:	f000 f8bb 	bl	800c114 <_free_r>
 800bf9e:	e7f8      	b.n	800bf92 <_reclaim_reent+0x3e>
 800bfa0:	680e      	ldr	r6, [r1, #0]
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f000 f8b6 	bl	800c114 <_free_r>
 800bfa8:	4631      	mov	r1, r6
 800bfaa:	e7e1      	b.n	800bf70 <_reclaim_reent+0x1c>
 800bfac:	6961      	ldr	r1, [r4, #20]
 800bfae:	b111      	cbz	r1, 800bfb6 <_reclaim_reent+0x62>
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	f000 f8af 	bl	800c114 <_free_r>
 800bfb6:	69e1      	ldr	r1, [r4, #28]
 800bfb8:	b111      	cbz	r1, 800bfc0 <_reclaim_reent+0x6c>
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f000 f8aa 	bl	800c114 <_free_r>
 800bfc0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bfc2:	b111      	cbz	r1, 800bfca <_reclaim_reent+0x76>
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f000 f8a5 	bl	800c114 <_free_r>
 800bfca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfcc:	b111      	cbz	r1, 800bfd4 <_reclaim_reent+0x80>
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f000 f8a0 	bl	800c114 <_free_r>
 800bfd4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bfd6:	b111      	cbz	r1, 800bfde <_reclaim_reent+0x8a>
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f000 f89b 	bl	800c114 <_free_r>
 800bfde:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bfe0:	b111      	cbz	r1, 800bfe8 <_reclaim_reent+0x94>
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f000 f896 	bl	800c114 <_free_r>
 800bfe8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bfea:	b111      	cbz	r1, 800bff2 <_reclaim_reent+0x9e>
 800bfec:	4620      	mov	r0, r4
 800bfee:	f000 f891 	bl	800c114 <_free_r>
 800bff2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bff4:	b111      	cbz	r1, 800bffc <_reclaim_reent+0xa8>
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 f88c 	bl	800c114 <_free_r>
 800bffc:	6a23      	ldr	r3, [r4, #32]
 800bffe:	b11b      	cbz	r3, 800c008 <_reclaim_reent+0xb4>
 800c000:	4620      	mov	r0, r4
 800c002:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c006:	4718      	bx	r3
 800c008:	bd70      	pop	{r4, r5, r6, pc}
 800c00a:	bf00      	nop
 800c00c:	2000001c 	.word	0x2000001c

0800c010 <_lseek_r>:
 800c010:	b538      	push	{r3, r4, r5, lr}
 800c012:	4604      	mov	r4, r0
 800c014:	4608      	mov	r0, r1
 800c016:	4611      	mov	r1, r2
 800c018:	2200      	movs	r2, #0
 800c01a:	4d05      	ldr	r5, [pc, #20]	@ (800c030 <_lseek_r+0x20>)
 800c01c:	602a      	str	r2, [r5, #0]
 800c01e:	461a      	mov	r2, r3
 800c020:	f7f7 fb99 	bl	8003756 <_lseek>
 800c024:	1c43      	adds	r3, r0, #1
 800c026:	d102      	bne.n	800c02e <_lseek_r+0x1e>
 800c028:	682b      	ldr	r3, [r5, #0]
 800c02a:	b103      	cbz	r3, 800c02e <_lseek_r+0x1e>
 800c02c:	6023      	str	r3, [r4, #0]
 800c02e:	bd38      	pop	{r3, r4, r5, pc}
 800c030:	20001f08 	.word	0x20001f08

0800c034 <_read_r>:
 800c034:	b538      	push	{r3, r4, r5, lr}
 800c036:	4604      	mov	r4, r0
 800c038:	4608      	mov	r0, r1
 800c03a:	4611      	mov	r1, r2
 800c03c:	2200      	movs	r2, #0
 800c03e:	4d05      	ldr	r5, [pc, #20]	@ (800c054 <_read_r+0x20>)
 800c040:	602a      	str	r2, [r5, #0]
 800c042:	461a      	mov	r2, r3
 800c044:	f7f7 fb2a 	bl	800369c <_read>
 800c048:	1c43      	adds	r3, r0, #1
 800c04a:	d102      	bne.n	800c052 <_read_r+0x1e>
 800c04c:	682b      	ldr	r3, [r5, #0]
 800c04e:	b103      	cbz	r3, 800c052 <_read_r+0x1e>
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	bd38      	pop	{r3, r4, r5, pc}
 800c054:	20001f08 	.word	0x20001f08

0800c058 <_sbrk_r>:
 800c058:	b538      	push	{r3, r4, r5, lr}
 800c05a:	2300      	movs	r3, #0
 800c05c:	4d05      	ldr	r5, [pc, #20]	@ (800c074 <_sbrk_r+0x1c>)
 800c05e:	4604      	mov	r4, r0
 800c060:	4608      	mov	r0, r1
 800c062:	602b      	str	r3, [r5, #0]
 800c064:	f7f7 fb84 	bl	8003770 <_sbrk>
 800c068:	1c43      	adds	r3, r0, #1
 800c06a:	d102      	bne.n	800c072 <_sbrk_r+0x1a>
 800c06c:	682b      	ldr	r3, [r5, #0]
 800c06e:	b103      	cbz	r3, 800c072 <_sbrk_r+0x1a>
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	bd38      	pop	{r3, r4, r5, pc}
 800c074:	20001f08 	.word	0x20001f08

0800c078 <_write_r>:
 800c078:	b538      	push	{r3, r4, r5, lr}
 800c07a:	4604      	mov	r4, r0
 800c07c:	4608      	mov	r0, r1
 800c07e:	4611      	mov	r1, r2
 800c080:	2200      	movs	r2, #0
 800c082:	4d05      	ldr	r5, [pc, #20]	@ (800c098 <_write_r+0x20>)
 800c084:	602a      	str	r2, [r5, #0]
 800c086:	461a      	mov	r2, r3
 800c088:	f7f7 fb25 	bl	80036d6 <_write>
 800c08c:	1c43      	adds	r3, r0, #1
 800c08e:	d102      	bne.n	800c096 <_write_r+0x1e>
 800c090:	682b      	ldr	r3, [r5, #0]
 800c092:	b103      	cbz	r3, 800c096 <_write_r+0x1e>
 800c094:	6023      	str	r3, [r4, #0]
 800c096:	bd38      	pop	{r3, r4, r5, pc}
 800c098:	20001f08 	.word	0x20001f08

0800c09c <__errno>:
 800c09c:	4b01      	ldr	r3, [pc, #4]	@ (800c0a4 <__errno+0x8>)
 800c09e:	6818      	ldr	r0, [r3, #0]
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	2000001c 	.word	0x2000001c

0800c0a8 <__libc_init_array>:
 800c0a8:	b570      	push	{r4, r5, r6, lr}
 800c0aa:	2600      	movs	r6, #0
 800c0ac:	4d0c      	ldr	r5, [pc, #48]	@ (800c0e0 <__libc_init_array+0x38>)
 800c0ae:	4c0d      	ldr	r4, [pc, #52]	@ (800c0e4 <__libc_init_array+0x3c>)
 800c0b0:	1b64      	subs	r4, r4, r5
 800c0b2:	10a4      	asrs	r4, r4, #2
 800c0b4:	42a6      	cmp	r6, r4
 800c0b6:	d109      	bne.n	800c0cc <__libc_init_array+0x24>
 800c0b8:	f000 fd02 	bl	800cac0 <_init>
 800c0bc:	2600      	movs	r6, #0
 800c0be:	4d0a      	ldr	r5, [pc, #40]	@ (800c0e8 <__libc_init_array+0x40>)
 800c0c0:	4c0a      	ldr	r4, [pc, #40]	@ (800c0ec <__libc_init_array+0x44>)
 800c0c2:	1b64      	subs	r4, r4, r5
 800c0c4:	10a4      	asrs	r4, r4, #2
 800c0c6:	42a6      	cmp	r6, r4
 800c0c8:	d105      	bne.n	800c0d6 <__libc_init_array+0x2e>
 800c0ca:	bd70      	pop	{r4, r5, r6, pc}
 800c0cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0d0:	4798      	blx	r3
 800c0d2:	3601      	adds	r6, #1
 800c0d4:	e7ee      	b.n	800c0b4 <__libc_init_array+0xc>
 800c0d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0da:	4798      	blx	r3
 800c0dc:	3601      	adds	r6, #1
 800c0de:	e7f2      	b.n	800c0c6 <__libc_init_array+0x1e>
 800c0e0:	0800d414 	.word	0x0800d414
 800c0e4:	0800d414 	.word	0x0800d414
 800c0e8:	0800d414 	.word	0x0800d414
 800c0ec:	0800d418 	.word	0x0800d418

0800c0f0 <__retarget_lock_init_recursive>:
 800c0f0:	4770      	bx	lr

0800c0f2 <__retarget_lock_acquire_recursive>:
 800c0f2:	4770      	bx	lr

0800c0f4 <__retarget_lock_release_recursive>:
 800c0f4:	4770      	bx	lr

0800c0f6 <memcpy>:
 800c0f6:	440a      	add	r2, r1
 800c0f8:	4291      	cmp	r1, r2
 800c0fa:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0fe:	d100      	bne.n	800c102 <memcpy+0xc>
 800c100:	4770      	bx	lr
 800c102:	b510      	push	{r4, lr}
 800c104:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c108:	4291      	cmp	r1, r2
 800c10a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c10e:	d1f9      	bne.n	800c104 <memcpy+0xe>
 800c110:	bd10      	pop	{r4, pc}
	...

0800c114 <_free_r>:
 800c114:	b538      	push	{r3, r4, r5, lr}
 800c116:	4605      	mov	r5, r0
 800c118:	2900      	cmp	r1, #0
 800c11a:	d040      	beq.n	800c19e <_free_r+0x8a>
 800c11c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c120:	1f0c      	subs	r4, r1, #4
 800c122:	2b00      	cmp	r3, #0
 800c124:	bfb8      	it	lt
 800c126:	18e4      	addlt	r4, r4, r3
 800c128:	f7ff fce8 	bl	800bafc <__malloc_lock>
 800c12c:	4a1c      	ldr	r2, [pc, #112]	@ (800c1a0 <_free_r+0x8c>)
 800c12e:	6813      	ldr	r3, [r2, #0]
 800c130:	b933      	cbnz	r3, 800c140 <_free_r+0x2c>
 800c132:	6063      	str	r3, [r4, #4]
 800c134:	6014      	str	r4, [r2, #0]
 800c136:	4628      	mov	r0, r5
 800c138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c13c:	f7ff bce4 	b.w	800bb08 <__malloc_unlock>
 800c140:	42a3      	cmp	r3, r4
 800c142:	d908      	bls.n	800c156 <_free_r+0x42>
 800c144:	6820      	ldr	r0, [r4, #0]
 800c146:	1821      	adds	r1, r4, r0
 800c148:	428b      	cmp	r3, r1
 800c14a:	bf01      	itttt	eq
 800c14c:	6819      	ldreq	r1, [r3, #0]
 800c14e:	685b      	ldreq	r3, [r3, #4]
 800c150:	1809      	addeq	r1, r1, r0
 800c152:	6021      	streq	r1, [r4, #0]
 800c154:	e7ed      	b.n	800c132 <_free_r+0x1e>
 800c156:	461a      	mov	r2, r3
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	b10b      	cbz	r3, 800c160 <_free_r+0x4c>
 800c15c:	42a3      	cmp	r3, r4
 800c15e:	d9fa      	bls.n	800c156 <_free_r+0x42>
 800c160:	6811      	ldr	r1, [r2, #0]
 800c162:	1850      	adds	r0, r2, r1
 800c164:	42a0      	cmp	r0, r4
 800c166:	d10b      	bne.n	800c180 <_free_r+0x6c>
 800c168:	6820      	ldr	r0, [r4, #0]
 800c16a:	4401      	add	r1, r0
 800c16c:	1850      	adds	r0, r2, r1
 800c16e:	4283      	cmp	r3, r0
 800c170:	6011      	str	r1, [r2, #0]
 800c172:	d1e0      	bne.n	800c136 <_free_r+0x22>
 800c174:	6818      	ldr	r0, [r3, #0]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	4408      	add	r0, r1
 800c17a:	6010      	str	r0, [r2, #0]
 800c17c:	6053      	str	r3, [r2, #4]
 800c17e:	e7da      	b.n	800c136 <_free_r+0x22>
 800c180:	d902      	bls.n	800c188 <_free_r+0x74>
 800c182:	230c      	movs	r3, #12
 800c184:	602b      	str	r3, [r5, #0]
 800c186:	e7d6      	b.n	800c136 <_free_r+0x22>
 800c188:	6820      	ldr	r0, [r4, #0]
 800c18a:	1821      	adds	r1, r4, r0
 800c18c:	428b      	cmp	r3, r1
 800c18e:	bf01      	itttt	eq
 800c190:	6819      	ldreq	r1, [r3, #0]
 800c192:	685b      	ldreq	r3, [r3, #4]
 800c194:	1809      	addeq	r1, r1, r0
 800c196:	6021      	streq	r1, [r4, #0]
 800c198:	6063      	str	r3, [r4, #4]
 800c19a:	6054      	str	r4, [r2, #4]
 800c19c:	e7cb      	b.n	800c136 <_free_r+0x22>
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	20001dc8 	.word	0x20001dc8

0800c1a4 <__sflush_r>:
 800c1a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1aa:	0716      	lsls	r6, r2, #28
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	d454      	bmi.n	800c25c <__sflush_r+0xb8>
 800c1b2:	684b      	ldr	r3, [r1, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dc02      	bgt.n	800c1be <__sflush_r+0x1a>
 800c1b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	dd48      	ble.n	800c250 <__sflush_r+0xac>
 800c1be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1c0:	2e00      	cmp	r6, #0
 800c1c2:	d045      	beq.n	800c250 <__sflush_r+0xac>
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c1ca:	682f      	ldr	r7, [r5, #0]
 800c1cc:	6a21      	ldr	r1, [r4, #32]
 800c1ce:	602b      	str	r3, [r5, #0]
 800c1d0:	d030      	beq.n	800c234 <__sflush_r+0x90>
 800c1d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c1d4:	89a3      	ldrh	r3, [r4, #12]
 800c1d6:	0759      	lsls	r1, r3, #29
 800c1d8:	d505      	bpl.n	800c1e6 <__sflush_r+0x42>
 800c1da:	6863      	ldr	r3, [r4, #4]
 800c1dc:	1ad2      	subs	r2, r2, r3
 800c1de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c1e0:	b10b      	cbz	r3, 800c1e6 <__sflush_r+0x42>
 800c1e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c1e4:	1ad2      	subs	r2, r2, r3
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c1ec:	6a21      	ldr	r1, [r4, #32]
 800c1ee:	47b0      	blx	r6
 800c1f0:	1c43      	adds	r3, r0, #1
 800c1f2:	89a3      	ldrh	r3, [r4, #12]
 800c1f4:	d106      	bne.n	800c204 <__sflush_r+0x60>
 800c1f6:	6829      	ldr	r1, [r5, #0]
 800c1f8:	291d      	cmp	r1, #29
 800c1fa:	d82b      	bhi.n	800c254 <__sflush_r+0xb0>
 800c1fc:	4a28      	ldr	r2, [pc, #160]	@ (800c2a0 <__sflush_r+0xfc>)
 800c1fe:	40ca      	lsrs	r2, r1
 800c200:	07d6      	lsls	r6, r2, #31
 800c202:	d527      	bpl.n	800c254 <__sflush_r+0xb0>
 800c204:	2200      	movs	r2, #0
 800c206:	6062      	str	r2, [r4, #4]
 800c208:	6922      	ldr	r2, [r4, #16]
 800c20a:	04d9      	lsls	r1, r3, #19
 800c20c:	6022      	str	r2, [r4, #0]
 800c20e:	d504      	bpl.n	800c21a <__sflush_r+0x76>
 800c210:	1c42      	adds	r2, r0, #1
 800c212:	d101      	bne.n	800c218 <__sflush_r+0x74>
 800c214:	682b      	ldr	r3, [r5, #0]
 800c216:	b903      	cbnz	r3, 800c21a <__sflush_r+0x76>
 800c218:	6560      	str	r0, [r4, #84]	@ 0x54
 800c21a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c21c:	602f      	str	r7, [r5, #0]
 800c21e:	b1b9      	cbz	r1, 800c250 <__sflush_r+0xac>
 800c220:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c224:	4299      	cmp	r1, r3
 800c226:	d002      	beq.n	800c22e <__sflush_r+0x8a>
 800c228:	4628      	mov	r0, r5
 800c22a:	f7ff ff73 	bl	800c114 <_free_r>
 800c22e:	2300      	movs	r3, #0
 800c230:	6363      	str	r3, [r4, #52]	@ 0x34
 800c232:	e00d      	b.n	800c250 <__sflush_r+0xac>
 800c234:	2301      	movs	r3, #1
 800c236:	4628      	mov	r0, r5
 800c238:	47b0      	blx	r6
 800c23a:	4602      	mov	r2, r0
 800c23c:	1c50      	adds	r0, r2, #1
 800c23e:	d1c9      	bne.n	800c1d4 <__sflush_r+0x30>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d0c6      	beq.n	800c1d4 <__sflush_r+0x30>
 800c246:	2b1d      	cmp	r3, #29
 800c248:	d001      	beq.n	800c24e <__sflush_r+0xaa>
 800c24a:	2b16      	cmp	r3, #22
 800c24c:	d11d      	bne.n	800c28a <__sflush_r+0xe6>
 800c24e:	602f      	str	r7, [r5, #0]
 800c250:	2000      	movs	r0, #0
 800c252:	e021      	b.n	800c298 <__sflush_r+0xf4>
 800c254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c258:	b21b      	sxth	r3, r3
 800c25a:	e01a      	b.n	800c292 <__sflush_r+0xee>
 800c25c:	690f      	ldr	r7, [r1, #16]
 800c25e:	2f00      	cmp	r7, #0
 800c260:	d0f6      	beq.n	800c250 <__sflush_r+0xac>
 800c262:	0793      	lsls	r3, r2, #30
 800c264:	bf18      	it	ne
 800c266:	2300      	movne	r3, #0
 800c268:	680e      	ldr	r6, [r1, #0]
 800c26a:	bf08      	it	eq
 800c26c:	694b      	ldreq	r3, [r1, #20]
 800c26e:	1bf6      	subs	r6, r6, r7
 800c270:	600f      	str	r7, [r1, #0]
 800c272:	608b      	str	r3, [r1, #8]
 800c274:	2e00      	cmp	r6, #0
 800c276:	ddeb      	ble.n	800c250 <__sflush_r+0xac>
 800c278:	4633      	mov	r3, r6
 800c27a:	463a      	mov	r2, r7
 800c27c:	4628      	mov	r0, r5
 800c27e:	6a21      	ldr	r1, [r4, #32]
 800c280:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c284:	47e0      	blx	ip
 800c286:	2800      	cmp	r0, #0
 800c288:	dc07      	bgt.n	800c29a <__sflush_r+0xf6>
 800c28a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c292:	f04f 30ff 	mov.w	r0, #4294967295
 800c296:	81a3      	strh	r3, [r4, #12]
 800c298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c29a:	4407      	add	r7, r0
 800c29c:	1a36      	subs	r6, r6, r0
 800c29e:	e7e9      	b.n	800c274 <__sflush_r+0xd0>
 800c2a0:	20400001 	.word	0x20400001

0800c2a4 <_fflush_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	690b      	ldr	r3, [r1, #16]
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	b913      	cbnz	r3, 800c2b4 <_fflush_r+0x10>
 800c2ae:	2500      	movs	r5, #0
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	bd38      	pop	{r3, r4, r5, pc}
 800c2b4:	b118      	cbz	r0, 800c2be <_fflush_r+0x1a>
 800c2b6:	6a03      	ldr	r3, [r0, #32]
 800c2b8:	b90b      	cbnz	r3, 800c2be <_fflush_r+0x1a>
 800c2ba:	f7ff fcb7 	bl	800bc2c <__sinit>
 800c2be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d0f3      	beq.n	800c2ae <_fflush_r+0xa>
 800c2c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c2c8:	07d0      	lsls	r0, r2, #31
 800c2ca:	d404      	bmi.n	800c2d6 <_fflush_r+0x32>
 800c2cc:	0599      	lsls	r1, r3, #22
 800c2ce:	d402      	bmi.n	800c2d6 <_fflush_r+0x32>
 800c2d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2d2:	f7ff ff0e 	bl	800c0f2 <__retarget_lock_acquire_recursive>
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	4621      	mov	r1, r4
 800c2da:	f7ff ff63 	bl	800c1a4 <__sflush_r>
 800c2de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2e0:	4605      	mov	r5, r0
 800c2e2:	07da      	lsls	r2, r3, #31
 800c2e4:	d4e4      	bmi.n	800c2b0 <_fflush_r+0xc>
 800c2e6:	89a3      	ldrh	r3, [r4, #12]
 800c2e8:	059b      	lsls	r3, r3, #22
 800c2ea:	d4e1      	bmi.n	800c2b0 <_fflush_r+0xc>
 800c2ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2ee:	f7ff ff01 	bl	800c0f4 <__retarget_lock_release_recursive>
 800c2f2:	e7dd      	b.n	800c2b0 <_fflush_r+0xc>

0800c2f4 <__swhatbuf_r>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	460c      	mov	r4, r1
 800c2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2fc:	4615      	mov	r5, r2
 800c2fe:	2900      	cmp	r1, #0
 800c300:	461e      	mov	r6, r3
 800c302:	b096      	sub	sp, #88	@ 0x58
 800c304:	da0c      	bge.n	800c320 <__swhatbuf_r+0x2c>
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	2100      	movs	r1, #0
 800c30a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c30e:	bf14      	ite	ne
 800c310:	2340      	movne	r3, #64	@ 0x40
 800c312:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c316:	2000      	movs	r0, #0
 800c318:	6031      	str	r1, [r6, #0]
 800c31a:	602b      	str	r3, [r5, #0]
 800c31c:	b016      	add	sp, #88	@ 0x58
 800c31e:	bd70      	pop	{r4, r5, r6, pc}
 800c320:	466a      	mov	r2, sp
 800c322:	f000 f849 	bl	800c3b8 <_fstat_r>
 800c326:	2800      	cmp	r0, #0
 800c328:	dbed      	blt.n	800c306 <__swhatbuf_r+0x12>
 800c32a:	9901      	ldr	r1, [sp, #4]
 800c32c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c330:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c334:	4259      	negs	r1, r3
 800c336:	4159      	adcs	r1, r3
 800c338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c33c:	e7eb      	b.n	800c316 <__swhatbuf_r+0x22>

0800c33e <__smakebuf_r>:
 800c33e:	898b      	ldrh	r3, [r1, #12]
 800c340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c342:	079d      	lsls	r5, r3, #30
 800c344:	4606      	mov	r6, r0
 800c346:	460c      	mov	r4, r1
 800c348:	d507      	bpl.n	800c35a <__smakebuf_r+0x1c>
 800c34a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c34e:	6023      	str	r3, [r4, #0]
 800c350:	6123      	str	r3, [r4, #16]
 800c352:	2301      	movs	r3, #1
 800c354:	6163      	str	r3, [r4, #20]
 800c356:	b003      	add	sp, #12
 800c358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c35a:	466a      	mov	r2, sp
 800c35c:	ab01      	add	r3, sp, #4
 800c35e:	f7ff ffc9 	bl	800c2f4 <__swhatbuf_r>
 800c362:	9f00      	ldr	r7, [sp, #0]
 800c364:	4605      	mov	r5, r0
 800c366:	4639      	mov	r1, r7
 800c368:	4630      	mov	r0, r6
 800c36a:	f7ff fb47 	bl	800b9fc <_malloc_r>
 800c36e:	b948      	cbnz	r0, 800c384 <__smakebuf_r+0x46>
 800c370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c374:	059a      	lsls	r2, r3, #22
 800c376:	d4ee      	bmi.n	800c356 <__smakebuf_r+0x18>
 800c378:	f023 0303 	bic.w	r3, r3, #3
 800c37c:	f043 0302 	orr.w	r3, r3, #2
 800c380:	81a3      	strh	r3, [r4, #12]
 800c382:	e7e2      	b.n	800c34a <__smakebuf_r+0xc>
 800c384:	89a3      	ldrh	r3, [r4, #12]
 800c386:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c38e:	81a3      	strh	r3, [r4, #12]
 800c390:	9b01      	ldr	r3, [sp, #4]
 800c392:	6020      	str	r0, [r4, #0]
 800c394:	b15b      	cbz	r3, 800c3ae <__smakebuf_r+0x70>
 800c396:	4630      	mov	r0, r6
 800c398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c39c:	f000 f81e 	bl	800c3dc <_isatty_r>
 800c3a0:	b128      	cbz	r0, 800c3ae <__smakebuf_r+0x70>
 800c3a2:	89a3      	ldrh	r3, [r4, #12]
 800c3a4:	f023 0303 	bic.w	r3, r3, #3
 800c3a8:	f043 0301 	orr.w	r3, r3, #1
 800c3ac:	81a3      	strh	r3, [r4, #12]
 800c3ae:	89a3      	ldrh	r3, [r4, #12]
 800c3b0:	431d      	orrs	r5, r3
 800c3b2:	81a5      	strh	r5, [r4, #12]
 800c3b4:	e7cf      	b.n	800c356 <__smakebuf_r+0x18>
	...

0800c3b8 <_fstat_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	4d06      	ldr	r5, [pc, #24]	@ (800c3d8 <_fstat_r+0x20>)
 800c3be:	4604      	mov	r4, r0
 800c3c0:	4608      	mov	r0, r1
 800c3c2:	4611      	mov	r1, r2
 800c3c4:	602b      	str	r3, [r5, #0]
 800c3c6:	f7f7 f9ad 	bl	8003724 <_fstat>
 800c3ca:	1c43      	adds	r3, r0, #1
 800c3cc:	d102      	bne.n	800c3d4 <_fstat_r+0x1c>
 800c3ce:	682b      	ldr	r3, [r5, #0]
 800c3d0:	b103      	cbz	r3, 800c3d4 <_fstat_r+0x1c>
 800c3d2:	6023      	str	r3, [r4, #0]
 800c3d4:	bd38      	pop	{r3, r4, r5, pc}
 800c3d6:	bf00      	nop
 800c3d8:	20001f08 	.word	0x20001f08

0800c3dc <_isatty_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	2300      	movs	r3, #0
 800c3e0:	4d05      	ldr	r5, [pc, #20]	@ (800c3f8 <_isatty_r+0x1c>)
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	4608      	mov	r0, r1
 800c3e6:	602b      	str	r3, [r5, #0]
 800c3e8:	f7f7 f9ab 	bl	8003742 <_isatty>
 800c3ec:	1c43      	adds	r3, r0, #1
 800c3ee:	d102      	bne.n	800c3f6 <_isatty_r+0x1a>
 800c3f0:	682b      	ldr	r3, [r5, #0]
 800c3f2:	b103      	cbz	r3, 800c3f6 <_isatty_r+0x1a>
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	bd38      	pop	{r3, r4, r5, pc}
 800c3f8:	20001f08 	.word	0x20001f08

0800c3fc <atan2>:
 800c3fc:	f000 b8f8 	b.w	800c5f0 <__ieee754_atan2>

0800c400 <sqrt>:
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	4606      	mov	r6, r0
 800c404:	460f      	mov	r7, r1
 800c406:	f000 f81f 	bl	800c448 <__ieee754_sqrt>
 800c40a:	4632      	mov	r2, r6
 800c40c:	4604      	mov	r4, r0
 800c40e:	460d      	mov	r5, r1
 800c410:	463b      	mov	r3, r7
 800c412:	4630      	mov	r0, r6
 800c414:	4639      	mov	r1, r7
 800c416:	f7f4 faf1 	bl	80009fc <__aeabi_dcmpun>
 800c41a:	b990      	cbnz	r0, 800c442 <sqrt+0x42>
 800c41c:	2200      	movs	r2, #0
 800c41e:	2300      	movs	r3, #0
 800c420:	4630      	mov	r0, r6
 800c422:	4639      	mov	r1, r7
 800c424:	f7f4 fac2 	bl	80009ac <__aeabi_dcmplt>
 800c428:	b158      	cbz	r0, 800c442 <sqrt+0x42>
 800c42a:	f7ff fe37 	bl	800c09c <__errno>
 800c42e:	2321      	movs	r3, #33	@ 0x21
 800c430:	2200      	movs	r2, #0
 800c432:	6003      	str	r3, [r0, #0]
 800c434:	2300      	movs	r3, #0
 800c436:	4610      	mov	r0, r2
 800c438:	4619      	mov	r1, r3
 800c43a:	f7f4 f96f 	bl	800071c <__aeabi_ddiv>
 800c43e:	4604      	mov	r4, r0
 800c440:	460d      	mov	r5, r1
 800c442:	4620      	mov	r0, r4
 800c444:	4629      	mov	r1, r5
 800c446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c448 <__ieee754_sqrt>:
 800c448:	4a65      	ldr	r2, [pc, #404]	@ (800c5e0 <__ieee754_sqrt+0x198>)
 800c44a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c44e:	438a      	bics	r2, r1
 800c450:	4606      	mov	r6, r0
 800c452:	460f      	mov	r7, r1
 800c454:	460b      	mov	r3, r1
 800c456:	4604      	mov	r4, r0
 800c458:	d10e      	bne.n	800c478 <__ieee754_sqrt+0x30>
 800c45a:	4602      	mov	r2, r0
 800c45c:	f7f4 f834 	bl	80004c8 <__aeabi_dmul>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4630      	mov	r0, r6
 800c466:	4639      	mov	r1, r7
 800c468:	f7f3 fe78 	bl	800015c <__adddf3>
 800c46c:	4606      	mov	r6, r0
 800c46e:	460f      	mov	r7, r1
 800c470:	4630      	mov	r0, r6
 800c472:	4639      	mov	r1, r7
 800c474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c478:	2900      	cmp	r1, #0
 800c47a:	dc0c      	bgt.n	800c496 <__ieee754_sqrt+0x4e>
 800c47c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800c480:	4302      	orrs	r2, r0
 800c482:	d0f5      	beq.n	800c470 <__ieee754_sqrt+0x28>
 800c484:	b189      	cbz	r1, 800c4aa <__ieee754_sqrt+0x62>
 800c486:	4602      	mov	r2, r0
 800c488:	f7f3 fe66 	bl	8000158 <__aeabi_dsub>
 800c48c:	4602      	mov	r2, r0
 800c48e:	460b      	mov	r3, r1
 800c490:	f7f4 f944 	bl	800071c <__aeabi_ddiv>
 800c494:	e7ea      	b.n	800c46c <__ieee754_sqrt+0x24>
 800c496:	150a      	asrs	r2, r1, #20
 800c498:	d115      	bne.n	800c4c6 <__ieee754_sqrt+0x7e>
 800c49a:	2100      	movs	r1, #0
 800c49c:	e009      	b.n	800c4b2 <__ieee754_sqrt+0x6a>
 800c49e:	0ae3      	lsrs	r3, r4, #11
 800c4a0:	3a15      	subs	r2, #21
 800c4a2:	0564      	lsls	r4, r4, #21
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d0fa      	beq.n	800c49e <__ieee754_sqrt+0x56>
 800c4a8:	e7f7      	b.n	800c49a <__ieee754_sqrt+0x52>
 800c4aa:	460a      	mov	r2, r1
 800c4ac:	e7fa      	b.n	800c4a4 <__ieee754_sqrt+0x5c>
 800c4ae:	005b      	lsls	r3, r3, #1
 800c4b0:	3101      	adds	r1, #1
 800c4b2:	02d8      	lsls	r0, r3, #11
 800c4b4:	d5fb      	bpl.n	800c4ae <__ieee754_sqrt+0x66>
 800c4b6:	1e48      	subs	r0, r1, #1
 800c4b8:	1a12      	subs	r2, r2, r0
 800c4ba:	f1c1 0020 	rsb	r0, r1, #32
 800c4be:	fa24 f000 	lsr.w	r0, r4, r0
 800c4c2:	4303      	orrs	r3, r0
 800c4c4:	408c      	lsls	r4, r1
 800c4c6:	2700      	movs	r7, #0
 800c4c8:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 800c4cc:	2116      	movs	r1, #22
 800c4ce:	07d2      	lsls	r2, r2, #31
 800c4d0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c4d4:	463a      	mov	r2, r7
 800c4d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c4de:	bf5c      	itt	pl
 800c4e0:	005b      	lslpl	r3, r3, #1
 800c4e2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c4e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c4ea:	bf58      	it	pl
 800c4ec:	0064      	lslpl	r4, r4, #1
 800c4ee:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c4f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c4f6:	0064      	lsls	r4, r4, #1
 800c4f8:	1815      	adds	r5, r2, r0
 800c4fa:	429d      	cmp	r5, r3
 800c4fc:	bfde      	ittt	le
 800c4fe:	182a      	addle	r2, r5, r0
 800c500:	1b5b      	suble	r3, r3, r5
 800c502:	183f      	addle	r7, r7, r0
 800c504:	0fe5      	lsrs	r5, r4, #31
 800c506:	3901      	subs	r1, #1
 800c508:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c50c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c510:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c514:	d1f0      	bne.n	800c4f8 <__ieee754_sqrt+0xb0>
 800c516:	460d      	mov	r5, r1
 800c518:	2620      	movs	r6, #32
 800c51a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c51e:	4293      	cmp	r3, r2
 800c520:	eb00 0c01 	add.w	ip, r0, r1
 800c524:	dc02      	bgt.n	800c52c <__ieee754_sqrt+0xe4>
 800c526:	d113      	bne.n	800c550 <__ieee754_sqrt+0x108>
 800c528:	45a4      	cmp	ip, r4
 800c52a:	d811      	bhi.n	800c550 <__ieee754_sqrt+0x108>
 800c52c:	f1bc 0f00 	cmp.w	ip, #0
 800c530:	eb0c 0100 	add.w	r1, ip, r0
 800c534:	da3e      	bge.n	800c5b4 <__ieee754_sqrt+0x16c>
 800c536:	2900      	cmp	r1, #0
 800c538:	db3c      	blt.n	800c5b4 <__ieee754_sqrt+0x16c>
 800c53a:	f102 0e01 	add.w	lr, r2, #1
 800c53e:	1a9b      	subs	r3, r3, r2
 800c540:	4672      	mov	r2, lr
 800c542:	45a4      	cmp	ip, r4
 800c544:	bf88      	it	hi
 800c546:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c54a:	eba4 040c 	sub.w	r4, r4, ip
 800c54e:	4405      	add	r5, r0
 800c550:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800c554:	3e01      	subs	r6, #1
 800c556:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800c55a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c55e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c562:	d1dc      	bne.n	800c51e <__ieee754_sqrt+0xd6>
 800c564:	431c      	orrs	r4, r3
 800c566:	d01a      	beq.n	800c59e <__ieee754_sqrt+0x156>
 800c568:	4c1e      	ldr	r4, [pc, #120]	@ (800c5e4 <__ieee754_sqrt+0x19c>)
 800c56a:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 800c5e8 <__ieee754_sqrt+0x1a0>
 800c56e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c572:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c576:	f7f3 fdef 	bl	8000158 <__aeabi_dsub>
 800c57a:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800c57e:	4602      	mov	r2, r0
 800c580:	460b      	mov	r3, r1
 800c582:	4650      	mov	r0, sl
 800c584:	4659      	mov	r1, fp
 800c586:	f7f4 fa1b 	bl	80009c0 <__aeabi_dcmple>
 800c58a:	b140      	cbz	r0, 800c59e <__ieee754_sqrt+0x156>
 800c58c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c590:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c594:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c598:	d10e      	bne.n	800c5b8 <__ieee754_sqrt+0x170>
 800c59a:	4635      	mov	r5, r6
 800c59c:	3701      	adds	r7, #1
 800c59e:	107b      	asrs	r3, r7, #1
 800c5a0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800c5a4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800c5a8:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 800c5ac:	086b      	lsrs	r3, r5, #1
 800c5ae:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 800c5b2:	e75b      	b.n	800c46c <__ieee754_sqrt+0x24>
 800c5b4:	4696      	mov	lr, r2
 800c5b6:	e7c2      	b.n	800c53e <__ieee754_sqrt+0xf6>
 800c5b8:	f7f3 fdd0 	bl	800015c <__adddf3>
 800c5bc:	e9d4 ab00 	ldrd	sl, fp, [r4]
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	4650      	mov	r0, sl
 800c5c6:	4659      	mov	r1, fp
 800c5c8:	f7f4 f9f0 	bl	80009ac <__aeabi_dcmplt>
 800c5cc:	b120      	cbz	r0, 800c5d8 <__ieee754_sqrt+0x190>
 800c5ce:	1cab      	adds	r3, r5, #2
 800c5d0:	bf08      	it	eq
 800c5d2:	3701      	addeq	r7, #1
 800c5d4:	3502      	adds	r5, #2
 800c5d6:	e7e2      	b.n	800c59e <__ieee754_sqrt+0x156>
 800c5d8:	1c6b      	adds	r3, r5, #1
 800c5da:	f023 0501 	bic.w	r5, r3, #1
 800c5de:	e7de      	b.n	800c59e <__ieee754_sqrt+0x156>
 800c5e0:	7ff00000 	.word	0x7ff00000
 800c5e4:	0800cc10 	.word	0x0800cc10
 800c5e8:	0800cc08 	.word	0x0800cc08
 800c5ec:	00000000 	.word	0x00000000

0800c5f0 <__ieee754_atan2>:
 800c5f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5f4:	4617      	mov	r7, r2
 800c5f6:	4690      	mov	r8, r2
 800c5f8:	4699      	mov	r9, r3
 800c5fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c5fe:	427b      	negs	r3, r7
 800c600:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800c788 <__ieee754_atan2+0x198>
 800c604:	433b      	orrs	r3, r7
 800c606:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c60a:	4553      	cmp	r3, sl
 800c60c:	4604      	mov	r4, r0
 800c60e:	460d      	mov	r5, r1
 800c610:	d809      	bhi.n	800c626 <__ieee754_atan2+0x36>
 800c612:	4246      	negs	r6, r0
 800c614:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c618:	4306      	orrs	r6, r0
 800c61a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800c61e:	4556      	cmp	r6, sl
 800c620:	468e      	mov	lr, r1
 800c622:	4683      	mov	fp, r0
 800c624:	d908      	bls.n	800c638 <__ieee754_atan2+0x48>
 800c626:	4642      	mov	r2, r8
 800c628:	464b      	mov	r3, r9
 800c62a:	4620      	mov	r0, r4
 800c62c:	4629      	mov	r1, r5
 800c62e:	f7f3 fd95 	bl	800015c <__adddf3>
 800c632:	4604      	mov	r4, r0
 800c634:	460d      	mov	r5, r1
 800c636:	e016      	b.n	800c666 <__ieee754_atan2+0x76>
 800c638:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800c63c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800c640:	433e      	orrs	r6, r7
 800c642:	d103      	bne.n	800c64c <__ieee754_atan2+0x5c>
 800c644:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c648:	f000 b8a6 	b.w	800c798 <atan>
 800c64c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800c650:	f006 0602 	and.w	r6, r6, #2
 800c654:	ea53 0b0b 	orrs.w	fp, r3, fp
 800c658:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800c65c:	d107      	bne.n	800c66e <__ieee754_atan2+0x7e>
 800c65e:	2e02      	cmp	r6, #2
 800c660:	d064      	beq.n	800c72c <__ieee754_atan2+0x13c>
 800c662:	2e03      	cmp	r6, #3
 800c664:	d066      	beq.n	800c734 <__ieee754_atan2+0x144>
 800c666:	4620      	mov	r0, r4
 800c668:	4629      	mov	r1, r5
 800c66a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66e:	4317      	orrs	r7, r2
 800c670:	d106      	bne.n	800c680 <__ieee754_atan2+0x90>
 800c672:	f1be 0f00 	cmp.w	lr, #0
 800c676:	db68      	blt.n	800c74a <__ieee754_atan2+0x15a>
 800c678:	a537      	add	r5, pc, #220	@ (adr r5, 800c758 <__ieee754_atan2+0x168>)
 800c67a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c67e:	e7f2      	b.n	800c666 <__ieee754_atan2+0x76>
 800c680:	4552      	cmp	r2, sl
 800c682:	d10f      	bne.n	800c6a4 <__ieee754_atan2+0xb4>
 800c684:	4293      	cmp	r3, r2
 800c686:	f106 36ff 	add.w	r6, r6, #4294967295
 800c68a:	d107      	bne.n	800c69c <__ieee754_atan2+0xac>
 800c68c:	2e02      	cmp	r6, #2
 800c68e:	d855      	bhi.n	800c73c <__ieee754_atan2+0x14c>
 800c690:	4b3e      	ldr	r3, [pc, #248]	@ (800c78c <__ieee754_atan2+0x19c>)
 800c692:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c696:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c69a:	e7e4      	b.n	800c666 <__ieee754_atan2+0x76>
 800c69c:	2e02      	cmp	r6, #2
 800c69e:	d851      	bhi.n	800c744 <__ieee754_atan2+0x154>
 800c6a0:	4b3b      	ldr	r3, [pc, #236]	@ (800c790 <__ieee754_atan2+0x1a0>)
 800c6a2:	e7f6      	b.n	800c692 <__ieee754_atan2+0xa2>
 800c6a4:	4553      	cmp	r3, sl
 800c6a6:	d0e4      	beq.n	800c672 <__ieee754_atan2+0x82>
 800c6a8:	1a9b      	subs	r3, r3, r2
 800c6aa:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800c6ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c6b2:	da21      	bge.n	800c6f8 <__ieee754_atan2+0x108>
 800c6b4:	f1b9 0f00 	cmp.w	r9, #0
 800c6b8:	da01      	bge.n	800c6be <__ieee754_atan2+0xce>
 800c6ba:	323c      	adds	r2, #60	@ 0x3c
 800c6bc:	db20      	blt.n	800c700 <__ieee754_atan2+0x110>
 800c6be:	4642      	mov	r2, r8
 800c6c0:	464b      	mov	r3, r9
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	4629      	mov	r1, r5
 800c6c6:	f7f4 f829 	bl	800071c <__aeabi_ddiv>
 800c6ca:	f000 f9f5 	bl	800cab8 <fabs>
 800c6ce:	f000 f863 	bl	800c798 <atan>
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	2e01      	cmp	r6, #1
 800c6d8:	d015      	beq.n	800c706 <__ieee754_atan2+0x116>
 800c6da:	2e02      	cmp	r6, #2
 800c6dc:	d017      	beq.n	800c70e <__ieee754_atan2+0x11e>
 800c6de:	2e00      	cmp	r6, #0
 800c6e0:	d0c1      	beq.n	800c666 <__ieee754_atan2+0x76>
 800c6e2:	a31f      	add	r3, pc, #124	@ (adr r3, 800c760 <__ieee754_atan2+0x170>)
 800c6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	f7f3 fd34 	bl	8000158 <__aeabi_dsub>
 800c6f0:	a31d      	add	r3, pc, #116	@ (adr r3, 800c768 <__ieee754_atan2+0x178>)
 800c6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f6:	e016      	b.n	800c726 <__ieee754_atan2+0x136>
 800c6f8:	a517      	add	r5, pc, #92	@ (adr r5, 800c758 <__ieee754_atan2+0x168>)
 800c6fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c6fe:	e7ea      	b.n	800c6d6 <__ieee754_atan2+0xe6>
 800c700:	2400      	movs	r4, #0
 800c702:	2500      	movs	r5, #0
 800c704:	e7e7      	b.n	800c6d6 <__ieee754_atan2+0xe6>
 800c706:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800c70a:	461d      	mov	r5, r3
 800c70c:	e7ab      	b.n	800c666 <__ieee754_atan2+0x76>
 800c70e:	a314      	add	r3, pc, #80	@ (adr r3, 800c760 <__ieee754_atan2+0x170>)
 800c710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c714:	4620      	mov	r0, r4
 800c716:	4629      	mov	r1, r5
 800c718:	f7f3 fd1e 	bl	8000158 <__aeabi_dsub>
 800c71c:	4602      	mov	r2, r0
 800c71e:	460b      	mov	r3, r1
 800c720:	a111      	add	r1, pc, #68	@ (adr r1, 800c768 <__ieee754_atan2+0x178>)
 800c722:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c726:	f7f3 fd17 	bl	8000158 <__aeabi_dsub>
 800c72a:	e782      	b.n	800c632 <__ieee754_atan2+0x42>
 800c72c:	a50e      	add	r5, pc, #56	@ (adr r5, 800c768 <__ieee754_atan2+0x178>)
 800c72e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c732:	e798      	b.n	800c666 <__ieee754_atan2+0x76>
 800c734:	a50e      	add	r5, pc, #56	@ (adr r5, 800c770 <__ieee754_atan2+0x180>)
 800c736:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c73a:	e794      	b.n	800c666 <__ieee754_atan2+0x76>
 800c73c:	a50e      	add	r5, pc, #56	@ (adr r5, 800c778 <__ieee754_atan2+0x188>)
 800c73e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c742:	e790      	b.n	800c666 <__ieee754_atan2+0x76>
 800c744:	2400      	movs	r4, #0
 800c746:	2500      	movs	r5, #0
 800c748:	e78d      	b.n	800c666 <__ieee754_atan2+0x76>
 800c74a:	a50d      	add	r5, pc, #52	@ (adr r5, 800c780 <__ieee754_atan2+0x190>)
 800c74c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c750:	e789      	b.n	800c666 <__ieee754_atan2+0x76>
 800c752:	bf00      	nop
 800c754:	f3af 8000 	nop.w
 800c758:	54442d18 	.word	0x54442d18
 800c75c:	3ff921fb 	.word	0x3ff921fb
 800c760:	33145c07 	.word	0x33145c07
 800c764:	3ca1a626 	.word	0x3ca1a626
 800c768:	54442d18 	.word	0x54442d18
 800c76c:	400921fb 	.word	0x400921fb
 800c770:	54442d18 	.word	0x54442d18
 800c774:	c00921fb 	.word	0xc00921fb
 800c778:	54442d18 	.word	0x54442d18
 800c77c:	3fe921fb 	.word	0x3fe921fb
 800c780:	54442d18 	.word	0x54442d18
 800c784:	bff921fb 	.word	0xbff921fb
 800c788:	7ff00000 	.word	0x7ff00000
 800c78c:	0800cc30 	.word	0x0800cc30
 800c790:	0800cc18 	.word	0x0800cc18
 800c794:	00000000 	.word	0x00000000

0800c798 <atan>:
 800c798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79c:	4bbc      	ldr	r3, [pc, #752]	@ (800ca90 <atan+0x2f8>)
 800c79e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800c7a2:	429e      	cmp	r6, r3
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	460d      	mov	r5, r1
 800c7a8:	468b      	mov	fp, r1
 800c7aa:	d918      	bls.n	800c7de <atan+0x46>
 800c7ac:	4bb9      	ldr	r3, [pc, #740]	@ (800ca94 <atan+0x2fc>)
 800c7ae:	429e      	cmp	r6, r3
 800c7b0:	d801      	bhi.n	800c7b6 <atan+0x1e>
 800c7b2:	d109      	bne.n	800c7c8 <atan+0x30>
 800c7b4:	b140      	cbz	r0, 800c7c8 <atan+0x30>
 800c7b6:	4622      	mov	r2, r4
 800c7b8:	462b      	mov	r3, r5
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	4629      	mov	r1, r5
 800c7be:	f7f3 fccd 	bl	800015c <__adddf3>
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	460d      	mov	r5, r1
 800c7c6:	e006      	b.n	800c7d6 <atan+0x3e>
 800c7c8:	f1bb 0f00 	cmp.w	fp, #0
 800c7cc:	f340 8123 	ble.w	800ca16 <atan+0x27e>
 800c7d0:	a593      	add	r5, pc, #588	@ (adr r5, 800ca20 <atan+0x288>)
 800c7d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c7d6:	4620      	mov	r0, r4
 800c7d8:	4629      	mov	r1, r5
 800c7da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7de:	4bae      	ldr	r3, [pc, #696]	@ (800ca98 <atan+0x300>)
 800c7e0:	429e      	cmp	r6, r3
 800c7e2:	d811      	bhi.n	800c808 <atan+0x70>
 800c7e4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800c7e8:	429e      	cmp	r6, r3
 800c7ea:	d80a      	bhi.n	800c802 <atan+0x6a>
 800c7ec:	a38e      	add	r3, pc, #568	@ (adr r3, 800ca28 <atan+0x290>)
 800c7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f2:	f7f3 fcb3 	bl	800015c <__adddf3>
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	4ba8      	ldr	r3, [pc, #672]	@ (800ca9c <atan+0x304>)
 800c7fa:	f7f4 f8f5 	bl	80009e8 <__aeabi_dcmpgt>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d1e9      	bne.n	800c7d6 <atan+0x3e>
 800c802:	f04f 3aff 	mov.w	sl, #4294967295
 800c806:	e027      	b.n	800c858 <atan+0xc0>
 800c808:	f000 f956 	bl	800cab8 <fabs>
 800c80c:	4ba4      	ldr	r3, [pc, #656]	@ (800caa0 <atan+0x308>)
 800c80e:	4604      	mov	r4, r0
 800c810:	429e      	cmp	r6, r3
 800c812:	460d      	mov	r5, r1
 800c814:	f200 80b8 	bhi.w	800c988 <atan+0x1f0>
 800c818:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800c81c:	429e      	cmp	r6, r3
 800c81e:	f200 809c 	bhi.w	800c95a <atan+0x1c2>
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	f7f3 fc99 	bl	800015c <__adddf3>
 800c82a:	2200      	movs	r2, #0
 800c82c:	4b9b      	ldr	r3, [pc, #620]	@ (800ca9c <atan+0x304>)
 800c82e:	f7f3 fc93 	bl	8000158 <__aeabi_dsub>
 800c832:	2200      	movs	r2, #0
 800c834:	4606      	mov	r6, r0
 800c836:	460f      	mov	r7, r1
 800c838:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c83c:	4620      	mov	r0, r4
 800c83e:	4629      	mov	r1, r5
 800c840:	f7f3 fc8c 	bl	800015c <__adddf3>
 800c844:	4602      	mov	r2, r0
 800c846:	460b      	mov	r3, r1
 800c848:	4630      	mov	r0, r6
 800c84a:	4639      	mov	r1, r7
 800c84c:	f7f3 ff66 	bl	800071c <__aeabi_ddiv>
 800c850:	f04f 0a00 	mov.w	sl, #0
 800c854:	4604      	mov	r4, r0
 800c856:	460d      	mov	r5, r1
 800c858:	4622      	mov	r2, r4
 800c85a:	462b      	mov	r3, r5
 800c85c:	4620      	mov	r0, r4
 800c85e:	4629      	mov	r1, r5
 800c860:	f7f3 fe32 	bl	80004c8 <__aeabi_dmul>
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	4680      	mov	r8, r0
 800c86a:	4689      	mov	r9, r1
 800c86c:	f7f3 fe2c 	bl	80004c8 <__aeabi_dmul>
 800c870:	a36f      	add	r3, pc, #444	@ (adr r3, 800ca30 <atan+0x298>)
 800c872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c876:	4606      	mov	r6, r0
 800c878:	460f      	mov	r7, r1
 800c87a:	f7f3 fe25 	bl	80004c8 <__aeabi_dmul>
 800c87e:	a36e      	add	r3, pc, #440	@ (adr r3, 800ca38 <atan+0x2a0>)
 800c880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c884:	f7f3 fc6a 	bl	800015c <__adddf3>
 800c888:	4632      	mov	r2, r6
 800c88a:	463b      	mov	r3, r7
 800c88c:	f7f3 fe1c 	bl	80004c8 <__aeabi_dmul>
 800c890:	a36b      	add	r3, pc, #428	@ (adr r3, 800ca40 <atan+0x2a8>)
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	f7f3 fc61 	bl	800015c <__adddf3>
 800c89a:	4632      	mov	r2, r6
 800c89c:	463b      	mov	r3, r7
 800c89e:	f7f3 fe13 	bl	80004c8 <__aeabi_dmul>
 800c8a2:	a369      	add	r3, pc, #420	@ (adr r3, 800ca48 <atan+0x2b0>)
 800c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a8:	f7f3 fc58 	bl	800015c <__adddf3>
 800c8ac:	4632      	mov	r2, r6
 800c8ae:	463b      	mov	r3, r7
 800c8b0:	f7f3 fe0a 	bl	80004c8 <__aeabi_dmul>
 800c8b4:	a366      	add	r3, pc, #408	@ (adr r3, 800ca50 <atan+0x2b8>)
 800c8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ba:	f7f3 fc4f 	bl	800015c <__adddf3>
 800c8be:	4632      	mov	r2, r6
 800c8c0:	463b      	mov	r3, r7
 800c8c2:	f7f3 fe01 	bl	80004c8 <__aeabi_dmul>
 800c8c6:	a364      	add	r3, pc, #400	@ (adr r3, 800ca58 <atan+0x2c0>)
 800c8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8cc:	f7f3 fc46 	bl	800015c <__adddf3>
 800c8d0:	4642      	mov	r2, r8
 800c8d2:	464b      	mov	r3, r9
 800c8d4:	f7f3 fdf8 	bl	80004c8 <__aeabi_dmul>
 800c8d8:	a361      	add	r3, pc, #388	@ (adr r3, 800ca60 <atan+0x2c8>)
 800c8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8de:	4680      	mov	r8, r0
 800c8e0:	4689      	mov	r9, r1
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	4639      	mov	r1, r7
 800c8e6:	f7f3 fdef 	bl	80004c8 <__aeabi_dmul>
 800c8ea:	a35f      	add	r3, pc, #380	@ (adr r3, 800ca68 <atan+0x2d0>)
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	f7f3 fc32 	bl	8000158 <__aeabi_dsub>
 800c8f4:	4632      	mov	r2, r6
 800c8f6:	463b      	mov	r3, r7
 800c8f8:	f7f3 fde6 	bl	80004c8 <__aeabi_dmul>
 800c8fc:	a35c      	add	r3, pc, #368	@ (adr r3, 800ca70 <atan+0x2d8>)
 800c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c902:	f7f3 fc29 	bl	8000158 <__aeabi_dsub>
 800c906:	4632      	mov	r2, r6
 800c908:	463b      	mov	r3, r7
 800c90a:	f7f3 fddd 	bl	80004c8 <__aeabi_dmul>
 800c90e:	a35a      	add	r3, pc, #360	@ (adr r3, 800ca78 <atan+0x2e0>)
 800c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c914:	f7f3 fc20 	bl	8000158 <__aeabi_dsub>
 800c918:	4632      	mov	r2, r6
 800c91a:	463b      	mov	r3, r7
 800c91c:	f7f3 fdd4 	bl	80004c8 <__aeabi_dmul>
 800c920:	a357      	add	r3, pc, #348	@ (adr r3, 800ca80 <atan+0x2e8>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	f7f3 fc17 	bl	8000158 <__aeabi_dsub>
 800c92a:	4632      	mov	r2, r6
 800c92c:	463b      	mov	r3, r7
 800c92e:	f7f3 fdcb 	bl	80004c8 <__aeabi_dmul>
 800c932:	4602      	mov	r2, r0
 800c934:	460b      	mov	r3, r1
 800c936:	4640      	mov	r0, r8
 800c938:	4649      	mov	r1, r9
 800c93a:	f7f3 fc0f 	bl	800015c <__adddf3>
 800c93e:	4622      	mov	r2, r4
 800c940:	462b      	mov	r3, r5
 800c942:	f7f3 fdc1 	bl	80004c8 <__aeabi_dmul>
 800c946:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c94a:	4602      	mov	r2, r0
 800c94c:	460b      	mov	r3, r1
 800c94e:	d144      	bne.n	800c9da <atan+0x242>
 800c950:	4620      	mov	r0, r4
 800c952:	4629      	mov	r1, r5
 800c954:	f7f3 fc00 	bl	8000158 <__aeabi_dsub>
 800c958:	e733      	b.n	800c7c2 <atan+0x2a>
 800c95a:	2200      	movs	r2, #0
 800c95c:	4b4f      	ldr	r3, [pc, #316]	@ (800ca9c <atan+0x304>)
 800c95e:	f7f3 fbfb 	bl	8000158 <__aeabi_dsub>
 800c962:	2200      	movs	r2, #0
 800c964:	4606      	mov	r6, r0
 800c966:	460f      	mov	r7, r1
 800c968:	4620      	mov	r0, r4
 800c96a:	4629      	mov	r1, r5
 800c96c:	4b4b      	ldr	r3, [pc, #300]	@ (800ca9c <atan+0x304>)
 800c96e:	f7f3 fbf5 	bl	800015c <__adddf3>
 800c972:	4602      	mov	r2, r0
 800c974:	460b      	mov	r3, r1
 800c976:	4630      	mov	r0, r6
 800c978:	4639      	mov	r1, r7
 800c97a:	f7f3 fecf 	bl	800071c <__aeabi_ddiv>
 800c97e:	f04f 0a01 	mov.w	sl, #1
 800c982:	4604      	mov	r4, r0
 800c984:	460d      	mov	r5, r1
 800c986:	e767      	b.n	800c858 <atan+0xc0>
 800c988:	4b46      	ldr	r3, [pc, #280]	@ (800caa4 <atan+0x30c>)
 800c98a:	429e      	cmp	r6, r3
 800c98c:	d21a      	bcs.n	800c9c4 <atan+0x22c>
 800c98e:	2200      	movs	r2, #0
 800c990:	4b45      	ldr	r3, [pc, #276]	@ (800caa8 <atan+0x310>)
 800c992:	f7f3 fbe1 	bl	8000158 <__aeabi_dsub>
 800c996:	2200      	movs	r2, #0
 800c998:	4606      	mov	r6, r0
 800c99a:	460f      	mov	r7, r1
 800c99c:	4620      	mov	r0, r4
 800c99e:	4629      	mov	r1, r5
 800c9a0:	4b41      	ldr	r3, [pc, #260]	@ (800caa8 <atan+0x310>)
 800c9a2:	f7f3 fd91 	bl	80004c8 <__aeabi_dmul>
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	4b3c      	ldr	r3, [pc, #240]	@ (800ca9c <atan+0x304>)
 800c9aa:	f7f3 fbd7 	bl	800015c <__adddf3>
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	4639      	mov	r1, r7
 800c9b6:	f7f3 feb1 	bl	800071c <__aeabi_ddiv>
 800c9ba:	f04f 0a02 	mov.w	sl, #2
 800c9be:	4604      	mov	r4, r0
 800c9c0:	460d      	mov	r5, r1
 800c9c2:	e749      	b.n	800c858 <atan+0xc0>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	4938      	ldr	r1, [pc, #224]	@ (800caac <atan+0x314>)
 800c9cc:	f7f3 fea6 	bl	800071c <__aeabi_ddiv>
 800c9d0:	f04f 0a03 	mov.w	sl, #3
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	460d      	mov	r5, r1
 800c9d8:	e73e      	b.n	800c858 <atan+0xc0>
 800c9da:	4b35      	ldr	r3, [pc, #212]	@ (800cab0 <atan+0x318>)
 800c9dc:	4e35      	ldr	r6, [pc, #212]	@ (800cab4 <atan+0x31c>)
 800c9de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e6:	f7f3 fbb7 	bl	8000158 <__aeabi_dsub>
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	462b      	mov	r3, r5
 800c9ee:	f7f3 fbb3 	bl	8000158 <__aeabi_dsub>
 800c9f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	460b      	mov	r3, r1
 800c9fa:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c9fe:	f7f3 fbab 	bl	8000158 <__aeabi_dsub>
 800ca02:	f1bb 0f00 	cmp.w	fp, #0
 800ca06:	4604      	mov	r4, r0
 800ca08:	460d      	mov	r5, r1
 800ca0a:	f6bf aee4 	bge.w	800c7d6 <atan+0x3e>
 800ca0e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ca12:	461d      	mov	r5, r3
 800ca14:	e6df      	b.n	800c7d6 <atan+0x3e>
 800ca16:	a51c      	add	r5, pc, #112	@ (adr r5, 800ca88 <atan+0x2f0>)
 800ca18:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ca1c:	e6db      	b.n	800c7d6 <atan+0x3e>
 800ca1e:	bf00      	nop
 800ca20:	54442d18 	.word	0x54442d18
 800ca24:	3ff921fb 	.word	0x3ff921fb
 800ca28:	8800759c 	.word	0x8800759c
 800ca2c:	7e37e43c 	.word	0x7e37e43c
 800ca30:	e322da11 	.word	0xe322da11
 800ca34:	3f90ad3a 	.word	0x3f90ad3a
 800ca38:	24760deb 	.word	0x24760deb
 800ca3c:	3fa97b4b 	.word	0x3fa97b4b
 800ca40:	a0d03d51 	.word	0xa0d03d51
 800ca44:	3fb10d66 	.word	0x3fb10d66
 800ca48:	c54c206e 	.word	0xc54c206e
 800ca4c:	3fb745cd 	.word	0x3fb745cd
 800ca50:	920083ff 	.word	0x920083ff
 800ca54:	3fc24924 	.word	0x3fc24924
 800ca58:	5555550d 	.word	0x5555550d
 800ca5c:	3fd55555 	.word	0x3fd55555
 800ca60:	2c6a6c2f 	.word	0x2c6a6c2f
 800ca64:	bfa2b444 	.word	0xbfa2b444
 800ca68:	52defd9a 	.word	0x52defd9a
 800ca6c:	3fadde2d 	.word	0x3fadde2d
 800ca70:	af749a6d 	.word	0xaf749a6d
 800ca74:	3fb3b0f2 	.word	0x3fb3b0f2
 800ca78:	fe231671 	.word	0xfe231671
 800ca7c:	3fbc71c6 	.word	0x3fbc71c6
 800ca80:	9998ebc4 	.word	0x9998ebc4
 800ca84:	3fc99999 	.word	0x3fc99999
 800ca88:	54442d18 	.word	0x54442d18
 800ca8c:	bff921fb 	.word	0xbff921fb
 800ca90:	440fffff 	.word	0x440fffff
 800ca94:	7ff00000 	.word	0x7ff00000
 800ca98:	3fdbffff 	.word	0x3fdbffff
 800ca9c:	3ff00000 	.word	0x3ff00000
 800caa0:	3ff2ffff 	.word	0x3ff2ffff
 800caa4:	40038000 	.word	0x40038000
 800caa8:	3ff80000 	.word	0x3ff80000
 800caac:	bff00000 	.word	0xbff00000
 800cab0:	0800cc48 	.word	0x0800cc48
 800cab4:	0800cc68 	.word	0x0800cc68

0800cab8 <fabs>:
 800cab8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cabc:	4619      	mov	r1, r3
 800cabe:	4770      	bx	lr

0800cac0 <_init>:
 800cac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac2:	bf00      	nop
 800cac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cac6:	bc08      	pop	{r3}
 800cac8:	469e      	mov	lr, r3
 800caca:	4770      	bx	lr

0800cacc <_fini>:
 800cacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cace:	bf00      	nop
 800cad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cad2:	bc08      	pop	{r3}
 800cad4:	469e      	mov	lr, r3
 800cad6:	4770      	bx	lr
