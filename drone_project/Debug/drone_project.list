
drone_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b74  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08008c84  08008c84  00009c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008db4  08008db4  0000a06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008db4  08008db4  0000a06c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008db4  08008db4  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008db4  08008db4  00009db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008db8  08008db8  00009db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008dbc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd8  2000006c  08008e28  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d44  08008e28  0000ad44  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182f4  00000000  00000000  0000a095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003856  00000000  00000000  00022389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  00025be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001138  00000000  00000000  00027210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ac5  00000000  00000000  00028348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000187eb  00000000  00000000  0002ce0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099691  00000000  00000000  000455f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dec89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063f4  00000000  00000000  000deccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000e50c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c6c 	.word	0x08008c6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08008c6c 	.word	0x08008c6c

08000150 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000156:	f000 fea7 	bl	8000ea8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800015a:	f000 f8ad 	bl	80002b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015e:	f000 f93d 	bl	80003dc <MX_GPIO_Init>
	MX_DMA_Init();
 8000162:	f000 f915 	bl	8000390 <MX_DMA_Init>
	MX_I2C2_Init();
 8000166:	f000 f8e3 	bl	8000330 <MX_I2C2_Init>
	//HAL i2c notes:
	//address of MPU6050 device is 1101000, but we shift it to left because the transmit and receive functions require that. So we are left with 0xD0
	//Argument to right of MPU6050_ADDR_LSL1 is the register address, see the register description in onenote.
	uint8_t reg_addr[1];
	/* We compute the MSB and LSB parts of the memory address */
	reg_addr[0] = (uint8_t) (0x6A);
 800016a:	236a      	movs	r3, #106	@ 0x6a
 800016c:	713b      	strb	r3, [r7, #4]

	//delay for init functions to see if it stops glitch of i2c transmission never completing
	HAL_Delay(1000);
 800016e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000172:	f000 fecb 	bl	8000f0c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000176:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800017a:	483a      	ldr	r0, [pc, #232]	@ (8000264 <main+0x114>)
 800017c:	f001 fbd8 	bl	8001930 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000180:	2064      	movs	r0, #100	@ 0x64
 8000182:	f000 fec3 	bl	8000f0c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000186:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800018a:	4836      	ldr	r0, [pc, #216]	@ (8000264 <main+0x114>)
 800018c:	f001 fbd0 	bl	8001930 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8000190:	2064      	movs	r0, #100	@ 0x64
 8000192:	f000 febb 	bl	8000f0c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000196:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800019a:	4832      	ldr	r0, [pc, #200]	@ (8000264 <main+0x114>)
 800019c:	f001 fbc8 	bl	8001930 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80001a0:	2064      	movs	r0, #100	@ 0x64
 80001a2:	f000 feb3 	bl	8000f0c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001aa:	482e      	ldr	r0, [pc, #184]	@ (8000264 <main+0x114>)
 80001ac:	f001 fbc0 	bl	8001930 <HAL_GPIO_TogglePin>

	//test if transmission works
	HAL_StatusTypeDef returnValue = HAL_I2C_Master_Transmit_DMA(&hi2c2, MPU6050_ADDR_LSL1, reg_addr, 1);
 80001b0:	1d3a      	adds	r2, r7, #4
 80001b2:	2301      	movs	r3, #1
 80001b4:	21d0      	movs	r1, #208	@ 0xd0
 80001b6:	482c      	ldr	r0, [pc, #176]	@ (8000268 <main+0x118>)
 80001b8:	f001 fd4e 	bl	8001c58 <HAL_I2C_Master_Transmit_DMA>
 80001bc:	4603      	mov	r3, r0
 80001be:	71fb      	strb	r3, [r7, #7]
	while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY);
 80001c0:	bf00      	nop
 80001c2:	4829      	ldr	r0, [pc, #164]	@ (8000268 <main+0x118>)
 80001c4:	f002 fc67 	bl	8002a96 <HAL_I2C_GetState>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b20      	cmp	r3, #32
 80001cc:	d1f9      	bne.n	80001c2 <main+0x72>
	if (returnValue != HAL_OK)
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <main+0x88>
	{
		Error_Handler();
 80001d4:	f000 f9ce 	bl	8000574 <Error_Handler>
	}
	if (__HAL_DMA_GET_FLAG(&hdma_i2c1_tx, (0x00000002U)))
 80001d8:	4b24      	ldr	r3, [pc, #144]	@ (800026c <main+0x11c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	f003 0302 	and.w	r3, r3, #2
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d002      	beq.n	80001ea <main+0x9a>
	{ // Transfer error
		printf("DMA Transfer Error\n");
 80001e4:	4822      	ldr	r0, [pc, #136]	@ (8000270 <main+0x120>)
 80001e6:	f008 f9f5 	bl	80085d4 <puts>
		// Handle error here
	}
	HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80001ea:	4822      	ldr	r0, [pc, #136]	@ (8000274 <main+0x124>)
 80001ec:	f001 f8c4 	bl	8001378 <HAL_DMA_IRQHandler>
	while (!i2c_TX_done);
 80001f0:	bf00      	nop
 80001f2:	4b21      	ldr	r3, [pc, #132]	@ (8000278 <main+0x128>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d0fb      	beq.n	80001f2 <main+0xa2>
	i2c_TX_done = 0;
 80001fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000278 <main+0x128>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	701a      	strb	r2, [r3, #0]

	//setup storage for data
	mpu6050_init(&hi2c2); //write to registers in mpu6050 to configure initial settings
 8000200:	4819      	ldr	r0, [pc, #100]	@ (8000268 <main+0x118>)
 8000202:	f000 fa4d 	bl	80006a0 <mpu6050_init>
	// moved to private variables to see values of attributes in structs in debug mode easier
	//	mpu6050_sensor_data sensor_data_1;
	//	kalman_filter filter1;

	//define starting position
	sensor_data_init(&sensor_data_1); //likely not necessary
 8000206:	481d      	ldr	r0, [pc, #116]	@ (800027c <main+0x12c>)
 8000208:	f000 fbce 	bl	80009a8 <sensor_data_init>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 800020c:	f004 fe96 	bl	8004f3c <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of xMutex */
	xMutexHandle = osMutexNew(&xMutex_attributes);
 8000210:	481b      	ldr	r0, [pc, #108]	@ (8000280 <main+0x130>)
 8000212:	f004 ff88 	bl	8005126 <osMutexNew>
 8000216:	4603      	mov	r3, r0
 8000218:	4a1a      	ldr	r2, [pc, #104]	@ (8000284 <main+0x134>)
 800021a:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800021c:	4a1a      	ldr	r2, [pc, #104]	@ (8000288 <main+0x138>)
 800021e:	2100      	movs	r1, #0
 8000220:	481a      	ldr	r0, [pc, #104]	@ (800028c <main+0x13c>)
 8000222:	f004 fed3 	bl	8004fcc <osThreadNew>
 8000226:	4603      	mov	r3, r0
 8000228:	4a19      	ldr	r2, [pc, #100]	@ (8000290 <main+0x140>)
 800022a:	6013      	str	r3, [r2, #0]

	/* creation of PIDTask */
	PIDTaskHandle = osThreadNew(updatePID, NULL, &PIDTask_attributes);
 800022c:	4a19      	ldr	r2, [pc, #100]	@ (8000294 <main+0x144>)
 800022e:	2100      	movs	r1, #0
 8000230:	4819      	ldr	r0, [pc, #100]	@ (8000298 <main+0x148>)
 8000232:	f004 fecb 	bl	8004fcc <osThreadNew>
 8000236:	4603      	mov	r3, r0
 8000238:	4a18      	ldr	r2, [pc, #96]	@ (800029c <main+0x14c>)
 800023a:	6013      	str	r3, [r2, #0]

	/* creation of orientationTask */
	orientationTaskHandle = osThreadNew(getOrientation, NULL, &orientationTask_attributes);
 800023c:	4a18      	ldr	r2, [pc, #96]	@ (80002a0 <main+0x150>)
 800023e:	2100      	movs	r1, #0
 8000240:	4818      	ldr	r0, [pc, #96]	@ (80002a4 <main+0x154>)
 8000242:	f004 fec3 	bl	8004fcc <osThreadNew>
 8000246:	4603      	mov	r3, r0
 8000248:	4a17      	ldr	r2, [pc, #92]	@ (80002a8 <main+0x158>)
 800024a:	6013      	str	r3, [r2, #0]

	/* creation of inputsTask */
	inputsTaskHandle = osThreadNew(getInputs, NULL, &inputsTask_attributes);
 800024c:	4a17      	ldr	r2, [pc, #92]	@ (80002ac <main+0x15c>)
 800024e:	2100      	movs	r1, #0
 8000250:	4817      	ldr	r0, [pc, #92]	@ (80002b0 <main+0x160>)
 8000252:	f004 febb 	bl	8004fcc <osThreadNew>
 8000256:	4603      	mov	r3, r0
 8000258:	4a16      	ldr	r2, [pc, #88]	@ (80002b4 <main+0x164>)
 800025a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800025c:	f004 fe90 	bl	8004f80 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000260:	bf00      	nop
 8000262:	e7fd      	b.n	8000260 <main+0x110>
 8000264:	40011000 	.word	0x40011000
 8000268:	20000088 	.word	0x20000088
 800026c:	40020000 	.word	0x40020000
 8000270:	08008cbc 	.word	0x08008cbc
 8000274:	200000dc 	.word	0x200000dc
 8000278:	200001a9 	.word	0x200001a9
 800027c:	20000178 	.word	0x20000178
 8000280:	08008d78 	.word	0x08008d78
 8000284:	20000174 	.word	0x20000174
 8000288:	08008ce8 	.word	0x08008ce8
 800028c:	080004dd 	.word	0x080004dd
 8000290:	20000164 	.word	0x20000164
 8000294:	08008d0c 	.word	0x08008d0c
 8000298:	080004ed 	.word	0x080004ed
 800029c:	20000168 	.word	0x20000168
 80002a0:	08008d30 	.word	0x08008d30
 80002a4:	080004fd 	.word	0x080004fd
 80002a8:	2000016c 	.word	0x2000016c
 80002ac:	08008d54 	.word	0x08008d54
 80002b0:	08000541 	.word	0x08000541
 80002b4:	20000170 	.word	0x20000170

080002b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	@ 0x40
 80002bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f008 fa64 	bl	8008794 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	2310      	movs	r3, #16
 80002e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e6:	2300      	movs	r3, #0
 80002e8:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	4618      	mov	r0, r3
 80002f0:	f003 ff76 	bl	80041e0 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x46>
	{
		Error_Handler();
 80002fa:	f000 f93b 	bl	8000574 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f004 f9e4 	bl	80046e4 <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8000322:	f000 f927 	bl	8000574 <Error_Handler>
	}
}
 8000326:	bf00      	nop
 8000328:	3740      	adds	r7, #64	@ 0x40
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
	...

08000330 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000334:	4b13      	ldr	r3, [pc, #76]	@ (8000384 <MX_I2C2_Init+0x54>)
 8000336:	4a14      	ldr	r2, [pc, #80]	@ (8000388 <MX_I2C2_Init+0x58>)
 8000338:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 800033a:	4b12      	ldr	r3, [pc, #72]	@ (8000384 <MX_I2C2_Init+0x54>)
 800033c:	4a13      	ldr	r2, [pc, #76]	@ (800038c <MX_I2C2_Init+0x5c>)
 800033e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000340:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <MX_I2C2_Init+0x54>)
 8000342:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000346:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000348:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <MX_I2C2_Init+0x54>)
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034e:	4b0d      	ldr	r3, [pc, #52]	@ (8000384 <MX_I2C2_Init+0x54>)
 8000350:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000354:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000356:	4b0b      	ldr	r3, [pc, #44]	@ (8000384 <MX_I2C2_Init+0x54>)
 8000358:	2200      	movs	r2, #0
 800035a:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800035c:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <MX_I2C2_Init+0x54>)
 800035e:	2200      	movs	r2, #0
 8000360:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000362:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <MX_I2C2_Init+0x54>)
 8000364:	2200      	movs	r2, #0
 8000366:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <MX_I2C2_Init+0x54>)
 800036a:	2200      	movs	r2, #0
 800036c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800036e:	4805      	ldr	r0, [pc, #20]	@ (8000384 <MX_I2C2_Init+0x54>)
 8000370:	f001 fb1a 	bl	80019a8 <HAL_I2C_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_I2C2_Init+0x4e>
	{
		Error_Handler();
 800037a:	f000 f8fb 	bl	8000574 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000088 	.word	0x20000088
 8000388:	40005800 	.word	0x40005800
 800038c:	00061a80 	.word	0x00061a80

08000390 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000396:	4b10      	ldr	r3, [pc, #64]	@ (80003d8 <MX_DMA_Init+0x48>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a0f      	ldr	r2, [pc, #60]	@ (80003d8 <MX_DMA_Init+0x48>)
 800039c:	f043 0301 	orr.w	r3, r3, #1
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b0d      	ldr	r3, [pc, #52]	@ (80003d8 <MX_DMA_Init+0x48>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2105      	movs	r1, #5
 80003b2:	200e      	movs	r0, #14
 80003b4:	f000 fe83 	bl	80010be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003b8:	200e      	movs	r0, #14
 80003ba:	f000 fe9c 	bl	80010f6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80003be:	2200      	movs	r2, #0
 80003c0:	2105      	movs	r1, #5
 80003c2:	200f      	movs	r0, #15
 80003c4:	f000 fe7b 	bl	80010be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003c8:	200f      	movs	r0, #15
 80003ca:	f000 fe94 	bl	80010f6 <HAL_NVIC_EnableIRQ>

}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000

080003dc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b088      	sub	sp, #32
 80003e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 0310 	add.w	r3, r7, #16
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003f0:	4b28      	ldr	r3, [pc, #160]	@ (8000494 <MX_GPIO_Init+0xb8>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a27      	ldr	r2, [pc, #156]	@ (8000494 <MX_GPIO_Init+0xb8>)
 80003f6:	f043 0310 	orr.w	r3, r3, #16
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b25      	ldr	r3, [pc, #148]	@ (8000494 <MX_GPIO_Init+0xb8>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0310 	and.w	r3, r3, #16
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000408:	4b22      	ldr	r3, [pc, #136]	@ (8000494 <MX_GPIO_Init+0xb8>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a21      	ldr	r2, [pc, #132]	@ (8000494 <MX_GPIO_Init+0xb8>)
 800040e:	f043 0308 	orr.w	r3, r3, #8
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b1f      	ldr	r3, [pc, #124]	@ (8000494 <MX_GPIO_Init+0xb8>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0308 	and.w	r3, r3, #8
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000420:	4b1c      	ldr	r3, [pc, #112]	@ (8000494 <MX_GPIO_Init+0xb8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a1b      	ldr	r2, [pc, #108]	@ (8000494 <MX_GPIO_Init+0xb8>)
 8000426:	f043 0304 	orr.w	r3, r3, #4
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b19      	ldr	r3, [pc, #100]	@ (8000494 <MX_GPIO_Init+0xb8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0304 	and.w	r3, r3, #4
 8000434:	607b      	str	r3, [r7, #4]
 8000436:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800043e:	4816      	ldr	r0, [pc, #88]	@ (8000498 <MX_GPIO_Init+0xbc>)
 8000440:	f001 fa5e 	bl	8001900 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000444:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000448:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044a:	2301      	movs	r3, #1
 800044c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000452:	2302      	movs	r3, #2
 8000454:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000456:	f107 0310 	add.w	r3, r7, #16
 800045a:	4619      	mov	r1, r3
 800045c:	480e      	ldr	r0, [pc, #56]	@ (8000498 <MX_GPIO_Init+0xbc>)
 800045e:	f001 f8cb 	bl	80015f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000462:	2302      	movs	r3, #2
 8000464:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000466:	4b0d      	ldr	r3, [pc, #52]	@ (800049c <MX_GPIO_Init+0xc0>)
 8000468:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4619      	mov	r1, r3
 8000474:	480a      	ldr	r0, [pc, #40]	@ (80004a0 <MX_GPIO_Init+0xc4>)
 8000476:	f001 f8bf 	bl	80015f8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2105      	movs	r1, #5
 800047e:	2007      	movs	r0, #7
 8000480:	f000 fe1d 	bl	80010be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000484:	2007      	movs	r0, #7
 8000486:	f000 fe36 	bl	80010f6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800048a:	bf00      	nop
 800048c:	3720      	adds	r7, #32
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	40011000 	.word	0x40011000
 800049c:	10110000 	.word	0x10110000
 80004a0:	40010c00 	.word	0x40010c00

080004a4 <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 4 */
//i2c callback functions, remember i2c interface is in mpu6050.c
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	i2c_TX_done = 1;
 80004ac:	4b03      	ldr	r3, [pc, #12]	@ (80004bc <HAL_I2C_MasterTxCpltCallback+0x18>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	701a      	strb	r2, [r3, #0]
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr
 80004bc:	200001a9 	.word	0x200001a9

080004c0 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	i2c_RX_done = 1;
 80004c8:	4b03      	ldr	r3, [pc, #12]	@ (80004d8 <HAL_I2C_MasterRxCpltCallback+0x18>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	200001a8 	.word	0x200001a8

080004dc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 80004e4:	2001      	movs	r0, #1
 80004e6:	f004 fe03 	bl	80050f0 <osDelay>
 80004ea:	e7fb      	b.n	80004e4 <StartDefaultTask+0x8>

080004ec <updatePID>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_updatePID */
void updatePID(void *argument)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN updatePID */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f004 fdfb 	bl	80050f0 <osDelay>
 80004fa:	e7fb      	b.n	80004f4 <updatePID+0x8>

080004fc <getOrientation>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_getOrientation */
void getOrientation(void *argument)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN getOrientation */
	/* Infinite loop */
	for (;;)
	{
		osStatus_t status = osMutexAcquire(xMutexHandle, osWaitForever);
 8000504:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <getOrientation+0x38>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f04f 31ff 	mov.w	r1, #4294967295
 800050c:	4618      	mov	r0, r3
 800050e:	f004 fe90 	bl	8005232 <osMutexAcquire>
 8000512:	60f8      	str	r0, [r7, #12]
		if (status == osOK)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d108      	bne.n	800052c <getOrientation+0x30>
		{
			//get accelerometer and gyro data and store in struct.
			//reading without FIFO, IMPORTANT: if using interrupt to synchronize, need a series resistor between interrupt pin on sensor and EXTI pin. Helps to form low pass filter to dampen voltage spikes that mess up the i2c bus and probably more importantly decrease current that could drive SDA pin low.
			mpu6050_get_raw_measurements(&hi2c2, &sensor_data_1);
 800051a:	4907      	ldr	r1, [pc, #28]	@ (8000538 <getOrientation+0x3c>)
 800051c:	4807      	ldr	r0, [pc, #28]	@ (800053c <getOrientation+0x40>)
 800051e:	f000 f9bd 	bl	800089c <mpu6050_get_raw_measurements>
			//data_ready = 0;
			osMutexRelease(xMutexHandle);  // Release mutex when done
 8000522:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <getOrientation+0x38>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f004 fece 	bl	80052c8 <osMutexRelease>
		}

		osDelay(250);
 800052c:	20fa      	movs	r0, #250	@ 0xfa
 800052e:	f004 fddf 	bl	80050f0 <osDelay>
	{
 8000532:	e7e7      	b.n	8000504 <getOrientation+0x8>
 8000534:	20000174 	.word	0x20000174
 8000538:	20000178 	.word	0x20000178
 800053c:	20000088 	.word	0x20000088

08000540 <getInputs>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_getInputs */
void getInputs(void *argument)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN getInputs */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8000548:	2001      	movs	r0, #1
 800054a:	f004 fdd1 	bl	80050f0 <osDelay>
 800054e:	e7fb      	b.n	8000548 <getInputs+0x8>

08000550 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a04      	ldr	r2, [pc, #16]	@ (8000570 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d101      	bne.n	8000566 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000562:	f000 fcb7 	bl	8000ed4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40000800 	.word	0x40000800

08000574 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <Error_Handler+0x8>

08000580 <i2c_Read_Accelerometer>:
#define MPU6050_DMP_FIFO_RATE_DIVISOR 0x01 // The New instance of the Firmware has this as the default
#endif

//pData is buffer to put read contents into, len is bytes to read from mpu6050
HAL_StatusTypeDef i2c_Read_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t *pData, uint16_t len)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af02      	add	r7, sp, #8
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	460b      	mov	r3, r1
 800058c:	817b      	strh	r3, [r7, #10]
 800058e:	4613      	mov	r3, r2
 8000590:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef returnValue;
	uint8_t reg_addr[1];

	/* We compute the MSB and LSB parts of the memory address */
	reg_addr[0] = (uint8_t) (regAddress);
 8000592:	7a7b      	ldrb	r3, [r7, #9]
 8000594:	753b      	strb	r3, [r7, #20]

	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY);
 8000596:	bf00      	nop
 8000598:	68f8      	ldr	r0, [r7, #12]
 800059a:	f002 fa7c 	bl	8002a96 <HAL_I2C_GetState>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b20      	cmp	r3, #32
 80005a2:	d1f9      	bne.n	8000598 <i2c_Read_Accelerometer+0x18>
	/* First we send the memory location address where start reading data */
	returnValue = HAL_I2C_Master_Seq_Transmit_DMA(hi2c, DevAddress, reg_addr, 1, I2C_FIRST_FRAME);
 80005a4:	f107 0214 	add.w	r2, r7, #20
 80005a8:	8979      	ldrh	r1, [r7, #10]
 80005aa:	2301      	movs	r3, #1
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2301      	movs	r3, #1
 80005b0:	68f8      	ldr	r0, [r7, #12]
 80005b2:	f001 fda3 	bl	80020fc <HAL_I2C_Master_Seq_Transmit_DMA>
 80005b6:	4603      	mov	r3, r0
 80005b8:	75fb      	strb	r3, [r7, #23]
	//	while (!i2c_TX_done);
	//	i2c_TX_done = 0;
	while (HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY);
 80005ba:	bf00      	nop
 80005bc:	68f8      	ldr	r0, [r7, #12]
 80005be:	f002 fa6a 	bl	8002a96 <HAL_I2C_GetState>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b20      	cmp	r3, #32
 80005c6:	d1f9      	bne.n	80005bc <i2c_Read_Accelerometer+0x3c>
	/* Next we can retrieve the data from EEPROM */
	returnValue = HAL_I2C_Master_Seq_Receive_DMA(hi2c, DevAddress, pData, len, I2C_LAST_FRAME);	//get data we requested and place it in pData buffer
 80005c8:	8c3b      	ldrh	r3, [r7, #32]
 80005ca:	8979      	ldrh	r1, [r7, #10]
 80005cc:	2220      	movs	r2, #32
 80005ce:	9200      	str	r2, [sp, #0]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	f001 fef0 	bl	80023b8 <HAL_I2C_Master_Seq_Receive_DMA>
 80005d8:	4603      	mov	r3, r0
 80005da:	75fb      	strb	r3, [r7, #23]
	while (!i2c_RX_done);
 80005dc:	bf00      	nop
 80005de:	4b0e      	ldr	r3, [pc, #56]	@ (8000618 <i2c_Read_Accelerometer+0x98>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0fb      	beq.n	80005de <i2c_Read_Accelerometer+0x5e>
	i2c_RX_done = 0;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <i2c_Read_Accelerometer+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]

	//for some reason after doing the receive function, the I2C2's CR1 (control register 1) goes from 0x401 to 0x201. This then causes issues
	//when trying to do the next transmit. As a result, I'm manually making sure the correct bits are turned on and off.
	//This seems to only be an issue on the STM32F103C8T6
	hi2c->Instance->CR1 &= ~I2C_CR1_STOP;	//make sure stop bit is turned off (bit 9)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80005fa:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 |= I2C_CR1_ACK;	//turn on acknowledge bit (bit 10)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800060a:	601a      	str	r2, [r3, #0]
	return returnValue;
 800060c:	7dfb      	ldrb	r3, [r7, #23]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200001a8 	.word	0x200001a8

0800061c <i2c_Write_Accelerometer>:

HAL_StatusTypeDef i2c_Write_Accelerometer(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t regAddress, uint8_t *pData, uint16_t len)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	460b      	mov	r3, r1
 8000628:	817b      	strh	r3, [r7, #10]
 800062a:	4613      	mov	r3, r2
 800062c:	727b      	strb	r3, [r7, #9]
	HAL_StatusTypeDef returnValue;
	uint8_t *data;

	data = (uint8_t*) malloc(sizeof(uint8_t) * (1 + len));
 800062e:	8c3b      	ldrh	r3, [r7, #32]
 8000630:	3301      	adds	r3, #1
 8000632:	4618      	mov	r0, r3
 8000634:	f007 fdf8 	bl	8008228 <malloc>
 8000638:	4603      	mov	r3, r0
 800063a:	617b      	str	r3, [r7, #20]
	/*We compute the MSB and LSB parts of the memory address*/
	data[0] = (uint8_t) (regAddress);
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	7a7a      	ldrb	r2, [r7, #9]
 8000640:	701a      	strb	r2, [r3, #0]

	/*And copy the content of the pData array in the temporary buffer*/
	memcpy(data + 1, pData, len);	//inserts data one slot after the register address
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	3301      	adds	r3, #1
 8000646:	8c3a      	ldrh	r2, [r7, #32]
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	4618      	mov	r0, r3
 800064c:	f008 f98b 	bl	8008966 <memcpy>

	/*We are now ready to transfer the buffer over the I2C bus*/
	returnValue = HAL_I2C_Master_Transmit_DMA(hi2c, DevAddress, data, len + 1);
 8000650:	8c3b      	ldrh	r3, [r7, #32]
 8000652:	3301      	adds	r3, #1
 8000654:	b29b      	uxth	r3, r3
 8000656:	8979      	ldrh	r1, [r7, #10]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f001 fafc 	bl	8001c58 <HAL_I2C_Master_Transmit_DMA>
 8000660:	4603      	mov	r3, r0
 8000662:	74fb      	strb	r3, [r7, #19]
	while (!i2c_TX_done);
 8000664:	bf00      	nop
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <i2c_Write_Accelerometer+0x80>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0fb      	beq.n	8000666 <i2c_Write_Accelerometer+0x4a>
	i2c_TX_done = 0;
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <i2c_Write_Accelerometer+0x80>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
	free(data);
 8000674:	6978      	ldr	r0, [r7, #20]
 8000676:	f007 fddf 	bl	8008238 <free>
	/*We wait until the Accelerometer effectively stores data*/
	while (HAL_I2C_IsDeviceReady(hi2c, DevAddress, 1, HAL_MAX_DELAY) != HAL_OK);	//peripheral can only accept the transmission once it finishes doing what it does
 800067a:	bf00      	nop
 800067c:	8979      	ldrh	r1, [r7, #10]
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	2201      	movs	r2, #1
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f001 fc0b 	bl	8001ea0 <HAL_I2C_IsDeviceReady>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1f5      	bne.n	800067c <i2c_Write_Accelerometer+0x60>

	return HAL_OK;
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200001a9 	.word	0x200001a9

080006a0 <mpu6050_init>:
	buffer |= data; // combine data with existing byte
	return i2c_Write_Accelerometer(hi2c, DevAddress, regAddress, &buffer, 1);	//write the updated register

}
void mpu6050_init(I2C_HandleTypeDef *hi2c)	//NOT for use with digital motion processor
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	6078      	str	r0, [r7, #4]
	uint8_t command = 0x00;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x6B, &command, 1);	//turn off sleep mode
 80006ac:	f107 030f 	add.w	r3, r7, #15
 80006b0:	2201      	movs	r2, #1
 80006b2:	9200      	str	r2, [sp, #0]
 80006b4:	226b      	movs	r2, #107	@ 0x6b
 80006b6:	21d0      	movs	r1, #208	@ 0xd0
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f7ff ffaf 	bl	800061c <i2c_Write_Accelerometer>
	//using FIFO to do burst reads on gyroscope and accelerometer

	//to check the returned value of the read, you must either use the debugger and check receive_buffer contents after this line runs, or use oscilloscope/logic analyzer
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x6B, (uint8_t*) receive_buffer, 1);	//PWR_MGMT_1, check if device is asleep, if you see 0x40, it is asleep and every register reads 0
 80006be:	2301      	movs	r3, #1
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	4b75      	ldr	r3, [pc, #468]	@ (8000898 <mpu6050_init+0x1f8>)
 80006c4:	226b      	movs	r2, #107	@ 0x6b
 80006c6:	21d0      	movs	r1, #208	@ 0xd0
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ff59 	bl	8000580 <i2c_Read_Accelerometer>

	//Adjust Sample Rate
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x1A, (uint8_t*) receive_buffer, 1);	//check digital low pass filter settings, Gyroscope Output Rate = 8kHz when the DLPF is disabled (DLPF_CFG = 0 or 7), and 1kHz when the DLPF is enabled
 80006ce:	2301      	movs	r3, #1
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	4b71      	ldr	r3, [pc, #452]	@ (8000898 <mpu6050_init+0x1f8>)
 80006d4:	221a      	movs	r2, #26
 80006d6:	21d0      	movs	r1, #208	@ 0xd0
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f7ff ff51 	bl	8000580 <i2c_Read_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x19, (uint8_t*) receive_buffer, 1);	//check sample rate divider contents
 80006de:	2301      	movs	r3, #1
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4b6d      	ldr	r3, [pc, #436]	@ (8000898 <mpu6050_init+0x1f8>)
 80006e4:	2219      	movs	r2, #25
 80006e6:	21d0      	movs	r1, #208	@ 0xd0
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff ff49 	bl	8000580 <i2c_Read_Accelerometer>
	command = 0x1F;	//divide by sample rate divider + 1
 80006ee:	231f      	movs	r3, #31
 80006f0:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x19, (uint8_t*) &command, 1);	// adjust sample rate divider
 80006f2:	f107 030f 	add.w	r3, r7, #15
 80006f6:	2201      	movs	r2, #1
 80006f8:	9200      	str	r2, [sp, #0]
 80006fa:	2219      	movs	r2, #25
 80006fc:	21d0      	movs	r1, #208	@ 0xd0
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f7ff ff8c 	bl	800061c <i2c_Write_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x19, (uint8_t*) receive_buffer, 1);	//check sample rate divider contents
 8000704:	2301      	movs	r3, #1
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	4b63      	ldr	r3, [pc, #396]	@ (8000898 <mpu6050_init+0x1f8>)
 800070a:	2219      	movs	r2, #25
 800070c:	21d0      	movs	r1, #208	@ 0xd0
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff ff36 	bl	8000580 <i2c_Read_Accelerometer>

	//initialize/enable FIFO
	command = 0x78;	//0b01111000
 8000714:	2378      	movs	r3, #120	@ 0x78
 8000716:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x23, &command, 1);	//only enable the gyroscope and accelerometer to be in the FIFO
 8000718:	f107 030f 	add.w	r3, r7, #15
 800071c:	2201      	movs	r2, #1
 800071e:	9200      	str	r2, [sp, #0]
 8000720:	2223      	movs	r2, #35	@ 0x23
 8000722:	21d0      	movs	r1, #208	@ 0xd0
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff ff79 	bl	800061c <i2c_Write_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x23, (uint8_t*) receive_buffer, 1);	//FIFO_EN contents
 800072a:	2301      	movs	r3, #1
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4b5a      	ldr	r3, [pc, #360]	@ (8000898 <mpu6050_init+0x1f8>)
 8000730:	2223      	movs	r2, #35	@ 0x23
 8000732:	21d0      	movs	r1, #208	@ 0xd0
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff23 	bl	8000580 <i2c_Read_Accelerometer>

	command = 0x00;
 800073a:	2300      	movs	r3, #0
 800073c:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x6A, (uint8_t*) &command, 1);	//disable FIFO in USER_CTRL register
 800073e:	f107 030f 	add.w	r3, r7, #15
 8000742:	2201      	movs	r2, #1
 8000744:	9200      	str	r2, [sp, #0]
 8000746:	226a      	movs	r2, #106	@ 0x6a
 8000748:	21d0      	movs	r1, #208	@ 0xd0
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ff66 	bl	800061c <i2c_Write_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x6A, (uint8_t*) receive_buffer, 1);	//check USER_CTRL contents, should be 0x00
 8000750:	2301      	movs	r3, #1
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	4b50      	ldr	r3, [pc, #320]	@ (8000898 <mpu6050_init+0x1f8>)
 8000756:	226a      	movs	r2, #106	@ 0x6a
 8000758:	21d0      	movs	r1, #208	@ 0xd0
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ff10 	bl	8000580 <i2c_Read_Accelerometer>

	command = 0x04;
 8000760:	2304      	movs	r3, #4
 8000762:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x6A, (uint8_t*) &command, 1);	// reset FIFO, must do it when FIFO_EN is off
 8000764:	f107 030f 	add.w	r3, r7, #15
 8000768:	2201      	movs	r2, #1
 800076a:	9200      	str	r2, [sp, #0]
 800076c:	226a      	movs	r2, #106	@ 0x6a
 800076e:	21d0      	movs	r1, #208	@ 0xd0
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff ff53 	bl	800061c <i2c_Write_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x6A, (uint8_t*) receive_buffer, 1);	//check USER_CTRL contents, should be 0x00 still
 8000776:	2301      	movs	r3, #1
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	4b47      	ldr	r3, [pc, #284]	@ (8000898 <mpu6050_init+0x1f8>)
 800077c:	226a      	movs	r2, #106	@ 0x6a
 800077e:	21d0      	movs	r1, #208	@ 0xd0
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff fefd 	bl	8000580 <i2c_Read_Accelerometer>

	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x72, (uint8_t*) receive_buffer, 2);	//count items in FIFO
 8000786:	2302      	movs	r3, #2
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	4b43      	ldr	r3, [pc, #268]	@ (8000898 <mpu6050_init+0x1f8>)
 800078c:	2272      	movs	r2, #114	@ 0x72
 800078e:	21d0      	movs	r1, #208	@ 0xd0
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff fef5 	bl	8000580 <i2c_Read_Accelerometer>

	command = 0x40;
 8000796:	2340      	movs	r3, #64	@ 0x40
 8000798:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x6A, (uint8_t*) &command, 1);	//enable FIFO in USER_CTRL register
 800079a:	f107 030f 	add.w	r3, r7, #15
 800079e:	2201      	movs	r2, #1
 80007a0:	9200      	str	r2, [sp, #0]
 80007a2:	226a      	movs	r2, #106	@ 0x6a
 80007a4:	21d0      	movs	r1, #208	@ 0xd0
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ff38 	bl	800061c <i2c_Write_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x6A, (uint8_t*) receive_buffer, 1);	//USER_CTRL should be 0x40 now
 80007ac:	2301      	movs	r3, #1
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	4b39      	ldr	r3, [pc, #228]	@ (8000898 <mpu6050_init+0x1f8>)
 80007b2:	226a      	movs	r2, #106	@ 0x6a
 80007b4:	21d0      	movs	r1, #208	@ 0xd0
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f7ff fee2 	bl	8000580 <i2c_Read_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x72, (uint8_t*) receive_buffer, 2);	//count items in FIFO
 80007bc:	2302      	movs	r3, #2
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	4b35      	ldr	r3, [pc, #212]	@ (8000898 <mpu6050_init+0x1f8>)
 80007c2:	2272      	movs	r2, #114	@ 0x72
 80007c4:	21d0      	movs	r1, #208	@ 0xd0
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff feda 	bl	8000580 <i2c_Read_Accelerometer>

	//enable data ready interrupt
	command = 0x11;
 80007cc:	2311      	movs	r3, #17
 80007ce:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x38, &command, 1);	//enable fifo overflow and data ready interrupt
 80007d0:	f107 030f 	add.w	r3, r7, #15
 80007d4:	2201      	movs	r2, #1
 80007d6:	9200      	str	r2, [sp, #0]
 80007d8:	2238      	movs	r2, #56	@ 0x38
 80007da:	21d0      	movs	r1, #208	@ 0xd0
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff1d 	bl	800061c <i2c_Write_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x38, (uint8_t*) receive_buffer, 1);	//check INT_ENABLE contents default is 0x00 I believe
 80007e2:	2301      	movs	r3, #1
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000898 <mpu6050_init+0x1f8>)
 80007e8:	2238      	movs	r2, #56	@ 0x38
 80007ea:	21d0      	movs	r1, #208	@ 0xd0
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f7ff fec7 	bl	8000580 <i2c_Read_Accelerometer>

	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x3A, (uint8_t*) receive_buffer, 1);	//check which interrupt request happened (most important is LSB, DATA_READY_INT)
 80007f2:	2301      	movs	r3, #1
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <mpu6050_init+0x1f8>)
 80007f8:	223a      	movs	r2, #58	@ 0x3a
 80007fa:	21d0      	movs	r1, #208	@ 0xd0
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff febf 	bl	8000580 <i2c_Read_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x3A, (uint8_t*) receive_buffer, 1);
 8000802:	2301      	movs	r3, #1
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <mpu6050_init+0x1f8>)
 8000808:	223a      	movs	r2, #58	@ 0x3a
 800080a:	21d0      	movs	r1, #208	@ 0xd0
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff feb7 	bl	8000580 <i2c_Read_Accelerometer>

	//check if interrupt is open drain or push pull via INT_OPEN setting
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x37, (uint8_t*) receive_buffer, 1);	//be default it is 0, push-pull, no pullup and no pulldown needed
 8000812:	2301      	movs	r3, #1
 8000814:	9300      	str	r3, [sp, #0]
 8000816:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <mpu6050_init+0x1f8>)
 8000818:	2237      	movs	r2, #55	@ 0x37
 800081a:	21d0      	movs	r1, #208	@ 0xd0
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff feaf 	bl	8000580 <i2c_Read_Accelerometer>

	//Gyro Config
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x1B, (uint8_t*) receive_buffer, 1);	//read GYRO_CONFIG
 8000822:	2301      	movs	r3, #1
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <mpu6050_init+0x1f8>)
 8000828:	221b      	movs	r2, #27
 800082a:	21d0      	movs	r1, #208	@ 0xd0
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff fea7 	bl	8000580 <i2c_Read_Accelerometer>
	command = 0x10;
 8000832:	2310      	movs	r3, #16
 8000834:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x1B, &command, 1);	// +/- 1000 degrees/second full range, each 32.8 counts is 1 degree/second, all selftest off
 8000836:	f107 030f 	add.w	r3, r7, #15
 800083a:	2201      	movs	r2, #1
 800083c:	9200      	str	r2, [sp, #0]
 800083e:	221b      	movs	r2, #27
 8000840:	21d0      	movs	r1, #208	@ 0xd0
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff feea 	bl	800061c <i2c_Write_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x1B, (uint8_t*) receive_buffer, 1);	//read GYRO_CONFIG
 8000848:	2301      	movs	r3, #1
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <mpu6050_init+0x1f8>)
 800084e:	221b      	movs	r2, #27
 8000850:	21d0      	movs	r1, #208	@ 0xd0
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff fe94 	bl	8000580 <i2c_Read_Accelerometer>
	//Accelerometer Config
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x1C, (uint8_t*) receive_buffer, 1);	//read ACCEL_CONFIG
 8000858:	2301      	movs	r3, #1
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <mpu6050_init+0x1f8>)
 800085e:	221c      	movs	r2, #28
 8000860:	21d0      	movs	r1, #208	@ 0xd0
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff fe8c 	bl	8000580 <i2c_Read_Accelerometer>
	command = 0x10;
 8000868:	2310      	movs	r3, #16
 800086a:	73fb      	strb	r3, [r7, #15]
	i2c_Write_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x1C, &command, 1);	// +/- 8g, every 4096 counts is 1g, all self test off
 800086c:	f107 030f 	add.w	r3, r7, #15
 8000870:	2201      	movs	r2, #1
 8000872:	9200      	str	r2, [sp, #0]
 8000874:	221c      	movs	r2, #28
 8000876:	21d0      	movs	r1, #208	@ 0xd0
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff fecf 	bl	800061c <i2c_Write_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x1C, (uint8_t*) receive_buffer, 1);	//read ACCEL_CONFIG
 800087e:	2301      	movs	r3, #1
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <mpu6050_init+0x1f8>)
 8000884:	221c      	movs	r2, #28
 8000886:	21d0      	movs	r1, #208	@ 0xd0
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff fe79 	bl	8000580 <i2c_Read_Accelerometer>
}
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200001ac 	.word	0x200001ac

0800089c <mpu6050_get_raw_measurements>:

void mpu6050_get_raw_measurements(I2C_HandleTypeDef *hi2c, mpu6050_sensor_data *sensor_data)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	//get raw data from mpu6050 with i2c interface
	//read without FIFO, IMPORTANT: if using interrupt to synchronize, need a series resistor between interrupt pin on sensor and EXTI pin. Helps to form low pass filter to dampen voltage spikes that mess up the i2c bus and probably more importantly decrease current that could drive SDA pin low.
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x3B, (uint8_t*) sensor_data->accel_x_buf, 2);	//ACCEL_XOUT, 2 bytes
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	2202      	movs	r2, #2
 80008aa:	9200      	str	r2, [sp, #0]
 80008ac:	223b      	movs	r2, #59	@ 0x3b
 80008ae:	21d0      	movs	r1, #208	@ 0xd0
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff fe65 	bl	8000580 <i2c_Read_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x3D, (uint8_t*) sensor_data->accel_y_buf, 2);	//ACCEL_YOUT, 2 bytes
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	3302      	adds	r3, #2
 80008ba:	2202      	movs	r2, #2
 80008bc:	9200      	str	r2, [sp, #0]
 80008be:	223d      	movs	r2, #61	@ 0x3d
 80008c0:	21d0      	movs	r1, #208	@ 0xd0
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fe5c 	bl	8000580 <i2c_Read_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x3F, (uint8_t*) sensor_data->accel_z_buf, 2);	//ACCEL_ZOUT, 2 bytes
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	3304      	adds	r3, #4
 80008cc:	2202      	movs	r2, #2
 80008ce:	9200      	str	r2, [sp, #0]
 80008d0:	223f      	movs	r2, #63	@ 0x3f
 80008d2:	21d0      	movs	r1, #208	@ 0xd0
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff fe53 	bl	8000580 <i2c_Read_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x43, (uint8_t*) sensor_data->gyro_x_buf, 2);	//GYRO_XOUT, 2 bytes
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	3306      	adds	r3, #6
 80008de:	2202      	movs	r2, #2
 80008e0:	9200      	str	r2, [sp, #0]
 80008e2:	2243      	movs	r2, #67	@ 0x43
 80008e4:	21d0      	movs	r1, #208	@ 0xd0
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff fe4a 	bl	8000580 <i2c_Read_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x45, (uint8_t*) sensor_data->gyro_y_buf, 2);	//GYRO_YOUT, 2 bytes
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	3308      	adds	r3, #8
 80008f0:	2202      	movs	r2, #2
 80008f2:	9200      	str	r2, [sp, #0]
 80008f4:	2245      	movs	r2, #69	@ 0x45
 80008f6:	21d0      	movs	r1, #208	@ 0xd0
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff fe41 	bl	8000580 <i2c_Read_Accelerometer>
	i2c_Read_Accelerometer(hi2c, MPU6050_ADDR_LSL1, 0x47, (uint8_t*) sensor_data->gyro_z_buf, 2);	//GYRO_ZOUT, 2 bytes
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	330a      	adds	r3, #10
 8000902:	2202      	movs	r2, #2
 8000904:	9200      	str	r2, [sp, #0]
 8000906:	2247      	movs	r2, #71	@ 0x47
 8000908:	21d0      	movs	r1, #208	@ 0xd0
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fe38 	bl	8000580 <i2c_Read_Accelerometer>
	sensor_data->accel_x = (sensor_data->accel_x_buf[0] << 8) | sensor_data->accel_x_buf[1];
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b21b      	sxth	r3, r3
 8000916:	021b      	lsls	r3, r3, #8
 8000918:	b21a      	sxth	r2, r3
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	b21b      	sxth	r3, r3
 8000920:	4313      	orrs	r3, r2
 8000922:	b21a      	sxth	r2, r3
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	819a      	strh	r2, [r3, #12]
	sensor_data->accel_y = (sensor_data->accel_y_buf[0] << 8) | sensor_data->accel_y_buf[1];
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	b21b      	sxth	r3, r3
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	b21a      	sxth	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	78db      	ldrb	r3, [r3, #3]
 8000936:	b21b      	sxth	r3, r3
 8000938:	4313      	orrs	r3, r2
 800093a:	b21a      	sxth	r2, r3
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	81da      	strh	r2, [r3, #14]
	sensor_data->accel_z = (sensor_data->accel_z_buf[0] << 8) | sensor_data->accel_z_buf[1];
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	791b      	ldrb	r3, [r3, #4]
 8000944:	b21b      	sxth	r3, r3
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b21a      	sxth	r2, r3
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	795b      	ldrb	r3, [r3, #5]
 800094e:	b21b      	sxth	r3, r3
 8000950:	4313      	orrs	r3, r2
 8000952:	b21a      	sxth	r2, r3
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	821a      	strh	r2, [r3, #16]
	sensor_data->gyro_x = (sensor_data->gyro_x_buf[0] << 8) | sensor_data->gyro_x_buf[1];
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	799b      	ldrb	r3, [r3, #6]
 800095c:	b21b      	sxth	r3, r3
 800095e:	021b      	lsls	r3, r3, #8
 8000960:	b21a      	sxth	r2, r3
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	79db      	ldrb	r3, [r3, #7]
 8000966:	b21b      	sxth	r3, r3
 8000968:	4313      	orrs	r3, r2
 800096a:	b21a      	sxth	r2, r3
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	825a      	strh	r2, [r3, #18]
	sensor_data->gyro_y = (sensor_data->gyro_y_buf[0] << 8) | sensor_data->gyro_y_buf[1];
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	7a1b      	ldrb	r3, [r3, #8]
 8000974:	b21b      	sxth	r3, r3
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	b21a      	sxth	r2, r3
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	7a5b      	ldrb	r3, [r3, #9]
 800097e:	b21b      	sxth	r3, r3
 8000980:	4313      	orrs	r3, r2
 8000982:	b21a      	sxth	r2, r3
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	829a      	strh	r2, [r3, #20]
	sensor_data->gyro_z = (sensor_data->gyro_z_buf[0] << 8) | sensor_data->gyro_z_buf[1];
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	7a9b      	ldrb	r3, [r3, #10]
 800098c:	b21b      	sxth	r3, r3
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	7adb      	ldrb	r3, [r3, #11]
 8000996:	b21b      	sxth	r3, r3
 8000998:	4313      	orrs	r3, r2
 800099a:	b21a      	sxth	r2, r3
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	82da      	strh	r2, [r3, #22]
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <sensor_data_init>:

void sensor_data_init(mpu6050_sensor_data *sensor_data)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	//initialize values that will be calculated later anyways, probably not necessary to do
	sensor_data->yaw = 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f04f 0200 	mov.w	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
	sensor_data->pitch = 0;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f04f 0200 	mov.w	r2, #0
 80009be:	61da      	str	r2, [r3, #28]
	sensor_data->roll = 0;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f04f 0200 	mov.w	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
	...

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009da:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <HAL_MspInit+0x68>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	4a17      	ldr	r2, [pc, #92]	@ (8000a3c <HAL_MspInit+0x68>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6193      	str	r3, [r2, #24]
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <HAL_MspInit+0x68>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_MspInit+0x68>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4a11      	ldr	r2, [pc, #68]	@ (8000a3c <HAL_MspInit+0x68>)
 80009f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fc:	61d3      	str	r3, [r2, #28]
 80009fe:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <HAL_MspInit+0x68>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	210f      	movs	r1, #15
 8000a0e:	f06f 0001 	mvn.w	r0, #1
 8000a12:	f000 fb54 	bl	80010be <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a16:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <HAL_MspInit+0x6c>)
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <HAL_MspInit+0x6c>)
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010000 	.word	0x40010000

08000a44 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a41      	ldr	r2, [pc, #260]	@ (8000b64 <HAL_I2C_MspInit+0x120>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d17a      	bne.n	8000b5a <HAL_I2C_MspInit+0x116>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a64:	4b40      	ldr	r3, [pc, #256]	@ (8000b68 <HAL_I2C_MspInit+0x124>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	4a3f      	ldr	r2, [pc, #252]	@ (8000b68 <HAL_I2C_MspInit+0x124>)
 8000a6a:	f043 0308 	orr.w	r3, r3, #8
 8000a6e:	6193      	str	r3, [r2, #24]
 8000a70:	4b3d      	ldr	r3, [pc, #244]	@ (8000b68 <HAL_I2C_MspInit+0x124>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f003 0308 	and.w	r3, r3, #8
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a82:	2312      	movs	r3, #18
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4836      	ldr	r0, [pc, #216]	@ (8000b6c <HAL_I2C_MspInit+0x128>)
 8000a92:	f000 fdb1 	bl	80015f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a96:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <HAL_I2C_MspInit+0x124>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	4a33      	ldr	r2, [pc, #204]	@ (8000b68 <HAL_I2C_MspInit+0x124>)
 8000a9c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000aa0:	61d3      	str	r3, [r2, #28]
 8000aa2:	4b31      	ldr	r3, [pc, #196]	@ (8000b68 <HAL_I2C_MspInit+0x124>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8000aae:	4b30      	ldr	r3, [pc, #192]	@ (8000b70 <HAL_I2C_MspInit+0x12c>)
 8000ab0:	4a30      	ldr	r2, [pc, #192]	@ (8000b74 <HAL_I2C_MspInit+0x130>)
 8000ab2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b70 <HAL_I2C_MspInit+0x12c>)
 8000ab6:	2210      	movs	r2, #16
 8000ab8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aba:	4b2d      	ldr	r3, [pc, #180]	@ (8000b70 <HAL_I2C_MspInit+0x12c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b70 <HAL_I2C_MspInit+0x12c>)
 8000ac2:	2280      	movs	r2, #128	@ 0x80
 8000ac4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b70 <HAL_I2C_MspInit+0x12c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000acc:	4b28      	ldr	r3, [pc, #160]	@ (8000b70 <HAL_I2C_MspInit+0x12c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000ad2:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <HAL_I2C_MspInit+0x12c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ad8:	4b25      	ldr	r3, [pc, #148]	@ (8000b70 <HAL_I2C_MspInit+0x12c>)
 8000ada:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ade:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000ae0:	4823      	ldr	r0, [pc, #140]	@ (8000b70 <HAL_I2C_MspInit+0x12c>)
 8000ae2:	f000 fb17 	bl	8001114 <HAL_DMA_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 8000aec:	f7ff fd42 	bl	8000574 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a1f      	ldr	r2, [pc, #124]	@ (8000b70 <HAL_I2C_MspInit+0x12c>)
 8000af4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000af6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b70 <HAL_I2C_MspInit+0x12c>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <HAL_I2C_MspInit+0x134>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <HAL_I2C_MspInit+0x138>)
 8000b00:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	@ (8000b78 <HAL_I2C_MspInit+0x134>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	@ (8000b78 <HAL_I2C_MspInit+0x134>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <HAL_I2C_MspInit+0x134>)
 8000b10:	2280      	movs	r2, #128	@ 0x80
 8000b12:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b14:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <HAL_I2C_MspInit+0x134>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b1a:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <HAL_I2C_MspInit+0x134>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000b20:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <HAL_I2C_MspInit+0x134>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <HAL_I2C_MspInit+0x134>)
 8000b28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000b2e:	4812      	ldr	r0, [pc, #72]	@ (8000b78 <HAL_I2C_MspInit+0x134>)
 8000b30:	f000 faf0 	bl	8001114 <HAL_DMA_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8000b3a:	f7ff fd1b 	bl	8000574 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <HAL_I2C_MspInit+0x134>)
 8000b42:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b44:	4a0c      	ldr	r2, [pc, #48]	@ (8000b78 <HAL_I2C_MspInit+0x134>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2105      	movs	r1, #5
 8000b4e:	2021      	movs	r0, #33	@ 0x21
 8000b50:	f000 fab5 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000b54:	2021      	movs	r0, #33	@ 0x21
 8000b56:	f000 face 	bl	80010f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40005800 	.word	0x40005800
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010c00 	.word	0x40010c00
 8000b70:	200000dc 	.word	0x200000dc
 8000b74:	40020044 	.word	0x40020044
 8000b78:	20000120 	.word	0x20000120
 8000b7c:	40020058 	.word	0x40020058

08000b80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08e      	sub	sp, #56	@ 0x38
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000b96:	4b34      	ldr	r3, [pc, #208]	@ (8000c68 <HAL_InitTick+0xe8>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	4a33      	ldr	r2, [pc, #204]	@ (8000c68 <HAL_InitTick+0xe8>)
 8000b9c:	f043 0304 	orr.w	r3, r3, #4
 8000ba0:	61d3      	str	r3, [r2, #28]
 8000ba2:	4b31      	ldr	r3, [pc, #196]	@ (8000c68 <HAL_InitTick+0xe8>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	f003 0304 	and.w	r3, r3, #4
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bae:	f107 0210 	add.w	r2, r7, #16
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f003 feef 	bl	800499c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bbe:	6a3b      	ldr	r3, [r7, #32]
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d103      	bne.n	8000bd0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bc8:	f003 fed4 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 8000bcc:	6378      	str	r0, [r7, #52]	@ 0x34
 8000bce:	e004      	b.n	8000bda <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bd0:	f003 fed0 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bdc:	4a23      	ldr	r2, [pc, #140]	@ (8000c6c <HAL_InitTick+0xec>)
 8000bde:	fba2 2303 	umull	r2, r3, r2, r3
 8000be2:	0c9b      	lsrs	r3, r3, #18
 8000be4:	3b01      	subs	r3, #1
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000be8:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <HAL_InitTick+0xf0>)
 8000bea:	4a22      	ldr	r2, [pc, #136]	@ (8000c74 <HAL_InitTick+0xf4>)
 8000bec:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000bee:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <HAL_InitTick+0xf0>)
 8000bf0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bf4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c70 <HAL_InitTick+0xf0>)
 8000bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bfa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <HAL_InitTick+0xf0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b1b      	ldr	r3, [pc, #108]	@ (8000c70 <HAL_InitTick+0xf0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c08:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <HAL_InitTick+0xf0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000c0e:	4818      	ldr	r0, [pc, #96]	@ (8000c70 <HAL_InitTick+0xf0>)
 8000c10:	f003 ff12 	bl	8004a38 <HAL_TIM_Base_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d11b      	bne.n	8000c5a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000c22:	4813      	ldr	r0, [pc, #76]	@ (8000c70 <HAL_InitTick+0xf0>)
 8000c24:	f003 ff60 	bl	8004ae8 <HAL_TIM_Base_Start_IT>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c2e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d111      	bne.n	8000c5a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c36:	201e      	movs	r0, #30
 8000c38:	f000 fa5d 	bl	80010f6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b0f      	cmp	r3, #15
 8000c40:	d808      	bhi.n	8000c54 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000c42:	2200      	movs	r2, #0
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	201e      	movs	r0, #30
 8000c48:	f000 fa39 	bl	80010be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <HAL_InitTick+0xf8>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	e002      	b.n	8000c5a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c5a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3738      	adds	r7, #56	@ 0x38
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	431bde83 	.word	0x431bde83
 8000c70:	200001c0 	.word	0x200001c0
 8000c74:	40000800 	.word	0x40000800
 8000c78:	20000004 	.word	0x20000004

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000cb4:	2002      	movs	r0, #2
 8000cb6:	f000 fe55 	bl	8001964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
	...

08000cc0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000cc4:	4802      	ldr	r0, [pc, #8]	@ (8000cd0 <DMA1_Channel4_IRQHandler+0x10>)
 8000cc6:	f000 fb57 	bl	8001378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000dc 	.word	0x200000dc

08000cd4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <DMA1_Channel5_IRQHandler+0x10>)
 8000cda:	f000 fb4d 	bl	8001378 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000120 	.word	0x20000120

08000ce8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000cec:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <TIM4_IRQHandler+0x10>)
 8000cee:	f003 ff4d 	bl	8004b8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200001c0 	.word	0x200001c0

08000cfc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000d00:	4802      	ldr	r0, [pc, #8]	@ (8000d0c <I2C2_EV_IRQHandler+0x10>)
 8000d02:	f001 fd0b 	bl	800271c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000088 	.word	0x20000088

08000d10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	e00a      	b.n	8000d38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d22:	f3af 8000 	nop.w
 8000d26:	4601      	mov	r1, r0
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	60ba      	str	r2, [r7, #8]
 8000d2e:	b2ca      	uxtb	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf0      	blt.n	8000d22 <_read+0x12>
  }

  return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	e009      	b.n	8000d70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60ba      	str	r2, [r7, #8]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf1      	blt.n	8000d5c <_write+0x12>
  }
  return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_close>:

int _close(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000da8:	605a      	str	r2, [r3, #4]
  return 0;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr

08000db6 <_isatty>:

int _isatty(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr

08000dca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b085      	sub	sp, #20
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dd6:	2300      	movs	r3, #0
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
	...

08000de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dec:	4a14      	ldr	r2, [pc, #80]	@ (8000e40 <_sbrk+0x5c>)
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <_sbrk+0x60>)
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df8:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e00:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <_sbrk+0x64>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <_sbrk+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d207      	bcs.n	8000e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e14:	f007 fd7a 	bl	800890c <__errno>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	e009      	b.n	8000e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a05      	ldr	r2, [pc, #20]	@ (8000e48 <_sbrk+0x64>)
 8000e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20005000 	.word	0x20005000
 8000e44:	00000400 	.word	0x00000400
 8000e48:	20000208 	.word	0x20000208
 8000e4c:	20001d48 	.word	0x20001d48

08000e50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e5c:	f7ff fff8 	bl	8000e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e60:	480b      	ldr	r0, [pc, #44]	@ (8000e90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e62:	490c      	ldr	r1, [pc, #48]	@ (8000e94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e64:	4a0c      	ldr	r2, [pc, #48]	@ (8000e98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a09      	ldr	r2, [pc, #36]	@ (8000e9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e78:	4c09      	ldr	r4, [pc, #36]	@ (8000ea0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e86:	f007 fd47 	bl	8008918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e8a:	f7ff f961 	bl	8000150 <main>
  bx lr
 8000e8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e98:	08008dbc 	.word	0x08008dbc
  ldr r2, =_sbss
 8000e9c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ea0:	20001d44 	.word	0x20001d44

08000ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC1_2_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <HAL_Init+0x28>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	@ (8000ed0 <HAL_Init+0x28>)
 8000eb2:	f043 0310 	orr.w	r3, r3, #16
 8000eb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f8f5 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	f7ff fe5e 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f7ff fd86 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40022000 	.word	0x40022000

08000ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <HAL_IncTick+0x1c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <HAL_IncTick+0x20>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a03      	ldr	r2, [pc, #12]	@ (8000ef4 <HAL_IncTick+0x20>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	2000020c 	.word	0x2000020c

08000ef8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b02      	ldr	r3, [pc, #8]	@ (8000f08 <HAL_GetTick+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	2000020c 	.word	0x2000020c

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff fff0 	bl	8000ef8 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffe0 	bl	8000ef8 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4906      	ldr	r1, [pc, #24]	@ (8000fec <__NVIC_EnableIRQ+0x34>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	@ (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	@ (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	@ 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	@ 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff4f 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff64 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ffb2 	bl	8001044 <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff81 	bl	8000ff0 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff57 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e043      	b.n	80011b2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <HAL_DMA_Init+0xa8>)
 8001132:	4413      	add	r3, r2
 8001134:	4a22      	ldr	r2, [pc, #136]	@ (80011c0 <HAL_DMA_Init+0xac>)
 8001136:	fba2 2303 	umull	r2, r3, r2, r3
 800113a:	091b      	lsrs	r3, r3, #4
 800113c:	009a      	lsls	r2, r3, #2
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a1f      	ldr	r2, [pc, #124]	@ (80011c4 <HAL_DMA_Init+0xb0>)
 8001146:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800115e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001162:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800116c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001178:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001184:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800118c:	68fa      	ldr	r2, [r7, #12]
 800118e:	4313      	orrs	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2201      	movs	r2, #1
 80011a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	bffdfff8 	.word	0xbffdfff8
 80011c0:	cccccccd 	.word	0xcccccccd
 80011c4:	40020000 	.word	0x40020000

080011c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <HAL_DMA_Start_IT+0x20>
 80011e4:	2302      	movs	r3, #2
 80011e6:	e04b      	b.n	8001280 <HAL_DMA_Start_IT+0xb8>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d13a      	bne.n	8001272 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2202      	movs	r2, #2
 8001200:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	68b9      	ldr	r1, [r7, #8]
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f000 f9bc 	bl	800159e <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122a:	2b00      	cmp	r3, #0
 800122c:	d008      	beq.n	8001240 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f042 020e 	orr.w	r2, r2, #14
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	e00f      	b.n	8001260 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0204 	bic.w	r2, r2, #4
 800124e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 020a 	orr.w	r2, r2, #10
 800125e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 0201 	orr.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	e005      	b.n	800127e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800127a:	2302      	movs	r3, #2
 800127c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800127e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d005      	beq.n	80012ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2204      	movs	r2, #4
 80012a4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	e051      	b.n	8001350 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 020e 	bic.w	r2, r2, #14
 80012ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0201 	bic.w	r2, r2, #1
 80012ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a22      	ldr	r2, [pc, #136]	@ (800135c <HAL_DMA_Abort_IT+0xd4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d029      	beq.n	800132a <HAL_DMA_Abort_IT+0xa2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a21      	ldr	r2, [pc, #132]	@ (8001360 <HAL_DMA_Abort_IT+0xd8>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d022      	beq.n	8001326 <HAL_DMA_Abort_IT+0x9e>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001364 <HAL_DMA_Abort_IT+0xdc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01a      	beq.n	8001320 <HAL_DMA_Abort_IT+0x98>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001368 <HAL_DMA_Abort_IT+0xe0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d012      	beq.n	800131a <HAL_DMA_Abort_IT+0x92>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a1c      	ldr	r2, [pc, #112]	@ (800136c <HAL_DMA_Abort_IT+0xe4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00a      	beq.n	8001314 <HAL_DMA_Abort_IT+0x8c>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a1b      	ldr	r2, [pc, #108]	@ (8001370 <HAL_DMA_Abort_IT+0xe8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d102      	bne.n	800130e <HAL_DMA_Abort_IT+0x86>
 8001308:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800130c:	e00e      	b.n	800132c <HAL_DMA_Abort_IT+0xa4>
 800130e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001312:	e00b      	b.n	800132c <HAL_DMA_Abort_IT+0xa4>
 8001314:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001318:	e008      	b.n	800132c <HAL_DMA_Abort_IT+0xa4>
 800131a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131e:	e005      	b.n	800132c <HAL_DMA_Abort_IT+0xa4>
 8001320:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001324:	e002      	b.n	800132c <HAL_DMA_Abort_IT+0xa4>
 8001326:	2310      	movs	r3, #16
 8001328:	e000      	b.n	800132c <HAL_DMA_Abort_IT+0xa4>
 800132a:	2301      	movs	r3, #1
 800132c:	4a11      	ldr	r2, [pc, #68]	@ (8001374 <HAL_DMA_Abort_IT+0xec>)
 800132e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	4798      	blx	r3
    } 
  }
  return status;
 8001350:	7bfb      	ldrb	r3, [r7, #15]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40020008 	.word	0x40020008
 8001360:	4002001c 	.word	0x4002001c
 8001364:	40020030 	.word	0x40020030
 8001368:	40020044 	.word	0x40020044
 800136c:	40020058 	.word	0x40020058
 8001370:	4002006c 	.word	0x4002006c
 8001374:	40020000 	.word	0x40020000

08001378 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	2204      	movs	r2, #4
 8001396:	409a      	lsls	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4013      	ands	r3, r2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d04f      	beq.n	8001440 <HAL_DMA_IRQHandler+0xc8>
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d04a      	beq.n	8001440 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0320 	and.w	r3, r3, #32
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d107      	bne.n	80013c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0204 	bic.w	r2, r2, #4
 80013c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a66      	ldr	r2, [pc, #408]	@ (8001568 <HAL_DMA_IRQHandler+0x1f0>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d029      	beq.n	8001426 <HAL_DMA_IRQHandler+0xae>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a65      	ldr	r2, [pc, #404]	@ (800156c <HAL_DMA_IRQHandler+0x1f4>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d022      	beq.n	8001422 <HAL_DMA_IRQHandler+0xaa>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a63      	ldr	r2, [pc, #396]	@ (8001570 <HAL_DMA_IRQHandler+0x1f8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d01a      	beq.n	800141c <HAL_DMA_IRQHandler+0xa4>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a62      	ldr	r2, [pc, #392]	@ (8001574 <HAL_DMA_IRQHandler+0x1fc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d012      	beq.n	8001416 <HAL_DMA_IRQHandler+0x9e>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a60      	ldr	r2, [pc, #384]	@ (8001578 <HAL_DMA_IRQHandler+0x200>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00a      	beq.n	8001410 <HAL_DMA_IRQHandler+0x98>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a5f      	ldr	r2, [pc, #380]	@ (800157c <HAL_DMA_IRQHandler+0x204>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d102      	bne.n	800140a <HAL_DMA_IRQHandler+0x92>
 8001404:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001408:	e00e      	b.n	8001428 <HAL_DMA_IRQHandler+0xb0>
 800140a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800140e:	e00b      	b.n	8001428 <HAL_DMA_IRQHandler+0xb0>
 8001410:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001414:	e008      	b.n	8001428 <HAL_DMA_IRQHandler+0xb0>
 8001416:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800141a:	e005      	b.n	8001428 <HAL_DMA_IRQHandler+0xb0>
 800141c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001420:	e002      	b.n	8001428 <HAL_DMA_IRQHandler+0xb0>
 8001422:	2340      	movs	r3, #64	@ 0x40
 8001424:	e000      	b.n	8001428 <HAL_DMA_IRQHandler+0xb0>
 8001426:	2304      	movs	r3, #4
 8001428:	4a55      	ldr	r2, [pc, #340]	@ (8001580 <HAL_DMA_IRQHandler+0x208>)
 800142a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8094 	beq.w	800155e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800143e:	e08e      	b.n	800155e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	2202      	movs	r2, #2
 8001446:	409a      	lsls	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4013      	ands	r3, r2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d056      	beq.n	80014fe <HAL_DMA_IRQHandler+0x186>
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d051      	beq.n	80014fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0320 	and.w	r3, r3, #32
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10b      	bne.n	8001480 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 020a 	bic.w	r2, r2, #10
 8001476:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a38      	ldr	r2, [pc, #224]	@ (8001568 <HAL_DMA_IRQHandler+0x1f0>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d029      	beq.n	80014de <HAL_DMA_IRQHandler+0x166>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a37      	ldr	r2, [pc, #220]	@ (800156c <HAL_DMA_IRQHandler+0x1f4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d022      	beq.n	80014da <HAL_DMA_IRQHandler+0x162>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a35      	ldr	r2, [pc, #212]	@ (8001570 <HAL_DMA_IRQHandler+0x1f8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d01a      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x15c>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a34      	ldr	r2, [pc, #208]	@ (8001574 <HAL_DMA_IRQHandler+0x1fc>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d012      	beq.n	80014ce <HAL_DMA_IRQHandler+0x156>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a32      	ldr	r2, [pc, #200]	@ (8001578 <HAL_DMA_IRQHandler+0x200>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00a      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x150>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a31      	ldr	r2, [pc, #196]	@ (800157c <HAL_DMA_IRQHandler+0x204>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d102      	bne.n	80014c2 <HAL_DMA_IRQHandler+0x14a>
 80014bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80014c0:	e00e      	b.n	80014e0 <HAL_DMA_IRQHandler+0x168>
 80014c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014c6:	e00b      	b.n	80014e0 <HAL_DMA_IRQHandler+0x168>
 80014c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014cc:	e008      	b.n	80014e0 <HAL_DMA_IRQHandler+0x168>
 80014ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d2:	e005      	b.n	80014e0 <HAL_DMA_IRQHandler+0x168>
 80014d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014d8:	e002      	b.n	80014e0 <HAL_DMA_IRQHandler+0x168>
 80014da:	2320      	movs	r3, #32
 80014dc:	e000      	b.n	80014e0 <HAL_DMA_IRQHandler+0x168>
 80014de:	2302      	movs	r3, #2
 80014e0:	4a27      	ldr	r2, [pc, #156]	@ (8001580 <HAL_DMA_IRQHandler+0x208>)
 80014e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d034      	beq.n	800155e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014fc:	e02f      	b.n	800155e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	2208      	movs	r2, #8
 8001504:	409a      	lsls	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d028      	beq.n	8001560 <HAL_DMA_IRQHandler+0x1e8>
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d023      	beq.n	8001560 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 020e 	bic.w	r2, r2, #14
 8001526:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001530:	2101      	movs	r1, #1
 8001532:	fa01 f202 	lsl.w	r2, r1, r2
 8001536:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	2b00      	cmp	r3, #0
 8001554:	d004      	beq.n	8001560 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	4798      	blx	r3
    }
  }
  return;
 800155e:	bf00      	nop
 8001560:	bf00      	nop
}
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40020008 	.word	0x40020008
 800156c:	4002001c 	.word	0x4002001c
 8001570:	40020030 	.word	0x40020030
 8001574:	40020044 	.word	0x40020044
 8001578:	40020058 	.word	0x40020058
 800157c:	4002006c 	.word	0x4002006c
 8001580:	40020000 	.word	0x40020000

08001584 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001592:	b2db      	uxtb	r3, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b10      	cmp	r3, #16
 80015ca:	d108      	bne.n	80015de <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015dc:	e007      	b.n	80015ee <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	60da      	str	r2, [r3, #12]
}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b08b      	sub	sp, #44	@ 0x2c
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160a:	e169      	b.n	80018e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800160c:	2201      	movs	r2, #1
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	429a      	cmp	r2, r3
 8001626:	f040 8158 	bne.w	80018da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4a9a      	ldr	r2, [pc, #616]	@ (8001898 <HAL_GPIO_Init+0x2a0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d05e      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001634:	4a98      	ldr	r2, [pc, #608]	@ (8001898 <HAL_GPIO_Init+0x2a0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d875      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800163a:	4a98      	ldr	r2, [pc, #608]	@ (800189c <HAL_GPIO_Init+0x2a4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d058      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001640:	4a96      	ldr	r2, [pc, #600]	@ (800189c <HAL_GPIO_Init+0x2a4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d86f      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001646:	4a96      	ldr	r2, [pc, #600]	@ (80018a0 <HAL_GPIO_Init+0x2a8>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d052      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 800164c:	4a94      	ldr	r2, [pc, #592]	@ (80018a0 <HAL_GPIO_Init+0x2a8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d869      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001652:	4a94      	ldr	r2, [pc, #592]	@ (80018a4 <HAL_GPIO_Init+0x2ac>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d04c      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001658:	4a92      	ldr	r2, [pc, #584]	@ (80018a4 <HAL_GPIO_Init+0x2ac>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d863      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800165e:	4a92      	ldr	r2, [pc, #584]	@ (80018a8 <HAL_GPIO_Init+0x2b0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d046      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001664:	4a90      	ldr	r2, [pc, #576]	@ (80018a8 <HAL_GPIO_Init+0x2b0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d85d      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800166a:	2b12      	cmp	r3, #18
 800166c:	d82a      	bhi.n	80016c4 <HAL_GPIO_Init+0xcc>
 800166e:	2b12      	cmp	r3, #18
 8001670:	d859      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001672:	a201      	add	r2, pc, #4	@ (adr r2, 8001678 <HAL_GPIO_Init+0x80>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	080016f3 	.word	0x080016f3
 800167c:	080016cd 	.word	0x080016cd
 8001680:	080016df 	.word	0x080016df
 8001684:	08001721 	.word	0x08001721
 8001688:	08001727 	.word	0x08001727
 800168c:	08001727 	.word	0x08001727
 8001690:	08001727 	.word	0x08001727
 8001694:	08001727 	.word	0x08001727
 8001698:	08001727 	.word	0x08001727
 800169c:	08001727 	.word	0x08001727
 80016a0:	08001727 	.word	0x08001727
 80016a4:	08001727 	.word	0x08001727
 80016a8:	08001727 	.word	0x08001727
 80016ac:	08001727 	.word	0x08001727
 80016b0:	08001727 	.word	0x08001727
 80016b4:	08001727 	.word	0x08001727
 80016b8:	08001727 	.word	0x08001727
 80016bc:	080016d5 	.word	0x080016d5
 80016c0:	080016e9 	.word	0x080016e9
 80016c4:	4a79      	ldr	r2, [pc, #484]	@ (80018ac <HAL_GPIO_Init+0x2b4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ca:	e02c      	b.n	8001726 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e029      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	3304      	adds	r3, #4
 80016da:	623b      	str	r3, [r7, #32]
          break;
 80016dc:	e024      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	3308      	adds	r3, #8
 80016e4:	623b      	str	r3, [r7, #32]
          break;
 80016e6:	e01f      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	330c      	adds	r3, #12
 80016ee:	623b      	str	r3, [r7, #32]
          break;
 80016f0:	e01a      	b.n	8001728 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016fa:	2304      	movs	r3, #4
 80016fc:	623b      	str	r3, [r7, #32]
          break;
 80016fe:	e013      	b.n	8001728 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001708:	2308      	movs	r3, #8
 800170a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	611a      	str	r2, [r3, #16]
          break;
 8001712:	e009      	b.n	8001728 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001714:	2308      	movs	r3, #8
 8001716:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	615a      	str	r2, [r3, #20]
          break;
 800171e:	e003      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x130>
          break;
 8001726:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2bff      	cmp	r3, #255	@ 0xff
 800172c:	d801      	bhi.n	8001732 <HAL_GPIO_Init+0x13a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	e001      	b.n	8001736 <HAL_GPIO_Init+0x13e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3304      	adds	r3, #4
 8001736:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2bff      	cmp	r3, #255	@ 0xff
 800173c:	d802      	bhi.n	8001744 <HAL_GPIO_Init+0x14c>
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	e002      	b.n	800174a <HAL_GPIO_Init+0x152>
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	3b08      	subs	r3, #8
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	210f      	movs	r1, #15
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	401a      	ands	r2, r3
 800175c:	6a39      	ldr	r1, [r7, #32]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	431a      	orrs	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80b1 	beq.w	80018da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001778:	4b4d      	ldr	r3, [pc, #308]	@ (80018b0 <HAL_GPIO_Init+0x2b8>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a4c      	ldr	r2, [pc, #304]	@ (80018b0 <HAL_GPIO_Init+0x2b8>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b4a      	ldr	r3, [pc, #296]	@ (80018b0 <HAL_GPIO_Init+0x2b8>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001790:	4a48      	ldr	r2, [pc, #288]	@ (80018b4 <HAL_GPIO_Init+0x2bc>)
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4013      	ands	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a40      	ldr	r2, [pc, #256]	@ (80018b8 <HAL_GPIO_Init+0x2c0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d013      	beq.n	80017e4 <HAL_GPIO_Init+0x1ec>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a3f      	ldr	r2, [pc, #252]	@ (80018bc <HAL_GPIO_Init+0x2c4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d00d      	beq.n	80017e0 <HAL_GPIO_Init+0x1e8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a3e      	ldr	r2, [pc, #248]	@ (80018c0 <HAL_GPIO_Init+0x2c8>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d007      	beq.n	80017dc <HAL_GPIO_Init+0x1e4>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a3d      	ldr	r2, [pc, #244]	@ (80018c4 <HAL_GPIO_Init+0x2cc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d101      	bne.n	80017d8 <HAL_GPIO_Init+0x1e0>
 80017d4:	2303      	movs	r3, #3
 80017d6:	e006      	b.n	80017e6 <HAL_GPIO_Init+0x1ee>
 80017d8:	2304      	movs	r3, #4
 80017da:	e004      	b.n	80017e6 <HAL_GPIO_Init+0x1ee>
 80017dc:	2302      	movs	r3, #2
 80017de:	e002      	b.n	80017e6 <HAL_GPIO_Init+0x1ee>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <HAL_GPIO_Init+0x1ee>
 80017e4:	2300      	movs	r3, #0
 80017e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e8:	f002 0203 	and.w	r2, r2, #3
 80017ec:	0092      	lsls	r2, r2, #2
 80017ee:	4093      	lsls	r3, r2
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017f6:	492f      	ldr	r1, [pc, #188]	@ (80018b4 <HAL_GPIO_Init+0x2bc>)
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001810:	4b2d      	ldr	r3, [pc, #180]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	492c      	ldr	r1, [pc, #176]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800181e:	4b2a      	ldr	r3, [pc, #168]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	43db      	mvns	r3, r3
 8001826:	4928      	ldr	r1, [pc, #160]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001828:	4013      	ands	r3, r2
 800182a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001838:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	4922      	ldr	r1, [pc, #136]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	60cb      	str	r3, [r1, #12]
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001846:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	491e      	ldr	r1, [pc, #120]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001850:	4013      	ands	r3, r2
 8001852:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001860:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4918      	ldr	r1, [pc, #96]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800186e:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	43db      	mvns	r3, r3
 8001876:	4914      	ldr	r1, [pc, #80]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001878:	4013      	ands	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d021      	beq.n	80018cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001888:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	490e      	ldr	r1, [pc, #56]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
 8001894:	e021      	b.n	80018da <HAL_GPIO_Init+0x2e2>
 8001896:	bf00      	nop
 8001898:	10320000 	.word	0x10320000
 800189c:	10310000 	.word	0x10310000
 80018a0:	10220000 	.word	0x10220000
 80018a4:	10210000 	.word	0x10210000
 80018a8:	10120000 	.word	0x10120000
 80018ac:	10110000 	.word	0x10110000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000
 80018b8:	40010800 	.word	0x40010800
 80018bc:	40010c00 	.word	0x40010c00
 80018c0:	40011000 	.word	0x40011000
 80018c4:	40011400 	.word	0x40011400
 80018c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_GPIO_Init+0x304>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	4909      	ldr	r1, [pc, #36]	@ (80018fc <HAL_GPIO_Init+0x304>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	3301      	adds	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f47f ae8e 	bne.w	800160c <HAL_GPIO_Init+0x14>
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	372c      	adds	r7, #44	@ 0x2c
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001910:	787b      	ldrb	r3, [r7, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800191c:	e003      	b.n	8001926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	041a      	lsls	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	611a      	str	r2, [r3, #16]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001942:	887a      	ldrh	r2, [r7, #2]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4013      	ands	r3, r2
 8001948:	041a      	lsls	r2, r3, #16
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	43d9      	mvns	r1, r3
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	400b      	ands	r3, r1
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	611a      	str	r2, [r3, #16]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
	...

08001964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800196e:	4b08      	ldr	r3, [pc, #32]	@ (8001990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800197a:	4a05      	ldr	r2, [pc, #20]	@ (8001990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f806 	bl	8001994 <HAL_GPIO_EXTI_Callback>
  }
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e12b      	b.n	8001c12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d106      	bne.n	80019d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff f838 	bl	8000a44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2224      	movs	r2, #36	@ 0x24
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0201 	bic.w	r2, r2, #1
 80019ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a0c:	f002 ffb2 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 8001a10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4a81      	ldr	r2, [pc, #516]	@ (8001c1c <HAL_I2C_Init+0x274>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d807      	bhi.n	8001a2c <HAL_I2C_Init+0x84>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4a80      	ldr	r2, [pc, #512]	@ (8001c20 <HAL_I2C_Init+0x278>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	bf94      	ite	ls
 8001a24:	2301      	movls	r3, #1
 8001a26:	2300      	movhi	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	e006      	b.n	8001a3a <HAL_I2C_Init+0x92>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4a7d      	ldr	r2, [pc, #500]	@ (8001c24 <HAL_I2C_Init+0x27c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	bf94      	ite	ls
 8001a34:	2301      	movls	r3, #1
 8001a36:	2300      	movhi	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0e7      	b.n	8001c12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4a78      	ldr	r2, [pc, #480]	@ (8001c28 <HAL_I2C_Init+0x280>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0c9b      	lsrs	r3, r3, #18
 8001a4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	6a1b      	ldr	r3, [r3, #32]
 8001a68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4a6a      	ldr	r2, [pc, #424]	@ (8001c1c <HAL_I2C_Init+0x274>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d802      	bhi.n	8001a7c <HAL_I2C_Init+0xd4>
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	e009      	b.n	8001a90 <HAL_I2C_Init+0xe8>
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	4a69      	ldr	r2, [pc, #420]	@ (8001c2c <HAL_I2C_Init+0x284>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	099b      	lsrs	r3, r3, #6
 8001a8e:	3301      	adds	r3, #1
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001aa2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	495c      	ldr	r1, [pc, #368]	@ (8001c1c <HAL_I2C_Init+0x274>)
 8001aac:	428b      	cmp	r3, r1
 8001aae:	d819      	bhi.n	8001ae4 <HAL_I2C_Init+0x13c>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1e59      	subs	r1, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001abe:	1c59      	adds	r1, r3, #1
 8001ac0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ac4:	400b      	ands	r3, r1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_I2C_Init+0x138>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1e59      	subs	r1, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ad8:	3301      	adds	r3, #1
 8001ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ade:	e051      	b.n	8001b84 <HAL_I2C_Init+0x1dc>
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	e04f      	b.n	8001b84 <HAL_I2C_Init+0x1dc>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d111      	bne.n	8001b10 <HAL_I2C_Init+0x168>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	1e58      	subs	r0, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6859      	ldr	r1, [r3, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	440b      	add	r3, r1
 8001afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	e012      	b.n	8001b36 <HAL_I2C_Init+0x18e>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1e58      	subs	r0, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	0099      	lsls	r1, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_I2C_Init+0x196>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e022      	b.n	8001b84 <HAL_I2C_Init+0x1dc>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10e      	bne.n	8001b64 <HAL_I2C_Init+0x1bc>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1e58      	subs	r0, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6859      	ldr	r1, [r3, #4]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	440b      	add	r3, r1
 8001b54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b58:	3301      	adds	r3, #1
 8001b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b62:	e00f      	b.n	8001b84 <HAL_I2C_Init+0x1dc>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1e58      	subs	r0, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	0099      	lsls	r1, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	6809      	ldr	r1, [r1, #0]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	431a      	orrs	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	6911      	ldr	r1, [r2, #16]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68d2      	ldr	r2, [r2, #12]
 8001bbe:	4311      	orrs	r1, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	000186a0 	.word	0x000186a0
 8001c20:	001e847f 	.word	0x001e847f
 8001c24:	003d08ff 	.word	0x003d08ff
 8001c28:	431bde83 	.word	0x431bde83
 8001c2c:	10624dd3 	.word	0x10624dd3

08001c30 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c42:	2b80      	cmp	r3, #128	@ 0x80
 8001c44:	d103      	bne.n	8001c4e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  }
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	461a      	mov	r2, r3
 8001c64:	460b      	mov	r3, r1
 8001c66:	817b      	strh	r3, [r7, #10]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b20      	cmp	r3, #32
 8001c7a:	f040 8101 	bne.w	8001e80 <HAL_I2C_Master_Transmit_DMA+0x228>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c7e:	4b83      	ldr	r3, [pc, #524]	@ (8001e8c <HAL_I2C_Master_Transmit_DMA+0x234>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	08db      	lsrs	r3, r3, #3
 8001c84:	4a82      	ldr	r2, [pc, #520]	@ (8001e90 <HAL_I2C_Master_Transmit_DMA+0x238>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0a1a      	lsrs	r2, r3, #8
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	009a      	lsls	r2, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d112      	bne.n	8001cca <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	f043 0220 	orr.w	r2, r3, #32
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e0db      	b.n	8001e82 <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d0df      	beq.n	8001c98 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_I2C_Master_Transmit_DMA+0x8e>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e0cd      	b.n	8001e82 <HAL_I2C_Master_Transmit_DMA+0x22a>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d007      	beq.n	8001d0c <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2221      	movs	r2, #33	@ 0x21
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2210      	movs	r2, #16
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	893a      	ldrh	r2, [r7, #8]
 8001d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a52      	ldr	r2, [pc, #328]	@ (8001e94 <HAL_I2C_Master_Transmit_DMA+0x23c>)
 8001d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001d4e:	897a      	ldrh	r2, [r7, #10]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d073      	beq.n	8001e44 <HAL_I2C_Master_Transmit_DMA+0x1ec>
    {
      if (hi2c->hdmatx != NULL)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d022      	beq.n	8001daa <HAL_I2C_Master_Transmit_DMA+0x152>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d68:	4a4b      	ldr	r2, [pc, #300]	@ (8001e98 <HAL_I2C_Master_Transmit_DMA+0x240>)
 8001d6a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d70:	4a4a      	ldr	r2, [pc, #296]	@ (8001e9c <HAL_I2C_Master_Transmit_DMA+0x244>)
 8001d72:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d78:	2200      	movs	r2, #0
 8001d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d80:	2200      	movs	r2, #0
 8001d82:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3310      	adds	r3, #16
 8001d94:	461a      	mov	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d9a:	f7ff fa15 	bl	80011c8 <HAL_DMA_Start_IT>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d139      	bne.n	8001e1c <HAL_I2C_Master_Transmit_DMA+0x1c4>
 8001da8:	e013      	b.n	8001dd2 <HAL_I2C_Master_Transmit_DMA+0x17a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2220      	movs	r2, #32
 8001dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e057      	b.n	8001e82 <HAL_I2C_Master_Transmit_DMA+0x22a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001de8:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001df8:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e08:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e02f      	b.n	8001e7c <HAL_I2C_Master_Transmit_DMA+0x224>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e30:	f043 0210 	orr.w	r2, r3, #16
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e01e      	b.n	8001e82 <HAL_I2C_Master_Transmit_DMA+0x22a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e52:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e62:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001e7a:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <HAL_I2C_Master_Transmit_DMA+0x22a>
  }
  else
  {
    return HAL_BUSY;
 8001e80:	2302      	movs	r3, #2
  }
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	14f8b589 	.word	0x14f8b589
 8001e94:	ffff0000 	.word	0xffff0000
 8001e98:	08003cd9 	.word	0x08003cd9
 8001e9c:	08003e97 	.word	0x08003e97

08001ea0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	603b      	str	r3, [r7, #0]
 8001eac:	460b      	mov	r3, r1
 8001eae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff f822 	bl	8000ef8 <HAL_GetTick>
 8001eb4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	f040 8111 	bne.w	80020ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2319      	movs	r3, #25
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4988      	ldr	r1, [pc, #544]	@ (80020f4 <HAL_I2C_IsDeviceReady+0x254>)
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f002 f8be 	bl	8004054 <I2C_WaitOnFlagUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e104      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_I2C_IsDeviceReady+0x50>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e0fd      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d007      	beq.n	8001f16 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2224      	movs	r2, #36	@ 0x24
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4a70      	ldr	r2, [pc, #448]	@ (80020f8 <HAL_I2C_IsDeviceReady+0x258>)
 8001f38:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f48:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f002 f87c 	bl	8004054 <I2C_WaitOnFlagUntilTimeout>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00d      	beq.n	8001f7e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f70:	d103      	bne.n	8001f7a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f78:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e0b6      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f7e:	897b      	ldrh	r3, [r7, #10]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f8c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7fe ffb3 	bl	8000ef8 <HAL_GetTick>
 8001f92:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	bf0c      	ite	eq
 8001fa2:	2301      	moveq	r3, #1
 8001fa4:	2300      	movne	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fb8:	bf0c      	ite	eq
 8001fba:	2301      	moveq	r3, #1
 8001fbc:	2300      	movne	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001fc2:	e025      	b.n	8002010 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fc4:	f7fe ff98 	bl	8000ef8 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d302      	bcc.n	8001fda <HAL_I2C_IsDeviceReady+0x13a>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d103      	bne.n	8001fe2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	22a0      	movs	r2, #160	@ 0xa0
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2ba0      	cmp	r3, #160	@ 0xa0
 800201a:	d005      	beq.n	8002028 <HAL_I2C_IsDeviceReady+0x188>
 800201c:	7dfb      	ldrb	r3, [r7, #23]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <HAL_I2C_IsDeviceReady+0x188>
 8002022:	7dbb      	ldrb	r3, [r7, #22]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0cd      	beq.n	8001fc4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b02      	cmp	r3, #2
 800203c:	d129      	bne.n	8002092 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800204c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2319      	movs	r3, #25
 800206a:	2201      	movs	r2, #1
 800206c:	4921      	ldr	r1, [pc, #132]	@ (80020f4 <HAL_I2C_IsDeviceReady+0x254>)
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f001 fff0 	bl	8004054 <I2C_WaitOnFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e036      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	e02c      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2319      	movs	r3, #25
 80020b2:	2201      	movs	r2, #1
 80020b4:	490f      	ldr	r1, [pc, #60]	@ (80020f4 <HAL_I2C_IsDeviceReady+0x254>)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f001 ffcc 	bl	8004054 <I2C_WaitOnFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e012      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	3301      	adds	r3, #1
 80020ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	f4ff af32 	bcc.w	8001f3a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
  }
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	00100002 	.word	0x00100002
 80020f8:	ffff0000 	.word	0xffff0000

080020fc <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	461a      	mov	r2, r3
 8002108:	460b      	mov	r3, r1
 800210a:	817b      	strh	r3, [r7, #10]
 800210c:	4613      	mov	r3, r2
 800210e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8002110:	2300      	movs	r3, #0
 8002112:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b20      	cmp	r3, #32
 8002122:	f040 813c 	bne.w	800239e <HAL_I2C_Master_Seq_Transmit_DMA+0x2a2>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002134:	d005      	beq.n	8002142 <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 8002136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002138:	2b08      	cmp	r3, #8
 800213a:	d002      	beq.n	8002142 <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800213c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213e:	2b01      	cmp	r3, #1
 8002140:	d12c      	bne.n	800219c <HAL_I2C_Master_Seq_Transmit_DMA+0xa0>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002142:	4b99      	ldr	r3, [pc, #612]	@ (80023a8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	08db      	lsrs	r3, r3, #3
 8002148:	4a98      	ldr	r2, [pc, #608]	@ (80023ac <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0a1a      	lsrs	r2, r3, #8
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009a      	lsls	r2, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	3b01      	subs	r3, #1
 8002160:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d112      	bne.n	800218e <HAL_I2C_Master_Seq_Transmit_DMA+0x92>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f043 0220 	orr.w	r2, r3, #32
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 800218a:	2302      	movs	r3, #2
 800218c:	e108      	b.n	80023a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b02      	cmp	r3, #2
 800219a:	d0df      	beq.n	800215c <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_I2C_Master_Seq_Transmit_DMA+0xae>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e0fa      	b.n	80023a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d007      	beq.n	80021d0 <HAL_I2C_Master_Seq_Transmit_DMA+0xd4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2221      	movs	r2, #33	@ 0x21
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2210      	movs	r2, #16
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	893a      	ldrh	r2, [r7, #8]
 8002200:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002210:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002212:	897a      	ldrh	r2, [r7, #10]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221c:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 808d 	beq.w	8002342 <HAL_I2C_Master_Seq_Transmit_DMA+0x246>
    {
      if (hi2c->hdmatx != NULL)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222c:	2b00      	cmp	r3, #0
 800222e:	d022      	beq.n	8002276 <HAL_I2C_Master_Seq_Transmit_DMA+0x17a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002234:	4a5e      	ldr	r2, [pc, #376]	@ (80023b0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 8002236:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800223c:	4a5d      	ldr	r2, [pc, #372]	@ (80023b4 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800223e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002244:	2200      	movs	r2, #0
 8002246:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800224c:	2200      	movs	r2, #0
 800224e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	4619      	mov	r1, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	3310      	adds	r3, #16
 8002260:	461a      	mov	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002266:	f7fe ffaf 	bl	80011c8 <HAL_DMA_Start_IT>
 800226a:	4603      	mov	r3, r0
 800226c:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800226e:	7ffb      	ldrb	r3, [r7, #31]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d152      	bne.n	800231a <HAL_I2C_Master_Seq_Transmit_DMA+0x21e>
 8002274:	e013      	b.n	800229e <HAL_I2C_Master_Seq_Transmit_DMA+0x1a2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2220      	movs	r2, #32
 800227a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e080      	b.n	80023a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022ac:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	2b11      	cmp	r3, #17
 80022b2:	d10c      	bne.n	80022ce <HAL_I2C_Master_Seq_Transmit_DMA+0x1d2>
 80022b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80022ba:	d003      	beq.n	80022c4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1c8>
 80022bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022be:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80022c2:	d101      	bne.n	80022c8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1cc>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_I2C_Master_Seq_Transmit_DMA+0x1ce>
 80022c8:	2300      	movs	r3, #0
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <HAL_I2C_Master_Seq_Transmit_DMA+0x1e2>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80022dc:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 80022e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d005      	beq.n	80022f8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 80022ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ee:	2b20      	cmp	r3, #32
 80022f0:	d002      	beq.n	80022f8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1fc>
 80022f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f4:	2b10      	cmp	r3, #16
 80022f6:	d107      	bne.n	8002308 <HAL_I2C_Master_Seq_Transmit_DMA+0x20c>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002306:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	e03f      	b.n	800239a <HAL_I2C_Master_Seq_Transmit_DMA+0x29e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f043 0210 	orr.w	r2, r3, #16
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e02e      	b.n	80023a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002350:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b11      	cmp	r3, #17
 8002356:	d10c      	bne.n	8002372 <HAL_I2C_Master_Seq_Transmit_DMA+0x276>
 8002358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800235e:	d003      	beq.n	8002368 <HAL_I2C_Master_Seq_Transmit_DMA+0x26c>
 8002360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002362:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002366:	d101      	bne.n	800236c <HAL_I2C_Master_Seq_Transmit_DMA+0x270>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_I2C_Master_Seq_Transmit_DMA+0x272>
 800236c:	2300      	movs	r3, #0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d107      	bne.n	8002382 <HAL_I2C_Master_Seq_Transmit_DMA+0x286>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002380:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002398:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	e000      	b.n	80023a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2a4>
  }
  else
  {
    return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
  }
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000000 	.word	0x20000000
 80023ac:	14f8b589 	.word	0x14f8b589
 80023b0:	08003cd9 	.word	0x08003cd9
 80023b4:	08003e97 	.word	0x08003e97

080023b8 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	461a      	mov	r2, r3
 80023c4:	460b      	mov	r3, r1
 80023c6:	817b      	strh	r3, [r7, #10]
 80023c8:	4613      	mov	r3, r2
 80023ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023d4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80023d8:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	f040 8195 	bne.w	8002712 <HAL_I2C_Master_Seq_Receive_DMA+0x35a>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023f6:	d005      	beq.n	8002404 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 80023f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d002      	beq.n	8002404 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 80023fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002400:	2b01      	cmp	r3, #1
 8002402:	d12c      	bne.n	800245e <HAL_I2C_Master_Seq_Receive_DMA+0xa6>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002404:	4b8d      	ldr	r3, [pc, #564]	@ (800263c <HAL_I2C_Master_Seq_Receive_DMA+0x284>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	08db      	lsrs	r3, r3, #3
 800240a:	4a8d      	ldr	r2, [pc, #564]	@ (8002640 <HAL_I2C_Master_Seq_Receive_DMA+0x288>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	0a1a      	lsrs	r2, r3, #8
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	009a      	lsls	r2, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	3b01      	subs	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d112      	bne.n	8002450 <HAL_I2C_Master_Seq_Receive_DMA+0x98>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	f043 0220 	orr.w	r2, r3, #32
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	641a      	str	r2, [r3, #64]	@ 0x40

          return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
 800244e:	e161      	b.n	8002714 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b02      	cmp	r3, #2
 800245c:	d0df      	beq.n	800241e <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_I2C_Master_Seq_Receive_DMA+0xb4>
 8002468:	2302      	movs	r3, #2
 800246a:	e153      	b.n	8002714 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d007      	beq.n	8002492 <HAL_I2C_Master_Seq_Receive_DMA+0xda>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024a0:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024b0:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2222      	movs	r2, #34	@ 0x22
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2210      	movs	r2, #16
 80024be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	893a      	ldrh	r2, [r7, #8]
 80024d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80024e4:	897a      	ldrh	r2, [r7, #10]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	645a      	str	r2, [r3, #68]	@ 0x44

    Prev_State = hi2c->PreviousState;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80de 	beq.w	80026b6 <HAL_I2C_Master_Seq_Receive_DMA+0x2fe>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d12a      	bne.n	800255a <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
 8002504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002506:	2b20      	cmp	r3, #32
 8002508:	d002      	beq.n	8002510 <HAL_I2C_Master_Seq_Receive_DMA+0x158>
 800250a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250c:	2b10      	cmp	r3, #16
 800250e:	d124      	bne.n	800255a <HAL_I2C_Master_Seq_Receive_DMA+0x1a2>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2b12      	cmp	r3, #18
 8002514:	d118      	bne.n	8002548 <HAL_I2C_Master_Seq_Receive_DMA+0x190>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002524:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002534:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002544:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8002546:	e022      	b.n	800258e <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002556:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8002558:	e019      	b.n	800258e <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002568:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800256a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256c:	2b20      	cmp	r3, #32
 800256e:	d006      	beq.n	800257e <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 8002570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002572:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002576:	d002      	beq.n	800257e <HAL_I2C_Master_Seq_Receive_DMA+0x1c6>
 8002578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257a:	2b10      	cmp	r3, #16
 800257c:	d107      	bne.n	800258e <HAL_I2C_Master_Seq_Receive_DMA+0x1d6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800258c:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002592:	2b00      	cmp	r3, #0
 8002594:	d022      	beq.n	80025dc <HAL_I2C_Master_Seq_Receive_DMA+0x224>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259a:	4a2a      	ldr	r2, [pc, #168]	@ (8002644 <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 800259c:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a2:	4a29      	ldr	r2, [pc, #164]	@ (8002648 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 80025a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025aa:	2200      	movs	r2, #0
 80025ac:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b2:	2200      	movs	r2, #0
 80025b4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	3310      	adds	r3, #16
 80025c0:	4619      	mov	r1, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c6:	461a      	mov	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025cc:	f7fe fdfc 	bl	80011c8 <HAL_DMA_Start_IT>
 80025d0:	4603      	mov	r3, r0
 80025d2:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 80025d4:	7efb      	ldrb	r3, [r7, #27]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d159      	bne.n	800268e <HAL_I2C_Master_Seq_Receive_DMA+0x2d6>
 80025da:	e013      	b.n	8002604 <HAL_I2C_Master_Seq_Receive_DMA+0x24c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e087      	b.n	8002714 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b12      	cmp	r3, #18
 8002608:	d10c      	bne.n	8002624 <HAL_I2C_Master_Seq_Receive_DMA+0x26c>
 800260a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002610:	d003      	beq.n	800261a <HAL_I2C_Master_Seq_Receive_DMA+0x262>
 8002612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002614:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002618:	d101      	bne.n	800261e <HAL_I2C_Master_Seq_Receive_DMA+0x266>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <HAL_I2C_Master_Seq_Receive_DMA+0x268>
 800261e:	2300      	movs	r3, #0
 8002620:	2b01      	cmp	r3, #1
 8002622:	d113      	bne.n	800264c <HAL_I2C_Master_Seq_Receive_DMA+0x294>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002632:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 8002634:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e00a      	b.n	8002652 <HAL_I2C_Master_Seq_Receive_DMA+0x29a>
 800263c:	20000000 	.word	0x20000000
 8002640:	14f8b589 	.word	0x14f8b589
 8002644:	08003cd9 	.word	0x08003cd9
 8002648:	08003e97 	.word	0x08003e97
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 800264c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002650:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800265a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265c:	2b04      	cmp	r3, #4
 800265e:	d005      	beq.n	800266c <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 8002660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002662:	2b20      	cmp	r3, #32
 8002664:	d002      	beq.n	800266c <HAL_I2C_Master_Seq_Receive_DMA+0x2b4>
 8002666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002668:	2b10      	cmp	r3, #16
 800266a:	d107      	bne.n	800267c <HAL_I2C_Master_Seq_Receive_DMA+0x2c4>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800267a:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6859      	ldr	r1, [r3, #4]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	430a      	orrs	r2, r1
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	e03f      	b.n	800270e <HAL_I2C_Master_Seq_Receive_DMA+0x356>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	f043 0210 	orr.w	r2, r3, #16
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e02e      	b.n	8002714 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026c4:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b12      	cmp	r3, #18
 80026ca:	d10c      	bne.n	80026e6 <HAL_I2C_Master_Seq_Receive_DMA+0x32e>
 80026cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ce:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80026d2:	d003      	beq.n	80026dc <HAL_I2C_Master_Seq_Receive_DMA+0x324>
 80026d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80026da:	d101      	bne.n	80026e0 <HAL_I2C_Master_Seq_Receive_DMA+0x328>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_I2C_Master_Seq_Receive_DMA+0x32a>
 80026e0:	2300      	movs	r3, #0
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d107      	bne.n	80026f6 <HAL_I2C_Master_Seq_Receive_DMA+0x33e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026f4:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800270e:	2300      	movs	r3, #0
 8002710:	e000      	b.n	8002714 <HAL_I2C_Master_Seq_Receive_DMA+0x35c>
  }
  else
  {
    return HAL_BUSY;
 8002712:	2302      	movs	r3, #2
  }
}
 8002714:	4618      	mov	r0, r3
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002734:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800273c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002744:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	2b10      	cmp	r3, #16
 800274a:	d003      	beq.n	8002754 <HAL_I2C_EV_IRQHandler+0x38>
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b40      	cmp	r3, #64	@ 0x40
 8002750:	f040 80c1 	bne.w	80028d6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10d      	bne.n	800278a <HAL_I2C_EV_IRQHandler+0x6e>
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002774:	d003      	beq.n	800277e <HAL_I2C_EV_IRQHandler+0x62>
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800277c:	d101      	bne.n	8002782 <HAL_I2C_EV_IRQHandler+0x66>
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_I2C_EV_IRQHandler+0x68>
 8002782:	2300      	movs	r3, #0
 8002784:	2b01      	cmp	r3, #1
 8002786:	f000 8132 	beq.w	80029ee <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00c      	beq.n	80027ae <HAL_I2C_EV_IRQHandler+0x92>
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	0a5b      	lsrs	r3, r3, #9
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d006      	beq.n	80027ae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f001 fd03 	bl	80041ac <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fce5 	bl	8003176 <I2C_Master_SB>
 80027ac:	e092      	b.n	80028d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	08db      	lsrs	r3, r3, #3
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HAL_I2C_EV_IRQHandler+0xb2>
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	0a5b      	lsrs	r3, r3, #9
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fd5a 	bl	8003280 <I2C_Master_ADD10>
 80027cc:	e082      	b.n	80028d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	085b      	lsrs	r3, r3, #1
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <HAL_I2C_EV_IRQHandler+0xd2>
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	0a5b      	lsrs	r3, r3, #9
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fd73 	bl	80032d2 <I2C_Master_ADDR>
 80027ec:	e072      	b.n	80028d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d03b      	beq.n	8002872 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002808:	f000 80f3 	beq.w	80029f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	09db      	lsrs	r3, r3, #7
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00f      	beq.n	8002838 <HAL_I2C_EV_IRQHandler+0x11c>
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d009      	beq.n	8002838 <HAL_I2C_EV_IRQHandler+0x11c>
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d103      	bne.n	8002838 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f93d 	bl	8002ab0 <I2C_MasterTransmit_TXE>
 8002836:	e04d      	b.n	80028d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 80d6 	beq.w	80029f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	0a5b      	lsrs	r3, r3, #9
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80cf 	beq.w	80029f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002854:	7bbb      	ldrb	r3, [r7, #14]
 8002856:	2b21      	cmp	r3, #33	@ 0x21
 8002858:	d103      	bne.n	8002862 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f9c4 	bl	8002be8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002860:	e0c7      	b.n	80029f2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b40      	cmp	r3, #64	@ 0x40
 8002866:	f040 80c4 	bne.w	80029f2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 fa32 	bl	8002cd4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002870:	e0bf      	b.n	80029f2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800287c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002880:	f000 80b7 	beq.w	80029f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	099b      	lsrs	r3, r3, #6
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00f      	beq.n	80028b0 <HAL_I2C_EV_IRQHandler+0x194>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	0a9b      	lsrs	r3, r3, #10
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d009      	beq.n	80028b0 <HAL_I2C_EV_IRQHandler+0x194>
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 faab 	bl	8002e04 <I2C_MasterReceive_RXNE>
 80028ae:	e011      	b.n	80028d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	089b      	lsrs	r3, r3, #2
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 809a 	beq.w	80029f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	0a5b      	lsrs	r3, r3, #9
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8093 	beq.w	80029f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fb61 	bl	8002f94 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028d2:	e08e      	b.n	80029f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80028d4:	e08d      	b.n	80029f2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d004      	beq.n	80028e8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e007      	b.n	80028f8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d012      	beq.n	800292a <HAL_I2C_EV_IRQHandler+0x20e>
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	0a5b      	lsrs	r3, r3, #9
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00c      	beq.n	800292a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002920:	69b9      	ldr	r1, [r7, #24]
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 ff2c 	bl	8003780 <I2C_Slave_ADDR>
 8002928:	e066      	b.n	80029f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_I2C_EV_IRQHandler+0x22e>
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	0a5b      	lsrs	r3, r3, #9
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 ff66 	bl	8003814 <I2C_Slave_STOPF>
 8002948:	e056      	b.n	80029f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800294a:	7bbb      	ldrb	r3, [r7, #14]
 800294c:	2b21      	cmp	r3, #33	@ 0x21
 800294e:	d002      	beq.n	8002956 <HAL_I2C_EV_IRQHandler+0x23a>
 8002950:	7bbb      	ldrb	r3, [r7, #14]
 8002952:	2b29      	cmp	r3, #41	@ 0x29
 8002954:	d125      	bne.n	80029a2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	09db      	lsrs	r3, r3, #7
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00f      	beq.n	8002982 <HAL_I2C_EV_IRQHandler+0x266>
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	0a9b      	lsrs	r3, r3, #10
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_I2C_EV_IRQHandler+0x266>
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d103      	bne.n	8002982 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fe44 	bl	8003608 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002980:	e039      	b.n	80029f6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	089b      	lsrs	r3, r3, #2
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d033      	beq.n	80029f6 <HAL_I2C_EV_IRQHandler+0x2da>
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	0a5b      	lsrs	r3, r3, #9
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d02d      	beq.n	80029f6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fe71 	bl	8003682 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029a0:	e029      	b.n	80029f6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	099b      	lsrs	r3, r3, #6
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00f      	beq.n	80029ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	0a9b      	lsrs	r3, r3, #10
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	089b      	lsrs	r3, r3, #2
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fe7b 	bl	80036c2 <I2C_SlaveReceive_RXNE>
 80029cc:	e014      	b.n	80029f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00e      	beq.n	80029f8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	0a5b      	lsrs	r3, r3, #9
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fea9 	bl	800373e <I2C_SlaveReceive_BTF>
 80029ec:	e004      	b.n	80029f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80029ee:	bf00      	nop
 80029f0:	e002      	b.n	80029f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80029f2:	bf00      	nop
 80029f4:	e000      	b.n	80029f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80029f6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80029f8:	3720      	adds	r7, #32
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	70fb      	strb	r3, [r7, #3]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa4:	b2db      	uxtb	r3, r3
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002abe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ac6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d150      	bne.n	8002b78 <I2C_MasterTransmit_TXE+0xc8>
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	2b21      	cmp	r3, #33	@ 0x21
 8002ada:	d14d      	bne.n	8002b78 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d01d      	beq.n	8002b1e <I2C_MasterTransmit_TXE+0x6e>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d01a      	beq.n	8002b1e <I2C_MasterTransmit_TXE+0x6e>
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002aee:	d016      	beq.n	8002b1e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002afe:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2211      	movs	r2, #17
 8002b04:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2220      	movs	r2, #32
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fd fcc4 	bl	80004a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b1c:	e060      	b.n	8002be0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b2c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b3c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b40      	cmp	r3, #64	@ 0x40
 8002b56:	d107      	bne.n	8002b68 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ff74 	bl	8002a4e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b66:	e03b      	b.n	8002be0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7fd fc97 	bl	80004a4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002b76:	e033      	b.n	8002be0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b21      	cmp	r3, #33	@ 0x21
 8002b7c:	d005      	beq.n	8002b8a <I2C_MasterTransmit_TXE+0xda>
 8002b7e:	7bbb      	ldrb	r3, [r7, #14]
 8002b80:	2b40      	cmp	r3, #64	@ 0x40
 8002b82:	d12d      	bne.n	8002be0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b22      	cmp	r3, #34	@ 0x22
 8002b88:	d12a      	bne.n	8002be0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d108      	bne.n	8002ba6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002ba4:	e01c      	b.n	8002be0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b40      	cmp	r3, #64	@ 0x40
 8002bb0:	d103      	bne.n	8002bba <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f88e 	bl	8002cd4 <I2C_MemoryTransmit_TXE_BTF>
}
 8002bb8:	e012      	b.n	8002be0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	781a      	ldrb	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002bde:	e7ff      	b.n	8002be0 <I2C_MasterTransmit_TXE+0x130>
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b21      	cmp	r3, #33	@ 0x21
 8002c00:	d164      	bne.n	8002ccc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d012      	beq.n	8002c32 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002c30:	e04c      	b.n	8002ccc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d01d      	beq.n	8002c74 <I2C_MasterTransmit_BTF+0x8c>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d01a      	beq.n	8002c74 <I2C_MasterTransmit_BTF+0x8c>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c44:	d016      	beq.n	8002c74 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c54:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2211      	movs	r2, #17
 8002c5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7fd fc19 	bl	80004a4 <HAL_I2C_MasterTxCpltCallback>
}
 8002c72:	e02b      	b.n	8002ccc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c82:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c92:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b40      	cmp	r3, #64	@ 0x40
 8002cac:	d107      	bne.n	8002cbe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff fec9 	bl	8002a4e <HAL_I2C_MemTxCpltCallback>
}
 8002cbc:	e006      	b.n	8002ccc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd fbec 	bl	80004a4 <HAL_I2C_MasterTxCpltCallback>
}
 8002ccc:	bf00      	nop
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ce2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d11d      	bne.n	8002d28 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d10b      	bne.n	8002d0c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d04:	1c9a      	adds	r2, r3, #2
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002d0a:	e077      	b.n	8002dfc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	121b      	asrs	r3, r3, #8
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002d26:	e069      	b.n	8002dfc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10b      	bne.n	8002d48 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002d46:	e059      	b.n	8002dfc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d152      	bne.n	8002df6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
 8002d52:	2b22      	cmp	r3, #34	@ 0x22
 8002d54:	d10d      	bne.n	8002d72 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d64:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002d70:	e044      	b.n	8002dfc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b21      	cmp	r3, #33	@ 0x21
 8002d80:	d112      	bne.n	8002da8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002da6:	e029      	b.n	8002dfc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d124      	bne.n	8002dfc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	2b21      	cmp	r3, #33	@ 0x21
 8002db6:	d121      	bne.n	8002dfc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002dc6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff fe2d 	bl	8002a4e <HAL_I2C_MemTxCpltCallback>
}
 8002df4:	e002      	b.n	8002dfc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe ff1a 	bl	8001c30 <I2C_Flush_DR>
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b22      	cmp	r3, #34	@ 0x22
 8002e16:	f040 80b9 	bne.w	8002f8c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d921      	bls.n	8002e72 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	f040 8096 	bne.w	8002f8c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e6e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002e70:	e08c      	b.n	8002f8c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d07f      	beq.n	8002f7a <I2C_MasterReceive_RXNE+0x176>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d002      	beq.n	8002e86 <I2C_MasterReceive_RXNE+0x82>
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d179      	bne.n	8002f7a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f001 f95e 	bl	8004148 <I2C_WaitOnSTOPRequestThroughIT>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d14c      	bne.n	8002f2c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ea0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002eb0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b40      	cmp	r3, #64	@ 0x40
 8002eea:	d10a      	bne.n	8002f02 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff fdb0 	bl	8002a60 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f00:	e044      	b.n	8002f8c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d002      	beq.n	8002f16 <I2C_MasterReceive_RXNE+0x112>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d103      	bne.n	8002f1e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f1c:	e002      	b.n	8002f24 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2212      	movs	r2, #18
 8002f22:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7fd facb 	bl	80004c0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f2a:	e02f      	b.n	8002f8c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f3a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff fd7d 	bl	8002a72 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002f78:	e008      	b.n	8002f8c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f88:	605a      	str	r2, [r3, #4]
}
 8002f8a:	e7ff      	b.n	8002f8c <I2C_MasterReceive_RXNE+0x188>
 8002f8c:	bf00      	nop
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d11b      	bne.n	8002fe4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002fe2:	e0c4      	b.n	800316e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d129      	bne.n	8003042 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ffc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d00a      	beq.n	800301a <I2C_MasterReceive_BTF+0x86>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d007      	beq.n	800301a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003018:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003040:	e095      	b.n	800316e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d17d      	bne.n	8003148 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d002      	beq.n	8003058 <I2C_MasterReceive_BTF+0xc4>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2b10      	cmp	r3, #16
 8003056:	d108      	bne.n	800306a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e016      	b.n	8003098 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b04      	cmp	r3, #4
 800306e:	d002      	beq.n	8003076 <I2C_MasterReceive_BTF+0xe2>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d108      	bne.n	8003088 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	e007      	b.n	8003098 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003096:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80030f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b40      	cmp	r3, #64	@ 0x40
 8003106:	d10a      	bne.n	800311e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff fca2 	bl	8002a60 <HAL_I2C_MemRxCpltCallback>
}
 800311c:	e027      	b.n	800316e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d002      	beq.n	8003132 <I2C_MasterReceive_BTF+0x19e>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2b20      	cmp	r3, #32
 8003130:	d103      	bne.n	800313a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	631a      	str	r2, [r3, #48]	@ 0x30
 8003138:	e002      	b.n	8003140 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2212      	movs	r2, #18
 800313e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7fd f9bd 	bl	80004c0 <HAL_I2C_MasterRxCpltCallback>
}
 8003146:	e012      	b.n	800316e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b40      	cmp	r3, #64	@ 0x40
 8003188:	d117      	bne.n	80031ba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031a2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80031a4:	e067      	b.n	8003276 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	611a      	str	r2, [r3, #16]
}
 80031b8:	e05d      	b.n	8003276 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031c2:	d133      	bne.n	800322c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b21      	cmp	r3, #33	@ 0x21
 80031ce:	d109      	bne.n	80031e4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031e0:	611a      	str	r2, [r3, #16]
 80031e2:	e008      	b.n	80031f6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d004      	beq.n	8003208 <I2C_Master_SB+0x92>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	d108      	bne.n	800321a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320c:	2b00      	cmp	r3, #0
 800320e:	d032      	beq.n	8003276 <I2C_Master_SB+0x100>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	d02d      	beq.n	8003276 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003228:	605a      	str	r2, [r3, #4]
}
 800322a:	e024      	b.n	8003276 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10e      	bne.n	8003252 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003238:	b29b      	uxth	r3, r3
 800323a:	11db      	asrs	r3, r3, #7
 800323c:	b2db      	uxtb	r3, r3
 800323e:	f003 0306 	and.w	r3, r3, #6
 8003242:	b2db      	uxtb	r3, r3
 8003244:	f063 030f 	orn	r3, r3, #15
 8003248:	b2da      	uxtb	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	611a      	str	r2, [r3, #16]
}
 8003250:	e011      	b.n	8003276 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003256:	2b01      	cmp	r3, #1
 8003258:	d10d      	bne.n	8003276 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325e:	b29b      	uxth	r3, r3
 8003260:	11db      	asrs	r3, r3, #7
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f003 0306 	and.w	r3, r3, #6
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f063 030e 	orn	r3, r3, #14
 800326e:	b2da      	uxtb	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	611a      	str	r2, [r3, #16]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328c:	b2da      	uxtb	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003298:	2b00      	cmp	r3, #0
 800329a:	d004      	beq.n	80032a6 <I2C_Master_ADD10+0x26>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d108      	bne.n	80032b8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00c      	beq.n	80032c8 <I2C_Master_ADD10+0x48>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032c6:	605a      	str	r2, [r3, #4]
  }
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bc80      	pop	{r7}
 80032d0:	4770      	bx	lr

080032d2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b091      	sub	sp, #68	@ 0x44
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ee:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b22      	cmp	r3, #34	@ 0x22
 80032fa:	f040 8174 	bne.w	80035e6 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <I2C_Master_ADDR+0x54>
 8003306:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800330a:	2b40      	cmp	r3, #64	@ 0x40
 800330c:	d10b      	bne.n	8003326 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330e:	2300      	movs	r3, #0
 8003310:	633b      	str	r3, [r7, #48]	@ 0x30
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	633b      	str	r3, [r7, #48]	@ 0x30
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	633b      	str	r3, [r7, #48]	@ 0x30
 8003322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003324:	e16b      	b.n	80035fe <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11d      	bne.n	800336a <I2C_Master_ADDR+0x98>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003336:	d118      	bne.n	800336a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003338:	2300      	movs	r3, #0
 800333a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800334c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800335c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	651a      	str	r2, [r3, #80]	@ 0x50
 8003368:	e149      	b.n	80035fe <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d113      	bne.n	800339c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003374:	2300      	movs	r3, #0
 8003376:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003388:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	e120      	b.n	80035de <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	f040 808a 	bne.w	80034bc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80033a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033ae:	d137      	bne.n	8003420 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033be:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033ce:	d113      	bne.n	80033f8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033de:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e0:	2300      	movs	r3, #0
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	e0f2      	b.n	80035de <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f8:	2300      	movs	r3, #0
 80033fa:	623b      	str	r3, [r7, #32]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	623b      	str	r3, [r7, #32]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	623b      	str	r3, [r7, #32]
 800340c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e0de      	b.n	80035de <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003422:	2b08      	cmp	r3, #8
 8003424:	d02e      	beq.n	8003484 <I2C_Master_ADDR+0x1b2>
 8003426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003428:	2b20      	cmp	r3, #32
 800342a:	d02b      	beq.n	8003484 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800342c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800342e:	2b12      	cmp	r3, #18
 8003430:	d102      	bne.n	8003438 <I2C_Master_ADDR+0x166>
 8003432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003434:	2b01      	cmp	r3, #1
 8003436:	d125      	bne.n	8003484 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800343a:	2b04      	cmp	r3, #4
 800343c:	d00e      	beq.n	800345c <I2C_Master_ADDR+0x18a>
 800343e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003440:	2b02      	cmp	r3, #2
 8003442:	d00b      	beq.n	800345c <I2C_Master_ADDR+0x18a>
 8003444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003446:	2b10      	cmp	r3, #16
 8003448:	d008      	beq.n	800345c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	e007      	b.n	800346c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800346a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	e0ac      	b.n	80035de <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003492:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003494:	2300      	movs	r3, #0
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	61bb      	str	r3, [r7, #24]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	61bb      	str	r3, [r7, #24]
 80034a8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e090      	b.n	80035de <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d158      	bne.n	8003578 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80034c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d021      	beq.n	8003510 <I2C_Master_ADDR+0x23e>
 80034cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d01e      	beq.n	8003510 <I2C_Master_ADDR+0x23e>
 80034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d01b      	beq.n	8003510 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034e6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	e012      	b.n	8003536 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800351e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	613b      	str	r3, [r7, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003540:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003544:	d14b      	bne.n	80035de <I2C_Master_ADDR+0x30c>
 8003546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003548:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800354c:	d00b      	beq.n	8003566 <I2C_Master_ADDR+0x294>
 800354e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003550:	2b01      	cmp	r3, #1
 8003552:	d008      	beq.n	8003566 <I2C_Master_ADDR+0x294>
 8003554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003556:	2b08      	cmp	r3, #8
 8003558:	d005      	beq.n	8003566 <I2C_Master_ADDR+0x294>
 800355a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800355c:	2b10      	cmp	r3, #16
 800355e:	d002      	beq.n	8003566 <I2C_Master_ADDR+0x294>
 8003560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003562:	2b20      	cmp	r3, #32
 8003564:	d13b      	bne.n	80035de <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	e032      	b.n	80035de <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003586:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003592:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003596:	d117      	bne.n	80035c8 <I2C_Master_ADDR+0x2f6>
 8003598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800359e:	d00b      	beq.n	80035b8 <I2C_Master_ADDR+0x2e6>
 80035a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d008      	beq.n	80035b8 <I2C_Master_ADDR+0x2e6>
 80035a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d005      	beq.n	80035b8 <I2C_Master_ADDR+0x2e6>
 80035ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d002      	beq.n	80035b8 <I2C_Master_ADDR+0x2e6>
 80035b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d107      	bne.n	80035c8 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035c6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80035e4:	e00b      	b.n	80035fe <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
}
 80035fc:	e7ff      	b.n	80035fe <I2C_Master_ADDR+0x32c>
 80035fe:	bf00      	nop
 8003600:	3744      	adds	r7, #68	@ 0x44
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003616:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d02b      	beq.n	800367a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003626:	781a      	ldrb	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d114      	bne.n	800367a <I2C_SlaveTransmit_TXE+0x72>
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b29      	cmp	r3, #41	@ 0x29
 8003654:	d111      	bne.n	800367a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003664:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2221      	movs	r2, #33	@ 0x21
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2228      	movs	r2, #40	@ 0x28
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff f9c2 	bl	80029fe <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d011      	beq.n	80036b8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	781a      	ldrb	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr

080036c2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d02c      	beq.n	8003736 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d114      	bne.n	8003736 <I2C_SlaveReceive_RXNE+0x74>
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003710:	d111      	bne.n	8003736 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003720:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2222      	movs	r2, #34	@ 0x22
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2228      	movs	r2, #40	@ 0x28
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff f96d 	bl	8002a10 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d012      	beq.n	8003776 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr

08003780 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800379a:	2b28      	cmp	r3, #40	@ 0x28
 800379c:	d127      	bne.n	80037ee <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ac:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	089b      	lsrs	r3, r3, #2
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	09db      	lsrs	r3, r3, #7
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d103      	bne.n	80037d2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	81bb      	strh	r3, [r7, #12]
 80037d0:	e002      	b.n	80037d8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80037e0:	89ba      	ldrh	r2, [r7, #12]
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff f91b 	bl	8002a22 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80037ec:	e00e      	b.n	800380c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003822:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003832:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003834:	2300      	movs	r3, #0
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003860:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800386c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003870:	d172      	bne.n	8003958 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b22      	cmp	r3, #34	@ 0x22
 8003876:	d002      	beq.n	800387e <I2C_Slave_STOPF+0x6a>
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	2b2a      	cmp	r3, #42	@ 0x2a
 800387c:	d135      	bne.n	80038ea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	b29a      	uxth	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	f043 0204 	orr.w	r2, r3, #4
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fd fe64 	bl	8001584 <HAL_DMA_GetState>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d049      	beq.n	8003956 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c6:	4a69      	ldr	r2, [pc, #420]	@ (8003a6c <I2C_Slave_STOPF+0x258>)
 80038c8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fd fcda 	bl	8001288 <HAL_DMA_Abort_IT>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d03d      	beq.n	8003956 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038e4:	4610      	mov	r0, r2
 80038e6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038e8:	e035      	b.n	8003956 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	f043 0204 	orr.w	r2, r3, #4
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800391c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd fe2e 	bl	8001584 <HAL_DMA_GetState>
 8003928:	4603      	mov	r3, r0
 800392a:	2b01      	cmp	r3, #1
 800392c:	d014      	beq.n	8003958 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003932:	4a4e      	ldr	r2, [pc, #312]	@ (8003a6c <I2C_Slave_STOPF+0x258>)
 8003934:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800393a:	4618      	mov	r0, r3
 800393c:	f7fd fca4 	bl	8001288 <HAL_DMA_Abort_IT>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003950:	4610      	mov	r0, r2
 8003952:	4798      	blx	r3
 8003954:	e000      	b.n	8003958 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003956:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d03e      	beq.n	80039e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0304 	and.w	r3, r3, #4
 800396c:	2b04      	cmp	r3, #4
 800396e:	d112      	bne.n	8003996 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039a0:	2b40      	cmp	r3, #64	@ 0x40
 80039a2:	d112      	bne.n	80039ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d8:	f043 0204 	orr.w	r2, r3, #4
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f843 	bl	8003a74 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80039ee:	e039      	b.n	8003a64 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80039f4:	d109      	bne.n	8003a0a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2228      	movs	r2, #40	@ 0x28
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff f803 	bl	8002a10 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b28      	cmp	r3, #40	@ 0x28
 8003a14:	d111      	bne.n	8003a3a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a15      	ldr	r2, [pc, #84]	@ (8003a70 <I2C_Slave_STOPF+0x25c>)
 8003a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff f802 	bl	8002a3c <HAL_I2C_ListenCpltCallback>
}
 8003a38:	e014      	b.n	8003a64 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3e:	2b22      	cmp	r3, #34	@ 0x22
 8003a40:	d002      	beq.n	8003a48 <I2C_Slave_STOPF+0x234>
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	2b22      	cmp	r3, #34	@ 0x22
 8003a46:	d10d      	bne.n	8003a64 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fe ffd6 	bl	8002a10 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	08003f05 	.word	0x08003f05
 8003a70:	ffff0000 	.word	0xffff0000

08003a74 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a8c:	7bbb      	ldrb	r3, [r7, #14]
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d002      	beq.n	8003a98 <I2C_ITError+0x24>
 8003a92:	7bbb      	ldrb	r3, [r7, #14]
 8003a94:	2b40      	cmp	r3, #64	@ 0x40
 8003a96:	d10a      	bne.n	8003aae <I2C_ITError+0x3a>
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b22      	cmp	r3, #34	@ 0x22
 8003a9c:	d107      	bne.n	8003aae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ab4:	2b28      	cmp	r3, #40	@ 0x28
 8003ab6:	d107      	bne.n	8003ac8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2228      	movs	r2, #40	@ 0x28
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003ac6:	e015      	b.n	8003af4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ad6:	d00a      	beq.n	8003aee <I2C_ITError+0x7a>
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2b60      	cmp	r3, #96	@ 0x60
 8003adc:	d007      	beq.n	8003aee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b02:	d162      	bne.n	8003bca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b12:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b18:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d020      	beq.n	8003b64 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b26:	4a6a      	ldr	r2, [pc, #424]	@ (8003cd0 <I2C_ITError+0x25c>)
 8003b28:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fbaa 	bl	8001288 <HAL_DMA_Abort_IT>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8089 	beq.w	8003c4e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4798      	blx	r3
 8003b62:	e074      	b.n	8003c4e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	4a59      	ldr	r2, [pc, #356]	@ (8003cd0 <I2C_ITError+0x25c>)
 8003b6a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7fd fb89 	bl	8001288 <HAL_DMA_Abort_IT>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d068      	beq.n	8003c4e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b86:	2b40      	cmp	r3, #64	@ 0x40
 8003b88:	d10b      	bne.n	8003ba2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	4798      	blx	r3
 8003bc8:	e041      	b.n	8003c4e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b60      	cmp	r3, #96	@ 0x60
 8003bd4:	d125      	bne.n	8003c22 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bee:	2b40      	cmp	r3, #64	@ 0x40
 8003bf0:	d10b      	bne.n	8003c0a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fe ff32 	bl	8002a84 <HAL_I2C_AbortCpltCallback>
 8003c20:	e015      	b.n	8003c4e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2c:	2b40      	cmp	r3, #64	@ 0x40
 8003c2e:	d10b      	bne.n	8003c48 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7fe ff12 	bl	8002a72 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10e      	bne.n	8003c7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d104      	bne.n	8003c7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c8a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c92:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d113      	bne.n	8003cc8 <I2C_ITError+0x254>
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
 8003ca2:	2b28      	cmp	r3, #40	@ 0x28
 8003ca4:	d110      	bne.n	8003cc8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd4 <I2C_ITError+0x260>)
 8003caa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fe feba 	bl	8002a3c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	08003f05 	.word	0x08003f05
 8003cd4:	ffff0000 	.word	0xffff0000

08003cd8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cec:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cf4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d18:	2200      	movs	r2, #0
 8003d1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d28:	2200      	movs	r2, #0
 8003d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003d32:	2b21      	cmp	r3, #33	@ 0x21
 8003d34:	d007      	beq.n	8003d46 <I2C_DMAXferCplt+0x6e>
 8003d36:	7cfb      	ldrb	r3, [r7, #19]
 8003d38:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003d3c:	2b22      	cmp	r3, #34	@ 0x22
 8003d3e:	d131      	bne.n	8003da4 <I2C_DMAXferCplt+0xcc>
 8003d40:	7cbb      	ldrb	r3, [r7, #18]
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d12e      	bne.n	8003da4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d54:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003d5c:	7cfb      	ldrb	r3, [r7, #19]
 8003d5e:	2b29      	cmp	r3, #41	@ 0x29
 8003d60:	d10a      	bne.n	8003d78 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2221      	movs	r2, #33	@ 0x21
 8003d66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2228      	movs	r2, #40	@ 0x28
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d70:	6978      	ldr	r0, [r7, #20]
 8003d72:	f7fe fe44 	bl	80029fe <HAL_I2C_SlaveTxCpltCallback>
 8003d76:	e00c      	b.n	8003d92 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003d78:	7cfb      	ldrb	r3, [r7, #19]
 8003d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d7c:	d109      	bne.n	8003d92 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2222      	movs	r2, #34	@ 0x22
 8003d82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2228      	movs	r2, #40	@ 0x28
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d8c:	6978      	ldr	r0, [r7, #20]
 8003d8e:	f7fe fe3f 	bl	8002a10 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003da0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003da2:	e074      	b.n	8003e8e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d06e      	beq.n	8003e8e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d107      	bne.n	8003dca <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dc8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003dd8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003de0:	d009      	beq.n	8003df6 <I2C_DMAXferCplt+0x11e>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d006      	beq.n	8003df6 <I2C_DMAXferCplt+0x11e>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003dee:	d002      	beq.n	8003df6 <I2C_DMAXferCplt+0x11e>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d107      	bne.n	8003e06 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e04:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e14:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e24:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003e34:	6978      	ldr	r0, [r7, #20]
 8003e36:	f7fe fe1c 	bl	8002a72 <HAL_I2C_ErrorCallback>
}
 8003e3a:	e028      	b.n	8003e8e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b40      	cmp	r3, #64	@ 0x40
 8003e4e:	d10a      	bne.n	8003e66 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003e5e:	6978      	ldr	r0, [r7, #20]
 8003e60:	f7fe fdfe 	bl	8002a60 <HAL_I2C_MemRxCpltCallback>
}
 8003e64:	e013      	b.n	8003e8e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d002      	beq.n	8003e7a <I2C_DMAXferCplt+0x1a2>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d103      	bne.n	8003e82 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e80:	e002      	b.n	8003e88 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2212      	movs	r2, #18
 8003e86:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e88:	6978      	ldr	r0, [r7, #20]
 8003e8a:	f7fc fb19 	bl	80004c0 <HAL_I2C_MasterRxCpltCallback>
}
 8003e8e:	bf00      	nop
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ed2:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	f043 0210 	orr.w	r2, r3, #16
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f7fe fdbb 	bl	8002a72 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f1c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800404c <I2C_DMAAbort+0x148>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	08db      	lsrs	r3, r3, #3
 8003f24:	4a4a      	ldr	r2, [pc, #296]	@ (8004050 <I2C_DMAAbort+0x14c>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0a1a      	lsrs	r2, r3, #8
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	00da      	lsls	r2, r3, #3
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	f043 0220 	orr.w	r2, r3, #32
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003f4a:	e00a      	b.n	8003f62 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f60:	d0ea      	beq.n	8003f38 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f6e:	2200      	movs	r2, #0
 8003f70:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7e:	2200      	movs	r2, #0
 8003f80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f90:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2200      	movs	r2, #0
 8003f96:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b60      	cmp	r3, #96	@ 0x60
 8003fd2:	d10e      	bne.n	8003ff2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fea:	6978      	ldr	r0, [r7, #20]
 8003fec:	f7fe fd4a 	bl	8002a84 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ff0:	e027      	b.n	8004042 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ff8:	2b28      	cmp	r3, #40	@ 0x28
 8003ffa:	d117      	bne.n	800402c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800401a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2200      	movs	r2, #0
 8004020:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2228      	movs	r2, #40	@ 0x28
 8004026:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800402a:	e007      	b.n	800403c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800403c:	6978      	ldr	r0, [r7, #20]
 800403e:	f7fe fd18 	bl	8002a72 <HAL_I2C_ErrorCallback>
}
 8004042:	bf00      	nop
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000000 	.word	0x20000000
 8004050:	14f8b589 	.word	0x14f8b589

08004054 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004064:	e048      	b.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406c:	d044      	beq.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406e:	f7fc ff43 	bl	8000ef8 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d302      	bcc.n	8004084 <I2C_WaitOnFlagUntilTimeout+0x30>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d139      	bne.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b01      	cmp	r3, #1
 800408c:	d10d      	bne.n	80040aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	43da      	mvns	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4013      	ands	r3, r2
 800409a:	b29b      	uxth	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	bf0c      	ite	eq
 80040a0:	2301      	moveq	r3, #1
 80040a2:	2300      	movne	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	461a      	mov	r2, r3
 80040a8:	e00c      	b.n	80040c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	43da      	mvns	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4013      	ands	r3, r2
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d116      	bne.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e4:	f043 0220 	orr.w	r2, r3, #32
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e023      	b.n	8004140 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	0c1b      	lsrs	r3, r3, #16
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d10d      	bne.n	800411e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	43da      	mvns	r2, r3
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4013      	ands	r3, r2
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	e00c      	b.n	8004138 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	43da      	mvns	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	4013      	ands	r3, r2
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf0c      	ite	eq
 8004130:	2301      	moveq	r3, #1
 8004132:	2300      	movne	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	461a      	mov	r2, r3
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	429a      	cmp	r2, r3
 800413c:	d093      	beq.n	8004066 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004154:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	08db      	lsrs	r3, r3, #3
 800415a:	4a13      	ldr	r2, [pc, #76]	@ (80041a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800415c:	fba2 2303 	umull	r2, r3, r2, r3
 8004160:	0a1a      	lsrs	r2, r3, #8
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b01      	subs	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d107      	bne.n	8004186 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	f043 0220 	orr.w	r2, r3, #32
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e008      	b.n	8004198 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004194:	d0e9      	beq.n	800416a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000000 	.word	0x20000000
 80041a8:	14f8b589 	.word	0x14f8b589

080041ac <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80041bc:	d103      	bne.n	80041c6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80041c4:	e007      	b.n	80041d6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80041ce:	d102      	bne.n	80041d6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2208      	movs	r2, #8
 80041d4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e272      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f000 8087 	beq.w	800430e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004200:	4b92      	ldr	r3, [pc, #584]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 030c 	and.w	r3, r3, #12
 8004208:	2b04      	cmp	r3, #4
 800420a:	d00c      	beq.n	8004226 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800420c:	4b8f      	ldr	r3, [pc, #572]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f003 030c 	and.w	r3, r3, #12
 8004214:	2b08      	cmp	r3, #8
 8004216:	d112      	bne.n	800423e <HAL_RCC_OscConfig+0x5e>
 8004218:	4b8c      	ldr	r3, [pc, #560]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004224:	d10b      	bne.n	800423e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004226:	4b89      	ldr	r3, [pc, #548]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d06c      	beq.n	800430c <HAL_RCC_OscConfig+0x12c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d168      	bne.n	800430c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e24c      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004246:	d106      	bne.n	8004256 <HAL_RCC_OscConfig+0x76>
 8004248:	4b80      	ldr	r3, [pc, #512]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a7f      	ldr	r2, [pc, #508]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 800424e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	e02e      	b.n	80042b4 <HAL_RCC_OscConfig+0xd4>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10c      	bne.n	8004278 <HAL_RCC_OscConfig+0x98>
 800425e:	4b7b      	ldr	r3, [pc, #492]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a7a      	ldr	r2, [pc, #488]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	4b78      	ldr	r3, [pc, #480]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a77      	ldr	r2, [pc, #476]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004270:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e01d      	b.n	80042b4 <HAL_RCC_OscConfig+0xd4>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0xbc>
 8004282:	4b72      	ldr	r3, [pc, #456]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a71      	ldr	r2, [pc, #452]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	4b6f      	ldr	r3, [pc, #444]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a6e      	ldr	r2, [pc, #440]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e00b      	b.n	80042b4 <HAL_RCC_OscConfig+0xd4>
 800429c:	4b6b      	ldr	r3, [pc, #428]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a6a      	ldr	r2, [pc, #424]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 80042a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4b68      	ldr	r3, [pc, #416]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a67      	ldr	r2, [pc, #412]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 80042ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d013      	beq.n	80042e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fc fe1c 	bl	8000ef8 <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042c4:	f7fc fe18 	bl	8000ef8 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	@ 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e200      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b5d      	ldr	r3, [pc, #372]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0xe4>
 80042e2:	e014      	b.n	800430e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7fc fe08 	bl	8000ef8 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fc fe04 	bl	8000ef8 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	@ 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e1ec      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	4b53      	ldr	r3, [pc, #332]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x10c>
 800430a:	e000      	b.n	800430e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800430c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d063      	beq.n	80043e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800431a:	4b4c      	ldr	r3, [pc, #304]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004326:	4b49      	ldr	r3, [pc, #292]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b08      	cmp	r3, #8
 8004330:	d11c      	bne.n	800436c <HAL_RCC_OscConfig+0x18c>
 8004332:	4b46      	ldr	r3, [pc, #280]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d116      	bne.n	800436c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433e:	4b43      	ldr	r3, [pc, #268]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_RCC_OscConfig+0x176>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d001      	beq.n	8004356 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e1c0      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004356:	4b3d      	ldr	r3, [pc, #244]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4939      	ldr	r1, [pc, #228]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436a:	e03a      	b.n	80043e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d020      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004374:	4b36      	ldr	r3, [pc, #216]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 8004376:	2201      	movs	r2, #1
 8004378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437a:	f7fc fdbd 	bl	8000ef8 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004382:	f7fc fdb9 	bl	8000ef8 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e1a1      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004394:	4b2d      	ldr	r3, [pc, #180]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a0:	4b2a      	ldr	r3, [pc, #168]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4927      	ldr	r1, [pc, #156]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	600b      	str	r3, [r1, #0]
 80043b4:	e015      	b.n	80043e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b6:	4b26      	ldr	r3, [pc, #152]	@ (8004450 <HAL_RCC_OscConfig+0x270>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fc fd9c 	bl	8000ef8 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c4:	f7fc fd98 	bl	8000ef8 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e180      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d6:	4b1d      	ldr	r3, [pc, #116]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d03a      	beq.n	8004464 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d019      	beq.n	800442a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043f6:	4b17      	ldr	r3, [pc, #92]	@ (8004454 <HAL_RCC_OscConfig+0x274>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fc:	f7fc fd7c 	bl	8000ef8 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004404:	f7fc fd78 	bl	8000ef8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e160      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004416:	4b0d      	ldr	r3, [pc, #52]	@ (800444c <HAL_RCC_OscConfig+0x26c>)
 8004418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004422:	2001      	movs	r0, #1
 8004424:	f000 faea 	bl	80049fc <RCC_Delay>
 8004428:	e01c      	b.n	8004464 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800442a:	4b0a      	ldr	r3, [pc, #40]	@ (8004454 <HAL_RCC_OscConfig+0x274>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004430:	f7fc fd62 	bl	8000ef8 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004436:	e00f      	b.n	8004458 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004438:	f7fc fd5e 	bl	8000ef8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d908      	bls.n	8004458 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e146      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
 800444a:	bf00      	nop
 800444c:	40021000 	.word	0x40021000
 8004450:	42420000 	.word	0x42420000
 8004454:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004458:	4b92      	ldr	r3, [pc, #584]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e9      	bne.n	8004438 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80a6 	beq.w	80045be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004476:	4b8b      	ldr	r3, [pc, #556]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004482:	4b88      	ldr	r3, [pc, #544]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	4a87      	ldr	r2, [pc, #540]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800448c:	61d3      	str	r3, [r2, #28]
 800448e:	4b85      	ldr	r3, [pc, #532]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449e:	4b82      	ldr	r3, [pc, #520]	@ (80046a8 <HAL_RCC_OscConfig+0x4c8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d118      	bne.n	80044dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044aa:	4b7f      	ldr	r3, [pc, #508]	@ (80046a8 <HAL_RCC_OscConfig+0x4c8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a7e      	ldr	r2, [pc, #504]	@ (80046a8 <HAL_RCC_OscConfig+0x4c8>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b6:	f7fc fd1f 	bl	8000ef8 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fc fd1b 	bl	8000ef8 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b64      	cmp	r3, #100	@ 0x64
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e103      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	4b75      	ldr	r3, [pc, #468]	@ (80046a8 <HAL_RCC_OscConfig+0x4c8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_OscConfig+0x312>
 80044e4:	4b6f      	ldr	r3, [pc, #444]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4a6e      	ldr	r2, [pc, #440]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6213      	str	r3, [r2, #32]
 80044f0:	e02d      	b.n	800454e <HAL_RCC_OscConfig+0x36e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10c      	bne.n	8004514 <HAL_RCC_OscConfig+0x334>
 80044fa:	4b6a      	ldr	r3, [pc, #424]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	4a69      	ldr	r2, [pc, #420]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	6213      	str	r3, [r2, #32]
 8004506:	4b67      	ldr	r3, [pc, #412]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	4a66      	ldr	r2, [pc, #408]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 800450c:	f023 0304 	bic.w	r3, r3, #4
 8004510:	6213      	str	r3, [r2, #32]
 8004512:	e01c      	b.n	800454e <HAL_RCC_OscConfig+0x36e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2b05      	cmp	r3, #5
 800451a:	d10c      	bne.n	8004536 <HAL_RCC_OscConfig+0x356>
 800451c:	4b61      	ldr	r3, [pc, #388]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	4a60      	ldr	r2, [pc, #384]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004522:	f043 0304 	orr.w	r3, r3, #4
 8004526:	6213      	str	r3, [r2, #32]
 8004528:	4b5e      	ldr	r3, [pc, #376]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	4a5d      	ldr	r2, [pc, #372]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	6213      	str	r3, [r2, #32]
 8004534:	e00b      	b.n	800454e <HAL_RCC_OscConfig+0x36e>
 8004536:	4b5b      	ldr	r3, [pc, #364]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	4a5a      	ldr	r2, [pc, #360]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 800453c:	f023 0301 	bic.w	r3, r3, #1
 8004540:	6213      	str	r3, [r2, #32]
 8004542:	4b58      	ldr	r3, [pc, #352]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	4a57      	ldr	r2, [pc, #348]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004548:	f023 0304 	bic.w	r3, r3, #4
 800454c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d015      	beq.n	8004582 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004556:	f7fc fccf 	bl	8000ef8 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455c:	e00a      	b.n	8004574 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800455e:	f7fc fccb 	bl	8000ef8 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e0b1      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004574:	4b4b      	ldr	r3, [pc, #300]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0ee      	beq.n	800455e <HAL_RCC_OscConfig+0x37e>
 8004580:	e014      	b.n	80045ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004582:	f7fc fcb9 	bl	8000ef8 <HAL_GetTick>
 8004586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004588:	e00a      	b.n	80045a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458a:	f7fc fcb5 	bl	8000ef8 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004598:	4293      	cmp	r3, r2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e09b      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a0:	4b40      	ldr	r3, [pc, #256]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1ee      	bne.n	800458a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d105      	bne.n	80045be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b2:	4b3c      	ldr	r3, [pc, #240]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	4a3b      	ldr	r2, [pc, #236]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 80045b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 8087 	beq.w	80046d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045c8:	4b36      	ldr	r3, [pc, #216]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d061      	beq.n	8004698 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d146      	bne.n	800466a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045dc:	4b33      	ldr	r3, [pc, #204]	@ (80046ac <HAL_RCC_OscConfig+0x4cc>)
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e2:	f7fc fc89 	bl	8000ef8 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ea:	f7fc fc85 	bl	8000ef8 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e06d      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045fc:	4b29      	ldr	r3, [pc, #164]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f0      	bne.n	80045ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004610:	d108      	bne.n	8004624 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004612:	4b24      	ldr	r3, [pc, #144]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	4921      	ldr	r1, [pc, #132]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004624:	4b1f      	ldr	r3, [pc, #124]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a19      	ldr	r1, [r3, #32]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	430b      	orrs	r3, r1
 8004636:	491b      	ldr	r1, [pc, #108]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 8004638:	4313      	orrs	r3, r2
 800463a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463c:	4b1b      	ldr	r3, [pc, #108]	@ (80046ac <HAL_RCC_OscConfig+0x4cc>)
 800463e:	2201      	movs	r2, #1
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004642:	f7fc fc59 	bl	8000ef8 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464a:	f7fc fc55 	bl	8000ef8 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e03d      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800465c:	4b11      	ldr	r3, [pc, #68]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x46a>
 8004668:	e035      	b.n	80046d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466a:	4b10      	ldr	r3, [pc, #64]	@ (80046ac <HAL_RCC_OscConfig+0x4cc>)
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004670:	f7fc fc42 	bl	8000ef8 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004678:	f7fc fc3e 	bl	8000ef8 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e026      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800468a:	4b06      	ldr	r3, [pc, #24]	@ (80046a4 <HAL_RCC_OscConfig+0x4c4>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x498>
 8004696:	e01e      	b.n	80046d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d107      	bne.n	80046b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e019      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40007000 	.word	0x40007000
 80046ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046b0:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <HAL_RCC_OscConfig+0x500>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d106      	bne.n	80046d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40021000 	.word	0x40021000

080046e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0d0      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046f8:	4b6a      	ldr	r3, [pc, #424]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d910      	bls.n	8004728 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b67      	ldr	r3, [pc, #412]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 0207 	bic.w	r2, r3, #7
 800470e:	4965      	ldr	r1, [pc, #404]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b63      	ldr	r3, [pc, #396]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0b8      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004740:	4b59      	ldr	r3, [pc, #356]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4a58      	ldr	r2, [pc, #352]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800474a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004758:	4b53      	ldr	r3, [pc, #332]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4a52      	ldr	r2, [pc, #328]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 800475e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004762:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b50      	ldr	r3, [pc, #320]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	494d      	ldr	r1, [pc, #308]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004772:	4313      	orrs	r3, r2
 8004774:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d040      	beq.n	8004804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b47      	ldr	r3, [pc, #284]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d115      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07f      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d107      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a2:	4b41      	ldr	r3, [pc, #260]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e073      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b2:	4b3d      	ldr	r3, [pc, #244]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e06b      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047c2:	4b39      	ldr	r3, [pc, #228]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f023 0203 	bic.w	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	4936      	ldr	r1, [pc, #216]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047d4:	f7fc fb90 	bl	8000ef8 <HAL_GetTick>
 80047d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047dc:	f7fc fb8c 	bl	8000ef8 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e053      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	4b2d      	ldr	r3, [pc, #180]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 020c 	and.w	r2, r3, #12
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	429a      	cmp	r2, r3
 8004802:	d1eb      	bne.n	80047dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004804:	4b27      	ldr	r3, [pc, #156]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d210      	bcs.n	8004834 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b24      	ldr	r3, [pc, #144]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 0207 	bic.w	r2, r3, #7
 800481a:	4922      	ldr	r1, [pc, #136]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	4313      	orrs	r3, r2
 8004820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b20      	ldr	r3, [pc, #128]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e032      	b.n	800489a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004840:	4b19      	ldr	r3, [pc, #100]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4916      	ldr	r1, [pc, #88]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 800484e:	4313      	orrs	r3, r2
 8004850:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800485e:	4b12      	ldr	r3, [pc, #72]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	490e      	ldr	r1, [pc, #56]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 800486e:	4313      	orrs	r3, r2
 8004870:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004872:	f000 f821 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004876:	4602      	mov	r2, r0
 8004878:	4b0b      	ldr	r3, [pc, #44]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	490a      	ldr	r1, [pc, #40]	@ (80048ac <HAL_RCC_ClockConfig+0x1c8>)
 8004884:	5ccb      	ldrb	r3, [r1, r3]
 8004886:	fa22 f303 	lsr.w	r3, r2, r3
 800488a:	4a09      	ldr	r2, [pc, #36]	@ (80048b0 <HAL_RCC_ClockConfig+0x1cc>)
 800488c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800488e:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fc f974 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40022000 	.word	0x40022000
 80048a8:	40021000 	.word	0x40021000
 80048ac:	08008d88 	.word	0x08008d88
 80048b0:	20000000 	.word	0x20000000
 80048b4:	20000004 	.word	0x20000004

080048b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	2300      	movs	r3, #0
 80048cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048d2:	4b1e      	ldr	r3, [pc, #120]	@ (800494c <HAL_RCC_GetSysClockFreq+0x94>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d002      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0x30>
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d003      	beq.n	80048ee <HAL_RCC_GetSysClockFreq+0x36>
 80048e6:	e027      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048e8:	4b19      	ldr	r3, [pc, #100]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x98>)
 80048ea:	613b      	str	r3, [r7, #16]
      break;
 80048ec:	e027      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	0c9b      	lsrs	r3, r3, #18
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	4a17      	ldr	r2, [pc, #92]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x9c>)
 80048f8:	5cd3      	ldrb	r3, [r2, r3]
 80048fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d010      	beq.n	8004928 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004906:	4b11      	ldr	r3, [pc, #68]	@ (800494c <HAL_RCC_GetSysClockFreq+0x94>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	0c5b      	lsrs	r3, r3, #17
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	4a11      	ldr	r2, [pc, #68]	@ (8004958 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004912:	5cd3      	ldrb	r3, [r2, r3]
 8004914:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a0d      	ldr	r2, [pc, #52]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x98>)
 800491a:	fb03 f202 	mul.w	r2, r3, r2
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	e004      	b.n	8004932 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a0c      	ldr	r2, [pc, #48]	@ (800495c <HAL_RCC_GetSysClockFreq+0xa4>)
 800492c:	fb02 f303 	mul.w	r3, r2, r3
 8004930:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	613b      	str	r3, [r7, #16]
      break;
 8004936:	e002      	b.n	800493e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004938:	4b05      	ldr	r3, [pc, #20]	@ (8004950 <HAL_RCC_GetSysClockFreq+0x98>)
 800493a:	613b      	str	r3, [r7, #16]
      break;
 800493c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800493e:	693b      	ldr	r3, [r7, #16]
}
 8004940:	4618      	mov	r0, r3
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40021000 	.word	0x40021000
 8004950:	007a1200 	.word	0x007a1200
 8004954:	08008da0 	.word	0x08008da0
 8004958:	08008db0 	.word	0x08008db0
 800495c:	003d0900 	.word	0x003d0900

08004960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004964:	4b02      	ldr	r3, [pc, #8]	@ (8004970 <HAL_RCC_GetHCLKFreq+0x10>)
 8004966:	681b      	ldr	r3, [r3, #0]
}
 8004968:	4618      	mov	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	20000000 	.word	0x20000000

08004974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004978:	f7ff fff2 	bl	8004960 <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b05      	ldr	r3, [pc, #20]	@ (8004994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	0a1b      	lsrs	r3, r3, #8
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4903      	ldr	r1, [pc, #12]	@ (8004998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40021000 	.word	0x40021000
 8004998:	08008d98 	.word	0x08008d98

0800499c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	220f      	movs	r2, #15
 80049aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049ac:	4b11      	ldr	r3, [pc, #68]	@ (80049f4 <HAL_RCC_GetClockConfig+0x58>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 0203 	and.w	r2, r3, #3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049b8:	4b0e      	ldr	r3, [pc, #56]	@ (80049f4 <HAL_RCC_GetClockConfig+0x58>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049c4:	4b0b      	ldr	r3, [pc, #44]	@ (80049f4 <HAL_RCC_GetClockConfig+0x58>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80049d0:	4b08      	ldr	r3, [pc, #32]	@ (80049f4 <HAL_RCC_GetClockConfig+0x58>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	08db      	lsrs	r3, r3, #3
 80049d6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049de:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <HAL_RCC_GetClockConfig+0x5c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0207 	and.w	r2, r3, #7
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40022000 	.word	0x40022000

080049fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a04:	4b0a      	ldr	r3, [pc, #40]	@ (8004a30 <RCC_Delay+0x34>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a0a      	ldr	r2, [pc, #40]	@ (8004a34 <RCC_Delay+0x38>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	0a5b      	lsrs	r3, r3, #9
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	fb02 f303 	mul.w	r3, r2, r3
 8004a16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a18:	bf00      	nop
  }
  while (Delay --);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1e5a      	subs	r2, r3, #1
 8004a1e:	60fa      	str	r2, [r7, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1f9      	bne.n	8004a18 <RCC_Delay+0x1c>
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	20000000 	.word	0x20000000
 8004a34:	10624dd3 	.word	0x10624dd3

08004a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e041      	b.n	8004ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f839 	bl	8004ad6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f000 f99c 	bl	8004db4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d001      	beq.n	8004b00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e03a      	b.n	8004b76 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a18      	ldr	r2, [pc, #96]	@ (8004b80 <HAL_TIM_Base_Start_IT+0x98>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d00e      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0x58>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b2a:	d009      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0x58>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a14      	ldr	r2, [pc, #80]	@ (8004b84 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d004      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0x58>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a13      	ldr	r2, [pc, #76]	@ (8004b88 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d111      	bne.n	8004b64 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d010      	beq.n	8004b74 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0201 	orr.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b62:	e007      	b.n	8004b74 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr
 8004b80:	40012c00 	.word	0x40012c00
 8004b84:	40000400 	.word	0x40000400
 8004b88:	40000800 	.word	0x40000800

08004b8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d020      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01b      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0202 	mvn.w	r2, #2
 8004bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f8d1 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f8c4 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f8d3 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d020      	beq.n	8004c3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01b      	beq.n	8004c3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0204 	mvn.w	r2, #4
 8004c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2202      	movs	r2, #2
 8004c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f8ab 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f89e 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f8ad 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d020      	beq.n	8004c88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01b      	beq.n	8004c88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f06f 0208 	mvn.w	r2, #8
 8004c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2204      	movs	r2, #4
 8004c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f885 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004c74:	e005      	b.n	8004c82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f878 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f887 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d020      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01b      	beq.n	8004cd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0210 	mvn.w	r2, #16
 8004ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2208      	movs	r2, #8
 8004caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f85f 	bl	8004d7e <HAL_TIM_IC_CaptureCallback>
 8004cc0:	e005      	b.n	8004cce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 f852 	bl	8004d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f861 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00c      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d007      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0201 	mvn.w	r2, #1
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fb fc2c 	bl	8000550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00c      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d007      	beq.n	8004d1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f8c3 	bl	8004ea2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00c      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d007      	beq.n	8004d40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f831 	bl	8004da2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00c      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0220 	mvn.w	r2, #32
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f896 	bl	8004e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d64:	bf00      	nop
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bc80      	pop	{r7}
 8004d7c:	4770      	bx	lr

08004d7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr

08004da2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bc80      	pop	{r7}
 8004db2:	4770      	bx	lr

08004db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8004e84 <TIM_Base_SetConfig+0xd0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00b      	beq.n	8004de4 <TIM_Base_SetConfig+0x30>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dd2:	d007      	beq.n	8004de4 <TIM_Base_SetConfig+0x30>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e88 <TIM_Base_SetConfig+0xd4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d003      	beq.n	8004de4 <TIM_Base_SetConfig+0x30>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a2b      	ldr	r2, [pc, #172]	@ (8004e8c <TIM_Base_SetConfig+0xd8>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d108      	bne.n	8004df6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a22      	ldr	r2, [pc, #136]	@ (8004e84 <TIM_Base_SetConfig+0xd0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00b      	beq.n	8004e16 <TIM_Base_SetConfig+0x62>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e04:	d007      	beq.n	8004e16 <TIM_Base_SetConfig+0x62>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1f      	ldr	r2, [pc, #124]	@ (8004e88 <TIM_Base_SetConfig+0xd4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d003      	beq.n	8004e16 <TIM_Base_SetConfig+0x62>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a1e      	ldr	r2, [pc, #120]	@ (8004e8c <TIM_Base_SetConfig+0xd8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d108      	bne.n	8004e28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004e84 <TIM_Base_SetConfig+0xd0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d103      	bne.n	8004e5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	611a      	str	r2, [r3, #16]
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr
 8004e84:	40012c00 	.word	0x40012c00
 8004e88:	40000400 	.word	0x40000400
 8004e8c:	40000800 	.word	0x40000800

08004e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bc80      	pop	{r7}
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b083      	sub	sp, #12
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004eaa:	bf00      	nop
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr

08004eb4 <__NVIC_SetPriority>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	4603      	mov	r3, r0
 8004ebc:	6039      	str	r1, [r7, #0]
 8004ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	db0a      	blt.n	8004ede <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	490c      	ldr	r1, [pc, #48]	@ (8004f00 <__NVIC_SetPriority+0x4c>)
 8004ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ed2:	0112      	lsls	r2, r2, #4
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004edc:	e00a      	b.n	8004ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	4908      	ldr	r1, [pc, #32]	@ (8004f04 <__NVIC_SetPriority+0x50>)
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	3b04      	subs	r3, #4
 8004eec:	0112      	lsls	r2, r2, #4
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	761a      	strb	r2, [r3, #24]
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bc80      	pop	{r7}
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	e000e100 	.word	0xe000e100
 8004f04:	e000ed00 	.word	0xe000ed00

08004f08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f0c:	4b05      	ldr	r3, [pc, #20]	@ (8004f24 <SysTick_Handler+0x1c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f10:	f002 f870 	bl	8006ff4 <xTaskGetSchedulerState>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d001      	beq.n	8004f1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f1a:	f002 ff15 	bl	8007d48 <xPortSysTickHandler>
  }
}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	e000e010 	.word	0xe000e010

08004f28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	f06f 0004 	mvn.w	r0, #4
 8004f32:	f7ff ffbf 	bl	8004eb4 <__NVIC_SetPriority>
#endif
}
 8004f36:	bf00      	nop
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f42:	f3ef 8305 	mrs	r3, IPSR
 8004f46:	603b      	str	r3, [r7, #0]
  return(result);
 8004f48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f4e:	f06f 0305 	mvn.w	r3, #5
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	e00c      	b.n	8004f70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f56:	4b09      	ldr	r3, [pc, #36]	@ (8004f7c <osKernelInitialize+0x40>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d105      	bne.n	8004f6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f5e:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <osKernelInitialize+0x40>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	e002      	b.n	8004f70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f70:	687b      	ldr	r3, [r7, #4]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr
 8004f7c:	20000210 	.word	0x20000210

08004f80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f86:	f3ef 8305 	mrs	r3, IPSR
 8004f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8004f8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f92:	f06f 0305 	mvn.w	r3, #5
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	e010      	b.n	8004fbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc8 <osKernelStart+0x48>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d109      	bne.n	8004fb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004fa2:	f7ff ffc1 	bl	8004f28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004fa6:	4b08      	ldr	r3, [pc, #32]	@ (8004fc8 <osKernelStart+0x48>)
 8004fa8:	2202      	movs	r2, #2
 8004faa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004fac:	f001 fbb4 	bl	8006718 <vTaskStartScheduler>
      stat = osOK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	607b      	str	r3, [r7, #4]
 8004fb4:	e002      	b.n	8004fbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fbc:	687b      	ldr	r3, [r7, #4]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000210 	.word	0x20000210

08004fcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08e      	sub	sp, #56	@ 0x38
 8004fd0:	af04      	add	r7, sp, #16
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fdc:	f3ef 8305 	mrs	r3, IPSR
 8004fe0:	617b      	str	r3, [r7, #20]
  return(result);
 8004fe2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d17e      	bne.n	80050e6 <osThreadNew+0x11a>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d07b      	beq.n	80050e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004fee:	2380      	movs	r3, #128	@ 0x80
 8004ff0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004ff2:	2318      	movs	r3, #24
 8004ff4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8004ffe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d045      	beq.n	8005092 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <osThreadNew+0x48>
        name = attr->name;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <osThreadNew+0x6e>
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	2b38      	cmp	r3, #56	@ 0x38
 800502c:	d805      	bhi.n	800503a <osThreadNew+0x6e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <osThreadNew+0x72>
        return (NULL);
 800503a:	2300      	movs	r3, #0
 800503c:	e054      	b.n	80050e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	089b      	lsrs	r3, r3, #2
 800504c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00e      	beq.n	8005074 <osThreadNew+0xa8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2ba7      	cmp	r3, #167	@ 0xa7
 800505c:	d90a      	bls.n	8005074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005062:	2b00      	cmp	r3, #0
 8005064:	d006      	beq.n	8005074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <osThreadNew+0xa8>
        mem = 1;
 800506e:	2301      	movs	r3, #1
 8005070:	61bb      	str	r3, [r7, #24]
 8005072:	e010      	b.n	8005096 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10c      	bne.n	8005096 <osThreadNew+0xca>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d108      	bne.n	8005096 <osThreadNew+0xca>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d104      	bne.n	8005096 <osThreadNew+0xca>
          mem = 0;
 800508c:	2300      	movs	r3, #0
 800508e:	61bb      	str	r3, [r7, #24]
 8005090:	e001      	b.n	8005096 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d110      	bne.n	80050be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050a4:	9202      	str	r2, [sp, #8]
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	6a3a      	ldr	r2, [r7, #32]
 80050b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f001 f93c 	bl	8006330 <xTaskCreateStatic>
 80050b8:	4603      	mov	r3, r0
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	e013      	b.n	80050e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d110      	bne.n	80050e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	f107 0310 	add.w	r3, r7, #16
 80050cc:	9301      	str	r3, [sp, #4]
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f001 f98a 	bl	80063f0 <xTaskCreate>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d001      	beq.n	80050e6 <osThreadNew+0x11a>
            hTask = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80050e6:	693b      	ldr	r3, [r7, #16]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3728      	adds	r7, #40	@ 0x28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050f8:	f3ef 8305 	mrs	r3, IPSR
 80050fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80050fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <osDelay+0x1c>
    stat = osErrorISR;
 8005104:	f06f 0305 	mvn.w	r3, #5
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e007      	b.n	800511c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800510c:	2300      	movs	r3, #0
 800510e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f001 fac8 	bl	80066ac <vTaskDelay>
    }
  }

  return (stat);
 800511c:	68fb      	ldr	r3, [r7, #12]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005126:	b580      	push	{r7, lr}
 8005128:	b088      	sub	sp, #32
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005132:	f3ef 8305 	mrs	r3, IPSR
 8005136:	60bb      	str	r3, [r7, #8]
  return(result);
 8005138:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800513a:	2b00      	cmp	r3, #0
 800513c:	d174      	bne.n	8005228 <osMutexNew+0x102>
    if (attr != NULL) {
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <osMutexNew+0x26>
      type = attr->attr_bits;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	e001      	b.n	8005150 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d002      	beq.n	8005160 <osMutexNew+0x3a>
      rmtx = 1U;
 800515a:	2301      	movs	r3, #1
 800515c:	617b      	str	r3, [r7, #20]
 800515e:	e001      	b.n	8005164 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d15c      	bne.n	8005228 <osMutexNew+0x102>
      mem = -1;
 800516e:	f04f 33ff 	mov.w	r3, #4294967295
 8005172:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d015      	beq.n	80051a6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d006      	beq.n	8005190 <osMutexNew+0x6a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2b4f      	cmp	r3, #79	@ 0x4f
 8005188:	d902      	bls.n	8005190 <osMutexNew+0x6a>
          mem = 1;
 800518a:	2301      	movs	r3, #1
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	e00c      	b.n	80051aa <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d108      	bne.n	80051aa <osMutexNew+0x84>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d104      	bne.n	80051aa <osMutexNew+0x84>
            mem = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	613b      	str	r3, [r7, #16]
 80051a4:	e001      	b.n	80051aa <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d112      	bne.n	80051d6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d007      	beq.n	80051c6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	4619      	mov	r1, r3
 80051bc:	2004      	movs	r0, #4
 80051be:	f000 fb1a 	bl	80057f6 <xQueueCreateMutexStatic>
 80051c2:	61f8      	str	r0, [r7, #28]
 80051c4:	e016      	b.n	80051f4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	4619      	mov	r1, r3
 80051cc:	2001      	movs	r0, #1
 80051ce:	f000 fb12 	bl	80057f6 <xQueueCreateMutexStatic>
 80051d2:	61f8      	str	r0, [r7, #28]
 80051d4:	e00e      	b.n	80051f4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10b      	bne.n	80051f4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80051e2:	2004      	movs	r0, #4
 80051e4:	f000 faef 	bl	80057c6 <xQueueCreateMutex>
 80051e8:	61f8      	str	r0, [r7, #28]
 80051ea:	e003      	b.n	80051f4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80051ec:	2001      	movs	r0, #1
 80051ee:	f000 faea 	bl	80057c6 <xQueueCreateMutex>
 80051f2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <osMutexNew+0xee>
        if (attr != NULL) {
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <osMutexNew+0xe2>
          name = attr->name;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	e001      	b.n	800520c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005208:	2300      	movs	r3, #0
 800520a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800520c:	68f9      	ldr	r1, [r7, #12]
 800520e:	69f8      	ldr	r0, [r7, #28]
 8005210:	f001 f832 	bl	8006278 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d006      	beq.n	8005228 <osMutexNew+0x102>
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f043 0301 	orr.w	r3, r3, #1
 8005226:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005228:	69fb      	ldr	r3, [r7, #28]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3720      	adds	r7, #32
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005232:	b580      	push	{r7, lr}
 8005234:	b086      	sub	sp, #24
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005250:	f3ef 8305 	mrs	r3, IPSR
 8005254:	60bb      	str	r3, [r7, #8]
  return(result);
 8005256:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800525c:	f06f 0305 	mvn.w	r3, #5
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	e02c      	b.n	80052be <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d103      	bne.n	8005272 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800526a:	f06f 0303 	mvn.w	r3, #3
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	e025      	b.n	80052be <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d011      	beq.n	800529c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	6938      	ldr	r0, [r7, #16]
 800527c:	f000 fb0b 	bl	8005896 <xQueueTakeMutexRecursive>
 8005280:	4603      	mov	r3, r0
 8005282:	2b01      	cmp	r3, #1
 8005284:	d01b      	beq.n	80052be <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800528c:	f06f 0301 	mvn.w	r3, #1
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	e014      	b.n	80052be <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005294:	f06f 0302 	mvn.w	r3, #2
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	e010      	b.n	80052be <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800529c:	6839      	ldr	r1, [r7, #0]
 800529e:	6938      	ldr	r0, [r7, #16]
 80052a0:	f000 fdb2 	bl	8005e08 <xQueueSemaphoreTake>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d009      	beq.n	80052be <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80052b0:	f06f 0301 	mvn.w	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e002      	b.n	80052be <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80052b8:	f06f 0302 	mvn.w	r3, #2
 80052bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80052be:	697b      	ldr	r3, [r7, #20]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052e4:	f3ef 8305 	mrs	r3, IPSR
 80052e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80052ea:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <osMutexRelease+0x30>
    stat = osErrorISR;
 80052f0:	f06f 0305 	mvn.w	r3, #5
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	e01f      	b.n	8005338 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d103      	bne.n	8005306 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80052fe:	f06f 0303 	mvn.w	r3, #3
 8005302:	617b      	str	r3, [r7, #20]
 8005304:	e018      	b.n	8005338 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800530c:	6938      	ldr	r0, [r7, #16]
 800530e:	f000 fa8d 	bl	800582c <xQueueGiveMutexRecursive>
 8005312:	4603      	mov	r3, r0
 8005314:	2b01      	cmp	r3, #1
 8005316:	d00f      	beq.n	8005338 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005318:	f06f 0302 	mvn.w	r3, #2
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	e00b      	b.n	8005338 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005320:	2300      	movs	r3, #0
 8005322:	2200      	movs	r2, #0
 8005324:	2100      	movs	r1, #0
 8005326:	6938      	ldr	r0, [r7, #16]
 8005328:	f000 faec 	bl	8005904 <xQueueGenericSend>
 800532c:	4603      	mov	r3, r0
 800532e:	2b01      	cmp	r3, #1
 8005330:	d002      	beq.n	8005338 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005332:	f06f 0302 	mvn.w	r3, #2
 8005336:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005338:	697b      	ldr	r3, [r7, #20]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3718      	adds	r7, #24
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a06      	ldr	r2, [pc, #24]	@ (800536c <vApplicationGetIdleTaskMemory+0x28>)
 8005354:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4a05      	ldr	r2, [pc, #20]	@ (8005370 <vApplicationGetIdleTaskMemory+0x2c>)
 800535a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2280      	movs	r2, #128	@ 0x80
 8005360:	601a      	str	r2, [r3, #0]
}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr
 800536c:	20000214 	.word	0x20000214
 8005370:	200002bc 	.word	0x200002bc

08005374 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a07      	ldr	r2, [pc, #28]	@ (80053a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005384:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4a06      	ldr	r2, [pc, #24]	@ (80053a4 <vApplicationGetTimerTaskMemory+0x30>)
 800538a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005392:	601a      	str	r2, [r3, #0]
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	200004bc 	.word	0x200004bc
 80053a4:	20000564 	.word	0x20000564

080053a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f103 0208 	add.w	r2, r3, #8
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f04f 32ff 	mov.w	r2, #4294967295
 80053c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f103 0208 	add.w	r2, r3, #8
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f103 0208 	add.w	r2, r3, #8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr

080053e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr

080053fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr

08005444 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d103      	bne.n	8005464 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e00c      	b.n	800547e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3308      	adds	r3, #8
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	e002      	b.n	8005472 <vListInsert+0x2e>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	429a      	cmp	r2, r3
 800547c:	d2f6      	bcs.n	800546c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	601a      	str	r2, [r3, #0]
}
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6892      	ldr	r2, [r2, #8]
 80054ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6852      	ldr	r2, [r2, #4]
 80054d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d103      	bne.n	80054e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	1e5a      	subs	r2, r3, #1
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr
	...

08005508 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10b      	bne.n	8005534 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800552e:	bf00      	nop
 8005530:	bf00      	nop
 8005532:	e7fd      	b.n	8005530 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005534:	f002 fb8a 	bl	8007c4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005540:	68f9      	ldr	r1, [r7, #12]
 8005542:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005544:	fb01 f303 	mul.w	r3, r1, r3
 8005548:	441a      	add	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005564:	3b01      	subs	r3, #1
 8005566:	68f9      	ldr	r1, [r7, #12]
 8005568:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800556a:	fb01 f303 	mul.w	r3, r1, r3
 800556e:	441a      	add	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	22ff      	movs	r2, #255	@ 0xff
 8005578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	22ff      	movs	r2, #255	@ 0xff
 8005580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d114      	bne.n	80055b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01a      	beq.n	80055c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3310      	adds	r3, #16
 8005596:	4618      	mov	r0, r3
 8005598:	f001 fb58 	bl	8006c4c <xTaskRemoveFromEventList>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d012      	beq.n	80055c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80055a2:	4b0d      	ldr	r3, [pc, #52]	@ (80055d8 <xQueueGenericReset+0xd0>)
 80055a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a8:	601a      	str	r2, [r3, #0]
 80055aa:	f3bf 8f4f 	dsb	sy
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	e009      	b.n	80055c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3310      	adds	r3, #16
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff fef5 	bl	80053a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3324      	adds	r3, #36	@ 0x24
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fef0 	bl	80053a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80055c8:	f002 fb70 	bl	8007cac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80055cc:	2301      	movs	r3, #1
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	e000ed04 	.word	0xe000ed04

080055dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08e      	sub	sp, #56	@ 0x38
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10b      	bne.n	8005608 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80055f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005602:	bf00      	nop
 8005604:	bf00      	nop
 8005606:	e7fd      	b.n	8005604 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10b      	bne.n	8005626 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	e7fd      	b.n	8005622 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <xQueueGenericCreateStatic+0x56>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <xQueueGenericCreateStatic+0x5a>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <xQueueGenericCreateStatic+0x5c>
 8005636:	2300      	movs	r3, #0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10b      	bne.n	8005654 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	623b      	str	r3, [r7, #32]
}
 800564e:	bf00      	nop
 8005650:	bf00      	nop
 8005652:	e7fd      	b.n	8005650 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <xQueueGenericCreateStatic+0x84>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <xQueueGenericCreateStatic+0x88>
 8005660:	2301      	movs	r3, #1
 8005662:	e000      	b.n	8005666 <xQueueGenericCreateStatic+0x8a>
 8005664:	2300      	movs	r3, #0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800566a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	61fb      	str	r3, [r7, #28]
}
 800567c:	bf00      	nop
 800567e:	bf00      	nop
 8005680:	e7fd      	b.n	800567e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005682:	2350      	movs	r3, #80	@ 0x50
 8005684:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b50      	cmp	r3, #80	@ 0x50
 800568a:	d00b      	beq.n	80056a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	61bb      	str	r3, [r7, #24]
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	e7fd      	b.n	80056a0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80056a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80056aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00d      	beq.n	80056cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80056bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f840 	bl	800574c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80056cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3730      	adds	r7, #48	@ 0x30
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b08a      	sub	sp, #40	@ 0x28
 80056da:	af02      	add	r7, sp, #8
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	4613      	mov	r3, r2
 80056e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10b      	bne.n	8005702 <xQueueGenericCreate+0x2c>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	613b      	str	r3, [r7, #16]
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	e7fd      	b.n	80056fe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	fb02 f303 	mul.w	r3, r2, r3
 800570a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	3350      	adds	r3, #80	@ 0x50
 8005710:	4618      	mov	r0, r3
 8005712:	f002 fb9d 	bl	8007e50 <pvPortMalloc>
 8005716:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d011      	beq.n	8005742 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	3350      	adds	r3, #80	@ 0x50
 8005726:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005730:	79fa      	ldrb	r2, [r7, #7]
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	4613      	mov	r3, r2
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	68b9      	ldr	r1, [r7, #8]
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f805 	bl	800574c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005742:	69bb      	ldr	r3, [r7, #24]
	}
 8005744:	4618      	mov	r0, r3
 8005746:	3720      	adds	r7, #32
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d103      	bne.n	8005768 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	e002      	b.n	800576e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800577a:	2101      	movs	r1, #1
 800577c:	69b8      	ldr	r0, [r7, #24]
 800577e:	f7ff fec3 	bl	8005508 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	78fa      	ldrb	r2, [r7, #3]
 8005786:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800578a:	bf00      	nop
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00e      	beq.n	80057be <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80057b2:	2300      	movs	r3, #0
 80057b4:	2200      	movs	r2, #0
 80057b6:	2100      	movs	r1, #0
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f8a3 	bl	8005904 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b086      	sub	sp, #24
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	4603      	mov	r3, r0
 80057ce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80057d0:	2301      	movs	r3, #1
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	2300      	movs	r3, #0
 80057d6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	461a      	mov	r2, r3
 80057dc:	6939      	ldr	r1, [r7, #16]
 80057de:	6978      	ldr	r0, [r7, #20]
 80057e0:	f7ff ff79 	bl	80056d6 <xQueueGenericCreate>
 80057e4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f7ff ffd3 	bl	8005792 <prvInitialiseMutex>

		return xNewQueue;
 80057ec:	68fb      	ldr	r3, [r7, #12]
	}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3718      	adds	r7, #24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b088      	sub	sp, #32
 80057fa:	af02      	add	r7, sp, #8
 80057fc:	4603      	mov	r3, r0
 80057fe:	6039      	str	r1, [r7, #0]
 8005800:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005802:	2301      	movs	r3, #1
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2200      	movs	r2, #0
 8005812:	6939      	ldr	r1, [r7, #16]
 8005814:	6978      	ldr	r0, [r7, #20]
 8005816:	f7ff fee1 	bl	80055dc <xQueueGenericCreateStatic>
 800581a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f7ff ffb8 	bl	8005792 <prvInitialiseMutex>

		return xNewQueue;
 8005822:	68fb      	ldr	r3, [r7, #12]
	}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800582c:	b590      	push	{r4, r7, lr}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	60fb      	str	r3, [r7, #12]
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	e7fd      	b.n	8005852 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	689c      	ldr	r4, [r3, #8]
 800585a:	f001 fbbd 	bl	8006fd8 <xTaskGetCurrentTaskHandle>
 800585e:	4603      	mov	r3, r0
 8005860:	429c      	cmp	r4, r3
 8005862:	d111      	bne.n	8005888 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	1e5a      	subs	r2, r3, #1
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d105      	bne.n	8005882 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005876:	2300      	movs	r3, #0
 8005878:	2200      	movs	r2, #0
 800587a:	2100      	movs	r1, #0
 800587c:	6938      	ldr	r0, [r7, #16]
 800587e:	f000 f841 	bl	8005904 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005882:	2301      	movs	r3, #1
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	e001      	b.n	800588c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800588c:	697b      	ldr	r3, [r7, #20]
	}
 800588e:	4618      	mov	r0, r3
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd90      	pop	{r4, r7, pc}

08005896 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005896:	b590      	push	{r4, r7, lr}
 8005898:	b087      	sub	sp, #28
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10b      	bne.n	80058c2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	60fb      	str	r3, [r7, #12]
}
 80058bc:	bf00      	nop
 80058be:	bf00      	nop
 80058c0:	e7fd      	b.n	80058be <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	689c      	ldr	r4, [r3, #8]
 80058c6:	f001 fb87 	bl	8006fd8 <xTaskGetCurrentTaskHandle>
 80058ca:	4603      	mov	r3, r0
 80058cc:	429c      	cmp	r4, r3
 80058ce:	d107      	bne.n	80058e0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80058da:	2301      	movs	r3, #1
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	e00c      	b.n	80058fa <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6938      	ldr	r0, [r7, #16]
 80058e4:	f000 fa90 	bl	8005e08 <xQueueSemaphoreTake>
 80058e8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80058fa:	697b      	ldr	r3, [r7, #20]
	}
 80058fc:	4618      	mov	r0, r3
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	bd90      	pop	{r4, r7, pc}

08005904 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08e      	sub	sp, #56	@ 0x38
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005912:	2300      	movs	r3, #0
 8005914:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800591a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10b      	bne.n	8005938 <xQueueGenericSend+0x34>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005932:	bf00      	nop
 8005934:	bf00      	nop
 8005936:	e7fd      	b.n	8005934 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <xQueueGenericSend+0x42>
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <xQueueGenericSend+0x46>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <xQueueGenericSend+0x48>
 800594a:	2300      	movs	r3, #0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <xQueueGenericSend+0x64>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005962:	bf00      	nop
 8005964:	bf00      	nop
 8005966:	e7fd      	b.n	8005964 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d103      	bne.n	8005976 <xQueueGenericSend+0x72>
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <xQueueGenericSend+0x76>
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <xQueueGenericSend+0x78>
 800597a:	2300      	movs	r3, #0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <xQueueGenericSend+0x94>
	__asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	623b      	str	r3, [r7, #32]
}
 8005992:	bf00      	nop
 8005994:	bf00      	nop
 8005996:	e7fd      	b.n	8005994 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005998:	f001 fb2c 	bl	8006ff4 <xTaskGetSchedulerState>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <xQueueGenericSend+0xa4>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <xQueueGenericSend+0xa8>
 80059a8:	2301      	movs	r3, #1
 80059aa:	e000      	b.n	80059ae <xQueueGenericSend+0xaa>
 80059ac:	2300      	movs	r3, #0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10b      	bne.n	80059ca <xQueueGenericSend+0xc6>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	61fb      	str	r3, [r7, #28]
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	e7fd      	b.n	80059c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059ca:	f002 f93f 	bl	8007c4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d302      	bcc.n	80059e0 <xQueueGenericSend+0xdc>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d129      	bne.n	8005a34 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059e6:	f000 fb36 	bl	8006056 <prvCopyDataToQueue>
 80059ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d010      	beq.n	8005a16 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f6:	3324      	adds	r3, #36	@ 0x24
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 f927 	bl	8006c4c <xTaskRemoveFromEventList>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d013      	beq.n	8005a2c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a04:	4b3f      	ldr	r3, [pc, #252]	@ (8005b04 <xQueueGenericSend+0x200>)
 8005a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	e00a      	b.n	8005a2c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a1c:	4b39      	ldr	r3, [pc, #228]	@ (8005b04 <xQueueGenericSend+0x200>)
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a2c:	f002 f93e 	bl	8007cac <vPortExitCritical>
				return pdPASS;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e063      	b.n	8005afc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d103      	bne.n	8005a42 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a3a:	f002 f937 	bl	8007cac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e05c      	b.n	8005afc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a48:	f107 0314 	add.w	r3, r7, #20
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f001 f961 	bl	8006d14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a52:	2301      	movs	r3, #1
 8005a54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a56:	f002 f929 	bl	8007cac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a5a:	f000 fecd 	bl	80067f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a5e:	f002 f8f5 	bl	8007c4c <vPortEnterCritical>
 8005a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a68:	b25b      	sxtb	r3, r3
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d103      	bne.n	8005a78 <xQueueGenericSend+0x174>
 8005a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a7e:	b25b      	sxtb	r3, r3
 8005a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a84:	d103      	bne.n	8005a8e <xQueueGenericSend+0x18a>
 8005a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a8e:	f002 f90d 	bl	8007cac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a92:	1d3a      	adds	r2, r7, #4
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	4611      	mov	r1, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f001 f950 	bl	8006d40 <xTaskCheckForTimeOut>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d124      	bne.n	8005af0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005aa6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aa8:	f000 fbcd 	bl	8006246 <prvIsQueueFull>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d018      	beq.n	8005ae4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	3310      	adds	r3, #16
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 f874 	bl	8006ba8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ac2:	f000 fb58 	bl	8006176 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ac6:	f000 fea5 	bl	8006814 <xTaskResumeAll>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f47f af7c 	bne.w	80059ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8005b04 <xQueueGenericSend+0x200>)
 8005ad4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	e772      	b.n	80059ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ae4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ae6:	f000 fb46 	bl	8006176 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aea:	f000 fe93 	bl	8006814 <xTaskResumeAll>
 8005aee:	e76c      	b.n	80059ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005af0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005af2:	f000 fb40 	bl	8006176 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005af6:	f000 fe8d 	bl	8006814 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005afa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3738      	adds	r7, #56	@ 0x38
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b090      	sub	sp, #64	@ 0x40
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10b      	bne.n	8005b38 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b32:	bf00      	nop
 8005b34:	bf00      	nop
 8005b36:	e7fd      	b.n	8005b34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <xQueueGenericSendFromISR+0x3e>
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <xQueueGenericSendFromISR+0x42>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <xQueueGenericSendFromISR+0x44>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b62:	bf00      	nop
 8005b64:	bf00      	nop
 8005b66:	e7fd      	b.n	8005b64 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d103      	bne.n	8005b76 <xQueueGenericSendFromISR+0x6e>
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <xQueueGenericSendFromISR+0x72>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <xQueueGenericSendFromISR+0x74>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10b      	bne.n	8005b98 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	623b      	str	r3, [r7, #32]
}
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	e7fd      	b.n	8005b94 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b98:	f002 f91a 	bl	8007dd0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b9c:	f3ef 8211 	mrs	r2, BASEPRI
 8005ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	61fa      	str	r2, [r7, #28]
 8005bb2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bb6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d302      	bcc.n	8005bca <xQueueGenericSendFromISR+0xc2>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d12f      	bne.n	8005c2a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005be0:	f000 fa39 	bl	8006056 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005be4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bec:	d112      	bne.n	8005c14 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d016      	beq.n	8005c24 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	3324      	adds	r3, #36	@ 0x24
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 f826 	bl	8006c4c <xTaskRemoveFromEventList>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00e      	beq.n	8005c24 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	e007      	b.n	8005c24 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c18:	3301      	adds	r3, #1
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	b25a      	sxtb	r2, r3
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c24:	2301      	movs	r3, #1
 8005c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005c28:	e001      	b.n	8005c2e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c30:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3740      	adds	r7, #64	@ 0x40
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08c      	sub	sp, #48	@ 0x30
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <xQueueReceive+0x32>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	623b      	str	r3, [r7, #32]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d103      	bne.n	8005c84 <xQueueReceive+0x40>
 8005c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <xQueueReceive+0x44>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <xQueueReceive+0x46>
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10b      	bne.n	8005ca6 <xQueueReceive+0x62>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	61fb      	str	r3, [r7, #28]
}
 8005ca0:	bf00      	nop
 8005ca2:	bf00      	nop
 8005ca4:	e7fd      	b.n	8005ca2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ca6:	f001 f9a5 	bl	8006ff4 <xTaskGetSchedulerState>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d102      	bne.n	8005cb6 <xQueueReceive+0x72>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <xQueueReceive+0x76>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <xQueueReceive+0x78>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10b      	bne.n	8005cd8 <xQueueReceive+0x94>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	61bb      	str	r3, [r7, #24]
}
 8005cd2:	bf00      	nop
 8005cd4:	bf00      	nop
 8005cd6:	e7fd      	b.n	8005cd4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cd8:	f001 ffb8 	bl	8007c4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d01f      	beq.n	8005d28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ce8:	68b9      	ldr	r1, [r7, #8]
 8005cea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cec:	f000 fa1d 	bl	800612a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	1e5a      	subs	r2, r3, #1
 8005cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00f      	beq.n	8005d20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d02:	3310      	adds	r3, #16
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 ffa1 	bl	8006c4c <xTaskRemoveFromEventList>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d007      	beq.n	8005d20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d10:	4b3c      	ldr	r3, [pc, #240]	@ (8005e04 <xQueueReceive+0x1c0>)
 8005d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d20:	f001 ffc4 	bl	8007cac <vPortExitCritical>
				return pdPASS;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e069      	b.n	8005dfc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d2e:	f001 ffbd 	bl	8007cac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e062      	b.n	8005dfc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d3c:	f107 0310 	add.w	r3, r7, #16
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 ffe7 	bl	8006d14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d46:	2301      	movs	r3, #1
 8005d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d4a:	f001 ffaf 	bl	8007cac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d4e:	f000 fd53 	bl	80067f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d52:	f001 ff7b 	bl	8007c4c <vPortEnterCritical>
 8005d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d5c:	b25b      	sxtb	r3, r3
 8005d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d62:	d103      	bne.n	8005d6c <xQueueReceive+0x128>
 8005d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d72:	b25b      	sxtb	r3, r3
 8005d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d78:	d103      	bne.n	8005d82 <xQueueReceive+0x13e>
 8005d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d82:	f001 ff93 	bl	8007cac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d86:	1d3a      	adds	r2, r7, #4
 8005d88:	f107 0310 	add.w	r3, r7, #16
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 ffd6 	bl	8006d40 <xTaskCheckForTimeOut>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d123      	bne.n	8005de2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d9c:	f000 fa3d 	bl	800621a <prvIsQueueEmpty>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d017      	beq.n	8005dd6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da8:	3324      	adds	r3, #36	@ 0x24
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4611      	mov	r1, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 fefa 	bl	8006ba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005db4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005db6:	f000 f9de 	bl	8006176 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dba:	f000 fd2b 	bl	8006814 <xTaskResumeAll>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d189      	bne.n	8005cd8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e04 <xQueueReceive+0x1c0>)
 8005dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	e780      	b.n	8005cd8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005dd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dd8:	f000 f9cd 	bl	8006176 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ddc:	f000 fd1a 	bl	8006814 <xTaskResumeAll>
 8005de0:	e77a      	b.n	8005cd8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005de2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005de4:	f000 f9c7 	bl	8006176 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005de8:	f000 fd14 	bl	8006814 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dee:	f000 fa14 	bl	800621a <prvIsQueueEmpty>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f43f af6f 	beq.w	8005cd8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dfa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3730      	adds	r7, #48	@ 0x30
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08e      	sub	sp, #56	@ 0x38
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10b      	bne.n	8005e3c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	623b      	str	r3, [r7, #32]
}
 8005e36:	bf00      	nop
 8005e38:	bf00      	nop
 8005e3a:	e7fd      	b.n	8005e38 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	61fb      	str	r3, [r7, #28]
}
 8005e56:	bf00      	nop
 8005e58:	bf00      	nop
 8005e5a:	e7fd      	b.n	8005e58 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e5c:	f001 f8ca 	bl	8006ff4 <xTaskGetSchedulerState>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d102      	bne.n	8005e6c <xQueueSemaphoreTake+0x64>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <xQueueSemaphoreTake+0x68>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e000      	b.n	8005e72 <xQueueSemaphoreTake+0x6a>
 8005e70:	2300      	movs	r3, #0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10b      	bne.n	8005e8e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	61bb      	str	r3, [r7, #24]
}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	e7fd      	b.n	8005e8a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e8e:	f001 fedd 	bl	8007c4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e96:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d024      	beq.n	8005ee8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea0:	1e5a      	subs	r2, r3, #1
 8005ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d104      	bne.n	8005eb8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005eae:	f001 fa1b 	bl	80072e8 <pvTaskIncrementMutexHeldCount>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00f      	beq.n	8005ee0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ec2:	3310      	adds	r3, #16
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fec1 	bl	8006c4c <xTaskRemoveFromEventList>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d007      	beq.n	8005ee0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ed0:	4b54      	ldr	r3, [pc, #336]	@ (8006024 <xQueueSemaphoreTake+0x21c>)
 8005ed2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ee0:	f001 fee4 	bl	8007cac <vPortExitCritical>
				return pdPASS;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e098      	b.n	800601a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d112      	bne.n	8005f14 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00b      	beq.n	8005f0c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	617b      	str	r3, [r7, #20]
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005f0c:	f001 fece 	bl	8007cac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f10:	2300      	movs	r3, #0
 8005f12:	e082      	b.n	800601a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f1a:	f107 030c 	add.w	r3, r7, #12
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fef8 	bl	8006d14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f28:	f001 fec0 	bl	8007cac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f2c:	f000 fc64 	bl	80067f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f30:	f001 fe8c 	bl	8007c4c <vPortEnterCritical>
 8005f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f3a:	b25b      	sxtb	r3, r3
 8005f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f40:	d103      	bne.n	8005f4a <xQueueSemaphoreTake+0x142>
 8005f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d103      	bne.n	8005f60 <xQueueSemaphoreTake+0x158>
 8005f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f60:	f001 fea4 	bl	8007cac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f64:	463a      	mov	r2, r7
 8005f66:	f107 030c 	add.w	r3, r7, #12
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f000 fee7 	bl	8006d40 <xTaskCheckForTimeOut>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d132      	bne.n	8005fde <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f7a:	f000 f94e 	bl	800621a <prvIsQueueEmpty>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d026      	beq.n	8005fd2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005f8c:	f001 fe5e 	bl	8007c4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 f84b 	bl	8007030 <xTaskPriorityInherit>
 8005f9a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005f9c:	f001 fe86 	bl	8007cac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa2:	3324      	adds	r3, #36	@ 0x24
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	4611      	mov	r1, r2
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fdfd 	bl	8006ba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fb0:	f000 f8e1 	bl	8006176 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fb4:	f000 fc2e 	bl	8006814 <xTaskResumeAll>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f47f af67 	bne.w	8005e8e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005fc0:	4b18      	ldr	r3, [pc, #96]	@ (8006024 <xQueueSemaphoreTake+0x21c>)
 8005fc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	e75d      	b.n	8005e8e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005fd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fd4:	f000 f8cf 	bl	8006176 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fd8:	f000 fc1c 	bl	8006814 <xTaskResumeAll>
 8005fdc:	e757      	b.n	8005e8e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005fde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fe0:	f000 f8c9 	bl	8006176 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fe4:	f000 fc16 	bl	8006814 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fe8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fea:	f000 f916 	bl	800621a <prvIsQueueEmpty>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f43f af4c 	beq.w	8005e8e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00d      	beq.n	8006018 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005ffc:	f001 fe26 	bl	8007c4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006000:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006002:	f000 f811 	bl	8006028 <prvGetDisinheritPriorityAfterTimeout>
 8006006:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800600e:	4618      	mov	r0, r3
 8006010:	f001 f8e6 	bl	80071e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006014:	f001 fe4a 	bl	8007cac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006018:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800601a:	4618      	mov	r0, r3
 800601c:	3738      	adds	r7, #56	@ 0x38
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	e000ed04 	.word	0xe000ed04

08006028 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	d006      	beq.n	8006046 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	e001      	b.n	800604a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800604a:	68fb      	ldr	r3, [r7, #12]
	}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr

08006056 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006062:	2300      	movs	r3, #0
 8006064:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10d      	bne.n	8006090 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d14d      	bne.n	8006118 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	4618      	mov	r0, r3
 8006082:	f001 f83d 	bl	8007100 <xTaskPriorityDisinherit>
 8006086:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	609a      	str	r2, [r3, #8]
 800608e:	e043      	b.n	8006118 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d119      	bne.n	80060ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6858      	ldr	r0, [r3, #4]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609e:	461a      	mov	r2, r3
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	f002 fc60 	bl	8008966 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ae:	441a      	add	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d32b      	bcc.n	8006118 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	605a      	str	r2, [r3, #4]
 80060c8:	e026      	b.n	8006118 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	68d8      	ldr	r0, [r3, #12]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d2:	461a      	mov	r2, r3
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	f002 fc46 	bl	8008966 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e2:	425b      	negs	r3, r3
 80060e4:	441a      	add	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d207      	bcs.n	8006106 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fe:	425b      	negs	r3, r3
 8006100:	441a      	add	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d105      	bne.n	8006118 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	3b01      	subs	r3, #1
 8006116:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006120:	697b      	ldr	r3, [r7, #20]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3718      	adds	r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b082      	sub	sp, #8
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006138:	2b00      	cmp	r3, #0
 800613a:	d018      	beq.n	800616e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006144:	441a      	add	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	429a      	cmp	r2, r3
 8006154:	d303      	bcc.n	800615e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68d9      	ldr	r1, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006166:	461a      	mov	r2, r3
 8006168:	6838      	ldr	r0, [r7, #0]
 800616a:	f002 fbfc 	bl	8008966 <memcpy>
	}
}
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800617e:	f001 fd65 	bl	8007c4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006188:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800618a:	e011      	b.n	80061b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	2b00      	cmp	r3, #0
 8006192:	d012      	beq.n	80061ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3324      	adds	r3, #36	@ 0x24
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fd57 	bl	8006c4c <xTaskRemoveFromEventList>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061a4:	f000 fe30 	bl	8006e08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dce9      	bgt.n	800618c <prvUnlockQueue+0x16>
 80061b8:	e000      	b.n	80061bc <prvUnlockQueue+0x46>
					break;
 80061ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	22ff      	movs	r2, #255	@ 0xff
 80061c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80061c4:	f001 fd72 	bl	8007cac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061c8:	f001 fd40 	bl	8007c4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061d4:	e011      	b.n	80061fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d012      	beq.n	8006204 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3310      	adds	r3, #16
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fd32 	bl	8006c4c <xTaskRemoveFromEventList>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061ee:	f000 fe0b 	bl	8006e08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061f2:	7bbb      	ldrb	r3, [r7, #14]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	dce9      	bgt.n	80061d6 <prvUnlockQueue+0x60>
 8006202:	e000      	b.n	8006206 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006204:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	22ff      	movs	r2, #255	@ 0xff
 800620a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800620e:	f001 fd4d 	bl	8007cac <vPortExitCritical>
}
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006222:	f001 fd13 	bl	8007c4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622a:	2b00      	cmp	r3, #0
 800622c:	d102      	bne.n	8006234 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800622e:	2301      	movs	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	e001      	b.n	8006238 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006234:	2300      	movs	r3, #0
 8006236:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006238:	f001 fd38 	bl	8007cac <vPortExitCritical>

	return xReturn;
 800623c:	68fb      	ldr	r3, [r7, #12]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800624e:	f001 fcfd 	bl	8007c4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625a:	429a      	cmp	r2, r3
 800625c:	d102      	bne.n	8006264 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800625e:	2301      	movs	r3, #1
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e001      	b.n	8006268 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006268:	f001 fd20 	bl	8007cac <vPortExitCritical>

	return xReturn;
 800626c:	68fb      	ldr	r3, [r7, #12]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e014      	b.n	80062b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006288:	4a0e      	ldr	r2, [pc, #56]	@ (80062c4 <vQueueAddToRegistry+0x4c>)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10b      	bne.n	80062ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006294:	490b      	ldr	r1, [pc, #44]	@ (80062c4 <vQueueAddToRegistry+0x4c>)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800629e:	4a09      	ldr	r2, [pc, #36]	@ (80062c4 <vQueueAddToRegistry+0x4c>)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	4413      	add	r3, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062aa:	e006      	b.n	80062ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	3301      	adds	r3, #1
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b07      	cmp	r3, #7
 80062b6:	d9e7      	bls.n	8006288 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr
 80062c4:	20000964 	.word	0x20000964

080062c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062d8:	f001 fcb8 	bl	8007c4c <vPortEnterCritical>
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062e2:	b25b      	sxtb	r3, r3
 80062e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e8:	d103      	bne.n	80062f2 <vQueueWaitForMessageRestricted+0x2a>
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062f8:	b25b      	sxtb	r3, r3
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fe:	d103      	bne.n	8006308 <vQueueWaitForMessageRestricted+0x40>
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006308:	f001 fcd0 	bl	8007cac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006310:	2b00      	cmp	r3, #0
 8006312:	d106      	bne.n	8006322 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	3324      	adds	r3, #36	@ 0x24
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	68b9      	ldr	r1, [r7, #8]
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fc69 	bl	8006bf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006322:	6978      	ldr	r0, [r7, #20]
 8006324:	f7ff ff27 	bl	8006176 <prvUnlockQueue>
	}
 8006328:	bf00      	nop
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08e      	sub	sp, #56	@ 0x38
 8006334:	af04      	add	r7, sp, #16
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800633e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006348:	f383 8811 	msr	BASEPRI, r3
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	623b      	str	r3, [r7, #32]
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800635c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	61fb      	str	r3, [r7, #28]
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	e7fd      	b.n	8006376 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800637a:	23a8      	movs	r3, #168	@ 0xa8
 800637c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	2ba8      	cmp	r3, #168	@ 0xa8
 8006382:	d00b      	beq.n	800639c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	61bb      	str	r3, [r7, #24]
}
 8006396:	bf00      	nop
 8006398:	bf00      	nop
 800639a:	e7fd      	b.n	8006398 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800639c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800639e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d01e      	beq.n	80063e2 <xTaskCreateStatic+0xb2>
 80063a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d01b      	beq.n	80063e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80063b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063bc:	2300      	movs	r3, #0
 80063be:	9303      	str	r3, [sp, #12]
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	9302      	str	r3, [sp, #8]
 80063c4:	f107 0314 	add.w	r3, r7, #20
 80063c8:	9301      	str	r3, [sp, #4]
 80063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 f851 	bl	800647c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80063dc:	f000 f8f6 	bl	80065cc <prvAddNewTaskToReadyList>
 80063e0:	e001      	b.n	80063e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063e6:	697b      	ldr	r3, [r7, #20]
	}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3728      	adds	r7, #40	@ 0x28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08c      	sub	sp, #48	@ 0x30
 80063f4:	af04      	add	r7, sp, #16
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	4613      	mov	r3, r2
 80063fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006400:	88fb      	ldrh	r3, [r7, #6]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4618      	mov	r0, r3
 8006406:	f001 fd23 	bl	8007e50 <pvPortMalloc>
 800640a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00e      	beq.n	8006430 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006412:	20a8      	movs	r0, #168	@ 0xa8
 8006414:	f001 fd1c 	bl	8007e50 <pvPortMalloc>
 8006418:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	631a      	str	r2, [r3, #48]	@ 0x30
 8006426:	e005      	b.n	8006434 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006428:	6978      	ldr	r0, [r7, #20]
 800642a:	f001 fddf 	bl	8007fec <vPortFree>
 800642e:	e001      	b.n	8006434 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006430:	2300      	movs	r3, #0
 8006432:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d017      	beq.n	800646a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006442:	88fa      	ldrh	r2, [r7, #6]
 8006444:	2300      	movs	r3, #0
 8006446:	9303      	str	r3, [sp, #12]
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	9302      	str	r3, [sp, #8]
 800644c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 f80f 	bl	800647c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800645e:	69f8      	ldr	r0, [r7, #28]
 8006460:	f000 f8b4 	bl	80065cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006464:	2301      	movs	r3, #1
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	e002      	b.n	8006470 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800646a:	f04f 33ff 	mov.w	r3, #4294967295
 800646e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006470:	69bb      	ldr	r3, [r7, #24]
	}
 8006472:	4618      	mov	r0, r3
 8006474:	3720      	adds	r7, #32
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
	...

0800647c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	461a      	mov	r2, r3
 8006494:	21a5      	movs	r1, #165	@ 0xa5
 8006496:	f002 f97d 	bl	8008794 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800649a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80064a4:	3b01      	subs	r3, #1
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	f023 0307 	bic.w	r3, r3, #7
 80064b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00b      	beq.n	80064d6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	617b      	str	r3, [r7, #20]
}
 80064d0:	bf00      	nop
 80064d2:	bf00      	nop
 80064d4:	e7fd      	b.n	80064d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d01f      	beq.n	800651c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064dc:	2300      	movs	r3, #0
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	e012      	b.n	8006508 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	7819      	ldrb	r1, [r3, #0]
 80064ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	4413      	add	r3, r2
 80064f0:	3334      	adds	r3, #52	@ 0x34
 80064f2:	460a      	mov	r2, r1
 80064f4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064f6:	68ba      	ldr	r2, [r7, #8]
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	4413      	add	r3, r2
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d006      	beq.n	8006510 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	3301      	adds	r3, #1
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	2b0f      	cmp	r3, #15
 800650c:	d9e9      	bls.n	80064e2 <prvInitialiseNewTask+0x66>
 800650e:	e000      	b.n	8006512 <prvInitialiseNewTask+0x96>
			{
				break;
 8006510:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800651a:	e003      	b.n	8006524 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800651c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006526:	2b37      	cmp	r3, #55	@ 0x37
 8006528:	d901      	bls.n	800652e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800652a:	2337      	movs	r3, #55	@ 0x37
 800652c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800652e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006530:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006532:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006538:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	2200      	movs	r2, #0
 800653e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006542:	3304      	adds	r3, #4
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe ff4e 	bl	80053e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	3318      	adds	r3, #24
 800654e:	4618      	mov	r0, r3
 8006550:	f7fe ff49 	bl	80053e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006558:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800655a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006562:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006568:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	2200      	movs	r2, #0
 800656e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	2200      	movs	r2, #0
 8006576:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	3354      	adds	r3, #84	@ 0x54
 800657e:	224c      	movs	r2, #76	@ 0x4c
 8006580:	2100      	movs	r1, #0
 8006582:	4618      	mov	r0, r3
 8006584:	f002 f906 	bl	8008794 <memset>
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	4a0d      	ldr	r2, [pc, #52]	@ (80065c0 <prvInitialiseNewTask+0x144>)
 800658c:	659a      	str	r2, [r3, #88]	@ 0x58
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	4a0c      	ldr	r2, [pc, #48]	@ (80065c4 <prvInitialiseNewTask+0x148>)
 8006592:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006596:	4a0c      	ldr	r2, [pc, #48]	@ (80065c8 <prvInitialiseNewTask+0x14c>)
 8006598:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	68f9      	ldr	r1, [r7, #12]
 800659e:	69b8      	ldr	r0, [r7, #24]
 80065a0:	f001 fa62 	bl	8007a68 <pxPortInitialiseStack>
 80065a4:	4602      	mov	r2, r0
 80065a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065b6:	bf00      	nop
 80065b8:	3720      	adds	r7, #32
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20001c00 	.word	0x20001c00
 80065c4:	20001c68 	.word	0x20001c68
 80065c8:	20001cd0 	.word	0x20001cd0

080065cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065d4:	f001 fb3a 	bl	8007c4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006690 <prvAddNewTaskToReadyList+0xc4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	4a2c      	ldr	r2, [pc, #176]	@ (8006690 <prvAddNewTaskToReadyList+0xc4>)
 80065e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065e2:	4b2c      	ldr	r3, [pc, #176]	@ (8006694 <prvAddNewTaskToReadyList+0xc8>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006694 <prvAddNewTaskToReadyList+0xc8>)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065f0:	4b27      	ldr	r3, [pc, #156]	@ (8006690 <prvAddNewTaskToReadyList+0xc4>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d110      	bne.n	800661a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065f8:	f000 fc2a 	bl	8006e50 <prvInitialiseTaskLists>
 80065fc:	e00d      	b.n	800661a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065fe:	4b26      	ldr	r3, [pc, #152]	@ (8006698 <prvAddNewTaskToReadyList+0xcc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d109      	bne.n	800661a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006606:	4b23      	ldr	r3, [pc, #140]	@ (8006694 <prvAddNewTaskToReadyList+0xc8>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006610:	429a      	cmp	r2, r3
 8006612:	d802      	bhi.n	800661a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006614:	4a1f      	ldr	r2, [pc, #124]	@ (8006694 <prvAddNewTaskToReadyList+0xc8>)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800661a:	4b20      	ldr	r3, [pc, #128]	@ (800669c <prvAddNewTaskToReadyList+0xd0>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3301      	adds	r3, #1
 8006620:	4a1e      	ldr	r2, [pc, #120]	@ (800669c <prvAddNewTaskToReadyList+0xd0>)
 8006622:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006624:	4b1d      	ldr	r3, [pc, #116]	@ (800669c <prvAddNewTaskToReadyList+0xd0>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006630:	4b1b      	ldr	r3, [pc, #108]	@ (80066a0 <prvAddNewTaskToReadyList+0xd4>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d903      	bls.n	8006640 <prvAddNewTaskToReadyList+0x74>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663c:	4a18      	ldr	r2, [pc, #96]	@ (80066a0 <prvAddNewTaskToReadyList+0xd4>)
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006644:	4613      	mov	r3, r2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4a15      	ldr	r2, [pc, #84]	@ (80066a4 <prvAddNewTaskToReadyList+0xd8>)
 800664e:	441a      	add	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3304      	adds	r3, #4
 8006654:	4619      	mov	r1, r3
 8006656:	4610      	mov	r0, r2
 8006658:	f7fe fed1 	bl	80053fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800665c:	f001 fb26 	bl	8007cac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006660:	4b0d      	ldr	r3, [pc, #52]	@ (8006698 <prvAddNewTaskToReadyList+0xcc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00e      	beq.n	8006686 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006668:	4b0a      	ldr	r3, [pc, #40]	@ (8006694 <prvAddNewTaskToReadyList+0xc8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006672:	429a      	cmp	r2, r3
 8006674:	d207      	bcs.n	8006686 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006676:	4b0c      	ldr	r3, [pc, #48]	@ (80066a8 <prvAddNewTaskToReadyList+0xdc>)
 8006678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000e78 	.word	0x20000e78
 8006694:	200009a4 	.word	0x200009a4
 8006698:	20000e84 	.word	0x20000e84
 800669c:	20000e94 	.word	0x20000e94
 80066a0:	20000e80 	.word	0x20000e80
 80066a4:	200009a8 	.word	0x200009a8
 80066a8:	e000ed04 	.word	0xe000ed04

080066ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d018      	beq.n	80066f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80066be:	4b14      	ldr	r3, [pc, #80]	@ (8006710 <vTaskDelay+0x64>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00b      	beq.n	80066de <vTaskDelay+0x32>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	60bb      	str	r3, [r7, #8]
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop
 80066dc:	e7fd      	b.n	80066da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80066de:	f000 f88b 	bl	80067f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066e2:	2100      	movs	r1, #0
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fe13 	bl	8007310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066ea:	f000 f893 	bl	8006814 <xTaskResumeAll>
 80066ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d107      	bne.n	8006706 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80066f6:	4b07      	ldr	r3, [pc, #28]	@ (8006714 <vTaskDelay+0x68>)
 80066f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006706:	bf00      	nop
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000ea0 	.word	0x20000ea0
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08a      	sub	sp, #40	@ 0x28
 800671c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800671e:	2300      	movs	r3, #0
 8006720:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006726:	463a      	mov	r2, r7
 8006728:	1d39      	adds	r1, r7, #4
 800672a:	f107 0308 	add.w	r3, r7, #8
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe fe08 	bl	8005344 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006734:	6839      	ldr	r1, [r7, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	9202      	str	r2, [sp, #8]
 800673c:	9301      	str	r3, [sp, #4]
 800673e:	2300      	movs	r3, #0
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	2300      	movs	r3, #0
 8006744:	460a      	mov	r2, r1
 8006746:	4924      	ldr	r1, [pc, #144]	@ (80067d8 <vTaskStartScheduler+0xc0>)
 8006748:	4824      	ldr	r0, [pc, #144]	@ (80067dc <vTaskStartScheduler+0xc4>)
 800674a:	f7ff fdf1 	bl	8006330 <xTaskCreateStatic>
 800674e:	4603      	mov	r3, r0
 8006750:	4a23      	ldr	r2, [pc, #140]	@ (80067e0 <vTaskStartScheduler+0xc8>)
 8006752:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006754:	4b22      	ldr	r3, [pc, #136]	@ (80067e0 <vTaskStartScheduler+0xc8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800675c:	2301      	movs	r3, #1
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	e001      	b.n	8006766 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d102      	bne.n	8006772 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800676c:	f000 fe24 	bl	80073b8 <xTimerCreateTimerTask>
 8006770:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d11b      	bne.n	80067b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677c:	f383 8811 	msr	BASEPRI, r3
 8006780:	f3bf 8f6f 	isb	sy
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	613b      	str	r3, [r7, #16]
}
 800678a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800678c:	4b15      	ldr	r3, [pc, #84]	@ (80067e4 <vTaskStartScheduler+0xcc>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3354      	adds	r3, #84	@ 0x54
 8006792:	4a15      	ldr	r2, [pc, #84]	@ (80067e8 <vTaskStartScheduler+0xd0>)
 8006794:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006796:	4b15      	ldr	r3, [pc, #84]	@ (80067ec <vTaskStartScheduler+0xd4>)
 8006798:	f04f 32ff 	mov.w	r2, #4294967295
 800679c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800679e:	4b14      	ldr	r3, [pc, #80]	@ (80067f0 <vTaskStartScheduler+0xd8>)
 80067a0:	2201      	movs	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80067a4:	4b13      	ldr	r3, [pc, #76]	@ (80067f4 <vTaskStartScheduler+0xdc>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80067aa:	f001 f9dd 	bl	8007b68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80067ae:	e00f      	b.n	80067d0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d10b      	bne.n	80067d0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60fb      	str	r3, [r7, #12]
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	e7fd      	b.n	80067cc <vTaskStartScheduler+0xb4>
}
 80067d0:	bf00      	nop
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	08008cd0 	.word	0x08008cd0
 80067dc:	08006e21 	.word	0x08006e21
 80067e0:	20000e9c 	.word	0x20000e9c
 80067e4:	200009a4 	.word	0x200009a4
 80067e8:	2000001c 	.word	0x2000001c
 80067ec:	20000e98 	.word	0x20000e98
 80067f0:	20000e84 	.word	0x20000e84
 80067f4:	20000e7c 	.word	0x20000e7c

080067f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067f8:	b480      	push	{r7}
 80067fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80067fc:	4b04      	ldr	r3, [pc, #16]	@ (8006810 <vTaskSuspendAll+0x18>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	3301      	adds	r3, #1
 8006802:	4a03      	ldr	r2, [pc, #12]	@ (8006810 <vTaskSuspendAll+0x18>)
 8006804:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006806:	bf00      	nop
 8006808:	46bd      	mov	sp, r7
 800680a:	bc80      	pop	{r7}
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	20000ea0 	.word	0x20000ea0

08006814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800681e:	2300      	movs	r3, #0
 8006820:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006822:	4b42      	ldr	r3, [pc, #264]	@ (800692c <xTaskResumeAll+0x118>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10b      	bne.n	8006842 <xTaskResumeAll+0x2e>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	603b      	str	r3, [r7, #0]
}
 800683c:	bf00      	nop
 800683e:	bf00      	nop
 8006840:	e7fd      	b.n	800683e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006842:	f001 fa03 	bl	8007c4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006846:	4b39      	ldr	r3, [pc, #228]	@ (800692c <xTaskResumeAll+0x118>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3b01      	subs	r3, #1
 800684c:	4a37      	ldr	r2, [pc, #220]	@ (800692c <xTaskResumeAll+0x118>)
 800684e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006850:	4b36      	ldr	r3, [pc, #216]	@ (800692c <xTaskResumeAll+0x118>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d162      	bne.n	800691e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006858:	4b35      	ldr	r3, [pc, #212]	@ (8006930 <xTaskResumeAll+0x11c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d05e      	beq.n	800691e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006860:	e02f      	b.n	80068c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006862:	4b34      	ldr	r3, [pc, #208]	@ (8006934 <xTaskResumeAll+0x120>)
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3318      	adds	r3, #24
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe fe20 	bl	80054b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3304      	adds	r3, #4
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fe1b 	bl	80054b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006882:	4b2d      	ldr	r3, [pc, #180]	@ (8006938 <xTaskResumeAll+0x124>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d903      	bls.n	8006892 <xTaskResumeAll+0x7e>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688e:	4a2a      	ldr	r2, [pc, #168]	@ (8006938 <xTaskResumeAll+0x124>)
 8006890:	6013      	str	r3, [r2, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006896:	4613      	mov	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4a27      	ldr	r2, [pc, #156]	@ (800693c <xTaskResumeAll+0x128>)
 80068a0:	441a      	add	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4619      	mov	r1, r3
 80068a8:	4610      	mov	r0, r2
 80068aa:	f7fe fda8 	bl	80053fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b2:	4b23      	ldr	r3, [pc, #140]	@ (8006940 <xTaskResumeAll+0x12c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d302      	bcc.n	80068c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80068bc:	4b21      	ldr	r3, [pc, #132]	@ (8006944 <xTaskResumeAll+0x130>)
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006934 <xTaskResumeAll+0x120>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1cb      	bne.n	8006862 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80068d0:	f000 fb62 	bl	8006f98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80068d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006948 <xTaskResumeAll+0x134>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d010      	beq.n	8006902 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80068e0:	f000 f844 	bl	800696c <xTaskIncrementTick>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80068ea:	4b16      	ldr	r3, [pc, #88]	@ (8006944 <xTaskResumeAll+0x130>)
 80068ec:	2201      	movs	r2, #1
 80068ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1f1      	bne.n	80068e0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80068fc:	4b12      	ldr	r3, [pc, #72]	@ (8006948 <xTaskResumeAll+0x134>)
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006902:	4b10      	ldr	r3, [pc, #64]	@ (8006944 <xTaskResumeAll+0x130>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800690a:	2301      	movs	r3, #1
 800690c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800690e:	4b0f      	ldr	r3, [pc, #60]	@ (800694c <xTaskResumeAll+0x138>)
 8006910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800691e:	f001 f9c5 	bl	8007cac <vPortExitCritical>

	return xAlreadyYielded;
 8006922:	68bb      	ldr	r3, [r7, #8]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000ea0 	.word	0x20000ea0
 8006930:	20000e78 	.word	0x20000e78
 8006934:	20000e38 	.word	0x20000e38
 8006938:	20000e80 	.word	0x20000e80
 800693c:	200009a8 	.word	0x200009a8
 8006940:	200009a4 	.word	0x200009a4
 8006944:	20000e8c 	.word	0x20000e8c
 8006948:	20000e88 	.word	0x20000e88
 800694c:	e000ed04 	.word	0xe000ed04

08006950 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006956:	4b04      	ldr	r3, [pc, #16]	@ (8006968 <xTaskGetTickCount+0x18>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800695c:	687b      	ldr	r3, [r7, #4]
}
 800695e:	4618      	mov	r0, r3
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr
 8006968:	20000e7c 	.word	0x20000e7c

0800696c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006976:	4b4f      	ldr	r3, [pc, #316]	@ (8006ab4 <xTaskIncrementTick+0x148>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	f040 8090 	bne.w	8006aa0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006980:	4b4d      	ldr	r3, [pc, #308]	@ (8006ab8 <xTaskIncrementTick+0x14c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006988:	4a4b      	ldr	r2, [pc, #300]	@ (8006ab8 <xTaskIncrementTick+0x14c>)
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d121      	bne.n	80069d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006994:	4b49      	ldr	r3, [pc, #292]	@ (8006abc <xTaskIncrementTick+0x150>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00b      	beq.n	80069b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	f383 8811 	msr	BASEPRI, r3
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	f3bf 8f4f 	dsb	sy
 80069ae:	603b      	str	r3, [r7, #0]
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	e7fd      	b.n	80069b2 <xTaskIncrementTick+0x46>
 80069b6:	4b41      	ldr	r3, [pc, #260]	@ (8006abc <xTaskIncrementTick+0x150>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	4b40      	ldr	r3, [pc, #256]	@ (8006ac0 <xTaskIncrementTick+0x154>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a3e      	ldr	r2, [pc, #248]	@ (8006abc <xTaskIncrementTick+0x150>)
 80069c2:	6013      	str	r3, [r2, #0]
 80069c4:	4a3e      	ldr	r2, [pc, #248]	@ (8006ac0 <xTaskIncrementTick+0x154>)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	4b3e      	ldr	r3, [pc, #248]	@ (8006ac4 <xTaskIncrementTick+0x158>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3301      	adds	r3, #1
 80069d0:	4a3c      	ldr	r2, [pc, #240]	@ (8006ac4 <xTaskIncrementTick+0x158>)
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	f000 fae0 	bl	8006f98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80069d8:	4b3b      	ldr	r3, [pc, #236]	@ (8006ac8 <xTaskIncrementTick+0x15c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d349      	bcc.n	8006a76 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069e2:	4b36      	ldr	r3, [pc, #216]	@ (8006abc <xTaskIncrementTick+0x150>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d104      	bne.n	80069f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069ec:	4b36      	ldr	r3, [pc, #216]	@ (8006ac8 <xTaskIncrementTick+0x15c>)
 80069ee:	f04f 32ff 	mov.w	r2, #4294967295
 80069f2:	601a      	str	r2, [r3, #0]
					break;
 80069f4:	e03f      	b.n	8006a76 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f6:	4b31      	ldr	r3, [pc, #196]	@ (8006abc <xTaskIncrementTick+0x150>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d203      	bcs.n	8006a16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a0e:	4a2e      	ldr	r2, [pc, #184]	@ (8006ac8 <xTaskIncrementTick+0x15c>)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a14:	e02f      	b.n	8006a76 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe fd4a 	bl	80054b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d004      	beq.n	8006a32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	3318      	adds	r3, #24
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe fd41 	bl	80054b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a36:	4b25      	ldr	r3, [pc, #148]	@ (8006acc <xTaskIncrementTick+0x160>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d903      	bls.n	8006a46 <xTaskIncrementTick+0xda>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	4a22      	ldr	r2, [pc, #136]	@ (8006acc <xTaskIncrementTick+0x160>)
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4a1f      	ldr	r2, [pc, #124]	@ (8006ad0 <xTaskIncrementTick+0x164>)
 8006a54:	441a      	add	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	f7fe fcce 	bl	80053fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a66:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad4 <xTaskIncrementTick+0x168>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d3b8      	bcc.n	80069e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006a70:	2301      	movs	r3, #1
 8006a72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a74:	e7b5      	b.n	80069e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a76:	4b17      	ldr	r3, [pc, #92]	@ (8006ad4 <xTaskIncrementTick+0x168>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a7c:	4914      	ldr	r1, [pc, #80]	@ (8006ad0 <xTaskIncrementTick+0x164>)
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	440b      	add	r3, r1
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d901      	bls.n	8006a92 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006a92:	4b11      	ldr	r3, [pc, #68]	@ (8006ad8 <xTaskIncrementTick+0x16c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d007      	beq.n	8006aaa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	e004      	b.n	8006aaa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8006adc <xTaskIncrementTick+0x170>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	4a0d      	ldr	r2, [pc, #52]	@ (8006adc <xTaskIncrementTick+0x170>)
 8006aa8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006aaa:	697b      	ldr	r3, [r7, #20]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3718      	adds	r7, #24
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	20000ea0 	.word	0x20000ea0
 8006ab8:	20000e7c 	.word	0x20000e7c
 8006abc:	20000e30 	.word	0x20000e30
 8006ac0:	20000e34 	.word	0x20000e34
 8006ac4:	20000e90 	.word	0x20000e90
 8006ac8:	20000e98 	.word	0x20000e98
 8006acc:	20000e80 	.word	0x20000e80
 8006ad0:	200009a8 	.word	0x200009a8
 8006ad4:	200009a4 	.word	0x200009a4
 8006ad8:	20000e8c 	.word	0x20000e8c
 8006adc:	20000e88 	.word	0x20000e88

08006ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b90 <vTaskSwitchContext+0xb0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006aee:	4b29      	ldr	r3, [pc, #164]	@ (8006b94 <vTaskSwitchContext+0xb4>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006af4:	e047      	b.n	8006b86 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006af6:	4b27      	ldr	r3, [pc, #156]	@ (8006b94 <vTaskSwitchContext+0xb4>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006afc:	4b26      	ldr	r3, [pc, #152]	@ (8006b98 <vTaskSwitchContext+0xb8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60fb      	str	r3, [r7, #12]
 8006b02:	e011      	b.n	8006b28 <vTaskSwitchContext+0x48>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10b      	bne.n	8006b22 <vTaskSwitchContext+0x42>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	607b      	str	r3, [r7, #4]
}
 8006b1c:	bf00      	nop
 8006b1e:	bf00      	nop
 8006b20:	e7fd      	b.n	8006b1e <vTaskSwitchContext+0x3e>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3b01      	subs	r3, #1
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	491c      	ldr	r1, [pc, #112]	@ (8006b9c <vTaskSwitchContext+0xbc>)
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	440b      	add	r3, r1
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0e3      	beq.n	8006b04 <vTaskSwitchContext+0x24>
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4a15      	ldr	r2, [pc, #84]	@ (8006b9c <vTaskSwitchContext+0xbc>)
 8006b48:	4413      	add	r3, r2
 8006b4a:	60bb      	str	r3, [r7, #8]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	605a      	str	r2, [r3, #4]
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d104      	bne.n	8006b6c <vTaskSwitchContext+0x8c>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	605a      	str	r2, [r3, #4]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	4a0b      	ldr	r2, [pc, #44]	@ (8006ba0 <vTaskSwitchContext+0xc0>)
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	4a08      	ldr	r2, [pc, #32]	@ (8006b98 <vTaskSwitchContext+0xb8>)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b7c:	4b08      	ldr	r3, [pc, #32]	@ (8006ba0 <vTaskSwitchContext+0xc0>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3354      	adds	r3, #84	@ 0x54
 8006b82:	4a08      	ldr	r2, [pc, #32]	@ (8006ba4 <vTaskSwitchContext+0xc4>)
 8006b84:	6013      	str	r3, [r2, #0]
}
 8006b86:	bf00      	nop
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr
 8006b90:	20000ea0 	.word	0x20000ea0
 8006b94:	20000e8c 	.word	0x20000e8c
 8006b98:	20000e80 	.word	0x20000e80
 8006b9c:	200009a8 	.word	0x200009a8
 8006ba0:	200009a4 	.word	0x200009a4
 8006ba4:	2000001c 	.word	0x2000001c

08006ba8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10b      	bne.n	8006bd0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	60fb      	str	r3, [r7, #12]
}
 8006bca:	bf00      	nop
 8006bcc:	bf00      	nop
 8006bce:	e7fd      	b.n	8006bcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006bd0:	4b07      	ldr	r3, [pc, #28]	@ (8006bf0 <vTaskPlaceOnEventList+0x48>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	3318      	adds	r3, #24
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7fe fc33 	bl	8005444 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006bde:	2101      	movs	r1, #1
 8006be0:	6838      	ldr	r0, [r7, #0]
 8006be2:	f000 fb95 	bl	8007310 <prvAddCurrentTaskToDelayedList>
}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	200009a4 	.word	0x200009a4

08006bf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10b      	bne.n	8006c1e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	617b      	str	r3, [r7, #20]
}
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
 8006c1c:	e7fd      	b.n	8006c1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c48 <vTaskPlaceOnEventListRestricted+0x54>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3318      	adds	r3, #24
 8006c24:	4619      	mov	r1, r3
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7fe fbe9 	bl	80053fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006c32:	f04f 33ff 	mov.w	r3, #4294967295
 8006c36:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006c38:	6879      	ldr	r1, [r7, #4]
 8006c3a:	68b8      	ldr	r0, [r7, #8]
 8006c3c:	f000 fb68 	bl	8007310 <prvAddCurrentTaskToDelayedList>
	}
 8006c40:	bf00      	nop
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	200009a4 	.word	0x200009a4

08006c4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10b      	bne.n	8006c7a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	60fb      	str	r3, [r7, #12]
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	e7fd      	b.n	8006c76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	3318      	adds	r3, #24
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fc18 	bl	80054b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c84:	4b1d      	ldr	r3, [pc, #116]	@ (8006cfc <xTaskRemoveFromEventList+0xb0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d11d      	bne.n	8006cc8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fe fc0f 	bl	80054b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c9a:	4b19      	ldr	r3, [pc, #100]	@ (8006d00 <xTaskRemoveFromEventList+0xb4>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d903      	bls.n	8006caa <xTaskRemoveFromEventList+0x5e>
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca6:	4a16      	ldr	r2, [pc, #88]	@ (8006d00 <xTaskRemoveFromEventList+0xb4>)
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4a13      	ldr	r2, [pc, #76]	@ (8006d04 <xTaskRemoveFromEventList+0xb8>)
 8006cb8:	441a      	add	r2, r3
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	f7fe fb9c 	bl	80053fe <vListInsertEnd>
 8006cc6:	e005      	b.n	8006cd4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	3318      	adds	r3, #24
 8006ccc:	4619      	mov	r1, r3
 8006cce:	480e      	ldr	r0, [pc, #56]	@ (8006d08 <xTaskRemoveFromEventList+0xbc>)
 8006cd0:	f7fe fb95 	bl	80053fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8006d0c <xTaskRemoveFromEventList+0xc0>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d905      	bls.n	8006cee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8006d10 <xTaskRemoveFromEventList+0xc4>)
 8006ce8:	2201      	movs	r2, #1
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	e001      	b.n	8006cf2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006cf2:	697b      	ldr	r3, [r7, #20]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20000ea0 	.word	0x20000ea0
 8006d00:	20000e80 	.word	0x20000e80
 8006d04:	200009a8 	.word	0x200009a8
 8006d08:	20000e38 	.word	0x20000e38
 8006d0c:	200009a4 	.word	0x200009a4
 8006d10:	20000e8c 	.word	0x20000e8c

08006d14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006d1c:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <vTaskInternalSetTimeOutState+0x24>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d24:	4b05      	ldr	r3, [pc, #20]	@ (8006d3c <vTaskInternalSetTimeOutState+0x28>)
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	605a      	str	r2, [r3, #4]
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	20000e90 	.word	0x20000e90
 8006d3c:	20000e7c 	.word	0x20000e7c

08006d40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10b      	bne.n	8006d68 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	613b      	str	r3, [r7, #16]
}
 8006d62:	bf00      	nop
 8006d64:	bf00      	nop
 8006d66:	e7fd      	b.n	8006d64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	60fb      	str	r3, [r7, #12]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006d86:	f000 ff61 	bl	8007c4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006e00 <xTaskCheckForTimeOut+0xc0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da2:	d102      	bne.n	8006daa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006da4:	2300      	movs	r3, #0
 8006da6:	61fb      	str	r3, [r7, #28]
 8006da8:	e023      	b.n	8006df2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4b15      	ldr	r3, [pc, #84]	@ (8006e04 <xTaskCheckForTimeOut+0xc4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d007      	beq.n	8006dc6 <xTaskCheckForTimeOut+0x86>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d302      	bcc.n	8006dc6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	61fb      	str	r3, [r7, #28]
 8006dc4:	e015      	b.n	8006df2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d20b      	bcs.n	8006de8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	1ad2      	subs	r2, r2, r3
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff ff99 	bl	8006d14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	e004      	b.n	8006df2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dee:	2301      	movs	r3, #1
 8006df0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006df2:	f000 ff5b 	bl	8007cac <vPortExitCritical>

	return xReturn;
 8006df6:	69fb      	ldr	r3, [r7, #28]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20000e7c 	.word	0x20000e7c
 8006e04:	20000e90 	.word	0x20000e90

08006e08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006e0c:	4b03      	ldr	r3, [pc, #12]	@ (8006e1c <vTaskMissedYield+0x14>)
 8006e0e:	2201      	movs	r2, #1
 8006e10:	601a      	str	r2, [r3, #0]
}
 8006e12:	bf00      	nop
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bc80      	pop	{r7}
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	20000e8c 	.word	0x20000e8c

08006e20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e28:	f000 f852 	bl	8006ed0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e2c:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <prvIdleTask+0x28>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d9f9      	bls.n	8006e28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e34:	4b05      	ldr	r3, [pc, #20]	@ (8006e4c <prvIdleTask+0x2c>)
 8006e36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e44:	e7f0      	b.n	8006e28 <prvIdleTask+0x8>
 8006e46:	bf00      	nop
 8006e48:	200009a8 	.word	0x200009a8
 8006e4c:	e000ed04 	.word	0xe000ed04

08006e50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e56:	2300      	movs	r3, #0
 8006e58:	607b      	str	r3, [r7, #4]
 8006e5a:	e00c      	b.n	8006e76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4a12      	ldr	r2, [pc, #72]	@ (8006eb0 <prvInitialiseTaskLists+0x60>)
 8006e68:	4413      	add	r3, r2
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe fa9c 	bl	80053a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3301      	adds	r3, #1
 8006e74:	607b      	str	r3, [r7, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b37      	cmp	r3, #55	@ 0x37
 8006e7a:	d9ef      	bls.n	8006e5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e7c:	480d      	ldr	r0, [pc, #52]	@ (8006eb4 <prvInitialiseTaskLists+0x64>)
 8006e7e:	f7fe fa93 	bl	80053a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e82:	480d      	ldr	r0, [pc, #52]	@ (8006eb8 <prvInitialiseTaskLists+0x68>)
 8006e84:	f7fe fa90 	bl	80053a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e88:	480c      	ldr	r0, [pc, #48]	@ (8006ebc <prvInitialiseTaskLists+0x6c>)
 8006e8a:	f7fe fa8d 	bl	80053a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e8e:	480c      	ldr	r0, [pc, #48]	@ (8006ec0 <prvInitialiseTaskLists+0x70>)
 8006e90:	f7fe fa8a 	bl	80053a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e94:	480b      	ldr	r0, [pc, #44]	@ (8006ec4 <prvInitialiseTaskLists+0x74>)
 8006e96:	f7fe fa87 	bl	80053a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <prvInitialiseTaskLists+0x78>)
 8006e9c:	4a05      	ldr	r2, [pc, #20]	@ (8006eb4 <prvInitialiseTaskLists+0x64>)
 8006e9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ecc <prvInitialiseTaskLists+0x7c>)
 8006ea2:	4a05      	ldr	r2, [pc, #20]	@ (8006eb8 <prvInitialiseTaskLists+0x68>)
 8006ea4:	601a      	str	r2, [r3, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	200009a8 	.word	0x200009a8
 8006eb4:	20000e08 	.word	0x20000e08
 8006eb8:	20000e1c 	.word	0x20000e1c
 8006ebc:	20000e38 	.word	0x20000e38
 8006ec0:	20000e4c 	.word	0x20000e4c
 8006ec4:	20000e64 	.word	0x20000e64
 8006ec8:	20000e30 	.word	0x20000e30
 8006ecc:	20000e34 	.word	0x20000e34

08006ed0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ed6:	e019      	b.n	8006f0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ed8:	f000 feb8 	bl	8007c4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006edc:	4b10      	ldr	r3, [pc, #64]	@ (8006f20 <prvCheckTasksWaitingTermination+0x50>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe fae3 	bl	80054b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006eee:	4b0d      	ldr	r3, [pc, #52]	@ (8006f24 <prvCheckTasksWaitingTermination+0x54>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8006f24 <prvCheckTasksWaitingTermination+0x54>)
 8006ef6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8006f28 <prvCheckTasksWaitingTermination+0x58>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	4a0a      	ldr	r2, [pc, #40]	@ (8006f28 <prvCheckTasksWaitingTermination+0x58>)
 8006f00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f02:	f000 fed3 	bl	8007cac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f810 	bl	8006f2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f0c:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <prvCheckTasksWaitingTermination+0x58>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e1      	bne.n	8006ed8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop
 8006f18:	3708      	adds	r7, #8
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20000e4c 	.word	0x20000e4c
 8006f24:	20000e78 	.word	0x20000e78
 8006f28:	20000e60 	.word	0x20000e60

08006f2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3354      	adds	r3, #84	@ 0x54
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 fc43 	bl	80087c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d108      	bne.n	8006f5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 f84d 	bl	8007fec <vPortFree>
				vPortFree( pxTCB );
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f001 f84a 	bl	8007fec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f58:	e019      	b.n	8006f8e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d103      	bne.n	8006f6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 f841 	bl	8007fec <vPortFree>
	}
 8006f6a:	e010      	b.n	8006f8e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d00b      	beq.n	8006f8e <prvDeleteTCB+0x62>
	__asm volatile
 8006f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7a:	f383 8811 	msr	BASEPRI, r3
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f3bf 8f4f 	dsb	sy
 8006f86:	60fb      	str	r3, [r7, #12]
}
 8006f88:	bf00      	nop
 8006f8a:	bf00      	nop
 8006f8c:	e7fd      	b.n	8006f8a <prvDeleteTCB+0x5e>
	}
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006fd0 <prvResetNextTaskUnblockTime+0x38>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8006faa:	f04f 32ff 	mov.w	r2, #4294967295
 8006fae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006fb0:	e008      	b.n	8006fc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb2:	4b07      	ldr	r3, [pc, #28]	@ (8006fd0 <prvResetNextTaskUnblockTime+0x38>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	4a04      	ldr	r2, [pc, #16]	@ (8006fd4 <prvResetNextTaskUnblockTime+0x3c>)
 8006fc2:	6013      	str	r3, [r2, #0]
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bc80      	pop	{r7}
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20000e30 	.word	0x20000e30
 8006fd4:	20000e98 	.word	0x20000e98

08006fd8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006fde:	4b04      	ldr	r3, [pc, #16]	@ (8006ff0 <xTaskGetCurrentTaskHandle+0x18>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006fe4:	687b      	ldr	r3, [r7, #4]
	}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	370c      	adds	r7, #12
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bc80      	pop	{r7}
 8006fee:	4770      	bx	lr
 8006ff0:	200009a4 	.word	0x200009a4

08006ff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8007028 <xTaskGetSchedulerState+0x34>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d102      	bne.n	8007008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007002:	2301      	movs	r3, #1
 8007004:	607b      	str	r3, [r7, #4]
 8007006:	e008      	b.n	800701a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007008:	4b08      	ldr	r3, [pc, #32]	@ (800702c <xTaskGetSchedulerState+0x38>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d102      	bne.n	8007016 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007010:	2302      	movs	r3, #2
 8007012:	607b      	str	r3, [r7, #4]
 8007014:	e001      	b.n	800701a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007016:	2300      	movs	r3, #0
 8007018:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800701a:	687b      	ldr	r3, [r7, #4]
	}
 800701c:	4618      	mov	r0, r3
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	bc80      	pop	{r7}
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20000e84 	.word	0x20000e84
 800702c:	20000ea0 	.word	0x20000ea0

08007030 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d051      	beq.n	80070ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704a:	4b2a      	ldr	r3, [pc, #168]	@ (80070f4 <xTaskPriorityInherit+0xc4>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007050:	429a      	cmp	r2, r3
 8007052:	d241      	bcs.n	80070d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	db06      	blt.n	800706a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800705c:	4b25      	ldr	r3, [pc, #148]	@ (80070f4 <xTaskPriorityInherit+0xc4>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	6959      	ldr	r1, [r3, #20]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4a1f      	ldr	r2, [pc, #124]	@ (80070f8 <xTaskPriorityInherit+0xc8>)
 800707c:	4413      	add	r3, r2
 800707e:	4299      	cmp	r1, r3
 8007080:	d122      	bne.n	80070c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	3304      	adds	r3, #4
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe fa14 	bl	80054b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800708c:	4b19      	ldr	r3, [pc, #100]	@ (80070f4 <xTaskPriorityInherit+0xc4>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800709a:	4b18      	ldr	r3, [pc, #96]	@ (80070fc <xTaskPriorityInherit+0xcc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d903      	bls.n	80070aa <xTaskPriorityInherit+0x7a>
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a6:	4a15      	ldr	r2, [pc, #84]	@ (80070fc <xTaskPriorityInherit+0xcc>)
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4a10      	ldr	r2, [pc, #64]	@ (80070f8 <xTaskPriorityInherit+0xc8>)
 80070b8:	441a      	add	r2, r3
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	3304      	adds	r3, #4
 80070be:	4619      	mov	r1, r3
 80070c0:	4610      	mov	r0, r2
 80070c2:	f7fe f99c 	bl	80053fe <vListInsertEnd>
 80070c6:	e004      	b.n	80070d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80070c8:	4b0a      	ldr	r3, [pc, #40]	@ (80070f4 <xTaskPriorityInherit+0xc4>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80070d2:	2301      	movs	r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]
 80070d6:	e008      	b.n	80070ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80070dc:	4b05      	ldr	r3, [pc, #20]	@ (80070f4 <xTaskPriorityInherit+0xc4>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d201      	bcs.n	80070ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80070e6:	2301      	movs	r3, #1
 80070e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070ea:	68fb      	ldr	r3, [r7, #12]
	}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	200009a4 	.word	0x200009a4
 80070f8:	200009a8 	.word	0x200009a8
 80070fc:	20000e80 	.word	0x20000e80

08007100 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800710c:	2300      	movs	r3, #0
 800710e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d058      	beq.n	80071c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007116:	4b2f      	ldr	r3, [pc, #188]	@ (80071d4 <xTaskPriorityDisinherit+0xd4>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	429a      	cmp	r2, r3
 800711e:	d00b      	beq.n	8007138 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	bf00      	nop
 8007136:	e7fd      	b.n	8007134 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10b      	bne.n	8007158 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	60bb      	str	r3, [r7, #8]
}
 8007152:	bf00      	nop
 8007154:	bf00      	nop
 8007156:	e7fd      	b.n	8007154 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800715c:	1e5a      	subs	r2, r3, #1
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800716a:	429a      	cmp	r2, r3
 800716c:	d02c      	beq.n	80071c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007172:	2b00      	cmp	r3, #0
 8007174:	d128      	bne.n	80071c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	3304      	adds	r3, #4
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe f99a 	bl	80054b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007198:	4b0f      	ldr	r3, [pc, #60]	@ (80071d8 <xTaskPriorityDisinherit+0xd8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	429a      	cmp	r2, r3
 800719e:	d903      	bls.n	80071a8 <xTaskPriorityDisinherit+0xa8>
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a4:	4a0c      	ldr	r2, [pc, #48]	@ (80071d8 <xTaskPriorityDisinherit+0xd8>)
 80071a6:	6013      	str	r3, [r2, #0]
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ac:	4613      	mov	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4413      	add	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4a09      	ldr	r2, [pc, #36]	@ (80071dc <xTaskPriorityDisinherit+0xdc>)
 80071b6:	441a      	add	r2, r3
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4619      	mov	r1, r3
 80071be:	4610      	mov	r0, r2
 80071c0:	f7fe f91d 	bl	80053fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071c4:	2301      	movs	r3, #1
 80071c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071c8:	697b      	ldr	r3, [r7, #20]
	}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	200009a4 	.word	0x200009a4
 80071d8:	20000e80 	.word	0x20000e80
 80071dc:	200009a8 	.word	0x200009a8

080071e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80071ee:	2301      	movs	r3, #1
 80071f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d06c      	beq.n	80072d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10b      	bne.n	8007218 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	60fb      	str	r3, [r7, #12]
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	e7fd      	b.n	8007214 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d902      	bls.n	8007228 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	61fb      	str	r3, [r7, #28]
 8007226:	e002      	b.n	800722e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800722c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	429a      	cmp	r2, r3
 8007236:	d04c      	beq.n	80072d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	429a      	cmp	r2, r3
 8007240:	d147      	bne.n	80072d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007242:	4b26      	ldr	r3, [pc, #152]	@ (80072dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	429a      	cmp	r2, r3
 800724a:	d10b      	bne.n	8007264 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	60bb      	str	r3, [r7, #8]
}
 800725e:	bf00      	nop
 8007260:	bf00      	nop
 8007262:	e7fd      	b.n	8007260 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007268:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	2b00      	cmp	r3, #0
 8007276:	db04      	blt.n	8007282 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	6959      	ldr	r1, [r3, #20]
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4a13      	ldr	r2, [pc, #76]	@ (80072e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007292:	4413      	add	r3, r2
 8007294:	4299      	cmp	r1, r3
 8007296:	d11c      	bne.n	80072d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	3304      	adds	r3, #4
 800729c:	4618      	mov	r0, r3
 800729e:	f7fe f909 	bl	80054b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072a6:	4b0f      	ldr	r3, [pc, #60]	@ (80072e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d903      	bls.n	80072b6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b2:	4a0c      	ldr	r2, [pc, #48]	@ (80072e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ba:	4613      	mov	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	4a07      	ldr	r2, [pc, #28]	@ (80072e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80072c4:	441a      	add	r2, r3
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	3304      	adds	r3, #4
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f7fe f896 	bl	80053fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072d2:	bf00      	nop
 80072d4:	3720      	adds	r7, #32
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	200009a4 	.word	0x200009a4
 80072e0:	200009a8 	.word	0x200009a8
 80072e4:	20000e80 	.word	0x20000e80

080072e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072ec:	4b07      	ldr	r3, [pc, #28]	@ (800730c <pvTaskIncrementMutexHeldCount+0x24>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d004      	beq.n	80072fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80072f4:	4b05      	ldr	r3, [pc, #20]	@ (800730c <pvTaskIncrementMutexHeldCount+0x24>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072fa:	3201      	adds	r2, #1
 80072fc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80072fe:	4b03      	ldr	r3, [pc, #12]	@ (800730c <pvTaskIncrementMutexHeldCount+0x24>)
 8007300:	681b      	ldr	r3, [r3, #0]
	}
 8007302:	4618      	mov	r0, r3
 8007304:	46bd      	mov	sp, r7
 8007306:	bc80      	pop	{r7}
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	200009a4 	.word	0x200009a4

08007310 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800731a:	4b21      	ldr	r3, [pc, #132]	@ (80073a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007320:	4b20      	ldr	r3, [pc, #128]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3304      	adds	r3, #4
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe f8c4 	bl	80054b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007332:	d10a      	bne.n	800734a <prvAddCurrentTaskToDelayedList+0x3a>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d007      	beq.n	800734a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800733a:	4b1a      	ldr	r3, [pc, #104]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3304      	adds	r3, #4
 8007340:	4619      	mov	r1, r3
 8007342:	4819      	ldr	r0, [pc, #100]	@ (80073a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007344:	f7fe f85b 	bl	80053fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007348:	e026      	b.n	8007398 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4413      	add	r3, r2
 8007350:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007352:	4b14      	ldr	r3, [pc, #80]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	429a      	cmp	r2, r3
 8007360:	d209      	bcs.n	8007376 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007362:	4b12      	ldr	r3, [pc, #72]	@ (80073ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4b0f      	ldr	r3, [pc, #60]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3304      	adds	r3, #4
 800736c:	4619      	mov	r1, r3
 800736e:	4610      	mov	r0, r2
 8007370:	f7fe f868 	bl	8005444 <vListInsert>
}
 8007374:	e010      	b.n	8007398 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007376:	4b0e      	ldr	r3, [pc, #56]	@ (80073b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	4b0a      	ldr	r3, [pc, #40]	@ (80073a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3304      	adds	r3, #4
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f7fe f85e 	bl	8005444 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007388:	4b0a      	ldr	r3, [pc, #40]	@ (80073b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	429a      	cmp	r2, r3
 8007390:	d202      	bcs.n	8007398 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007392:	4a08      	ldr	r2, [pc, #32]	@ (80073b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	6013      	str	r3, [r2, #0]
}
 8007398:	bf00      	nop
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	20000e7c 	.word	0x20000e7c
 80073a4:	200009a4 	.word	0x200009a4
 80073a8:	20000e64 	.word	0x20000e64
 80073ac:	20000e34 	.word	0x20000e34
 80073b0:	20000e30 	.word	0x20000e30
 80073b4:	20000e98 	.word	0x20000e98

080073b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08a      	sub	sp, #40	@ 0x28
 80073bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80073be:	2300      	movs	r3, #0
 80073c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80073c2:	f000 fb11 	bl	80079e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80073c6:	4b1d      	ldr	r3, [pc, #116]	@ (800743c <xTimerCreateTimerTask+0x84>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d021      	beq.n	8007412 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80073d6:	1d3a      	adds	r2, r7, #4
 80073d8:	f107 0108 	add.w	r1, r7, #8
 80073dc:	f107 030c 	add.w	r3, r7, #12
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fd ffc7 	bl	8005374 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	9202      	str	r2, [sp, #8]
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	2302      	movs	r3, #2
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	2300      	movs	r3, #0
 80073f6:	460a      	mov	r2, r1
 80073f8:	4911      	ldr	r1, [pc, #68]	@ (8007440 <xTimerCreateTimerTask+0x88>)
 80073fa:	4812      	ldr	r0, [pc, #72]	@ (8007444 <xTimerCreateTimerTask+0x8c>)
 80073fc:	f7fe ff98 	bl	8006330 <xTaskCreateStatic>
 8007400:	4603      	mov	r3, r0
 8007402:	4a11      	ldr	r2, [pc, #68]	@ (8007448 <xTimerCreateTimerTask+0x90>)
 8007404:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007406:	4b10      	ldr	r3, [pc, #64]	@ (8007448 <xTimerCreateTimerTask+0x90>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800740e:	2301      	movs	r3, #1
 8007410:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10b      	bne.n	8007430 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	613b      	str	r3, [r7, #16]
}
 800742a:	bf00      	nop
 800742c:	bf00      	nop
 800742e:	e7fd      	b.n	800742c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007430:	697b      	ldr	r3, [r7, #20]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20000ed4 	.word	0x20000ed4
 8007440:	08008cd8 	.word	0x08008cd8
 8007444:	08007585 	.word	0x08007585
 8007448:	20000ed8 	.word	0x20000ed8

0800744c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08a      	sub	sp, #40	@ 0x28
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800745a:	2300      	movs	r3, #0
 800745c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10b      	bne.n	800747c <xTimerGenericCommand+0x30>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	623b      	str	r3, [r7, #32]
}
 8007476:	bf00      	nop
 8007478:	bf00      	nop
 800747a:	e7fd      	b.n	8007478 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800747c:	4b19      	ldr	r3, [pc, #100]	@ (80074e4 <xTimerGenericCommand+0x98>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d02a      	beq.n	80074da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b05      	cmp	r3, #5
 8007494:	dc18      	bgt.n	80074c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007496:	f7ff fdad 	bl	8006ff4 <xTaskGetSchedulerState>
 800749a:	4603      	mov	r3, r0
 800749c:	2b02      	cmp	r3, #2
 800749e:	d109      	bne.n	80074b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074a0:	4b10      	ldr	r3, [pc, #64]	@ (80074e4 <xTimerGenericCommand+0x98>)
 80074a2:	6818      	ldr	r0, [r3, #0]
 80074a4:	f107 0110 	add.w	r1, r7, #16
 80074a8:	2300      	movs	r3, #0
 80074aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074ac:	f7fe fa2a 	bl	8005904 <xQueueGenericSend>
 80074b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80074b2:	e012      	b.n	80074da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074b4:	4b0b      	ldr	r3, [pc, #44]	@ (80074e4 <xTimerGenericCommand+0x98>)
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	f107 0110 	add.w	r1, r7, #16
 80074bc:	2300      	movs	r3, #0
 80074be:	2200      	movs	r2, #0
 80074c0:	f7fe fa20 	bl	8005904 <xQueueGenericSend>
 80074c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80074c6:	e008      	b.n	80074da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074c8:	4b06      	ldr	r3, [pc, #24]	@ (80074e4 <xTimerGenericCommand+0x98>)
 80074ca:	6818      	ldr	r0, [r3, #0]
 80074cc:	f107 0110 	add.w	r1, r7, #16
 80074d0:	2300      	movs	r3, #0
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	f7fe fb18 	bl	8005b08 <xQueueGenericSendFromISR>
 80074d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3728      	adds	r7, #40	@ 0x28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20000ed4 	.word	0x20000ed4

080074e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074f2:	4b23      	ldr	r3, [pc, #140]	@ (8007580 <prvProcessExpiredTimer+0x98>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f7fd ffd7 	bl	80054b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d023      	beq.n	800755c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	699a      	ldr	r2, [r3, #24]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	18d1      	adds	r1, r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	6978      	ldr	r0, [r7, #20]
 8007522:	f000 f8d3 	bl	80076cc <prvInsertTimerInActiveList>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d020      	beq.n	800756e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800752c:	2300      	movs	r3, #0
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	2300      	movs	r3, #0
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	2100      	movs	r1, #0
 8007536:	6978      	ldr	r0, [r7, #20]
 8007538:	f7ff ff88 	bl	800744c <xTimerGenericCommand>
 800753c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d114      	bne.n	800756e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60fb      	str	r3, [r7, #12]
}
 8007556:	bf00      	nop
 8007558:	bf00      	nop
 800755a:	e7fd      	b.n	8007558 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007562:	f023 0301 	bic.w	r3, r3, #1
 8007566:	b2da      	uxtb	r2, r3
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	6978      	ldr	r0, [r7, #20]
 8007574:	4798      	blx	r3
}
 8007576:	bf00      	nop
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000ecc 	.word	0x20000ecc

08007584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800758c:	f107 0308 	add.w	r3, r7, #8
 8007590:	4618      	mov	r0, r3
 8007592:	f000 f859 	bl	8007648 <prvGetNextExpireTime>
 8007596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4619      	mov	r1, r3
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 f805 	bl	80075ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80075a2:	f000 f8d5 	bl	8007750 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075a6:	bf00      	nop
 80075a8:	e7f0      	b.n	800758c <prvTimerTask+0x8>
	...

080075ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80075b6:	f7ff f91f 	bl	80067f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075ba:	f107 0308 	add.w	r3, r7, #8
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 f864 	bl	800768c <prvSampleTimeNow>
 80075c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d130      	bne.n	800762e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10a      	bne.n	80075e8 <prvProcessTimerOrBlockTask+0x3c>
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d806      	bhi.n	80075e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80075da:	f7ff f91b 	bl	8006814 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075de:	68f9      	ldr	r1, [r7, #12]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff ff81 	bl	80074e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80075e6:	e024      	b.n	8007632 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80075ee:	4b13      	ldr	r3, [pc, #76]	@ (800763c <prvProcessTimerOrBlockTask+0x90>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <prvProcessTimerOrBlockTask+0x50>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <prvProcessTimerOrBlockTask+0x52>
 80075fc:	2300      	movs	r3, #0
 80075fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007600:	4b0f      	ldr	r3, [pc, #60]	@ (8007640 <prvProcessTimerOrBlockTask+0x94>)
 8007602:	6818      	ldr	r0, [r3, #0]
 8007604:	687a      	ldr	r2, [r7, #4]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	4619      	mov	r1, r3
 800760e:	f7fe fe5b 	bl	80062c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007612:	f7ff f8ff 	bl	8006814 <xTaskResumeAll>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800761c:	4b09      	ldr	r3, [pc, #36]	@ (8007644 <prvProcessTimerOrBlockTask+0x98>)
 800761e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	f3bf 8f6f 	isb	sy
}
 800762c:	e001      	b.n	8007632 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800762e:	f7ff f8f1 	bl	8006814 <xTaskResumeAll>
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20000ed0 	.word	0x20000ed0
 8007640:	20000ed4 	.word	0x20000ed4
 8007644:	e000ed04 	.word	0xe000ed04

08007648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007650:	4b0d      	ldr	r3, [pc, #52]	@ (8007688 <prvGetNextExpireTime+0x40>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <prvGetNextExpireTime+0x16>
 800765a:	2201      	movs	r2, #1
 800765c:	e000      	b.n	8007660 <prvGetNextExpireTime+0x18>
 800765e:	2200      	movs	r2, #0
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d105      	bne.n	8007678 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800766c:	4b06      	ldr	r3, [pc, #24]	@ (8007688 <prvGetNextExpireTime+0x40>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	e001      	b.n	800767c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800767c:	68fb      	ldr	r3, [r7, #12]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	bc80      	pop	{r7}
 8007686:	4770      	bx	lr
 8007688:	20000ecc 	.word	0x20000ecc

0800768c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007694:	f7ff f95c 	bl	8006950 <xTaskGetTickCount>
 8007698:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800769a:	4b0b      	ldr	r3, [pc, #44]	@ (80076c8 <prvSampleTimeNow+0x3c>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d205      	bcs.n	80076b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80076a4:	f000 f93a 	bl	800791c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	e002      	b.n	80076b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80076b6:	4a04      	ldr	r2, [pc, #16]	@ (80076c8 <prvSampleTimeNow+0x3c>)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80076bc:	68fb      	ldr	r3, [r7, #12]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20000edc 	.word	0x20000edc

080076cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d812      	bhi.n	8007718 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	1ad2      	subs	r2, r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d302      	bcc.n	8007706 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007700:	2301      	movs	r3, #1
 8007702:	617b      	str	r3, [r7, #20]
 8007704:	e01b      	b.n	800773e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007706:	4b10      	ldr	r3, [pc, #64]	@ (8007748 <prvInsertTimerInActiveList+0x7c>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3304      	adds	r3, #4
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f7fd fe97 	bl	8005444 <vListInsert>
 8007716:	e012      	b.n	800773e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	429a      	cmp	r2, r3
 800771e:	d206      	bcs.n	800772e <prvInsertTimerInActiveList+0x62>
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	429a      	cmp	r2, r3
 8007726:	d302      	bcc.n	800772e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007728:	2301      	movs	r3, #1
 800772a:	617b      	str	r3, [r7, #20]
 800772c:	e007      	b.n	800773e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800772e:	4b07      	ldr	r3, [pc, #28]	@ (800774c <prvInsertTimerInActiveList+0x80>)
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3304      	adds	r3, #4
 8007736:	4619      	mov	r1, r3
 8007738:	4610      	mov	r0, r2
 800773a:	f7fd fe83 	bl	8005444 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800773e:	697b      	ldr	r3, [r7, #20]
}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	20000ed0 	.word	0x20000ed0
 800774c:	20000ecc 	.word	0x20000ecc

08007750 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08e      	sub	sp, #56	@ 0x38
 8007754:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007756:	e0ce      	b.n	80078f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	da19      	bge.n	8007792 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800775e:	1d3b      	adds	r3, r7, #4
 8007760:	3304      	adds	r3, #4
 8007762:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10b      	bne.n	8007782 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	61fb      	str	r3, [r7, #28]
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	e7fd      	b.n	800777e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007788:	6850      	ldr	r0, [r2, #4]
 800778a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800778c:	6892      	ldr	r2, [r2, #8]
 800778e:	4611      	mov	r1, r2
 8007790:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	f2c0 80ae 	blt.w	80078f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800779e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d004      	beq.n	80077b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a8:	3304      	adds	r3, #4
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fd fe82 	bl	80054b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077b0:	463b      	mov	r3, r7
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff ff6a 	bl	800768c <prvSampleTimeNow>
 80077b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b09      	cmp	r3, #9
 80077be:	f200 8097 	bhi.w	80078f0 <prvProcessReceivedCommands+0x1a0>
 80077c2:	a201      	add	r2, pc, #4	@ (adr r2, 80077c8 <prvProcessReceivedCommands+0x78>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	080077f1 	.word	0x080077f1
 80077cc:	080077f1 	.word	0x080077f1
 80077d0:	080077f1 	.word	0x080077f1
 80077d4:	08007867 	.word	0x08007867
 80077d8:	0800787b 	.word	0x0800787b
 80077dc:	080078c7 	.word	0x080078c7
 80077e0:	080077f1 	.word	0x080077f1
 80077e4:	080077f1 	.word	0x080077f1
 80077e8:	08007867 	.word	0x08007867
 80077ec:	0800787b 	.word	0x0800787b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077f6:	f043 0301 	orr.w	r3, r3, #1
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	18d1      	adds	r1, r2, r3
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800780e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007810:	f7ff ff5c 	bl	80076cc <prvInsertTimerInActiveList>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d06c      	beq.n	80078f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800781a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007820:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007824:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b00      	cmp	r3, #0
 800782e:	d061      	beq.n	80078f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	441a      	add	r2, r3
 8007838:	2300      	movs	r3, #0
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	2300      	movs	r3, #0
 800783e:	2100      	movs	r1, #0
 8007840:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007842:	f7ff fe03 	bl	800744c <xTimerGenericCommand>
 8007846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d152      	bne.n	80078f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	61bb      	str	r3, [r7, #24]
}
 8007860:	bf00      	nop
 8007862:	bf00      	nop
 8007864:	e7fd      	b.n	8007862 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007868:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800786c:	f023 0301 	bic.w	r3, r3, #1
 8007870:	b2da      	uxtb	r2, r3
 8007872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007874:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007878:	e03d      	b.n	80078f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800787a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007880:	f043 0301 	orr.w	r3, r3, #1
 8007884:	b2da      	uxtb	r2, r3
 8007886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007888:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007890:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007894:	699b      	ldr	r3, [r3, #24]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10b      	bne.n	80078b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	617b      	str	r3, [r7, #20]
}
 80078ac:	bf00      	nop
 80078ae:	bf00      	nop
 80078b0:	e7fd      	b.n	80078ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80078b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b4:	699a      	ldr	r2, [r3, #24]
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	18d1      	adds	r1, r2, r3
 80078ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078c0:	f7ff ff04 	bl	80076cc <prvInsertTimerInActiveList>
					break;
 80078c4:	e017      	b.n	80078f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d103      	bne.n	80078dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80078d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078d6:	f000 fb89 	bl	8007fec <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80078da:	e00c      	b.n	80078f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078e2:	f023 0301 	bic.w	r3, r3, #1
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80078ee:	e002      	b.n	80078f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80078f0:	bf00      	nop
 80078f2:	e000      	b.n	80078f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80078f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078f6:	4b08      	ldr	r3, [pc, #32]	@ (8007918 <prvProcessReceivedCommands+0x1c8>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	1d39      	adds	r1, r7, #4
 80078fc:	2200      	movs	r2, #0
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fe f9a0 	bl	8005c44 <xQueueReceive>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	f47f af26 	bne.w	8007758 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800790c:	bf00      	nop
 800790e:	bf00      	nop
 8007910:	3730      	adds	r7, #48	@ 0x30
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000ed4 	.word	0x20000ed4

0800791c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007922:	e049      	b.n	80079b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007924:	4b2e      	ldr	r3, [pc, #184]	@ (80079e0 <prvSwitchTimerLists+0xc4>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800792e:	4b2c      	ldr	r3, [pc, #176]	@ (80079e0 <prvSwitchTimerLists+0xc4>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3304      	adds	r3, #4
 800793c:	4618      	mov	r0, r3
 800793e:	f7fd fdb9 	bl	80054b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b00      	cmp	r3, #0
 8007956:	d02f      	beq.n	80079b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	4413      	add	r3, r2
 8007960:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	429a      	cmp	r2, r3
 8007968:	d90e      	bls.n	8007988 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	68ba      	ldr	r2, [r7, #8]
 800796e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007976:	4b1a      	ldr	r3, [pc, #104]	@ (80079e0 <prvSwitchTimerLists+0xc4>)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3304      	adds	r3, #4
 800797e:	4619      	mov	r1, r3
 8007980:	4610      	mov	r0, r2
 8007982:	f7fd fd5f 	bl	8005444 <vListInsert>
 8007986:	e017      	b.n	80079b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007988:	2300      	movs	r3, #0
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	2300      	movs	r3, #0
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	2100      	movs	r1, #0
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f7ff fd5a 	bl	800744c <xTimerGenericCommand>
 8007998:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10b      	bne.n	80079b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
 80079b0:	603b      	str	r3, [r7, #0]
}
 80079b2:	bf00      	nop
 80079b4:	bf00      	nop
 80079b6:	e7fd      	b.n	80079b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079b8:	4b09      	ldr	r3, [pc, #36]	@ (80079e0 <prvSwitchTimerLists+0xc4>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1b0      	bne.n	8007924 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80079c2:	4b07      	ldr	r3, [pc, #28]	@ (80079e0 <prvSwitchTimerLists+0xc4>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80079c8:	4b06      	ldr	r3, [pc, #24]	@ (80079e4 <prvSwitchTimerLists+0xc8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a04      	ldr	r2, [pc, #16]	@ (80079e0 <prvSwitchTimerLists+0xc4>)
 80079ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80079d0:	4a04      	ldr	r2, [pc, #16]	@ (80079e4 <prvSwitchTimerLists+0xc8>)
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	6013      	str	r3, [r2, #0]
}
 80079d6:	bf00      	nop
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	20000ecc 	.word	0x20000ecc
 80079e4:	20000ed0 	.word	0x20000ed0

080079e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80079ee:	f000 f92d 	bl	8007c4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80079f2:	4b15      	ldr	r3, [pc, #84]	@ (8007a48 <prvCheckForValidListAndQueue+0x60>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d120      	bne.n	8007a3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80079fa:	4814      	ldr	r0, [pc, #80]	@ (8007a4c <prvCheckForValidListAndQueue+0x64>)
 80079fc:	f7fd fcd4 	bl	80053a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a00:	4813      	ldr	r0, [pc, #76]	@ (8007a50 <prvCheckForValidListAndQueue+0x68>)
 8007a02:	f7fd fcd1 	bl	80053a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a06:	4b13      	ldr	r3, [pc, #76]	@ (8007a54 <prvCheckForValidListAndQueue+0x6c>)
 8007a08:	4a10      	ldr	r2, [pc, #64]	@ (8007a4c <prvCheckForValidListAndQueue+0x64>)
 8007a0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a0c:	4b12      	ldr	r3, [pc, #72]	@ (8007a58 <prvCheckForValidListAndQueue+0x70>)
 8007a0e:	4a10      	ldr	r2, [pc, #64]	@ (8007a50 <prvCheckForValidListAndQueue+0x68>)
 8007a10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a12:	2300      	movs	r3, #0
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	4b11      	ldr	r3, [pc, #68]	@ (8007a5c <prvCheckForValidListAndQueue+0x74>)
 8007a18:	4a11      	ldr	r2, [pc, #68]	@ (8007a60 <prvCheckForValidListAndQueue+0x78>)
 8007a1a:	2110      	movs	r1, #16
 8007a1c:	200a      	movs	r0, #10
 8007a1e:	f7fd fddd 	bl	80055dc <xQueueGenericCreateStatic>
 8007a22:	4603      	mov	r3, r0
 8007a24:	4a08      	ldr	r2, [pc, #32]	@ (8007a48 <prvCheckForValidListAndQueue+0x60>)
 8007a26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a28:	4b07      	ldr	r3, [pc, #28]	@ (8007a48 <prvCheckForValidListAndQueue+0x60>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d005      	beq.n	8007a3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a30:	4b05      	ldr	r3, [pc, #20]	@ (8007a48 <prvCheckForValidListAndQueue+0x60>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	490b      	ldr	r1, [pc, #44]	@ (8007a64 <prvCheckForValidListAndQueue+0x7c>)
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe fc1e 	bl	8006278 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a3c:	f000 f936 	bl	8007cac <vPortExitCritical>
}
 8007a40:	bf00      	nop
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20000ed4 	.word	0x20000ed4
 8007a4c:	20000ea4 	.word	0x20000ea4
 8007a50:	20000eb8 	.word	0x20000eb8
 8007a54:	20000ecc 	.word	0x20000ecc
 8007a58:	20000ed0 	.word	0x20000ed0
 8007a5c:	20000f80 	.word	0x20000f80
 8007a60:	20000ee0 	.word	0x20000ee0
 8007a64:	08008ce0 	.word	0x08008ce0

08007a68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3b04      	subs	r3, #4
 8007a78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007a80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3b04      	subs	r3, #4
 8007a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	f023 0201 	bic.w	r2, r3, #1
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3b04      	subs	r3, #4
 8007a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a98:	4a08      	ldr	r2, [pc, #32]	@ (8007abc <pxPortInitialiseStack+0x54>)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	3b14      	subs	r3, #20
 8007aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3b20      	subs	r3, #32
 8007aae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bc80      	pop	{r7}
 8007aba:	4770      	bx	lr
 8007abc:	08007ac1 	.word	0x08007ac1

08007ac0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007aca:	4b12      	ldr	r3, [pc, #72]	@ (8007b14 <prvTaskExitError+0x54>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad2:	d00b      	beq.n	8007aec <prvTaskExitError+0x2c>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	60fb      	str	r3, [r7, #12]
}
 8007ae6:	bf00      	nop
 8007ae8:	bf00      	nop
 8007aea:	e7fd      	b.n	8007ae8 <prvTaskExitError+0x28>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	60bb      	str	r3, [r7, #8]
}
 8007afe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b00:	bf00      	nop
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0fc      	beq.n	8007b02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bc80      	pop	{r7}
 8007b12:	4770      	bx	lr
 8007b14:	2000000c 	.word	0x2000000c
	...

08007b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b20:	4b07      	ldr	r3, [pc, #28]	@ (8007b40 <pxCurrentTCBConst2>)
 8007b22:	6819      	ldr	r1, [r3, #0]
 8007b24:	6808      	ldr	r0, [r1, #0]
 8007b26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007b2a:	f380 8809 	msr	PSP, r0
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f04f 0000 	mov.w	r0, #0
 8007b36:	f380 8811 	msr	BASEPRI, r0
 8007b3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007b3e:	4770      	bx	lr

08007b40 <pxCurrentTCBConst2>:
 8007b40:	200009a4 	.word	0x200009a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop

08007b48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007b48:	4806      	ldr	r0, [pc, #24]	@ (8007b64 <prvPortStartFirstTask+0x1c>)
 8007b4a:	6800      	ldr	r0, [r0, #0]
 8007b4c:	6800      	ldr	r0, [r0, #0]
 8007b4e:	f380 8808 	msr	MSP, r0
 8007b52:	b662      	cpsie	i
 8007b54:	b661      	cpsie	f
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	df00      	svc	0
 8007b60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b62:	bf00      	nop
 8007b64:	e000ed08 	.word	0xe000ed08

08007b68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b6e:	4b32      	ldr	r3, [pc, #200]	@ (8007c38 <xPortStartScheduler+0xd0>)
 8007b70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	22ff      	movs	r2, #255	@ 0xff
 8007b7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	4b2a      	ldr	r3, [pc, #168]	@ (8007c3c <xPortStartScheduler+0xd4>)
 8007b94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b96:	4b2a      	ldr	r3, [pc, #168]	@ (8007c40 <xPortStartScheduler+0xd8>)
 8007b98:	2207      	movs	r2, #7
 8007b9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b9c:	e009      	b.n	8007bb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007b9e:	4b28      	ldr	r3, [pc, #160]	@ (8007c40 <xPortStartScheduler+0xd8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	4a26      	ldr	r2, [pc, #152]	@ (8007c40 <xPortStartScheduler+0xd8>)
 8007ba6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ba8:	78fb      	ldrb	r3, [r7, #3]
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bb2:	78fb      	ldrb	r3, [r7, #3]
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bba:	2b80      	cmp	r3, #128	@ 0x80
 8007bbc:	d0ef      	beq.n	8007b9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bbe:	4b20      	ldr	r3, [pc, #128]	@ (8007c40 <xPortStartScheduler+0xd8>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f1c3 0307 	rsb	r3, r3, #7
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d00b      	beq.n	8007be2 <xPortStartScheduler+0x7a>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	60bb      	str	r3, [r7, #8]
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	e7fd      	b.n	8007bde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007be2:	4b17      	ldr	r3, [pc, #92]	@ (8007c40 <xPortStartScheduler+0xd8>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	4a15      	ldr	r2, [pc, #84]	@ (8007c40 <xPortStartScheduler+0xd8>)
 8007bea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bec:	4b14      	ldr	r3, [pc, #80]	@ (8007c40 <xPortStartScheduler+0xd8>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007bf4:	4a12      	ldr	r2, [pc, #72]	@ (8007c40 <xPortStartScheduler+0xd8>)
 8007bf6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c00:	4b10      	ldr	r3, [pc, #64]	@ (8007c44 <xPortStartScheduler+0xdc>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a0f      	ldr	r2, [pc, #60]	@ (8007c44 <xPortStartScheduler+0xdc>)
 8007c06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c44 <xPortStartScheduler+0xdc>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a0c      	ldr	r2, [pc, #48]	@ (8007c44 <xPortStartScheduler+0xdc>)
 8007c12:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007c16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c18:	f000 f8b8 	bl	8007d8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c48 <xPortStartScheduler+0xe0>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c22:	f7ff ff91 	bl	8007b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c26:	f7fe ff5b 	bl	8006ae0 <vTaskSwitchContext>
	prvTaskExitError();
 8007c2a:	f7ff ff49 	bl	8007ac0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	e000e400 	.word	0xe000e400
 8007c3c:	20000fd0 	.word	0x20000fd0
 8007c40:	20000fd4 	.word	0x20000fd4
 8007c44:	e000ed20 	.word	0xe000ed20
 8007c48:	2000000c 	.word	0x2000000c

08007c4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	607b      	str	r3, [r7, #4]
}
 8007c64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c66:	4b0f      	ldr	r3, [pc, #60]	@ (8007ca4 <vPortEnterCritical+0x58>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8007ca4 <vPortEnterCritical+0x58>)
 8007c6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c70:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca4 <vPortEnterCritical+0x58>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d110      	bne.n	8007c9a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c78:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca8 <vPortEnterCritical+0x5c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00b      	beq.n	8007c9a <vPortEnterCritical+0x4e>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	603b      	str	r3, [r7, #0]
}
 8007c94:	bf00      	nop
 8007c96:	bf00      	nop
 8007c98:	e7fd      	b.n	8007c96 <vPortEnterCritical+0x4a>
	}
}
 8007c9a:	bf00      	nop
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bc80      	pop	{r7}
 8007ca2:	4770      	bx	lr
 8007ca4:	2000000c 	.word	0x2000000c
 8007ca8:	e000ed04 	.word	0xe000ed04

08007cac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007cb2:	4b12      	ldr	r3, [pc, #72]	@ (8007cfc <vPortExitCritical+0x50>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10b      	bne.n	8007cd2 <vPortExitCritical+0x26>
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	607b      	str	r3, [r7, #4]
}
 8007ccc:	bf00      	nop
 8007cce:	bf00      	nop
 8007cd0:	e7fd      	b.n	8007cce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007cfc <vPortExitCritical+0x50>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	4a08      	ldr	r2, [pc, #32]	@ (8007cfc <vPortExitCritical+0x50>)
 8007cda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cdc:	4b07      	ldr	r3, [pc, #28]	@ (8007cfc <vPortExitCritical+0x50>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d105      	bne.n	8007cf0 <vPortExitCritical+0x44>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	f383 8811 	msr	BASEPRI, r3
}
 8007cee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bc80      	pop	{r7}
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	2000000c 	.word	0x2000000c

08007d00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d00:	f3ef 8009 	mrs	r0, PSP
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	4b0d      	ldr	r3, [pc, #52]	@ (8007d40 <pxCurrentTCBConst>)
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d10:	6010      	str	r0, [r2, #0]
 8007d12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007d16:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007d1a:	f380 8811 	msr	BASEPRI, r0
 8007d1e:	f7fe fedf 	bl	8006ae0 <vTaskSwitchContext>
 8007d22:	f04f 0000 	mov.w	r0, #0
 8007d26:	f380 8811 	msr	BASEPRI, r0
 8007d2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007d2e:	6819      	ldr	r1, [r3, #0]
 8007d30:	6808      	ldr	r0, [r1, #0]
 8007d32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d36:	f380 8809 	msr	PSP, r0
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	4770      	bx	lr

08007d40 <pxCurrentTCBConst>:
 8007d40:	200009a4 	.word	0x200009a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop

08007d48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	607b      	str	r3, [r7, #4]
}
 8007d60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d62:	f7fe fe03 	bl	800696c <xTaskIncrementTick>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d6c:	4b06      	ldr	r3, [pc, #24]	@ (8007d88 <xPortSysTickHandler+0x40>)
 8007d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	2300      	movs	r3, #0
 8007d76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	f383 8811 	msr	BASEPRI, r3
}
 8007d7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d80:	bf00      	nop
 8007d82:	3708      	adds	r7, #8
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	e000ed04 	.word	0xe000ed04

08007d8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d90:	4b0a      	ldr	r3, [pc, #40]	@ (8007dbc <vPortSetupTimerInterrupt+0x30>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d96:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc0 <vPortSetupTimerInterrupt+0x34>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d9c:	4b09      	ldr	r3, [pc, #36]	@ (8007dc4 <vPortSetupTimerInterrupt+0x38>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a09      	ldr	r2, [pc, #36]	@ (8007dc8 <vPortSetupTimerInterrupt+0x3c>)
 8007da2:	fba2 2303 	umull	r2, r3, r2, r3
 8007da6:	099b      	lsrs	r3, r3, #6
 8007da8:	4a08      	ldr	r2, [pc, #32]	@ (8007dcc <vPortSetupTimerInterrupt+0x40>)
 8007daa:	3b01      	subs	r3, #1
 8007dac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dae:	4b03      	ldr	r3, [pc, #12]	@ (8007dbc <vPortSetupTimerInterrupt+0x30>)
 8007db0:	2207      	movs	r2, #7
 8007db2:	601a      	str	r2, [r3, #0]
}
 8007db4:	bf00      	nop
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bc80      	pop	{r7}
 8007dba:	4770      	bx	lr
 8007dbc:	e000e010 	.word	0xe000e010
 8007dc0:	e000e018 	.word	0xe000e018
 8007dc4:	20000000 	.word	0x20000000
 8007dc8:	10624dd3 	.word	0x10624dd3
 8007dcc:	e000e014 	.word	0xe000e014

08007dd0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dd6:	f3ef 8305 	mrs	r3, IPSR
 8007dda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b0f      	cmp	r3, #15
 8007de0:	d915      	bls.n	8007e0e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007de2:	4a17      	ldr	r2, [pc, #92]	@ (8007e40 <vPortValidateInterruptPriority+0x70>)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4413      	add	r3, r2
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007dec:	4b15      	ldr	r3, [pc, #84]	@ (8007e44 <vPortValidateInterruptPriority+0x74>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	7afa      	ldrb	r2, [r7, #11]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d20b      	bcs.n	8007e0e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	607b      	str	r3, [r7, #4]
}
 8007e08:	bf00      	nop
 8007e0a:	bf00      	nop
 8007e0c:	e7fd      	b.n	8007e0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e48 <vPortValidateInterruptPriority+0x78>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e16:	4b0d      	ldr	r3, [pc, #52]	@ (8007e4c <vPortValidateInterruptPriority+0x7c>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d90b      	bls.n	8007e36 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	603b      	str	r3, [r7, #0]
}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	e7fd      	b.n	8007e32 <vPortValidateInterruptPriority+0x62>
	}
 8007e36:	bf00      	nop
 8007e38:	3714      	adds	r7, #20
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bc80      	pop	{r7}
 8007e3e:	4770      	bx	lr
 8007e40:	e000e3f0 	.word	0xe000e3f0
 8007e44:	20000fd0 	.word	0x20000fd0
 8007e48:	e000ed0c 	.word	0xe000ed0c
 8007e4c:	20000fd4 	.word	0x20000fd4

08007e50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	@ 0x28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e5c:	f7fe fccc 	bl	80067f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e60:	4b5c      	ldr	r3, [pc, #368]	@ (8007fd4 <pvPortMalloc+0x184>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e68:	f000 f924 	bl	80080b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e6c:	4b5a      	ldr	r3, [pc, #360]	@ (8007fd8 <pvPortMalloc+0x188>)
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4013      	ands	r3, r2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f040 8095 	bne.w	8007fa4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01e      	beq.n	8007ebe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e80:	2208      	movs	r2, #8
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4413      	add	r3, r2
 8007e86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f003 0307 	and.w	r3, r3, #7
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d015      	beq.n	8007ebe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f023 0307 	bic.w	r3, r3, #7
 8007e98:	3308      	adds	r3, #8
 8007e9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f003 0307 	and.w	r3, r3, #7
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00b      	beq.n	8007ebe <pvPortMalloc+0x6e>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	617b      	str	r3, [r7, #20]
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop
 8007ebc:	e7fd      	b.n	8007eba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d06f      	beq.n	8007fa4 <pvPortMalloc+0x154>
 8007ec4:	4b45      	ldr	r3, [pc, #276]	@ (8007fdc <pvPortMalloc+0x18c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d86a      	bhi.n	8007fa4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ece:	4b44      	ldr	r3, [pc, #272]	@ (8007fe0 <pvPortMalloc+0x190>)
 8007ed0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ed2:	4b43      	ldr	r3, [pc, #268]	@ (8007fe0 <pvPortMalloc+0x190>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ed8:	e004      	b.n	8007ee4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007edc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d903      	bls.n	8007ef6 <pvPortMalloc+0xa6>
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1f1      	bne.n	8007eda <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ef6:	4b37      	ldr	r3, [pc, #220]	@ (8007fd4 <pvPortMalloc+0x184>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d051      	beq.n	8007fa4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2208      	movs	r2, #8
 8007f06:	4413      	add	r3, r2
 8007f08:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	1ad2      	subs	r2, r2, r3
 8007f1a:	2308      	movs	r3, #8
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d920      	bls.n	8007f64 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4413      	add	r3, r2
 8007f28:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00b      	beq.n	8007f4c <pvPortMalloc+0xfc>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	613b      	str	r3, [r7, #16]
}
 8007f46:	bf00      	nop
 8007f48:	bf00      	nop
 8007f4a:	e7fd      	b.n	8007f48 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	1ad2      	subs	r2, r2, r3
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f5e:	69b8      	ldr	r0, [r7, #24]
 8007f60:	f000 f90a 	bl	8008178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f64:	4b1d      	ldr	r3, [pc, #116]	@ (8007fdc <pvPortMalloc+0x18c>)
 8007f66:	681a      	ldr	r2, [r3, #0]
 8007f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	4a1b      	ldr	r2, [pc, #108]	@ (8007fdc <pvPortMalloc+0x18c>)
 8007f70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f72:	4b1a      	ldr	r3, [pc, #104]	@ (8007fdc <pvPortMalloc+0x18c>)
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	4b1b      	ldr	r3, [pc, #108]	@ (8007fe4 <pvPortMalloc+0x194>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d203      	bcs.n	8007f86 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f7e:	4b17      	ldr	r3, [pc, #92]	@ (8007fdc <pvPortMalloc+0x18c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a18      	ldr	r2, [pc, #96]	@ (8007fe4 <pvPortMalloc+0x194>)
 8007f84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	4b13      	ldr	r3, [pc, #76]	@ (8007fd8 <pvPortMalloc+0x188>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f9a:	4b13      	ldr	r3, [pc, #76]	@ (8007fe8 <pvPortMalloc+0x198>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	4a11      	ldr	r2, [pc, #68]	@ (8007fe8 <pvPortMalloc+0x198>)
 8007fa2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fa4:	f7fe fc36 	bl	8006814 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00b      	beq.n	8007fca <pvPortMalloc+0x17a>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb6:	f383 8811 	msr	BASEPRI, r3
 8007fba:	f3bf 8f6f 	isb	sy
 8007fbe:	f3bf 8f4f 	dsb	sy
 8007fc2:	60fb      	str	r3, [r7, #12]
}
 8007fc4:	bf00      	nop
 8007fc6:	bf00      	nop
 8007fc8:	e7fd      	b.n	8007fc6 <pvPortMalloc+0x176>
	return pvReturn;
 8007fca:	69fb      	ldr	r3, [r7, #28]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3728      	adds	r7, #40	@ 0x28
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20001be0 	.word	0x20001be0
 8007fd8:	20001bf4 	.word	0x20001bf4
 8007fdc:	20001be4 	.word	0x20001be4
 8007fe0:	20001bd8 	.word	0x20001bd8
 8007fe4:	20001be8 	.word	0x20001be8
 8007fe8:	20001bec 	.word	0x20001bec

08007fec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b086      	sub	sp, #24
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d04f      	beq.n	800809e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ffe:	2308      	movs	r3, #8
 8008000:	425b      	negs	r3, r3
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4413      	add	r3, r2
 8008006:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	4b25      	ldr	r3, [pc, #148]	@ (80080a8 <vPortFree+0xbc>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4013      	ands	r3, r2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10b      	bne.n	8008032 <vPortFree+0x46>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	60fb      	str	r3, [r7, #12]
}
 800802c:	bf00      	nop
 800802e:	bf00      	nop
 8008030:	e7fd      	b.n	800802e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00b      	beq.n	8008052 <vPortFree+0x66>
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	60bb      	str	r3, [r7, #8]
}
 800804c:	bf00      	nop
 800804e:	bf00      	nop
 8008050:	e7fd      	b.n	800804e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	4b14      	ldr	r3, [pc, #80]	@ (80080a8 <vPortFree+0xbc>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4013      	ands	r3, r2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d01e      	beq.n	800809e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d11a      	bne.n	800809e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	4b0e      	ldr	r3, [pc, #56]	@ (80080a8 <vPortFree+0xbc>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	43db      	mvns	r3, r3
 8008072:	401a      	ands	r2, r3
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008078:	f7fe fbbe 	bl	80067f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	4b0a      	ldr	r3, [pc, #40]	@ (80080ac <vPortFree+0xc0>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4413      	add	r3, r2
 8008086:	4a09      	ldr	r2, [pc, #36]	@ (80080ac <vPortFree+0xc0>)
 8008088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800808a:	6938      	ldr	r0, [r7, #16]
 800808c:	f000 f874 	bl	8008178 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008090:	4b07      	ldr	r3, [pc, #28]	@ (80080b0 <vPortFree+0xc4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3301      	adds	r3, #1
 8008096:	4a06      	ldr	r2, [pc, #24]	@ (80080b0 <vPortFree+0xc4>)
 8008098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800809a:	f7fe fbbb 	bl	8006814 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800809e:	bf00      	nop
 80080a0:	3718      	adds	r7, #24
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	20001bf4 	.word	0x20001bf4
 80080ac:	20001be4 	.word	0x20001be4
 80080b0:	20001bf0 	.word	0x20001bf0

080080b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80080be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080c0:	4b27      	ldr	r3, [pc, #156]	@ (8008160 <prvHeapInit+0xac>)
 80080c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00c      	beq.n	80080e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3307      	adds	r3, #7
 80080d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0307 	bic.w	r3, r3, #7
 80080da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008160 <prvHeapInit+0xac>)
 80080e4:	4413      	add	r3, r2
 80080e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008164 <prvHeapInit+0xb0>)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080f2:	4b1c      	ldr	r3, [pc, #112]	@ (8008164 <prvHeapInit+0xb0>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	4413      	add	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008100:	2208      	movs	r2, #8
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0307 	bic.w	r3, r3, #7
 800810e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4a15      	ldr	r2, [pc, #84]	@ (8008168 <prvHeapInit+0xb4>)
 8008114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008116:	4b14      	ldr	r3, [pc, #80]	@ (8008168 <prvHeapInit+0xb4>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2200      	movs	r2, #0
 800811c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800811e:	4b12      	ldr	r3, [pc, #72]	@ (8008168 <prvHeapInit+0xb4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008134:	4b0c      	ldr	r3, [pc, #48]	@ (8008168 <prvHeapInit+0xb4>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	4a0a      	ldr	r2, [pc, #40]	@ (800816c <prvHeapInit+0xb8>)
 8008142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	4a09      	ldr	r2, [pc, #36]	@ (8008170 <prvHeapInit+0xbc>)
 800814a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800814c:	4b09      	ldr	r3, [pc, #36]	@ (8008174 <prvHeapInit+0xc0>)
 800814e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008152:	601a      	str	r2, [r3, #0]
}
 8008154:	bf00      	nop
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	20000fd8 	.word	0x20000fd8
 8008164:	20001bd8 	.word	0x20001bd8
 8008168:	20001be0 	.word	0x20001be0
 800816c:	20001be8 	.word	0x20001be8
 8008170:	20001be4 	.word	0x20001be4
 8008174:	20001bf4 	.word	0x20001bf4

08008178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008180:	4b27      	ldr	r3, [pc, #156]	@ (8008220 <prvInsertBlockIntoFreeList+0xa8>)
 8008182:	60fb      	str	r3, [r7, #12]
 8008184:	e002      	b.n	800818c <prvInsertBlockIntoFreeList+0x14>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	429a      	cmp	r2, r3
 8008194:	d8f7      	bhi.n	8008186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	4413      	add	r3, r2
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d108      	bne.n	80081ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	441a      	add	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	441a      	add	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d118      	bne.n	8008200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	4b14      	ldr	r3, [pc, #80]	@ (8008224 <prvInsertBlockIntoFreeList+0xac>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d00d      	beq.n	80081f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	441a      	add	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	e008      	b.n	8008208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008224 <prvInsertBlockIntoFreeList+0xac>)
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	e003      	b.n	8008208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	429a      	cmp	r2, r3
 800820e:	d002      	beq.n	8008216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	bc80      	pop	{r7}
 800821e:	4770      	bx	lr
 8008220:	20001bd8 	.word	0x20001bd8
 8008224:	20001be0 	.word	0x20001be0

08008228 <malloc>:
 8008228:	4b02      	ldr	r3, [pc, #8]	@ (8008234 <malloc+0xc>)
 800822a:	4601      	mov	r1, r0
 800822c:	6818      	ldr	r0, [r3, #0]
 800822e:	f000 b82d 	b.w	800828c <_malloc_r>
 8008232:	bf00      	nop
 8008234:	2000001c 	.word	0x2000001c

08008238 <free>:
 8008238:	4b02      	ldr	r3, [pc, #8]	@ (8008244 <free+0xc>)
 800823a:	4601      	mov	r1, r0
 800823c:	6818      	ldr	r0, [r3, #0]
 800823e:	f000 bba1 	b.w	8008984 <_free_r>
 8008242:	bf00      	nop
 8008244:	2000001c 	.word	0x2000001c

08008248 <sbrk_aligned>:
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	4e0f      	ldr	r6, [pc, #60]	@ (8008288 <sbrk_aligned+0x40>)
 800824c:	460c      	mov	r4, r1
 800824e:	6831      	ldr	r1, [r6, #0]
 8008250:	4605      	mov	r5, r0
 8008252:	b911      	cbnz	r1, 800825a <sbrk_aligned+0x12>
 8008254:	f000 fb38 	bl	80088c8 <_sbrk_r>
 8008258:	6030      	str	r0, [r6, #0]
 800825a:	4621      	mov	r1, r4
 800825c:	4628      	mov	r0, r5
 800825e:	f000 fb33 	bl	80088c8 <_sbrk_r>
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	d103      	bne.n	800826e <sbrk_aligned+0x26>
 8008266:	f04f 34ff 	mov.w	r4, #4294967295
 800826a:	4620      	mov	r0, r4
 800826c:	bd70      	pop	{r4, r5, r6, pc}
 800826e:	1cc4      	adds	r4, r0, #3
 8008270:	f024 0403 	bic.w	r4, r4, #3
 8008274:	42a0      	cmp	r0, r4
 8008276:	d0f8      	beq.n	800826a <sbrk_aligned+0x22>
 8008278:	1a21      	subs	r1, r4, r0
 800827a:	4628      	mov	r0, r5
 800827c:	f000 fb24 	bl	80088c8 <_sbrk_r>
 8008280:	3001      	adds	r0, #1
 8008282:	d1f2      	bne.n	800826a <sbrk_aligned+0x22>
 8008284:	e7ef      	b.n	8008266 <sbrk_aligned+0x1e>
 8008286:	bf00      	nop
 8008288:	20001bf8 	.word	0x20001bf8

0800828c <_malloc_r>:
 800828c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008290:	1ccd      	adds	r5, r1, #3
 8008292:	f025 0503 	bic.w	r5, r5, #3
 8008296:	3508      	adds	r5, #8
 8008298:	2d0c      	cmp	r5, #12
 800829a:	bf38      	it	cc
 800829c:	250c      	movcc	r5, #12
 800829e:	2d00      	cmp	r5, #0
 80082a0:	4606      	mov	r6, r0
 80082a2:	db01      	blt.n	80082a8 <_malloc_r+0x1c>
 80082a4:	42a9      	cmp	r1, r5
 80082a6:	d904      	bls.n	80082b2 <_malloc_r+0x26>
 80082a8:	230c      	movs	r3, #12
 80082aa:	6033      	str	r3, [r6, #0]
 80082ac:	2000      	movs	r0, #0
 80082ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008388 <_malloc_r+0xfc>
 80082b6:	f000 f869 	bl	800838c <__malloc_lock>
 80082ba:	f8d8 3000 	ldr.w	r3, [r8]
 80082be:	461c      	mov	r4, r3
 80082c0:	bb44      	cbnz	r4, 8008314 <_malloc_r+0x88>
 80082c2:	4629      	mov	r1, r5
 80082c4:	4630      	mov	r0, r6
 80082c6:	f7ff ffbf 	bl	8008248 <sbrk_aligned>
 80082ca:	1c43      	adds	r3, r0, #1
 80082cc:	4604      	mov	r4, r0
 80082ce:	d158      	bne.n	8008382 <_malloc_r+0xf6>
 80082d0:	f8d8 4000 	ldr.w	r4, [r8]
 80082d4:	4627      	mov	r7, r4
 80082d6:	2f00      	cmp	r7, #0
 80082d8:	d143      	bne.n	8008362 <_malloc_r+0xd6>
 80082da:	2c00      	cmp	r4, #0
 80082dc:	d04b      	beq.n	8008376 <_malloc_r+0xea>
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	4639      	mov	r1, r7
 80082e2:	4630      	mov	r0, r6
 80082e4:	eb04 0903 	add.w	r9, r4, r3
 80082e8:	f000 faee 	bl	80088c8 <_sbrk_r>
 80082ec:	4581      	cmp	r9, r0
 80082ee:	d142      	bne.n	8008376 <_malloc_r+0xea>
 80082f0:	6821      	ldr	r1, [r4, #0]
 80082f2:	4630      	mov	r0, r6
 80082f4:	1a6d      	subs	r5, r5, r1
 80082f6:	4629      	mov	r1, r5
 80082f8:	f7ff ffa6 	bl	8008248 <sbrk_aligned>
 80082fc:	3001      	adds	r0, #1
 80082fe:	d03a      	beq.n	8008376 <_malloc_r+0xea>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	442b      	add	r3, r5
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	f8d8 3000 	ldr.w	r3, [r8]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	bb62      	cbnz	r2, 8008368 <_malloc_r+0xdc>
 800830e:	f8c8 7000 	str.w	r7, [r8]
 8008312:	e00f      	b.n	8008334 <_malloc_r+0xa8>
 8008314:	6822      	ldr	r2, [r4, #0]
 8008316:	1b52      	subs	r2, r2, r5
 8008318:	d420      	bmi.n	800835c <_malloc_r+0xd0>
 800831a:	2a0b      	cmp	r2, #11
 800831c:	d917      	bls.n	800834e <_malloc_r+0xc2>
 800831e:	1961      	adds	r1, r4, r5
 8008320:	42a3      	cmp	r3, r4
 8008322:	6025      	str	r5, [r4, #0]
 8008324:	bf18      	it	ne
 8008326:	6059      	strne	r1, [r3, #4]
 8008328:	6863      	ldr	r3, [r4, #4]
 800832a:	bf08      	it	eq
 800832c:	f8c8 1000 	streq.w	r1, [r8]
 8008330:	5162      	str	r2, [r4, r5]
 8008332:	604b      	str	r3, [r1, #4]
 8008334:	4630      	mov	r0, r6
 8008336:	f000 f82f 	bl	8008398 <__malloc_unlock>
 800833a:	f104 000b 	add.w	r0, r4, #11
 800833e:	1d23      	adds	r3, r4, #4
 8008340:	f020 0007 	bic.w	r0, r0, #7
 8008344:	1ac2      	subs	r2, r0, r3
 8008346:	bf1c      	itt	ne
 8008348:	1a1b      	subne	r3, r3, r0
 800834a:	50a3      	strne	r3, [r4, r2]
 800834c:	e7af      	b.n	80082ae <_malloc_r+0x22>
 800834e:	6862      	ldr	r2, [r4, #4]
 8008350:	42a3      	cmp	r3, r4
 8008352:	bf0c      	ite	eq
 8008354:	f8c8 2000 	streq.w	r2, [r8]
 8008358:	605a      	strne	r2, [r3, #4]
 800835a:	e7eb      	b.n	8008334 <_malloc_r+0xa8>
 800835c:	4623      	mov	r3, r4
 800835e:	6864      	ldr	r4, [r4, #4]
 8008360:	e7ae      	b.n	80082c0 <_malloc_r+0x34>
 8008362:	463c      	mov	r4, r7
 8008364:	687f      	ldr	r7, [r7, #4]
 8008366:	e7b6      	b.n	80082d6 <_malloc_r+0x4a>
 8008368:	461a      	mov	r2, r3
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	42a3      	cmp	r3, r4
 800836e:	d1fb      	bne.n	8008368 <_malloc_r+0xdc>
 8008370:	2300      	movs	r3, #0
 8008372:	6053      	str	r3, [r2, #4]
 8008374:	e7de      	b.n	8008334 <_malloc_r+0xa8>
 8008376:	230c      	movs	r3, #12
 8008378:	4630      	mov	r0, r6
 800837a:	6033      	str	r3, [r6, #0]
 800837c:	f000 f80c 	bl	8008398 <__malloc_unlock>
 8008380:	e794      	b.n	80082ac <_malloc_r+0x20>
 8008382:	6005      	str	r5, [r0, #0]
 8008384:	e7d6      	b.n	8008334 <_malloc_r+0xa8>
 8008386:	bf00      	nop
 8008388:	20001bfc 	.word	0x20001bfc

0800838c <__malloc_lock>:
 800838c:	4801      	ldr	r0, [pc, #4]	@ (8008394 <__malloc_lock+0x8>)
 800838e:	f000 bae8 	b.w	8008962 <__retarget_lock_acquire_recursive>
 8008392:	bf00      	nop
 8008394:	20001d40 	.word	0x20001d40

08008398 <__malloc_unlock>:
 8008398:	4801      	ldr	r0, [pc, #4]	@ (80083a0 <__malloc_unlock+0x8>)
 800839a:	f000 bae3 	b.w	8008964 <__retarget_lock_release_recursive>
 800839e:	bf00      	nop
 80083a0:	20001d40 	.word	0x20001d40

080083a4 <std>:
 80083a4:	2300      	movs	r3, #0
 80083a6:	b510      	push	{r4, lr}
 80083a8:	4604      	mov	r4, r0
 80083aa:	e9c0 3300 	strd	r3, r3, [r0]
 80083ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083b2:	6083      	str	r3, [r0, #8]
 80083b4:	8181      	strh	r1, [r0, #12]
 80083b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80083b8:	81c2      	strh	r2, [r0, #14]
 80083ba:	6183      	str	r3, [r0, #24]
 80083bc:	4619      	mov	r1, r3
 80083be:	2208      	movs	r2, #8
 80083c0:	305c      	adds	r0, #92	@ 0x5c
 80083c2:	f000 f9e7 	bl	8008794 <memset>
 80083c6:	4b0d      	ldr	r3, [pc, #52]	@ (80083fc <std+0x58>)
 80083c8:	6224      	str	r4, [r4, #32]
 80083ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80083cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008400 <std+0x5c>)
 80083ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008404 <std+0x60>)
 80083d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008408 <std+0x64>)
 80083d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80083d8:	4b0c      	ldr	r3, [pc, #48]	@ (800840c <std+0x68>)
 80083da:	429c      	cmp	r4, r3
 80083dc:	d006      	beq.n	80083ec <std+0x48>
 80083de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083e2:	4294      	cmp	r4, r2
 80083e4:	d002      	beq.n	80083ec <std+0x48>
 80083e6:	33d0      	adds	r3, #208	@ 0xd0
 80083e8:	429c      	cmp	r4, r3
 80083ea:	d105      	bne.n	80083f8 <std+0x54>
 80083ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083f4:	f000 bab4 	b.w	8008960 <__retarget_lock_init_recursive>
 80083f8:	bd10      	pop	{r4, pc}
 80083fa:	bf00      	nop
 80083fc:	080085e5 	.word	0x080085e5
 8008400:	08008607 	.word	0x08008607
 8008404:	0800863f 	.word	0x0800863f
 8008408:	08008663 	.word	0x08008663
 800840c:	20001c00 	.word	0x20001c00

08008410 <stdio_exit_handler>:
 8008410:	4a02      	ldr	r2, [pc, #8]	@ (800841c <stdio_exit_handler+0xc>)
 8008412:	4903      	ldr	r1, [pc, #12]	@ (8008420 <stdio_exit_handler+0x10>)
 8008414:	4803      	ldr	r0, [pc, #12]	@ (8008424 <stdio_exit_handler+0x14>)
 8008416:	f000 b869 	b.w	80084ec <_fwalk_sglue>
 800841a:	bf00      	nop
 800841c:	20000010 	.word	0x20000010
 8008420:	08008b15 	.word	0x08008b15
 8008424:	20000020 	.word	0x20000020

08008428 <cleanup_stdio>:
 8008428:	6841      	ldr	r1, [r0, #4]
 800842a:	4b0c      	ldr	r3, [pc, #48]	@ (800845c <cleanup_stdio+0x34>)
 800842c:	b510      	push	{r4, lr}
 800842e:	4299      	cmp	r1, r3
 8008430:	4604      	mov	r4, r0
 8008432:	d001      	beq.n	8008438 <cleanup_stdio+0x10>
 8008434:	f000 fb6e 	bl	8008b14 <_fflush_r>
 8008438:	68a1      	ldr	r1, [r4, #8]
 800843a:	4b09      	ldr	r3, [pc, #36]	@ (8008460 <cleanup_stdio+0x38>)
 800843c:	4299      	cmp	r1, r3
 800843e:	d002      	beq.n	8008446 <cleanup_stdio+0x1e>
 8008440:	4620      	mov	r0, r4
 8008442:	f000 fb67 	bl	8008b14 <_fflush_r>
 8008446:	68e1      	ldr	r1, [r4, #12]
 8008448:	4b06      	ldr	r3, [pc, #24]	@ (8008464 <cleanup_stdio+0x3c>)
 800844a:	4299      	cmp	r1, r3
 800844c:	d004      	beq.n	8008458 <cleanup_stdio+0x30>
 800844e:	4620      	mov	r0, r4
 8008450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008454:	f000 bb5e 	b.w	8008b14 <_fflush_r>
 8008458:	bd10      	pop	{r4, pc}
 800845a:	bf00      	nop
 800845c:	20001c00 	.word	0x20001c00
 8008460:	20001c68 	.word	0x20001c68
 8008464:	20001cd0 	.word	0x20001cd0

08008468 <global_stdio_init.part.0>:
 8008468:	b510      	push	{r4, lr}
 800846a:	4b0b      	ldr	r3, [pc, #44]	@ (8008498 <global_stdio_init.part.0+0x30>)
 800846c:	4c0b      	ldr	r4, [pc, #44]	@ (800849c <global_stdio_init.part.0+0x34>)
 800846e:	4a0c      	ldr	r2, [pc, #48]	@ (80084a0 <global_stdio_init.part.0+0x38>)
 8008470:	4620      	mov	r0, r4
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	2104      	movs	r1, #4
 8008476:	2200      	movs	r2, #0
 8008478:	f7ff ff94 	bl	80083a4 <std>
 800847c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008480:	2201      	movs	r2, #1
 8008482:	2109      	movs	r1, #9
 8008484:	f7ff ff8e 	bl	80083a4 <std>
 8008488:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800848c:	2202      	movs	r2, #2
 800848e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008492:	2112      	movs	r1, #18
 8008494:	f7ff bf86 	b.w	80083a4 <std>
 8008498:	20001d38 	.word	0x20001d38
 800849c:	20001c00 	.word	0x20001c00
 80084a0:	08008411 	.word	0x08008411

080084a4 <__sfp_lock_acquire>:
 80084a4:	4801      	ldr	r0, [pc, #4]	@ (80084ac <__sfp_lock_acquire+0x8>)
 80084a6:	f000 ba5c 	b.w	8008962 <__retarget_lock_acquire_recursive>
 80084aa:	bf00      	nop
 80084ac:	20001d41 	.word	0x20001d41

080084b0 <__sfp_lock_release>:
 80084b0:	4801      	ldr	r0, [pc, #4]	@ (80084b8 <__sfp_lock_release+0x8>)
 80084b2:	f000 ba57 	b.w	8008964 <__retarget_lock_release_recursive>
 80084b6:	bf00      	nop
 80084b8:	20001d41 	.word	0x20001d41

080084bc <__sinit>:
 80084bc:	b510      	push	{r4, lr}
 80084be:	4604      	mov	r4, r0
 80084c0:	f7ff fff0 	bl	80084a4 <__sfp_lock_acquire>
 80084c4:	6a23      	ldr	r3, [r4, #32]
 80084c6:	b11b      	cbz	r3, 80084d0 <__sinit+0x14>
 80084c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084cc:	f7ff bff0 	b.w	80084b0 <__sfp_lock_release>
 80084d0:	4b04      	ldr	r3, [pc, #16]	@ (80084e4 <__sinit+0x28>)
 80084d2:	6223      	str	r3, [r4, #32]
 80084d4:	4b04      	ldr	r3, [pc, #16]	@ (80084e8 <__sinit+0x2c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1f5      	bne.n	80084c8 <__sinit+0xc>
 80084dc:	f7ff ffc4 	bl	8008468 <global_stdio_init.part.0>
 80084e0:	e7f2      	b.n	80084c8 <__sinit+0xc>
 80084e2:	bf00      	nop
 80084e4:	08008429 	.word	0x08008429
 80084e8:	20001d38 	.word	0x20001d38

080084ec <_fwalk_sglue>:
 80084ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f0:	4607      	mov	r7, r0
 80084f2:	4688      	mov	r8, r1
 80084f4:	4614      	mov	r4, r2
 80084f6:	2600      	movs	r6, #0
 80084f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084fc:	f1b9 0901 	subs.w	r9, r9, #1
 8008500:	d505      	bpl.n	800850e <_fwalk_sglue+0x22>
 8008502:	6824      	ldr	r4, [r4, #0]
 8008504:	2c00      	cmp	r4, #0
 8008506:	d1f7      	bne.n	80084f8 <_fwalk_sglue+0xc>
 8008508:	4630      	mov	r0, r6
 800850a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800850e:	89ab      	ldrh	r3, [r5, #12]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d907      	bls.n	8008524 <_fwalk_sglue+0x38>
 8008514:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008518:	3301      	adds	r3, #1
 800851a:	d003      	beq.n	8008524 <_fwalk_sglue+0x38>
 800851c:	4629      	mov	r1, r5
 800851e:	4638      	mov	r0, r7
 8008520:	47c0      	blx	r8
 8008522:	4306      	orrs	r6, r0
 8008524:	3568      	adds	r5, #104	@ 0x68
 8008526:	e7e9      	b.n	80084fc <_fwalk_sglue+0x10>

08008528 <_puts_r>:
 8008528:	6a03      	ldr	r3, [r0, #32]
 800852a:	b570      	push	{r4, r5, r6, lr}
 800852c:	4605      	mov	r5, r0
 800852e:	460e      	mov	r6, r1
 8008530:	6884      	ldr	r4, [r0, #8]
 8008532:	b90b      	cbnz	r3, 8008538 <_puts_r+0x10>
 8008534:	f7ff ffc2 	bl	80084bc <__sinit>
 8008538:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800853a:	07db      	lsls	r3, r3, #31
 800853c:	d405      	bmi.n	800854a <_puts_r+0x22>
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	0598      	lsls	r0, r3, #22
 8008542:	d402      	bmi.n	800854a <_puts_r+0x22>
 8008544:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008546:	f000 fa0c 	bl	8008962 <__retarget_lock_acquire_recursive>
 800854a:	89a3      	ldrh	r3, [r4, #12]
 800854c:	0719      	lsls	r1, r3, #28
 800854e:	d502      	bpl.n	8008556 <_puts_r+0x2e>
 8008550:	6923      	ldr	r3, [r4, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d135      	bne.n	80085c2 <_puts_r+0x9a>
 8008556:	4621      	mov	r1, r4
 8008558:	4628      	mov	r0, r5
 800855a:	f000 f8c5 	bl	80086e8 <__swsetup_r>
 800855e:	b380      	cbz	r0, 80085c2 <_puts_r+0x9a>
 8008560:	f04f 35ff 	mov.w	r5, #4294967295
 8008564:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008566:	07da      	lsls	r2, r3, #31
 8008568:	d405      	bmi.n	8008576 <_puts_r+0x4e>
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	059b      	lsls	r3, r3, #22
 800856e:	d402      	bmi.n	8008576 <_puts_r+0x4e>
 8008570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008572:	f000 f9f7 	bl	8008964 <__retarget_lock_release_recursive>
 8008576:	4628      	mov	r0, r5
 8008578:	bd70      	pop	{r4, r5, r6, pc}
 800857a:	2b00      	cmp	r3, #0
 800857c:	da04      	bge.n	8008588 <_puts_r+0x60>
 800857e:	69a2      	ldr	r2, [r4, #24]
 8008580:	429a      	cmp	r2, r3
 8008582:	dc17      	bgt.n	80085b4 <_puts_r+0x8c>
 8008584:	290a      	cmp	r1, #10
 8008586:	d015      	beq.n	80085b4 <_puts_r+0x8c>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	6022      	str	r2, [r4, #0]
 800858e:	7019      	strb	r1, [r3, #0]
 8008590:	68a3      	ldr	r3, [r4, #8]
 8008592:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008596:	3b01      	subs	r3, #1
 8008598:	60a3      	str	r3, [r4, #8]
 800859a:	2900      	cmp	r1, #0
 800859c:	d1ed      	bne.n	800857a <_puts_r+0x52>
 800859e:	2b00      	cmp	r3, #0
 80085a0:	da11      	bge.n	80085c6 <_puts_r+0x9e>
 80085a2:	4622      	mov	r2, r4
 80085a4:	210a      	movs	r1, #10
 80085a6:	4628      	mov	r0, r5
 80085a8:	f000 f85f 	bl	800866a <__swbuf_r>
 80085ac:	3001      	adds	r0, #1
 80085ae:	d0d7      	beq.n	8008560 <_puts_r+0x38>
 80085b0:	250a      	movs	r5, #10
 80085b2:	e7d7      	b.n	8008564 <_puts_r+0x3c>
 80085b4:	4622      	mov	r2, r4
 80085b6:	4628      	mov	r0, r5
 80085b8:	f000 f857 	bl	800866a <__swbuf_r>
 80085bc:	3001      	adds	r0, #1
 80085be:	d1e7      	bne.n	8008590 <_puts_r+0x68>
 80085c0:	e7ce      	b.n	8008560 <_puts_r+0x38>
 80085c2:	3e01      	subs	r6, #1
 80085c4:	e7e4      	b.n	8008590 <_puts_r+0x68>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	1c5a      	adds	r2, r3, #1
 80085ca:	6022      	str	r2, [r4, #0]
 80085cc:	220a      	movs	r2, #10
 80085ce:	701a      	strb	r2, [r3, #0]
 80085d0:	e7ee      	b.n	80085b0 <_puts_r+0x88>
	...

080085d4 <puts>:
 80085d4:	4b02      	ldr	r3, [pc, #8]	@ (80085e0 <puts+0xc>)
 80085d6:	4601      	mov	r1, r0
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	f7ff bfa5 	b.w	8008528 <_puts_r>
 80085de:	bf00      	nop
 80085e0:	2000001c 	.word	0x2000001c

080085e4 <__sread>:
 80085e4:	b510      	push	{r4, lr}
 80085e6:	460c      	mov	r4, r1
 80085e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ec:	f000 f95a 	bl	80088a4 <_read_r>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	bfab      	itete	ge
 80085f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085f6:	89a3      	ldrhlt	r3, [r4, #12]
 80085f8:	181b      	addge	r3, r3, r0
 80085fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085fe:	bfac      	ite	ge
 8008600:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008602:	81a3      	strhlt	r3, [r4, #12]
 8008604:	bd10      	pop	{r4, pc}

08008606 <__swrite>:
 8008606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860a:	461f      	mov	r7, r3
 800860c:	898b      	ldrh	r3, [r1, #12]
 800860e:	4605      	mov	r5, r0
 8008610:	05db      	lsls	r3, r3, #23
 8008612:	460c      	mov	r4, r1
 8008614:	4616      	mov	r6, r2
 8008616:	d505      	bpl.n	8008624 <__swrite+0x1e>
 8008618:	2302      	movs	r3, #2
 800861a:	2200      	movs	r2, #0
 800861c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008620:	f000 f92e 	bl	8008880 <_lseek_r>
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	4632      	mov	r2, r6
 8008628:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800862c:	81a3      	strh	r3, [r4, #12]
 800862e:	4628      	mov	r0, r5
 8008630:	463b      	mov	r3, r7
 8008632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800863a:	f000 b955 	b.w	80088e8 <_write_r>

0800863e <__sseek>:
 800863e:	b510      	push	{r4, lr}
 8008640:	460c      	mov	r4, r1
 8008642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008646:	f000 f91b 	bl	8008880 <_lseek_r>
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	bf15      	itete	ne
 8008650:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008652:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008656:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800865a:	81a3      	strheq	r3, [r4, #12]
 800865c:	bf18      	it	ne
 800865e:	81a3      	strhne	r3, [r4, #12]
 8008660:	bd10      	pop	{r4, pc}

08008662 <__sclose>:
 8008662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008666:	f000 b89d 	b.w	80087a4 <_close_r>

0800866a <__swbuf_r>:
 800866a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866c:	460e      	mov	r6, r1
 800866e:	4614      	mov	r4, r2
 8008670:	4605      	mov	r5, r0
 8008672:	b118      	cbz	r0, 800867c <__swbuf_r+0x12>
 8008674:	6a03      	ldr	r3, [r0, #32]
 8008676:	b90b      	cbnz	r3, 800867c <__swbuf_r+0x12>
 8008678:	f7ff ff20 	bl	80084bc <__sinit>
 800867c:	69a3      	ldr	r3, [r4, #24]
 800867e:	60a3      	str	r3, [r4, #8]
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	071a      	lsls	r2, r3, #28
 8008684:	d501      	bpl.n	800868a <__swbuf_r+0x20>
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	b943      	cbnz	r3, 800869c <__swbuf_r+0x32>
 800868a:	4621      	mov	r1, r4
 800868c:	4628      	mov	r0, r5
 800868e:	f000 f82b 	bl	80086e8 <__swsetup_r>
 8008692:	b118      	cbz	r0, 800869c <__swbuf_r+0x32>
 8008694:	f04f 37ff 	mov.w	r7, #4294967295
 8008698:	4638      	mov	r0, r7
 800869a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	6922      	ldr	r2, [r4, #16]
 80086a0:	b2f6      	uxtb	r6, r6
 80086a2:	1a98      	subs	r0, r3, r2
 80086a4:	6963      	ldr	r3, [r4, #20]
 80086a6:	4637      	mov	r7, r6
 80086a8:	4283      	cmp	r3, r0
 80086aa:	dc05      	bgt.n	80086b8 <__swbuf_r+0x4e>
 80086ac:	4621      	mov	r1, r4
 80086ae:	4628      	mov	r0, r5
 80086b0:	f000 fa30 	bl	8008b14 <_fflush_r>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d1ed      	bne.n	8008694 <__swbuf_r+0x2a>
 80086b8:	68a3      	ldr	r3, [r4, #8]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	60a3      	str	r3, [r4, #8]
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	1c5a      	adds	r2, r3, #1
 80086c2:	6022      	str	r2, [r4, #0]
 80086c4:	701e      	strb	r6, [r3, #0]
 80086c6:	6962      	ldr	r2, [r4, #20]
 80086c8:	1c43      	adds	r3, r0, #1
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d004      	beq.n	80086d8 <__swbuf_r+0x6e>
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	07db      	lsls	r3, r3, #31
 80086d2:	d5e1      	bpl.n	8008698 <__swbuf_r+0x2e>
 80086d4:	2e0a      	cmp	r6, #10
 80086d6:	d1df      	bne.n	8008698 <__swbuf_r+0x2e>
 80086d8:	4621      	mov	r1, r4
 80086da:	4628      	mov	r0, r5
 80086dc:	f000 fa1a 	bl	8008b14 <_fflush_r>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	d0d9      	beq.n	8008698 <__swbuf_r+0x2e>
 80086e4:	e7d6      	b.n	8008694 <__swbuf_r+0x2a>
	...

080086e8 <__swsetup_r>:
 80086e8:	b538      	push	{r3, r4, r5, lr}
 80086ea:	4b29      	ldr	r3, [pc, #164]	@ (8008790 <__swsetup_r+0xa8>)
 80086ec:	4605      	mov	r5, r0
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	460c      	mov	r4, r1
 80086f2:	b118      	cbz	r0, 80086fc <__swsetup_r+0x14>
 80086f4:	6a03      	ldr	r3, [r0, #32]
 80086f6:	b90b      	cbnz	r3, 80086fc <__swsetup_r+0x14>
 80086f8:	f7ff fee0 	bl	80084bc <__sinit>
 80086fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008700:	0719      	lsls	r1, r3, #28
 8008702:	d422      	bmi.n	800874a <__swsetup_r+0x62>
 8008704:	06da      	lsls	r2, r3, #27
 8008706:	d407      	bmi.n	8008718 <__swsetup_r+0x30>
 8008708:	2209      	movs	r2, #9
 800870a:	602a      	str	r2, [r5, #0]
 800870c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	81a3      	strh	r3, [r4, #12]
 8008716:	e033      	b.n	8008780 <__swsetup_r+0x98>
 8008718:	0758      	lsls	r0, r3, #29
 800871a:	d512      	bpl.n	8008742 <__swsetup_r+0x5a>
 800871c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800871e:	b141      	cbz	r1, 8008732 <__swsetup_r+0x4a>
 8008720:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008724:	4299      	cmp	r1, r3
 8008726:	d002      	beq.n	800872e <__swsetup_r+0x46>
 8008728:	4628      	mov	r0, r5
 800872a:	f000 f92b 	bl	8008984 <_free_r>
 800872e:	2300      	movs	r3, #0
 8008730:	6363      	str	r3, [r4, #52]	@ 0x34
 8008732:	89a3      	ldrh	r3, [r4, #12]
 8008734:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008738:	81a3      	strh	r3, [r4, #12]
 800873a:	2300      	movs	r3, #0
 800873c:	6063      	str	r3, [r4, #4]
 800873e:	6923      	ldr	r3, [r4, #16]
 8008740:	6023      	str	r3, [r4, #0]
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	f043 0308 	orr.w	r3, r3, #8
 8008748:	81a3      	strh	r3, [r4, #12]
 800874a:	6923      	ldr	r3, [r4, #16]
 800874c:	b94b      	cbnz	r3, 8008762 <__swsetup_r+0x7a>
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008758:	d003      	beq.n	8008762 <__swsetup_r+0x7a>
 800875a:	4621      	mov	r1, r4
 800875c:	4628      	mov	r0, r5
 800875e:	f000 fa26 	bl	8008bae <__smakebuf_r>
 8008762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008766:	f013 0201 	ands.w	r2, r3, #1
 800876a:	d00a      	beq.n	8008782 <__swsetup_r+0x9a>
 800876c:	2200      	movs	r2, #0
 800876e:	60a2      	str	r2, [r4, #8]
 8008770:	6962      	ldr	r2, [r4, #20]
 8008772:	4252      	negs	r2, r2
 8008774:	61a2      	str	r2, [r4, #24]
 8008776:	6922      	ldr	r2, [r4, #16]
 8008778:	b942      	cbnz	r2, 800878c <__swsetup_r+0xa4>
 800877a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800877e:	d1c5      	bne.n	800870c <__swsetup_r+0x24>
 8008780:	bd38      	pop	{r3, r4, r5, pc}
 8008782:	0799      	lsls	r1, r3, #30
 8008784:	bf58      	it	pl
 8008786:	6962      	ldrpl	r2, [r4, #20]
 8008788:	60a2      	str	r2, [r4, #8]
 800878a:	e7f4      	b.n	8008776 <__swsetup_r+0x8e>
 800878c:	2000      	movs	r0, #0
 800878e:	e7f7      	b.n	8008780 <__swsetup_r+0x98>
 8008790:	2000001c 	.word	0x2000001c

08008794 <memset>:
 8008794:	4603      	mov	r3, r0
 8008796:	4402      	add	r2, r0
 8008798:	4293      	cmp	r3, r2
 800879a:	d100      	bne.n	800879e <memset+0xa>
 800879c:	4770      	bx	lr
 800879e:	f803 1b01 	strb.w	r1, [r3], #1
 80087a2:	e7f9      	b.n	8008798 <memset+0x4>

080087a4 <_close_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	2300      	movs	r3, #0
 80087a8:	4d05      	ldr	r5, [pc, #20]	@ (80087c0 <_close_r+0x1c>)
 80087aa:	4604      	mov	r4, r0
 80087ac:	4608      	mov	r0, r1
 80087ae:	602b      	str	r3, [r5, #0]
 80087b0:	f7f8 fae7 	bl	8000d82 <_close>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	d102      	bne.n	80087be <_close_r+0x1a>
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	b103      	cbz	r3, 80087be <_close_r+0x1a>
 80087bc:	6023      	str	r3, [r4, #0]
 80087be:	bd38      	pop	{r3, r4, r5, pc}
 80087c0:	20001d3c 	.word	0x20001d3c

080087c4 <_reclaim_reent>:
 80087c4:	4b2d      	ldr	r3, [pc, #180]	@ (800887c <_reclaim_reent+0xb8>)
 80087c6:	b570      	push	{r4, r5, r6, lr}
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4604      	mov	r4, r0
 80087cc:	4283      	cmp	r3, r0
 80087ce:	d053      	beq.n	8008878 <_reclaim_reent+0xb4>
 80087d0:	69c3      	ldr	r3, [r0, #28]
 80087d2:	b31b      	cbz	r3, 800881c <_reclaim_reent+0x58>
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	b163      	cbz	r3, 80087f2 <_reclaim_reent+0x2e>
 80087d8:	2500      	movs	r5, #0
 80087da:	69e3      	ldr	r3, [r4, #28]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	5959      	ldr	r1, [r3, r5]
 80087e0:	b9b1      	cbnz	r1, 8008810 <_reclaim_reent+0x4c>
 80087e2:	3504      	adds	r5, #4
 80087e4:	2d80      	cmp	r5, #128	@ 0x80
 80087e6:	d1f8      	bne.n	80087da <_reclaim_reent+0x16>
 80087e8:	69e3      	ldr	r3, [r4, #28]
 80087ea:	4620      	mov	r0, r4
 80087ec:	68d9      	ldr	r1, [r3, #12]
 80087ee:	f000 f8c9 	bl	8008984 <_free_r>
 80087f2:	69e3      	ldr	r3, [r4, #28]
 80087f4:	6819      	ldr	r1, [r3, #0]
 80087f6:	b111      	cbz	r1, 80087fe <_reclaim_reent+0x3a>
 80087f8:	4620      	mov	r0, r4
 80087fa:	f000 f8c3 	bl	8008984 <_free_r>
 80087fe:	69e3      	ldr	r3, [r4, #28]
 8008800:	689d      	ldr	r5, [r3, #8]
 8008802:	b15d      	cbz	r5, 800881c <_reclaim_reent+0x58>
 8008804:	4629      	mov	r1, r5
 8008806:	4620      	mov	r0, r4
 8008808:	682d      	ldr	r5, [r5, #0]
 800880a:	f000 f8bb 	bl	8008984 <_free_r>
 800880e:	e7f8      	b.n	8008802 <_reclaim_reent+0x3e>
 8008810:	680e      	ldr	r6, [r1, #0]
 8008812:	4620      	mov	r0, r4
 8008814:	f000 f8b6 	bl	8008984 <_free_r>
 8008818:	4631      	mov	r1, r6
 800881a:	e7e1      	b.n	80087e0 <_reclaim_reent+0x1c>
 800881c:	6961      	ldr	r1, [r4, #20]
 800881e:	b111      	cbz	r1, 8008826 <_reclaim_reent+0x62>
 8008820:	4620      	mov	r0, r4
 8008822:	f000 f8af 	bl	8008984 <_free_r>
 8008826:	69e1      	ldr	r1, [r4, #28]
 8008828:	b111      	cbz	r1, 8008830 <_reclaim_reent+0x6c>
 800882a:	4620      	mov	r0, r4
 800882c:	f000 f8aa 	bl	8008984 <_free_r>
 8008830:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008832:	b111      	cbz	r1, 800883a <_reclaim_reent+0x76>
 8008834:	4620      	mov	r0, r4
 8008836:	f000 f8a5 	bl	8008984 <_free_r>
 800883a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800883c:	b111      	cbz	r1, 8008844 <_reclaim_reent+0x80>
 800883e:	4620      	mov	r0, r4
 8008840:	f000 f8a0 	bl	8008984 <_free_r>
 8008844:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008846:	b111      	cbz	r1, 800884e <_reclaim_reent+0x8a>
 8008848:	4620      	mov	r0, r4
 800884a:	f000 f89b 	bl	8008984 <_free_r>
 800884e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008850:	b111      	cbz	r1, 8008858 <_reclaim_reent+0x94>
 8008852:	4620      	mov	r0, r4
 8008854:	f000 f896 	bl	8008984 <_free_r>
 8008858:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800885a:	b111      	cbz	r1, 8008862 <_reclaim_reent+0x9e>
 800885c:	4620      	mov	r0, r4
 800885e:	f000 f891 	bl	8008984 <_free_r>
 8008862:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008864:	b111      	cbz	r1, 800886c <_reclaim_reent+0xa8>
 8008866:	4620      	mov	r0, r4
 8008868:	f000 f88c 	bl	8008984 <_free_r>
 800886c:	6a23      	ldr	r3, [r4, #32]
 800886e:	b11b      	cbz	r3, 8008878 <_reclaim_reent+0xb4>
 8008870:	4620      	mov	r0, r4
 8008872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008876:	4718      	bx	r3
 8008878:	bd70      	pop	{r4, r5, r6, pc}
 800887a:	bf00      	nop
 800887c:	2000001c 	.word	0x2000001c

08008880 <_lseek_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	4611      	mov	r1, r2
 8008888:	2200      	movs	r2, #0
 800888a:	4d05      	ldr	r5, [pc, #20]	@ (80088a0 <_lseek_r+0x20>)
 800888c:	602a      	str	r2, [r5, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	f7f8 fa9b 	bl	8000dca <_lseek>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_lseek_r+0x1e>
 8008898:	682b      	ldr	r3, [r5, #0]
 800889a:	b103      	cbz	r3, 800889e <_lseek_r+0x1e>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	20001d3c 	.word	0x20001d3c

080088a4 <_read_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4604      	mov	r4, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	4611      	mov	r1, r2
 80088ac:	2200      	movs	r2, #0
 80088ae:	4d05      	ldr	r5, [pc, #20]	@ (80088c4 <_read_r+0x20>)
 80088b0:	602a      	str	r2, [r5, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	f7f8 fa2c 	bl	8000d10 <_read>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d102      	bne.n	80088c2 <_read_r+0x1e>
 80088bc:	682b      	ldr	r3, [r5, #0]
 80088be:	b103      	cbz	r3, 80088c2 <_read_r+0x1e>
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	bd38      	pop	{r3, r4, r5, pc}
 80088c4:	20001d3c 	.word	0x20001d3c

080088c8 <_sbrk_r>:
 80088c8:	b538      	push	{r3, r4, r5, lr}
 80088ca:	2300      	movs	r3, #0
 80088cc:	4d05      	ldr	r5, [pc, #20]	@ (80088e4 <_sbrk_r+0x1c>)
 80088ce:	4604      	mov	r4, r0
 80088d0:	4608      	mov	r0, r1
 80088d2:	602b      	str	r3, [r5, #0]
 80088d4:	f7f8 fa86 	bl	8000de4 <_sbrk>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	d102      	bne.n	80088e2 <_sbrk_r+0x1a>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	b103      	cbz	r3, 80088e2 <_sbrk_r+0x1a>
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	20001d3c 	.word	0x20001d3c

080088e8 <_write_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4604      	mov	r4, r0
 80088ec:	4608      	mov	r0, r1
 80088ee:	4611      	mov	r1, r2
 80088f0:	2200      	movs	r2, #0
 80088f2:	4d05      	ldr	r5, [pc, #20]	@ (8008908 <_write_r+0x20>)
 80088f4:	602a      	str	r2, [r5, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	f7f8 fa27 	bl	8000d4a <_write>
 80088fc:	1c43      	adds	r3, r0, #1
 80088fe:	d102      	bne.n	8008906 <_write_r+0x1e>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	b103      	cbz	r3, 8008906 <_write_r+0x1e>
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	20001d3c 	.word	0x20001d3c

0800890c <__errno>:
 800890c:	4b01      	ldr	r3, [pc, #4]	@ (8008914 <__errno+0x8>)
 800890e:	6818      	ldr	r0, [r3, #0]
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	2000001c 	.word	0x2000001c

08008918 <__libc_init_array>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	2600      	movs	r6, #0
 800891c:	4d0c      	ldr	r5, [pc, #48]	@ (8008950 <__libc_init_array+0x38>)
 800891e:	4c0d      	ldr	r4, [pc, #52]	@ (8008954 <__libc_init_array+0x3c>)
 8008920:	1b64      	subs	r4, r4, r5
 8008922:	10a4      	asrs	r4, r4, #2
 8008924:	42a6      	cmp	r6, r4
 8008926:	d109      	bne.n	800893c <__libc_init_array+0x24>
 8008928:	f000 f9a0 	bl	8008c6c <_init>
 800892c:	2600      	movs	r6, #0
 800892e:	4d0a      	ldr	r5, [pc, #40]	@ (8008958 <__libc_init_array+0x40>)
 8008930:	4c0a      	ldr	r4, [pc, #40]	@ (800895c <__libc_init_array+0x44>)
 8008932:	1b64      	subs	r4, r4, r5
 8008934:	10a4      	asrs	r4, r4, #2
 8008936:	42a6      	cmp	r6, r4
 8008938:	d105      	bne.n	8008946 <__libc_init_array+0x2e>
 800893a:	bd70      	pop	{r4, r5, r6, pc}
 800893c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008940:	4798      	blx	r3
 8008942:	3601      	adds	r6, #1
 8008944:	e7ee      	b.n	8008924 <__libc_init_array+0xc>
 8008946:	f855 3b04 	ldr.w	r3, [r5], #4
 800894a:	4798      	blx	r3
 800894c:	3601      	adds	r6, #1
 800894e:	e7f2      	b.n	8008936 <__libc_init_array+0x1e>
 8008950:	08008db4 	.word	0x08008db4
 8008954:	08008db4 	.word	0x08008db4
 8008958:	08008db4 	.word	0x08008db4
 800895c:	08008db8 	.word	0x08008db8

08008960 <__retarget_lock_init_recursive>:
 8008960:	4770      	bx	lr

08008962 <__retarget_lock_acquire_recursive>:
 8008962:	4770      	bx	lr

08008964 <__retarget_lock_release_recursive>:
 8008964:	4770      	bx	lr

08008966 <memcpy>:
 8008966:	440a      	add	r2, r1
 8008968:	4291      	cmp	r1, r2
 800896a:	f100 33ff 	add.w	r3, r0, #4294967295
 800896e:	d100      	bne.n	8008972 <memcpy+0xc>
 8008970:	4770      	bx	lr
 8008972:	b510      	push	{r4, lr}
 8008974:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008978:	4291      	cmp	r1, r2
 800897a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800897e:	d1f9      	bne.n	8008974 <memcpy+0xe>
 8008980:	bd10      	pop	{r4, pc}
	...

08008984 <_free_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4605      	mov	r5, r0
 8008988:	2900      	cmp	r1, #0
 800898a:	d040      	beq.n	8008a0e <_free_r+0x8a>
 800898c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008990:	1f0c      	subs	r4, r1, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	bfb8      	it	lt
 8008996:	18e4      	addlt	r4, r4, r3
 8008998:	f7ff fcf8 	bl	800838c <__malloc_lock>
 800899c:	4a1c      	ldr	r2, [pc, #112]	@ (8008a10 <_free_r+0x8c>)
 800899e:	6813      	ldr	r3, [r2, #0]
 80089a0:	b933      	cbnz	r3, 80089b0 <_free_r+0x2c>
 80089a2:	6063      	str	r3, [r4, #4]
 80089a4:	6014      	str	r4, [r2, #0]
 80089a6:	4628      	mov	r0, r5
 80089a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ac:	f7ff bcf4 	b.w	8008398 <__malloc_unlock>
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	d908      	bls.n	80089c6 <_free_r+0x42>
 80089b4:	6820      	ldr	r0, [r4, #0]
 80089b6:	1821      	adds	r1, r4, r0
 80089b8:	428b      	cmp	r3, r1
 80089ba:	bf01      	itttt	eq
 80089bc:	6819      	ldreq	r1, [r3, #0]
 80089be:	685b      	ldreq	r3, [r3, #4]
 80089c0:	1809      	addeq	r1, r1, r0
 80089c2:	6021      	streq	r1, [r4, #0]
 80089c4:	e7ed      	b.n	80089a2 <_free_r+0x1e>
 80089c6:	461a      	mov	r2, r3
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	b10b      	cbz	r3, 80089d0 <_free_r+0x4c>
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d9fa      	bls.n	80089c6 <_free_r+0x42>
 80089d0:	6811      	ldr	r1, [r2, #0]
 80089d2:	1850      	adds	r0, r2, r1
 80089d4:	42a0      	cmp	r0, r4
 80089d6:	d10b      	bne.n	80089f0 <_free_r+0x6c>
 80089d8:	6820      	ldr	r0, [r4, #0]
 80089da:	4401      	add	r1, r0
 80089dc:	1850      	adds	r0, r2, r1
 80089de:	4283      	cmp	r3, r0
 80089e0:	6011      	str	r1, [r2, #0]
 80089e2:	d1e0      	bne.n	80089a6 <_free_r+0x22>
 80089e4:	6818      	ldr	r0, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	4408      	add	r0, r1
 80089ea:	6010      	str	r0, [r2, #0]
 80089ec:	6053      	str	r3, [r2, #4]
 80089ee:	e7da      	b.n	80089a6 <_free_r+0x22>
 80089f0:	d902      	bls.n	80089f8 <_free_r+0x74>
 80089f2:	230c      	movs	r3, #12
 80089f4:	602b      	str	r3, [r5, #0]
 80089f6:	e7d6      	b.n	80089a6 <_free_r+0x22>
 80089f8:	6820      	ldr	r0, [r4, #0]
 80089fa:	1821      	adds	r1, r4, r0
 80089fc:	428b      	cmp	r3, r1
 80089fe:	bf01      	itttt	eq
 8008a00:	6819      	ldreq	r1, [r3, #0]
 8008a02:	685b      	ldreq	r3, [r3, #4]
 8008a04:	1809      	addeq	r1, r1, r0
 8008a06:	6021      	streq	r1, [r4, #0]
 8008a08:	6063      	str	r3, [r4, #4]
 8008a0a:	6054      	str	r4, [r2, #4]
 8008a0c:	e7cb      	b.n	80089a6 <_free_r+0x22>
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	20001bfc 	.word	0x20001bfc

08008a14 <__sflush_r>:
 8008a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1a:	0716      	lsls	r6, r2, #28
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	d454      	bmi.n	8008acc <__sflush_r+0xb8>
 8008a22:	684b      	ldr	r3, [r1, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	dc02      	bgt.n	8008a2e <__sflush_r+0x1a>
 8008a28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	dd48      	ble.n	8008ac0 <__sflush_r+0xac>
 8008a2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a30:	2e00      	cmp	r6, #0
 8008a32:	d045      	beq.n	8008ac0 <__sflush_r+0xac>
 8008a34:	2300      	movs	r3, #0
 8008a36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a3a:	682f      	ldr	r7, [r5, #0]
 8008a3c:	6a21      	ldr	r1, [r4, #32]
 8008a3e:	602b      	str	r3, [r5, #0]
 8008a40:	d030      	beq.n	8008aa4 <__sflush_r+0x90>
 8008a42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a44:	89a3      	ldrh	r3, [r4, #12]
 8008a46:	0759      	lsls	r1, r3, #29
 8008a48:	d505      	bpl.n	8008a56 <__sflush_r+0x42>
 8008a4a:	6863      	ldr	r3, [r4, #4]
 8008a4c:	1ad2      	subs	r2, r2, r3
 8008a4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a50:	b10b      	cbz	r3, 8008a56 <__sflush_r+0x42>
 8008a52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a54:	1ad2      	subs	r2, r2, r3
 8008a56:	2300      	movs	r3, #0
 8008a58:	4628      	mov	r0, r5
 8008a5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a5c:	6a21      	ldr	r1, [r4, #32]
 8008a5e:	47b0      	blx	r6
 8008a60:	1c43      	adds	r3, r0, #1
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	d106      	bne.n	8008a74 <__sflush_r+0x60>
 8008a66:	6829      	ldr	r1, [r5, #0]
 8008a68:	291d      	cmp	r1, #29
 8008a6a:	d82b      	bhi.n	8008ac4 <__sflush_r+0xb0>
 8008a6c:	4a28      	ldr	r2, [pc, #160]	@ (8008b10 <__sflush_r+0xfc>)
 8008a6e:	40ca      	lsrs	r2, r1
 8008a70:	07d6      	lsls	r6, r2, #31
 8008a72:	d527      	bpl.n	8008ac4 <__sflush_r+0xb0>
 8008a74:	2200      	movs	r2, #0
 8008a76:	6062      	str	r2, [r4, #4]
 8008a78:	6922      	ldr	r2, [r4, #16]
 8008a7a:	04d9      	lsls	r1, r3, #19
 8008a7c:	6022      	str	r2, [r4, #0]
 8008a7e:	d504      	bpl.n	8008a8a <__sflush_r+0x76>
 8008a80:	1c42      	adds	r2, r0, #1
 8008a82:	d101      	bne.n	8008a88 <__sflush_r+0x74>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	b903      	cbnz	r3, 8008a8a <__sflush_r+0x76>
 8008a88:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a8c:	602f      	str	r7, [r5, #0]
 8008a8e:	b1b9      	cbz	r1, 8008ac0 <__sflush_r+0xac>
 8008a90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a94:	4299      	cmp	r1, r3
 8008a96:	d002      	beq.n	8008a9e <__sflush_r+0x8a>
 8008a98:	4628      	mov	r0, r5
 8008a9a:	f7ff ff73 	bl	8008984 <_free_r>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008aa2:	e00d      	b.n	8008ac0 <__sflush_r+0xac>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b0      	blx	r6
 8008aaa:	4602      	mov	r2, r0
 8008aac:	1c50      	adds	r0, r2, #1
 8008aae:	d1c9      	bne.n	8008a44 <__sflush_r+0x30>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d0c6      	beq.n	8008a44 <__sflush_r+0x30>
 8008ab6:	2b1d      	cmp	r3, #29
 8008ab8:	d001      	beq.n	8008abe <__sflush_r+0xaa>
 8008aba:	2b16      	cmp	r3, #22
 8008abc:	d11d      	bne.n	8008afa <__sflush_r+0xe6>
 8008abe:	602f      	str	r7, [r5, #0]
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	e021      	b.n	8008b08 <__sflush_r+0xf4>
 8008ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ac8:	b21b      	sxth	r3, r3
 8008aca:	e01a      	b.n	8008b02 <__sflush_r+0xee>
 8008acc:	690f      	ldr	r7, [r1, #16]
 8008ace:	2f00      	cmp	r7, #0
 8008ad0:	d0f6      	beq.n	8008ac0 <__sflush_r+0xac>
 8008ad2:	0793      	lsls	r3, r2, #30
 8008ad4:	bf18      	it	ne
 8008ad6:	2300      	movne	r3, #0
 8008ad8:	680e      	ldr	r6, [r1, #0]
 8008ada:	bf08      	it	eq
 8008adc:	694b      	ldreq	r3, [r1, #20]
 8008ade:	1bf6      	subs	r6, r6, r7
 8008ae0:	600f      	str	r7, [r1, #0]
 8008ae2:	608b      	str	r3, [r1, #8]
 8008ae4:	2e00      	cmp	r6, #0
 8008ae6:	ddeb      	ble.n	8008ac0 <__sflush_r+0xac>
 8008ae8:	4633      	mov	r3, r6
 8008aea:	463a      	mov	r2, r7
 8008aec:	4628      	mov	r0, r5
 8008aee:	6a21      	ldr	r1, [r4, #32]
 8008af0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008af4:	47e0      	blx	ip
 8008af6:	2800      	cmp	r0, #0
 8008af8:	dc07      	bgt.n	8008b0a <__sflush_r+0xf6>
 8008afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b02:	f04f 30ff 	mov.w	r0, #4294967295
 8008b06:	81a3      	strh	r3, [r4, #12]
 8008b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b0a:	4407      	add	r7, r0
 8008b0c:	1a36      	subs	r6, r6, r0
 8008b0e:	e7e9      	b.n	8008ae4 <__sflush_r+0xd0>
 8008b10:	20400001 	.word	0x20400001

08008b14 <_fflush_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	690b      	ldr	r3, [r1, #16]
 8008b18:	4605      	mov	r5, r0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	b913      	cbnz	r3, 8008b24 <_fflush_r+0x10>
 8008b1e:	2500      	movs	r5, #0
 8008b20:	4628      	mov	r0, r5
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	b118      	cbz	r0, 8008b2e <_fflush_r+0x1a>
 8008b26:	6a03      	ldr	r3, [r0, #32]
 8008b28:	b90b      	cbnz	r3, 8008b2e <_fflush_r+0x1a>
 8008b2a:	f7ff fcc7 	bl	80084bc <__sinit>
 8008b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d0f3      	beq.n	8008b1e <_fflush_r+0xa>
 8008b36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b38:	07d0      	lsls	r0, r2, #31
 8008b3a:	d404      	bmi.n	8008b46 <_fflush_r+0x32>
 8008b3c:	0599      	lsls	r1, r3, #22
 8008b3e:	d402      	bmi.n	8008b46 <_fflush_r+0x32>
 8008b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b42:	f7ff ff0e 	bl	8008962 <__retarget_lock_acquire_recursive>
 8008b46:	4628      	mov	r0, r5
 8008b48:	4621      	mov	r1, r4
 8008b4a:	f7ff ff63 	bl	8008a14 <__sflush_r>
 8008b4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b50:	4605      	mov	r5, r0
 8008b52:	07da      	lsls	r2, r3, #31
 8008b54:	d4e4      	bmi.n	8008b20 <_fflush_r+0xc>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	059b      	lsls	r3, r3, #22
 8008b5a:	d4e1      	bmi.n	8008b20 <_fflush_r+0xc>
 8008b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b5e:	f7ff ff01 	bl	8008964 <__retarget_lock_release_recursive>
 8008b62:	e7dd      	b.n	8008b20 <_fflush_r+0xc>

08008b64 <__swhatbuf_r>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	460c      	mov	r4, r1
 8008b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b6c:	4615      	mov	r5, r2
 8008b6e:	2900      	cmp	r1, #0
 8008b70:	461e      	mov	r6, r3
 8008b72:	b096      	sub	sp, #88	@ 0x58
 8008b74:	da0c      	bge.n	8008b90 <__swhatbuf_r+0x2c>
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	2100      	movs	r1, #0
 8008b7a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b7e:	bf14      	ite	ne
 8008b80:	2340      	movne	r3, #64	@ 0x40
 8008b82:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b86:	2000      	movs	r0, #0
 8008b88:	6031      	str	r1, [r6, #0]
 8008b8a:	602b      	str	r3, [r5, #0]
 8008b8c:	b016      	add	sp, #88	@ 0x58
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	466a      	mov	r2, sp
 8008b92:	f000 f849 	bl	8008c28 <_fstat_r>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	dbed      	blt.n	8008b76 <__swhatbuf_r+0x12>
 8008b9a:	9901      	ldr	r1, [sp, #4]
 8008b9c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ba0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ba4:	4259      	negs	r1, r3
 8008ba6:	4159      	adcs	r1, r3
 8008ba8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bac:	e7eb      	b.n	8008b86 <__swhatbuf_r+0x22>

08008bae <__smakebuf_r>:
 8008bae:	898b      	ldrh	r3, [r1, #12]
 8008bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bb2:	079d      	lsls	r5, r3, #30
 8008bb4:	4606      	mov	r6, r0
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	d507      	bpl.n	8008bca <__smakebuf_r+0x1c>
 8008bba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bbe:	6023      	str	r3, [r4, #0]
 8008bc0:	6123      	str	r3, [r4, #16]
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	6163      	str	r3, [r4, #20]
 8008bc6:	b003      	add	sp, #12
 8008bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bca:	466a      	mov	r2, sp
 8008bcc:	ab01      	add	r3, sp, #4
 8008bce:	f7ff ffc9 	bl	8008b64 <__swhatbuf_r>
 8008bd2:	9f00      	ldr	r7, [sp, #0]
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	4639      	mov	r1, r7
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f7ff fb57 	bl	800828c <_malloc_r>
 8008bde:	b948      	cbnz	r0, 8008bf4 <__smakebuf_r+0x46>
 8008be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be4:	059a      	lsls	r2, r3, #22
 8008be6:	d4ee      	bmi.n	8008bc6 <__smakebuf_r+0x18>
 8008be8:	f023 0303 	bic.w	r3, r3, #3
 8008bec:	f043 0302 	orr.w	r3, r3, #2
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	e7e2      	b.n	8008bba <__smakebuf_r+0xc>
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008bfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bfe:	81a3      	strh	r3, [r4, #12]
 8008c00:	9b01      	ldr	r3, [sp, #4]
 8008c02:	6020      	str	r0, [r4, #0]
 8008c04:	b15b      	cbz	r3, 8008c1e <__smakebuf_r+0x70>
 8008c06:	4630      	mov	r0, r6
 8008c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c0c:	f000 f81e 	bl	8008c4c <_isatty_r>
 8008c10:	b128      	cbz	r0, 8008c1e <__smakebuf_r+0x70>
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	f023 0303 	bic.w	r3, r3, #3
 8008c18:	f043 0301 	orr.w	r3, r3, #1
 8008c1c:	81a3      	strh	r3, [r4, #12]
 8008c1e:	89a3      	ldrh	r3, [r4, #12]
 8008c20:	431d      	orrs	r5, r3
 8008c22:	81a5      	strh	r5, [r4, #12]
 8008c24:	e7cf      	b.n	8008bc6 <__smakebuf_r+0x18>
	...

08008c28 <_fstat_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	4d06      	ldr	r5, [pc, #24]	@ (8008c48 <_fstat_r+0x20>)
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	4611      	mov	r1, r2
 8008c34:	602b      	str	r3, [r5, #0]
 8008c36:	f7f8 f8af 	bl	8000d98 <_fstat>
 8008c3a:	1c43      	adds	r3, r0, #1
 8008c3c:	d102      	bne.n	8008c44 <_fstat_r+0x1c>
 8008c3e:	682b      	ldr	r3, [r5, #0]
 8008c40:	b103      	cbz	r3, 8008c44 <_fstat_r+0x1c>
 8008c42:	6023      	str	r3, [r4, #0]
 8008c44:	bd38      	pop	{r3, r4, r5, pc}
 8008c46:	bf00      	nop
 8008c48:	20001d3c 	.word	0x20001d3c

08008c4c <_isatty_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	2300      	movs	r3, #0
 8008c50:	4d05      	ldr	r5, [pc, #20]	@ (8008c68 <_isatty_r+0x1c>)
 8008c52:	4604      	mov	r4, r0
 8008c54:	4608      	mov	r0, r1
 8008c56:	602b      	str	r3, [r5, #0]
 8008c58:	f7f8 f8ad 	bl	8000db6 <_isatty>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d102      	bne.n	8008c66 <_isatty_r+0x1a>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	b103      	cbz	r3, 8008c66 <_isatty_r+0x1a>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	20001d3c 	.word	0x20001d3c

08008c6c <_init>:
 8008c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6e:	bf00      	nop
 8008c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c72:	bc08      	pop	{r3}
 8008c74:	469e      	mov	lr, r3
 8008c76:	4770      	bx	lr

08008c78 <_fini>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	bf00      	nop
 8008c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7e:	bc08      	pop	{r3}
 8008c80:	469e      	mov	lr, r3
 8008c82:	4770      	bx	lr
